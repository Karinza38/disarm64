#![allow(non_snake_case, non_camel_case_types)]
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::upper_case_acronyms)]
#![allow(dead_code)]
use bitfield_struct::bitfield;
pub trait InsnOpcode {
    const OPCODE: u32;
    const MASK: u32;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ABS_Rd_Rn {
    const OPCODE: u32 = 0x5ac02000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ABS_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x416a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ABS_Vn_Vd {
    const OPCODE: u32 = 0xe20b800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ABS_Sn_Sd {
    const OPCODE: u32 = 0x5e20b800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADC_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADC_Rm_Rd_Rn {
    const OPCODE: u32 = 0x1a000000;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADCLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADCLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4500d000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADCLT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADCLT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4500d400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADCS_Rm_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADCS_Rm_Rn_Rd {
    const OPCODE: u32 = 0x3a000000;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ADD_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1201810;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ADD_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1301810;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01810;
    const MASK: u32 = 0xffa19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADD_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11810;
    const MASK: u32 = 0xffa39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for ADD_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a01c10;
    const MASK: u32 = 0xffbf9c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Znx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for ADD_SME_Znx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a11c10;
    const MASK: u32 = 0xffbf9c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ADD_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a300;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ADD_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120ab00;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Rd_SP_Rn_SP_AIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for ADD_Rd_SP_Rn_SP_AIMM {
    const OPCODE: u32 = 0x11000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Rm_SFT_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ADD_Rm_SFT_Rd_Rn {
    const OPCODE: u32 = 0xb000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Rd_SP_Rm_EXT_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ADD_Rd_SP_Rm_EXT_Rn_SP {
    const OPCODE: u32 = 0xb200000;
    const MASK: u32 = 0x7fe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ADD_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x4000000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADD_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4200000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_AIMM_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for ADD_SVE_AIMM_SVE_Zd {
    const OPCODE: u32 = 0x2520c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADD_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe208400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADD_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee08400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDG_Rn_SP_UIMM4_ADDG_Rd_SP_UIMM10 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(4)]
    pub imm4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for ADDG_Rn_SP_UIMM4_ADDG_Rd_SP_UIMM10 {
    const OPCODE: u32 = 0x91800000;
    const MASK: u32 = 0xffc0c000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHA_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SME_Pm {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for ADDHA_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SME_Pm {
    const OPCODE: u32 = 0xc0900000;
    const MASK: u32 = 0xffff001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHA_SVE_Pg3_SME_ZAda_3b_SVE_Zn_SME_Pm {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for ADDHA_SVE_Pg3_SME_ZAda_3b_SVE_Zn_SME_Pm {
    const OPCODE: u32 = 0xc0d00000;
    const MASK: u32 = 0xffff0018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDHN_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe204000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDHN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e204000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHNT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDHNT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45206400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDP_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ADDP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4411a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDP_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDP_Vm_Vn_Vd {
    const OPCODE: u32 = 0xe20bc00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ADDP_Sd_Vn {
    const OPCODE: u32 = 0x5e31b800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDPL_Rd_SP_SVE_SIMM6_SVE_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDPL_Rd_SP_SVE_SIMM6_SVE_Rn_SP {
    const OPCODE: u32 = 0x4605000;
    const MASK: u32 = 0xffe0f800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDQV_SVE_Zn_Vd_SVE_Pg3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ADDQV_SVE_Zn_Vd_SVE_Pg3 {
    const OPCODE: u32 = 0x4052000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDS_Rn_SP_Rd_AIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for ADDS_Rn_SP_Rd_AIMM {
    const OPCODE: u32 = 0x31000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDS_Rd_Rm_SFT_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ADDS_Rd_Rm_SFT_Rn {
    const OPCODE: u32 = 0x2b000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDS_Rd_Rn_SP_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ADDS_Rd_Rn_SP_Rm_EXT {
    const OPCODE: u32 = 0x2b200000;
    const MASK: u32 = 0x7fe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDSPL_SVE_Rn_SP_SVE_SIMM6_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDSPL_SVE_Rn_SP_SVE_SIMM6_Rd_SP {
    const OPCODE: u32 = 0x4605800;
    const MASK: u32 = 0xffe0f800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDSVL_Rd_SP_SVE_SIMM6_SVE_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDSVL_Rd_SP_SVE_SIMM6_SVE_Rn_SP {
    const OPCODE: u32 = 0x4205800;
    const MASK: u32 = 0xffe0f800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDV_Vn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ADDV_Vn_Fd {
    const OPCODE: u32 = 0xe31b800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDVA_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Pg3 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for ADDVA_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0xc0910000;
    const MASK: u32 = 0xffff001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDVA_SME_Pm_SVE_Pg3_SME_ZAda_3b_SVE_Zn {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for ADDVA_SME_Pm_SVE_Pg3_SME_ZAda_3b_SVE_Zn {
    const OPCODE: u32 = 0xc0d10000;
    const MASK: u32 = 0xffff0018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDVL_SVE_SIMM6_Rd_SP_SVE_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADDVL_SVE_SIMM6_Rd_SP_SVE_Rn_SP {
    const OPCODE: u32 = 0x4205000;
    const MASK: u32 = 0xffe0f800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_Rd_ADDR_PCREL21 {
    #[bits(5)]
    pub rd: u32,
    #[bits(19)]
    pub immhi: u32,
    #[bits(5)]
    pub _op_24: u32,
    #[bits(2)]
    pub immlo: u32,
    #[bits(1)]
    pub _op_31: u32,
}
impl InsnOpcode for ADR_Rd_ADDR_PCREL21 {
    const OPCODE: u32 = 0x10000000;
    const MASK: u32 = 0x9f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_SVE_ADDR_ZZ_SXTW_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADR_SVE_ADDR_ZZ_SXTW_SVE_Zd {
    const OPCODE: u32 = 0x420a000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW {
    const OPCODE: u32 = 0x460a000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_SVE_ADDR_ZZ_LSL_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ADR_SVE_ADDR_ZZ_LSL_SVE_Zd {
    const OPCODE: u32 = 0x4a0a000;
    const MASK: u32 = 0xffa0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADRP_Rd_ADDR_ADRP {
    #[bits(5)]
    pub rd: u32,
    #[bits(19)]
    pub immhi: u32,
    #[bits(5)]
    pub _op_24: u32,
    #[bits(2)]
    pub immlo: u32,
    #[bits(1)]
    pub _op_31: u32,
}
impl InsnOpcode for ADRP_Rd_ADDR_ADRP {
    const OPCODE: u32 = 0x90000000;
    const MASK: u32 = 0x9f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESD_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AESD_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4522e400;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESD_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AESD_Vd_Vn {
    const OPCODE: u32 = 0x4e285800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESE_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AESE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4522e000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESE_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AESE_Vn_Vd {
    const OPCODE: u32 = 0x4e284800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESIMC_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for AESIMC_SVE_Zd {
    const OPCODE: u32 = 0x4520e400;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESIMC_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AESIMC_Vd_Vn {
    const OPCODE: u32 = 0x4e287800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESMC_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for AESMC_SVE_Zd {
    const OPCODE: u32 = 0x4520e000;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESMC_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AESMC_Vn_Vd {
    const OPCODE: u32 = 0x4e286800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_LIMM_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for AND_LIMM_Rn_Rd_SP {
    const OPCODE: u32 = 0x12000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_Rd_Rm_SFT_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AND_Rd_Rm_SFT_Rn {
    const OPCODE: u32 = 0xa000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for AND_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x41a0000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for AND_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4203000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_LIMM_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for AND_SVE_LIMM_SVE_Zd {
    const OPCODE: u32 = 0x5800000;
    const MASK: u32 = 0xfffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for AND_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn {
    const OPCODE: u32 = 0x25004000;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for AND_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe201c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ANDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41e2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDS_Rd_Rn_LIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for ANDS_Rd_Rn_LIMM {
    const OPCODE: u32 = 0x72000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDS_Rn_Rm_SFT_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ANDS_Rn_Rm_SFT_Rd {
    const OPCODE: u32 = 0x6a000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn {
    const OPCODE: u32 = 0x25404000;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDV_SVE_Zn_SVE_Vd_SVE_Pg3 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ANDV_SVE_Zn_SVE_Vd_SVE_Pg3 {
    const OPCODE: u32 = 0x41a2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for ASR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4008000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ASR_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4108000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ASR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4188000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ASR_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x4208000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for ASR_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4209000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASRD_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for ASRD_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = 0x4048000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASRR_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ASRR_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x4148000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASRV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ASRV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02800;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDA_Rn_SP_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AUTDA_Rn_SP_Rd {
    const OPCODE: u32 = 0xdac11800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDB_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AUTDB_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac11c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for AUTDZA_Rd {
    const OPCODE: u32 = 0xdac13be0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for AUTDZB_Rd {
    const OPCODE: u32 = 0xdac13fe0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIA_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AUTIA_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac11000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIB_Rn_SP_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for AUTIB_Rn_SP_Rd {
    const OPCODE: u32 = 0xdac11400;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for AUTIZA_Rd {
    const OPCODE: u32 = 0xdac133e0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for AUTIZB_Rd {
    const OPCODE: u32 = 0xdac137e0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AXFLAG {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for AXFLAG {
    const OPCODE: u32 = 0xd500405f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct B_ADDR_PCREL26 {
    #[bits(26)]
    pub imm26: u32,
    #[bits(6)]
    pub _op_26: u32,
}
impl InsnOpcode for B_ADDR_PCREL26 {
    const OPCODE: u32 = 0x14000000;
    const MASK: u32 = 0xfc000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct B_C_ADDR_PCREL19 {
    #[bits(4)]
    pub cond: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for B_C_ADDR_PCREL19 {
    const OPCODE: u32 = 0x54000000;
    const MASK: u32 = 0xff000010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BC_C_ADDR_PCREL19 {
    #[bits(4)]
    pub cond: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for BC_C_ADDR_PCREL19 {
    const OPCODE: u32 = 0x54000010;
    const MASK: u32 = 0xff000010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BCAX_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BCAX_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4603800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BCAX_Va_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BCAX_Va_Vn_Vm_Vd {
    const OPCODE: u32 = 0xce200000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BDEP_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BDEP_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500b400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500b000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFADD_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFADD_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x65000000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFADD_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFADD_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65008000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCLAMP_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFCLAMP_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x64202400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BFCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc160e000;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVT_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFCVT_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x658aa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVT_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BFCVT_Fd_Fn {
    const OPCODE: u32 = 0x1e634000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTN_SME_Znx2_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BFCVTN_SME_Znx2_SVE_Zd {
    const OPCODE: u32 = 0xc160e020;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTN_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BFCVTN_Vn_Vd {
    const OPCODE: u32 = 0xea16800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BFCVTN2_Vd_Vn {
    const OPCODE: u32 = 0x4ea16800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x648aa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1501018;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509018;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1201010;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm {
    const OPCODE: u32 = 0xc1301010;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01010;
    const MASK: u32 = 0xffe19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11010;
    const MASK: u32 = 0xffe39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFDOT_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64604000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFDOT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64608000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e40fc00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_Vn_Em_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFDOT_Vn_Em_Vd {
    const OPCODE: u32 = 0xf40f000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFM_IMMR_Rd_Rn_IMMS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for BFM_IMMR_Rd_Rn_IMMS {
    const OPCODE: u32 = 0x33000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMAX_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFMAX_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x65068000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x65048000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMIN_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFMIN_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x65078000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x65058000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLA_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLA_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64200800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLA_SVE_Zn_SVE_Zm_16_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLA_SVE_Zn_SVE_Zm_16_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65200000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SVE_Zn_SME_Zm_INDEX3_10_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLAL_SVE_Zn_SME_Zm_INDEX3_10_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1801010;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLAL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1901010;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx4 {
    const OPCODE: u32 = 0xc1909010;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1200810;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1300810;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SME_Zmx2_SME_Znx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SME_Zmx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a00810;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1a10810;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1200c10;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALB_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64e04000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64e08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALB_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2ec0fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALB_Vn_Em16_Vd {
    const OPCODE: u32 = 0xfc0f000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64e04400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64e08400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6ec0fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLALT_Vn_Em16_Vd {
    const OPCODE: u32 = 0x4fc0f000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64200c00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLS_SVE_Zn_SVE_Zd_SVE_Pg3_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLS_SVE_Zn_SVE_Zd_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0x65202000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLSL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn {
    const OPCODE: u32 = 0xc1801018;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLSL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 {
    const OPCODE: u32 = 0xc1901018;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SME_Zm_INDEX3_2_SME_Znx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SME_Zm_INDEX3_2_SME_Znx4 {
    const OPCODE: u32 = 0xc1909018;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm {
    const OPCODE: u32 = 0xc1200818;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1300818;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1a00818;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 {
    const OPCODE: u32 = 0xc1a10818;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1200c18;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64e0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64e06000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLSLT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64e0a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMLSLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x64e06400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMMLA_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMMLA_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x6460e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMMLA_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMMLA_Vn_Vm_Vd {
    const OPCODE: u32 = 0x6e40ec00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMOPA_SVE_Zn_SME_ZAda_2b_SME_Pm_SVE_Zm_16_SVE_Pg3 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMOPA_SVE_Zn_SME_ZAda_2b_SME_Pm_SVE_Zm_16_SVE_Pg3 {
    const OPCODE: u32 = 0x81800000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMOPS_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Zm_16_SVE_Pg3 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMOPS_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Zm_16_SVE_Pg3 {
    const OPCODE: u32 = 0x81800010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMUL_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMUL_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x64202800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMUL_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFMUL_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x65000800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMUL_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFMUL_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x65028000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFSUB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BFSUB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x65000400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BFSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65018000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BFVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1500018;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BGRP_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BGRP_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4500b800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BIC_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0xa200000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for BIC_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x41b0000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BIC_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4e03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BIC_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25004010;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BIC_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe601c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SIMD_IMM_SFT_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for BIC_SIMD_IMM_SFT_Vd {
    const OPCODE: u32 = 0x2f001400;
    const MASK: u32 = 0xbff89c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SIMD_IMM_SFT_LSL_Vd_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for BIC_SIMD_IMM_SFT_LSL_Vd_V_4H {
    const OPCODE: u32 = 0x2f009400;
    const MASK: u32 = 0xbff8dc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BICS_Rd_Rm_SFT_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BICS_Rd_Rm_SFT_Rn {
    const OPCODE: u32 = 0x6a200000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25404010;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIF_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BIF_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ee01c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BIT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ea01c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BL_ADDR_PCREL26 {
    #[bits(26)]
    pub imm26: u32,
    #[bits(6)]
    pub _op_26: u32,
}
impl InsnOpcode for BL_ADDR_PCREL26 {
    const OPCODE: u32 = 0x94000000;
    const MASK: u32 = 0xfc000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLR_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BLR_Rn {
    const OPCODE: u32 = 0xd63f0000;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRAA_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BLRAA_Rn_Rd_SP {
    const OPCODE: u32 = 0xd73f0800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRAAZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BLRAAZ_Rn {
    const OPCODE: u32 = 0xd63f081f;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRAB_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BLRAB_Rn_Rd_SP {
    const OPCODE: u32 = 0xd73f0c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRABZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BLRABZ_Rn {
    const OPCODE: u32 = 0xd63f0c1f;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BMOPA_SME_Pm_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BMOPA_SME_Pm_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800008;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BMOPS_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SME_Pm {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BMOPS_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SME_Pm {
    const OPCODE: u32 = 0x80800018;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BR_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BR_Rn {
    const OPCODE: u32 = 0xd61f0000;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRAA_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BRAA_Rn_Rd_SP {
    const OPCODE: u32 = 0xd71f0800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRAAZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BRAAZ_Rn {
    const OPCODE: u32 = 0xd61f081f;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRAB_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BRAB_Rn_Rd_SP {
    const OPCODE: u32 = 0xd71f0c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRABZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for BRABZ_Rn {
    const OPCODE: u32 = 0xd61f0c1f;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRK_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BRK_EXCEPTION {
    const OPCODE: u32 = 0xd4200000;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKA_SVE_Pn_SVE_Pg4_10_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for BRKA_SVE_Pn_SVE_Pg4_10_SVE_Pd {
    const OPCODE: u32 = 0x25104000;
    const MASK: u32 = 0xffffc200;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKAS_SVE_Pn_SVE_Pd_SVE_Pg4_10 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for BRKAS_SVE_Pn_SVE_Pd_SVE_Pg4_10 {
    const OPCODE: u32 = 0x25504000;
    const MASK: u32 = 0xffffc210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKB_SVE_Pn_SVE_Pg4_10_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for BRKB_SVE_Pn_SVE_Pg4_10_SVE_Pd {
    const OPCODE: u32 = 0x25904000;
    const MASK: u32 = 0xffffc200;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKBS_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for BRKBS_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = 0x25d04000;
    const MASK: u32 = 0xffffc210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25184000;
    const MASK: u32 = 0xffffc210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKNS_SVE_Pn_SVE_Pd_SVE_Pg4_10 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for BRKNS_SVE_Pn_SVE_Pd_SVE_Pg4_10 {
    const OPCODE: u32 = 0x25584000;
    const MASK: u32 = 0xffffc210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPA_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BRKPA_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 {
    const OPCODE: u32 = 0x2500c000;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPAS_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BRKPAS_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm {
    const OPCODE: u32 = 0x2540c000;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPB_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BRKPB_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 {
    const OPCODE: u32 = 0x2500c010;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPBS_SVE_Pn_SVE_Pm_SVE_Pg4_10_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for BRKPBS_SVE_Pn_SVE_Pm_SVE_Pg4_10_SVE_Pd {
    const OPCODE: u32 = 0x2540c010;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BSL_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4203c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e601c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL1N_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BSL1N_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x4603c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL2N_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for BSL2N_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x4a03c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CADD_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub sve_rot3: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl InsnOpcode for CADD_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    const OPCODE: u32 = 0x4500d800;
    const MASK: u32 = 0xff3ff800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CAS_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CAS_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x88a07c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASA_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASA_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x88e07c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8e07c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASAH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASAH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48e07c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASAL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASAL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x88e0fc00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASALB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASALB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x8e0fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASALH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASALH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48e0fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8a07c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x48a07c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x88a0fc00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8a0fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASLH_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASLH_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x48a0fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASP_ADDR_SIMPLE_Rt_PAIRREG_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASP_ADDR_SIMPLE_Rt_PAIRREG_Rs {
    const OPCODE: u32 = 0x8207c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASPA_ADDR_SIMPLE_Rt_Rs_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASPA_ADDR_SIMPLE_Rt_Rs_PAIRREG {
    const OPCODE: u32 = 0x8607c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASPAL_Rt_PAIRREG_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASPAL_Rt_PAIRREG_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x860fc00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASPL_PAIRREG_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CASPL_PAIRREG_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x820fc00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CBNZ_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for CBNZ_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x35000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CBZ_ADDR_PCREL19_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for CBZ_ADDR_PCREL19_Rt {
    const OPCODE: u32 = 0x34000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMN_Rn_COND_NZCV_Rm {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CCMN_Rn_COND_NZCV_Rm {
    const OPCODE: u32 = 0x3a400000;
    const MASK: u32 = 0x7fe00c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMN_Rn_CCMP_IMM_COND_NZCV {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CCMN_Rn_CCMP_IMM_COND_NZCV {
    const OPCODE: u32 = 0x3a400800;
    const MASK: u32 = 0x7fe00c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMP_Rn_NZCV_Rm_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CCMP_Rn_NZCV_Rm_COND {
    const OPCODE: u32 = 0x7a400000;
    const MASK: u32 = 0x7fe00c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMP_Rn_NZCV_COND_CCMP_IMM {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CCMP_Rn_NZCV_COND_CCMP_IMM {
    const OPCODE: u32 = 0x7a400800;
    const MASK: u32 = 0x7fe00c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CDOT_SVE_Zn_SVE_Zd_SVE_IMM_ROT2_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CDOT_SVE_Zn_SVE_Zd_SVE_IMM_ROT2_SVE_Zm_16 {
    const OPCODE: u32 = 0x44801000;
    const MASK: u32 = 0xffa0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44a04000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CDOT_SVE_IMM_ROT2_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CDOT_SVE_IMM_ROT2_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e04000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CFINV {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for CFINV {
    const OPCODE: u32 = 0xd500401f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CHKFEAT_X16 {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for CHKFEAT_X16 {
    const OPCODE: u32 = 0xd503251f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTA_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLASTA_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x5288000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTA_SVE_Zm_5_SVE_Vd_SVE_Pg3 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLASTA_SVE_Zm_5_SVE_Vd_SVE_Pg3 {
    const OPCODE: u32 = 0x52a8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTA_SVE_Pg3_Rd_SVE_Zm_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLASTA_SVE_Pg3_Rd_SVE_Zm_5 {
    const OPCODE: u32 = 0x530a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTB_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLASTB_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x5298000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTB_SVE_Vd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLASTB_SVE_Vd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x52b8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTB_Rd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLASTB_Rd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x531a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLREX_UIMM4 {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl InsnOpcode for CLREX_UIMM4 {
    const OPCODE: u32 = 0xd503305f;
    const MASK: u32 = 0xfffff0ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLS_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CLS_Rd_Rn {
    const OPCODE: u32 = 0x5ac01400;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLS_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLS_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x418a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CLS_Vd_Vn {
    const OPCODE: u32 = 0xe204800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLZ_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CLZ_Rd_Rn {
    const OPCODE: u32 = 0x5ac01000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLZ_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CLZ_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x419a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLZ_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CLZ_Vd_Vn {
    const OPCODE: u32 = 0x2e204800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMEQ_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0xe209800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMEQ_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e208c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_IMM0_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMEQ_IMM0_Sn_Sd {
    const OPCODE: u32 = 0x5e209800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMEQ_Sn_Sm_Sd {
    const OPCODE: u32 = 0x7ee08c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMGE_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe203c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Vd_IMM0_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMGE_Vd_IMM0_Vn {
    const OPCODE: u32 = 0x2e208800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Sn_Sd_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMGE_Sn_Sd_IMM0 {
    const OPCODE: u32 = 0x7e208800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMGE_Sn_Sm_Sd {
    const OPCODE: u32 = 0x5ee03c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMGT_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe203400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMGT_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0xe208800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Sn_Sd_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMGT_Sn_Sd_IMM0 {
    const OPCODE: u32 = 0x5e208800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Sm_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMGT_Sm_Sn_Sd {
    const OPCODE: u32 = 0x5ee03400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHI_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMHI_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e203400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHI_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMHI_Sn_Sd_Sm {
    const OPCODE: u32 = 0x7ee03400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHS_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMHS_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2e203c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHS_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMHS_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee03c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44002000;
    const MASK: u32 = 0xff20f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLA_SVE_Zd_SVE_Zm3_INDEX_SVE_IMM_ROT2_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMLA_SVE_Zd_SVE_Zm3_INDEX_SVE_IMM_ROT2_SVE_Zn {
    const OPCODE: u32 = 0x44a06000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLA_SVE_IMM_ROT2_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMLA_SVE_IMM_ROT2_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e06000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLE_Vn_IMM0_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMLE_Vn_IMM0_Vd {
    const OPCODE: u32 = 0x2e209800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLE_Sn_IMM0_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMLE_Sn_IMM0_Sd {
    const OPCODE: u32 = 0x7e209800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLT_Vn_IMM0_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMLT_Vn_IMM0_Vd {
    const OPCODE: u32 = 0xe20a800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLT_Sd_Sn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CMLT_Sd_Sn_IMM0 {
    const OPCODE: u32 = 0x5e20a800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPEQ_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPEQ_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x24002000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPEQ_SVE_Zn_SVE_Zm_16_SVE_Pd_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPEQ_SVE_Zn_SVE_Zm_16_SVE_Pd_SVE_Pg3 {
    const OPCODE: u32 = 0x2400a000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPEQ_SIMM5_SVE_Pd_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPEQ_SIMM5_SVE_Pd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x25008000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGE_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPGE_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_Zm_16 {
    const OPCODE: u32 = 0x24004000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGE_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPGE_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x24008000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGE_SVE_Zn_SVE_Pd_SVE_Pg3_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPGE_SVE_Zn_SVE_Pd_SVE_Pg3_SIMM5 {
    const OPCODE: u32 = 0x25000000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGT_SVE_Pd_SVE_Zm_16_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPGT_SVE_Pd_SVE_Zm_16_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x24004010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPGT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd {
    const OPCODE: u32 = 0x24008010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGT_SVE_Pg3_SIMM5_SVE_Pd_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPGT_SVE_Pg3_SIMM5_SVE_Pd_SVE_Zn {
    const OPCODE: u32 = 0x25000010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHI_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPHI_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x24000010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHI_SVE_Pd_SVE_Zn_SVE_Pg3_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPHI_SVE_Pd_SVE_Zn_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0x2400c010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHI_SVE_UIMM7_SVE_Pd_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPHI_SVE_UIMM7_SVE_Pd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x24200010;
    const MASK: u32 = 0xff202010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHS_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPHS_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x24000000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPHS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x2400c000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHS_SVE_Pd_SVE_Pg3_SVE_UIMM7_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPHS_SVE_Pd_SVE_Pg3_SVE_UIMM7_SVE_Zn {
    const OPCODE: u32 = 0x24200000;
    const MASK: u32 = 0xff202010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLE_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLE_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24006010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLE_SVE_Zn_SVE_Pg3_SVE_Pd_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLE_SVE_Zn_SVE_Pg3_SVE_Pd_SIMM5 {
    const OPCODE: u32 = 0x25002010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLO_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLO_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x2400e000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLO_SVE_Pd_SVE_UIMM7_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLO_SVE_Pd_SVE_UIMM7_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x24202000;
    const MASK: u32 = 0xff202010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x2400e010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLS_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_UIMM7 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLS_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_UIMM7 {
    const OPCODE: u32 = 0x24202010;
    const MASK: u32 = 0xff202010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd {
    const OPCODE: u32 = 0x24006000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLT_SVE_Pg3_SVE_Pd_SIMM5_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPLT_SVE_Pg3_SVE_Pd_SIMM5_SVE_Zn {
    const OPCODE: u32 = 0x25002000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPNE_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPNE_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x24002010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPNE_SVE_Pd_SVE_Pg3_SVE_Zm_16_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPNE_SVE_Pd_SVE_Pg3_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x2400a010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPNE_SIMM5_SVE_Pg3_SVE_Zn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMPNE_SIMM5_SVE_Pg3_SVE_Zn_SVE_Pd {
    const OPCODE: u32 = 0x25008010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMTST_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMTST_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe208c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMTST_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CMTST_Sn_Sd_Sm {
    const OPCODE: u32 = 0x5ee08c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNOT_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CNOT_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x41ba000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNT_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CNT_Rn_Rd {
    const OPCODE: u32 = 0x5ac01c00;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNT_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CNT_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x41aa000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CNT_Vd_Vn {
    const OPCODE: u32 = 0xe205800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTB_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CNTB_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x420e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CNTD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CNTH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTP_SVE_Pg4_10_SVE_Pn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for CNTP_SVE_Pg4_10_SVE_Pn_Rd {
    const OPCODE: u32 = 0x25208000;
    const MASK: u32 = 0xff3fc200;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTP_Rd_SME_VLxN_10_SME_PNn {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(1)]
    pub sme_vl_10: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl InsnOpcode for CNTP_Rd_SME_VLxN_10_SME_PNn {
    const OPCODE: u32 = 0x25208200;
    const MASK: u32 = 0xff3ffa00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTW_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CNTW_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4a0e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct COMPACT_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for COMPACT_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5a18000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPY_SVE_ASIMM_SVE_Pg4_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pg4_16: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for CPY_SVE_ASIMM_SVE_Pg4_16_SVE_Zd {
    const OPCODE: u32 = 0x5100000;
    const MASK: u32 = 0xff308000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPY_SVE_Pg3_SVE_Vn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_vn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CPY_SVE_Pg3_SVE_Vn_SVE_Zd {
    const OPCODE: u32 = 0x5208000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPY_SVE_Pg3_Rn_SP_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for CPY_SVE_Pg3_Rn_SP_SVE_Zd {
    const OPCODE: u32 = 0x528a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d800400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYEN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d80c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYERN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d808400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYERT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d802400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYERTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d80e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYERTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d80a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYERTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d806400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYET_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYET_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d803400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYETRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYETRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d80b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYETWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYETWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d807400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d804400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWT_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYEWT_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d801400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYEWTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80d400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYEWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d809400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d805400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFE_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFE_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19800400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFEN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19808400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19802400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFERTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1980e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFERTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1980a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFERTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19806400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFET_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFET_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19803400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFETRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFETRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFETWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFETWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19807400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19804400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFEWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19801400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980d400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFEWTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19809400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFEWTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19805400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFM_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFM_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19400400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19408400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMRT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19402400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMRTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1940e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMRTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1940a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMRTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19406400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19403400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1940b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19407400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19404400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19401400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMWTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1940d400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMWTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19409400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19405400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19000400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1900c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19008400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19002400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPRTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1900a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19006400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19003400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19007400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19004400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPWT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19001400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPWTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1900d400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19009400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYFPWTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x19005400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d400400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d408400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMRT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d402400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMRTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d40a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d406400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d403400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d40f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d407400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d404400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMWT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d401400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40d400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMWTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d409400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYMWTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d405400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d000400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d00c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d008400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d002400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPRTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d00e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPRTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPRTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d006400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d003400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d00f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d00b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d007400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d004400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPWT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d001400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWTN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPWTN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x1d00d400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d009400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CPYPWTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs {
    const OPCODE: u32 = 0x1d005400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32B_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32B_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac04000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CB_Rn_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32CB_Rn_Rd_Rm {
    const OPCODE: u32 = 0x1ac05000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CH_Rn_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32CH_Rn_Rm_Rd {
    const OPCODE: u32 = 0x1ac05400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CW_Rn_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32CW_Rn_Rd_Rm {
    const OPCODE: u32 = 0x1ac05800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CX_Rn_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32CX_Rn_Rm_Rd {
    const OPCODE: u32 = 0x9ac05c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32H_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32H_Rm_Rd_Rn {
    const OPCODE: u32 = 0x1ac04400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32W_Rn_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32W_Rn_Rm_Rd {
    const OPCODE: u32 = 0x1ac04800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32X_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CRC32X_Rm_Rd_Rn {
    const OPCODE: u32 = 0x9ac04c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSEL_COND_Rn_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CSEL_COND_Rn_Rd_Rm {
    const OPCODE: u32 = 0x1a800000;
    const MASK: u32 = 0x7fe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSINC_Rd_Rn_COND_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CSINC_Rd_Rn_COND_Rm {
    const OPCODE: u32 = 0x1a800400;
    const MASK: u32 = 0x7fe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSINV_Rd_COND_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CSINV_Rd_COND_Rn_Rm {
    const OPCODE: u32 = 0x5a800000;
    const MASK: u32 = 0x7fe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSNEG_COND_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CSNEG_COND_Rm_Rd_Rn {
    const OPCODE: u32 = 0x5a800400;
    const MASK: u32 = 0x7fe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CTERMEQ_Rn_Rm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CTERMEQ_Rn_Rm {
    const OPCODE: u32 = 0x25a02000;
    const MASK: u32 = 0xffa0fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CTERMNE_Rm_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for CTERMNE_Rm_Rn {
    const OPCODE: u32 = 0x25a02010;
    const MASK: u32 = 0xffa0fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CTZ_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for CTZ_Rd_Rn {
    const OPCODE: u32 = 0x5ac01800;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DCPS1_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for DCPS1_EXCEPTION {
    const OPCODE: u32 = 0xd4a00001;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DCPS2_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for DCPS2_EXCEPTION {
    const OPCODE: u32 = 0xd4a00002;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DCPS3_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for DCPS3_EXCEPTION {
    const OPCODE: u32 = 0xd4a00003;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECB_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECB_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x430e400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECD_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECD_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x4f0c400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECD_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECD_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4f0e400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECH_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECH_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x470c400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470e400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECP_SVE_Pg4_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for DECP_SVE_Pg4_5_SVE_Zd {
    const OPCODE: u32 = 0x252d8000;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for DECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252d8800;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECW_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECW_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x4b0c400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0e400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DGH {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for DGH {
    const OPCODE: u32 = 0xd50320df;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DMB_BARRIER {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for DMB_BARRIER {
    const OPCODE: u32 = 0xd50330bf;
    const MASK: u32 = 0xfffff0ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DRPS {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for DRPS {
    const OPCODE: u32 = 0xd6bf03e0;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DSB_BARRIER {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for DSB_BARRIER {
    const OPCODE: u32 = 0xd503309f;
    const MASK: u32 = 0xfffff0ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DSB_BARRIER_DSB_NXS {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for DSB_BARRIER_DSB_NXS {
    const OPCODE: u32 = 0xd503323f;
    const MASK: u32 = 0xfffff3ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_SVE_Zd_SVE_Zn_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DUP_SVE_Zd_SVE_Zn_INDEX {
    const OPCODE: u32 = 0x5202000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_Rn_SP_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DUP_Rn_SP_SVE_Zd {
    const OPCODE: u32 = 0x5203800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_SVE_ASIMM_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for DUP_SVE_ASIMM_SVE_Zd {
    const OPCODE: u32 = 0x2538c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_En_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DUP_En_Vd {
    const OPCODE: u32 = 0xe000400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_Vd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DUP_Vd_Rn {
    const OPCODE: u32 = 0xe000c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_En_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for DUP_En_Sd {
    const OPCODE: u32 = 0x5e000400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUPM_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for DUPM_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5c00000;
    const MASK: u32 = 0xfffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUPQ_SVE_Zd_SVE_Zn_5_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_tsz: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for DUPQ_SVE_Zd_SVE_Zn_5_INDEX {
    const OPCODE: u32 = 0x5202400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EON_Rn_Rd_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for EON_Rn_Rd_Rm_SFT {
    const OPCODE: u32 = 0x4a200000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_LIMM_Rd_SP_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for EOR_LIMM_Rd_SP_Rn {
    const OPCODE: u32 = 0x52000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_Rm_SFT_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for EOR_Rm_SFT_Rn_Rd {
    const OPCODE: u32 = 0x4a000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for EOR_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4190000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EOR_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x4a03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for EOR_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5400000;
    const MASK: u32 = 0xfffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for EOR_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25004200;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EOR_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e201c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR3_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EOR3_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4203800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR3_Vm_Va_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EOR3_Vm_Va_Vd_Vn {
    const OPCODE: u32 = 0xce000000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORBT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EORBT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45009000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORQV_SVE_Pg3_Vd_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for EORQV_SVE_Pg3_Vd_SVE_Zn {
    const OPCODE: u32 = 0x41d2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25404200;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORTB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EORTB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45009400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORV_SVE_Zn_SVE_Vd_SVE_Pg3 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for EORV_SVE_Zn_SVE_Vd_SVE_Pg3 {
    const OPCODE: u32 = 0x4192000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ERET {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ERET {
    const OPCODE: u32 = 0xd69f03e0;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ERETAA {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ERETAA {
    const OPCODE: u32 = 0xd69f0bff;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ERETAB {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ERETAB {
    const OPCODE: u32 = 0xd69f0fff;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXT_SVE_Zd_SVE_UIMM8_53_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EXT_SVE_Zd_SVE_UIMM8_53_SVE_Zm_5 {
    const OPCODE: u32 = 0x5200000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXT_SVE_UIMM8_53_SVE_Zd_SVE_ZnxN {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EXT_SVE_UIMM8_53_SVE_Zd_SVE_ZnxN {
    const OPCODE: u32 = 0x5600000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXT_Vd_Vm_IDX_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(4)]
    pub imm4_11: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EXT_Vd_Vm_IDX_Vn {
    const OPCODE: u32 = 0x2e000000;
    const MASK: u32 = 0xbfe08400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXTQ_SVE_Zd_SVE_Zm_imm4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for EXTQ_SVE_Zd_SVE_Zm_imm4 {
    const OPCODE: u32 = 0x5602400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXTR_Rm_Rn_Rd_IMMS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for EXTR_Rm_Rn_Rd_IMMS {
    const OPCODE: u32 = 0x13800000;
    const MASK: u32 = 0x7fa00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x65088000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FABD_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2ec01400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FABD_Sd_Sm_Sn {
    const OPCODE: u32 = 0x7ec01400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FABD_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2ea0d400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FABD_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ea0d400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FABS_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x41ca000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FABS_Vd_Vn {
    const OPCODE: u32 = 0xea0f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FABS_Vn_Vd {
    const OPCODE: u32 = 0xef8f800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FABS_Fd_Fn {
    const OPCODE: u32 = 0x1e20c000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FABS_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee0c000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0x6500c010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGE_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e402c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGE_Sd_Sm_Sn {
    const OPCODE: u32 = 0x7e402c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGE_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e20ec00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGE_Sn_Sd_Sm {
    const OPCODE: u32 = 0x7e20ec00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_SVE_Pd_SVE_Zn_SVE_Zm_16_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGT_SVE_Pd_SVE_Zn_SVE_Zm_16_SVE_Pg3 {
    const OPCODE: u32 = 0x6500e010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGT_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2ec02c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGT_Sn_Sm_Sd {
    const OPCODE: u32 = 0x7ec02c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGT_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2ea0ec00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Sn_S_S_Sm_S_S_Sd_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FACGT_Sn_S_S_Sm_S_S_Sd_S_S {
    const OPCODE: u32 = 0x7ea0ec00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for FADD_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c00;
    const MASK: u32 = 0xffbf9c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SME_Znx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for FADD_SME_Znx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a11c00;
    const MASK: u32 = 0xffbf9c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x65008000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SVE_I1_HALF_ONE_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FADD_SVE_I1_HALF_ONE_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x65188000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADD_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe401400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADD_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe20d400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADD_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e202800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Fn_Fd_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADD_Fn_Fd_Fm {
    const OPCODE: u32 = 0x1ee02800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDA_SVE_Vd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FADDA_SVE_Vd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x65182000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FADDP_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64108000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADDP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e401400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FADDP_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e20d400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FADDP_Sd_Vn {
    const OPCODE: u32 = 0x5e30d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FADDP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7e30d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDQV_Vd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FADDQV_Vd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x6410a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDV_SVE_Pg3_SVE_Vd_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FADDV_SVE_Pg3_SVE_Vd_SVE_Zn {
    const OPCODE: u32 = 0x65002000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCADD_SVE_Zm_5_SVE_IMM_ROT1_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_rot1: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl InsnOpcode for FCADD_SVE_Zm_5_SVE_IMM_ROT1_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x64008000;
    const MASK: u32 = 0xff3ee000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCADD_Vm_Vd_Vn_IMM_ROT3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(2)]
    pub _op_10: u32,
    #[bits(1)]
    pub rotate3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCADD_Vm_Vd_Vn_IMM_ROT3 {
    const OPCODE: u32 = 0x2e00e400;
    const MASK: u32 = 0xbf20ec00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMP_Fn_Fm_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCCMP_Fn_Fm_NZCV_COND {
    const OPCODE: u32 = 0x1e200400;
    const MASK: u32 = 0xff200c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMP_Fm_Fn_COND_NZCV {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCCMP_Fm_Fn_COND_NZCV {
    const OPCODE: u32 = 0x1ee00400;
    const MASK: u32 = 0xffe00c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMPE_COND_Fm_Fn_NZCV {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCCMPE_COND_Fm_Fn_NZCV {
    const OPCODE: u32 = 0x1e200410;
    const MASK: u32 = 0xff200c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMPE_Fm_COND_Fn_NZCV {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCCMPE_Fm_COND_Fn_NZCV {
    const OPCODE: u32 = 0x1ee00410;
    const MASK: u32 = 0xffe00c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCLAMP_SVE_Zm_16_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCLAMP_SVE_Zm_16_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc120c000;
    const MASK: u32 = 0xff20fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120c800;
    const MASK: u32 = 0xff20fc03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x64202400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_SVE_Pg3_FPIMM0_SVE_Pd_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCMEQ_SVE_Pg3_FPIMM0_SVE_Pd_SVE_Zn {
    const OPCODE: u32 = 0x65122000;
    const MASK: u32 = 0xff3fe010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_SVE_Zm_16_SVE_Pg3_SVE_Zn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMEQ_SVE_Zm_16_SVE_Pg3_SVE_Zn_SVE_Pd {
    const OPCODE: u32 = 0x65006000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMEQ_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe402400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sm_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMEQ_Sm_Sd_Sn {
    const OPCODE: u32 = 0x5e402400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vn_Vd_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMEQ_Vn_Vd_FPIMM0 {
    const OPCODE: u32 = 0xea0d800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vn_V_4H_Vd_V_4H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMEQ_Vn_V_4H_Vd_V_4H_FPIMM0 {
    const OPCODE: u32 = 0xef8d800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMEQ_Vm_Vn_Vd {
    const OPCODE: u32 = 0xe20e400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_FPIMM0_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMEQ_FPIMM0_Sd_Sn {
    const OPCODE: u32 = 0x5ea0d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMEQ_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x5ef8d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMEQ_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e20e400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_FPIMM0_SVE_Pd_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCMGE_FPIMM0_SVE_Pd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65102000;
    const MASK: u32 = 0xff3fe010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_SVE_Zm_16_SVE_Pg3_SVE_Pd_SVE_Zn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGE_SVE_Zm_16_SVE_Pg3_SVE_Pd_SVE_Zn {
    const OPCODE: u32 = 0x65004000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGE_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e402400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGE_Sn_Sm_Sd {
    const OPCODE: u32 = 0x7e402400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_FPIMM0_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGE_FPIMM0_Vn_Vd {
    const OPCODE: u32 = 0x2ea0c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_Vn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGE_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = 0x2ef8c800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGE_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20e400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_FPIMM0_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGE_FPIMM0_Sd_Sn {
    const OPCODE: u32 = 0x7ea0c800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sd_FPIMM0_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGE_Sd_FPIMM0_Sn {
    const OPCODE: u32 = 0x7ef8c800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGE_Sn_Sd_Sm {
    const OPCODE: u32 = 0x7e20e400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_SVE_Zn_SVE_Pg3_SVE_Pd_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCMGT_SVE_Zn_SVE_Pg3_SVE_Pd_FPIMM0 {
    const OPCODE: u32 = 0x65102010;
    const MASK: u32 = 0xff3fe010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65004010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGT_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2ec02400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sm_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGT_Sm_Sd_Sn {
    const OPCODE: u32 = 0x7ec02400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_FPIMM0_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGT_FPIMM0_Vd_Vn {
    const OPCODE: u32 = 0xea0c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_FPIMM0_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGT_FPIMM0_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef8c800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Vd_V_2S_Vm_V_2S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGT_Vd_V_2S_Vm_V_2S_Vn_V_2S {
    const OPCODE: u32 = 0x2ea0e400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sn_Sd_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGT_Sn_Sd_FPIMM0 {
    const OPCODE: u32 = 0x5ea0c800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMGT_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x5ef8c800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMGT_Sn_Sd_Sm {
    const OPCODE: u32 = 0x7ea0e400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub rotate2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMLA_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2_SVE_Zd {
    const OPCODE: u32 = 0x64000000;
    const MASK: u32 = 0xff208000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_SVE_Zn_SVE_IMM_ROT2_SVE_Zd_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMLA_SVE_Zn_SVE_IMM_ROT2_SVE_Zd_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x64a01000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_SVE_IMM_ROT2_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMLA_SVE_IMM_ROT2_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x64e01000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_Vd_Vm_Vn_IMM_ROT1 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(2)]
    pub rotate1: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMLA_Vd_Vm_Vn_IMM_ROT1 {
    const OPCODE: u32 = 0x2e00c400;
    const MASK: u32 = 0xbf20e400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_Em_IMM_ROT2_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub rotate2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMLA_Em_IMM_ROT2_Vn_Vd {
    const OPCODE: u32 = 0x2f001000;
    const MASK: u32 = 0xbf009400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_SVE_Zn_SVE_Pd_FPIMM0_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCMLE_SVE_Zn_SVE_Pd_FPIMM0_SVE_Pg3 {
    const OPCODE: u32 = 0x65112010;
    const MASK: u32 = 0xff3fe010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_FPIMM0_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLE_FPIMM0_Vd_Vn {
    const OPCODE: u32 = 0x2ea0d800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Vn_Vd_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLE_Vn_Vd_FPIMM0 {
    const OPCODE: u32 = 0x2ef8d800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLE_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x7ea0d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Sn_FPIMM0_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLE_Sn_FPIMM0_Sd {
    const OPCODE: u32 = 0x7ef8d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_SVE_Zn_SVE_Pg3_FPIMM0_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCMLT_SVE_Zn_SVE_Pg3_FPIMM0_SVE_Pd {
    const OPCODE: u32 = 0x65112000;
    const MASK: u32 = 0xff3fe010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_Vd_FPIMM0_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLT_Vd_FPIMM0_Vn {
    const OPCODE: u32 = 0xea0e800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_FPIMM0_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLT_FPIMM0_Vn_Vd {
    const OPCODE: u32 = 0xef8e800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_FPIMM0_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLT_FPIMM0_Sd_Sn {
    const OPCODE: u32 = 0x5ea0e800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_FPIMM0_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMLT_FPIMM0_Sn_Sd {
    const OPCODE: u32 = 0x5ef8e800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMNE_FPIMM0_SVE_Zn_SVE_Pd_SVE_Pg3 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCMNE_FPIMM0_SVE_Zn_SVE_Pd_SVE_Pg3 {
    const OPCODE: u32 = 0x65132000;
    const MASK: u32 = 0xff3fe010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMNE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMNE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0x65006010;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_Fn_Fm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMP_Fn_Fm {
    const OPCODE: u32 = 0x1e202000;
    const MASK: u32 = 0xff20fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_Fm_Fn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMP_Fm_Fn {
    const OPCODE: u32 = 0x1ee02000;
    const MASK: u32 = 0xffe0fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_FPIMM0_Fn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMP_FPIMM0_Fn {
    const OPCODE: u32 = 0x1e202008;
    const MASK: u32 = 0xff20fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_FPIMM0_S_H_Fn_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMP_FPIMM0_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee02008;
    const MASK: u32 = 0xffe0fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_Fm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMPE_Fn_Fm {
    const OPCODE: u32 = 0x1e202010;
    const MASK: u32 = 0xff20fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMPE_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee02010;
    const MASK: u32 = 0xffe0fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_FPIMM0 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMPE_Fn_FPIMM0 {
    const OPCODE: u32 = 0x1e202018;
    const MASK: u32 = 0xff20fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_S_H_FPIMM0_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCMPE_Fn_S_H_FPIMM0_S_H {
    const OPCODE: u32 = 0x1ee02018;
    const MASK: u32 = 0xffe0fc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMUO_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCMUO_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0x6500c000;
    const MASK: u32 = 0xff20e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCPY_SVE_Zd_SVE_FPIMM8_SVE_Pg4_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(4)]
    pub sve_pg4_16: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FCPY_SVE_Zd_SVE_FPIMM8_SVE_Pg4_16 {
    const OPCODE: u32 = 0x510c000;
    const MASK: u32 = 0xff30e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCSEL_Fn_COND_Fd_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCSEL_Fn_COND_Fd_Fm {
    const OPCODE: u32 = 0x1e200c00;
    const MASK: u32 = 0xff200c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCSEL_Fn_S_H_COND_Fd_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FCSEL_Fn_S_H_COND_Fd_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee00c00;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SME_Znx2_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVT_SME_Znx2_SVE_Zd {
    const OPCODE: u32 = 0xc120e000;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVT_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x6588a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVT_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x65c8a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVT_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x65caa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6589a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x65c9a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x65cba000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVT_Fd_Fn {
    const OPCODE: u32 = 0x1e224000;
    const MASK: u32 = 0xff3e7c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAS_Vn_Vd {
    const OPCODE: u32 = 0xe21c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAS_Vd_Vn {
    const OPCODE: u32 = 0xe79c800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAS_Rd_Fn {
    const OPCODE: u32 = 0x1e240000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAS_Fn_Rd {
    const OPCODE: u32 = 0x1ee40000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAS_Sn_Sd {
    const OPCODE: u32 = 0x5e21c800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Sn_S_H_Sd_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAS_Sn_S_H_Sd_S_H {
    const OPCODE: u32 = 0x5e79c800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAU_Vd_Vn {
    const OPCODE: u32 = 0x2e21c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAU_Vn_Vd {
    const OPCODE: u32 = 0x2e79c800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAU_Fn_Rd {
    const OPCODE: u32 = 0x1e250000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAU_Rd_Fn {
    const OPCODE: u32 = 0x1ee50000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAU_Sd_Sn {
    const OPCODE: u32 = 0x7e21c800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTAU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7e79c800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTL_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTL_Vd_Vn {
    const OPCODE: u32 = 0xe217800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTL2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTL2_Vd_Vn {
    const OPCODE: u32 = 0x4e217800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTLT_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTLT_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x6489a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTLT_SVE_Pg3_P_M_SVE_Zn_S_S_SVE_Zd_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTLT_SVE_Pg3_P_M_SVE_Zn_S_S_SVE_Zd_S_D {
    const OPCODE: u32 = 0x64cba000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMS_Vd_Vn {
    const OPCODE: u32 = 0xe21b800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMS_Vn_Vd {
    const OPCODE: u32 = 0xe79b800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMS_Fn_Rd {
    const OPCODE: u32 = 0x1e300000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMS_Rd_Fn {
    const OPCODE: u32 = 0x1ef00000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMS_Sn_Sd {
    const OPCODE: u32 = 0x5e21b800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMS_Sd_Sn {
    const OPCODE: u32 = 0x5e79b800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMU_Vd_Vn {
    const OPCODE: u32 = 0x2e21b800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e79b800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMU_Rd_Fn {
    const OPCODE: u32 = 0x1e310000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ef10000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMU_Sd_Sn {
    const OPCODE: u32 = 0x7e21b800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTMU_Sn_Sd {
    const OPCODE: u32 = 0x7e79b800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc120e020;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTN_Vd_Vn {
    const OPCODE: u32 = 0xe216800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTN2_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTN2_Vn_Vd {
    const OPCODE: u32 = 0x4e216800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNS_Vd_Vn {
    const OPCODE: u32 = 0xe21a800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe79a800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNS_Rd_Fn {
    const OPCODE: u32 = 0x1e200000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNS_Fn_Rd {
    const OPCODE: u32 = 0x1ee00000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNS_Sd_Sn {
    const OPCODE: u32 = 0x5e21a800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNS_Sn_Sd {
    const OPCODE: u32 = 0x5e79a800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x6488a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNT_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTNT_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_S {
    const OPCODE: u32 = 0x64caa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNU_Vn_Vd {
    const OPCODE: u32 = 0x2e21a800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Vn_V_4H_Vd_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNU_Vn_V_4H_Vd_V_4H {
    const OPCODE: u32 = 0x2e79a800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNU_Fn_Rd {
    const OPCODE: u32 = 0x1e210000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Fn_S_H_Rd_W {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNU_Fn_S_H_Rd_W {
    const OPCODE: u32 = 0x1ee10000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNU_Sn_Sd {
    const OPCODE: u32 = 0x7e21a800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Sn_S_H_Sd_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTNU_Sn_S_H_Sd_S_H {
    const OPCODE: u32 = 0x7e79a800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPS_Vn_Vd {
    const OPCODE: u32 = 0xea1a800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPS_Vd_Vn {
    const OPCODE: u32 = 0xef9a800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPS_Fn_Rd {
    const OPCODE: u32 = 0x1e280000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPS_Rd_Fn {
    const OPCODE: u32 = 0x1ee80000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPS_Sn_Sd {
    const OPCODE: u32 = 0x5ea1a800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPS_Sd_Sn {
    const OPCODE: u32 = 0x5ef9a800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPU_Vd_Vn {
    const OPCODE: u32 = 0x2ea1a800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPU_Vn_Vd {
    const OPCODE: u32 = 0x2ef9a800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPU_Rd_Fn {
    const OPCODE: u32 = 0x1e290000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPU_Fn_Rd {
    const OPCODE: u32 = 0x1ee90000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPU_Sn_Sd {
    const OPCODE: u32 = 0x7ea1a800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTPU_Sd_Sn {
    const OPCODE: u32 = 0x7ef9a800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTX_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTX_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x650aa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXN_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTXN_Vn_Vd {
    const OPCODE: u32 = 0x2e616800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXN_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTXN_Sd_Sn {
    const OPCODE: u32 = 0x7e216800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTXN2_Vd_Vn {
    const OPCODE: u32 = 0x6e616800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXNT_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTXNT_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x640aa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc121e000;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc131e000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x659ca000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x65d8a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Pg3_P_M_SVE_Zd_S_S_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Pg3_P_M_SVE_Zd_S_S_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655ca000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x65dca000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Pg3_P_M_SVE_Zn_S_H_SVE_Zd_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Pg3_P_M_SVE_Zn_S_H_SVE_Zd_S_H {
    const OPCODE: u32 = 0x655aa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x655ea000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZS_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M {
    const OPCODE: u32 = 0x65dea000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_FBITS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for FCVTZS_FBITS_Rd_Fn {
    const OPCODE: u32 = 0x1e180000;
    const MASK: u32 = 0x7f3f0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_FBITS_imm_1_32_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for FCVTZS_FBITS_imm_1_32_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ed80000;
    const MASK: u32 = 0x7fff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Vd_Vn {
    const OPCODE: u32 = 0xea1b800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Vn_Vd {
    const OPCODE: u32 = 0xef9b800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Fn_Rd {
    const OPCODE: u32 = 0x1e380000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Fn_S_H_Rd_W {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Fn_S_H_Rd_W {
    const OPCODE: u32 = 0x1ef80000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Sd_Sn {
    const OPCODE: u32 = 0x5ea1b800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Sn_Sd {
    const OPCODE: u32 = 0x5ef9b800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_IMM_VLSR_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_IMM_VLSR_Vn_Vd {
    const OPCODE: u32 = 0xf00fc00;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0xf10fc00;
    const MASK: u32 = 0xbf90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f00fc00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_IMM_VLSR_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZS_Sd_IMM_VLSR_Sn {
    const OPCODE: u32 = 0x5f10fc00;
    const MASK: u32 = 0xff90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SME_Znx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_SME_Znx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc121e020;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SME_Znx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_SME_Znx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc131e020;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65d9a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x659da000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x655da000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x65dda000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x655ba000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zn_S_H_SVE_Zd_S_D_SVE_Pg3_P_M {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Zn_S_H_SVE_Zd_S_D_SVE_Pg3_P_M {
    const OPCODE: u32 = 0x655fa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FCVTZU_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M {
    const OPCODE: u32 = 0x65dfa000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_Fn_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for FCVTZU_Rd_Fn_FBITS {
    const OPCODE: u32 = 0x1e190000;
    const MASK: u32 = 0x7f3f0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_FBITS_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for FCVTZU_Rd_FBITS_Fn {
    const OPCODE: u32 = 0x1ed90000;
    const MASK: u32 = 0x7fff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Vd_Vn {
    const OPCODE: u32 = 0x2ea1b800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9b800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Rd_Fn {
    const OPCODE: u32 = 0x1e390000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ef90000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Sd_Sn {
    const OPCODE: u32 = 0x7ea1b800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Sn_Sd {
    const OPCODE: u32 = 0x7ef9b800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f00fc00;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = 0x2f10fc00;
    const MASK: u32 = 0xbf90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f00fc00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_IMM_VLSR_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FCVTZU_IMM_VLSR_Sd_Sn {
    const OPCODE: u32 = 0x7f10fc00;
    const MASK: u32 = 0xff90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FDIV_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x650d8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDIV_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e403c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDIV_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e20fc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Fn_Fd_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDIV_Fn_Fd_Fm {
    const OPCODE: u32 = 0x1e201800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDIV_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1ee01800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x650c8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501008;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509008;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1201000;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1301000;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDOT_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a01000;
    const MASK: u32 = 0xffe19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11000;
    const MASK: u32 = 0xffe39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub imm2_19: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64204000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64208000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDUP_SVE_Zd_SVE_FPIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FDUP_SVE_Zd_SVE_FPIMM8 {
    const OPCODE: u32 = 0x2539c000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FEXPA_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FEXPA_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x420b800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FJCVTZS_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FJCVTZS_Fn_Rd {
    const OPCODE: u32 = 0x1e7e0000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6518a000;
    const MASK: u32 = 0xfff9e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAD_SVE_Pg3_SVE_Za_16_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAD_SVE_Pg3_SVE_Za_16_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x65208000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMADD_Fa_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMADD_Fa_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1f000000;
    const MASK: u32 = 0xff208000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMADD_Fm_Fd_Fa_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMADD_Fm_Fd_Fa_Fn {
    const OPCODE: u32 = 0x1fc00000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMAX_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a100;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAX_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b100;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zm_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMAX_SME_Zm_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120a900;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAX_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120b900;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x65068000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAX_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = 0x651e8000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAX_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe403400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAX_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20f400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAX_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e204800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Fn_Fd_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAX_Fn_Fd_Fm {
    const OPCODE: u32 = 0x1ee04800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMAXNM_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a120;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNM_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b120;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMAXNM_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a920;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNM_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120b920;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x65048000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXNM_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 {
    const OPCODE: u32 = 0x651c8000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNM_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe400400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNM_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe20c400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Fn_Fm_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNM_Fn_Fm_Fd {
    const OPCODE: u32 = 0x1e206800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Fm_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNM_Fm_Fd_Fn {
    const OPCODE: u32 = 0x1ee06800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXNMP_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x64148000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNMP_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e400400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXNMP_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e20c400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXNMP_Sd_Vn {
    const OPCODE: u32 = 0x5e30c800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Vn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXNMP_Vn_Sd {
    const OPCODE: u32 = 0x7e30c800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMQV_SVE_Zn_SVE_Pg3_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXNMQV_SVE_Zn_SVE_Pg3_Vd {
    const OPCODE: u32 = 0x6414a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMV_SVE_Pg3_SVE_Vd_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXNMV_SVE_Pg3_SVE_Vd_SVE_Zn {
    const OPCODE: u32 = 0x65042000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMV_Vn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXNMV_Vn_Fd {
    const OPCODE: u32 = 0xe30c800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXNMV_Fd_Vn {
    const OPCODE: u32 = 0x2e30c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXP_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64168000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXP_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e403400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMAXP_Vm_Vn_Vd {
    const OPCODE: u32 = 0x2e20f400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Vn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXP_Vn_Sd {
    const OPCODE: u32 = 0x5e30f800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Vn_V_2S_Sd_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXP_Vn_V_2S_Sd_S_S {
    const OPCODE: u32 = 0x7e30f800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6416a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65062000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXV_Vn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXV_Vn_Fd {
    const OPCODE: u32 = 0xe30f800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMAXV_Fd_Vn {
    const OPCODE: u32 = 0x2e30f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMIN_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a101;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMIN_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b101;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMIN_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a901;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMIN_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b901;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65078000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMIN_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 {
    const OPCODE: u32 = 0x651f8000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMIN_Vm_Vd_Vn {
    const OPCODE: u32 = 0xec03400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Vm_V_2S_Vd_V_2S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMIN_Vm_V_2S_Vd_V_2S_Vn_V_2S {
    const OPCODE: u32 = 0xea0f400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Fm_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMIN_Fm_Fd_Fn {
    const OPCODE: u32 = 0x1e205800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Fd_Fm_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMIN_Fd_Fm_Fn {
    const OPCODE: u32 = 0x1ee05800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMINNM_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a121;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNM_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b121;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMINNM_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a921;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNM_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120b921;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x65058000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SVE_I1_ZERO_ONE_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINNM_SVE_I1_ZERO_ONE_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x651d8000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNM_Vd_Vn_Vm {
    const OPCODE: u32 = 0xec00400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xea0c400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Fm_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNM_Fm_Fd_Fn {
    const OPCODE: u32 = 0x1e207800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNM_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1ee07800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x64158000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNMP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec00400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2ea0c400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Vn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINNMP_Vn_Sd {
    const OPCODE: u32 = 0x5eb0c800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINNMP_Sd_Vn {
    const OPCODE: u32 = 0x7eb0c800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMQV_Vd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINNMQV_Vd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x6415a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMV_SVE_Pg3_SVE_Vd_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINNMV_SVE_Pg3_SVE_Vd_SVE_Zn {
    const OPCODE: u32 = 0x65052000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINNMV_Fd_Vn {
    const OPCODE: u32 = 0xeb0c800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMV_Vn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINNMV_Vn_Fd {
    const OPCODE: u32 = 0x2eb0c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINP_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x64178000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec03400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMINP_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2ea0f400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINP_Sd_Vn {
    const OPCODE: u32 = 0x5eb0f800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7eb0f800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6417a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINV_SVE_Pg3_SVE_Vd_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMINV_SVE_Pg3_SVE_Vd_SVE_Zn {
    const OPCODE: u32 = 0x65072000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINV_Vn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINV_Vn_Fd {
    const OPCODE: u32 = 0xeb0f800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINV_Vn_V_4S_Fd_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMINV_Vn_V_4S_Fd_S_S {
    const OPCODE: u32 = 0x2eb0f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLA_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1500000;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLA_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508000;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLA_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d00000;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08000;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLA_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1201800;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_Zm_S_S_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLA_SME_Zm_S_S_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S {
    const OPCODE: u32 = 0xc1301800;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a01800;
    const MASK: u32 = 0xffa19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11800;
    const MASK: u32 = 0xffa39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for FMLA_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x64200000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zm3_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_SVE_Zm3_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64a00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x64e00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x65200000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe400c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe20cc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf001000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vn_Em_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_Vn_Em_Vd {
    const OPCODE: u32 = 0xf801000;
    const MASK: u32 = 0xbf80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f001000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Sn_Em_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLA_Sn_Em_Sd {
    const OPCODE: u32 = 0x5f801000;
    const MASK: u32 = 0xff80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLAL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1801000;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1901000;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1909000;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLAL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1200800;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1300800;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00800;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1a10800;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1200c00;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20ec00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL_Vd_Vm_Vn {
    const OPCODE: u32 = 0x4e20ec00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf800000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = 0x4f800000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL2_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e20cc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL2_Vm_Vn_Vd {
    const OPCODE: u32 = 0x6e20cc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vd_Em16_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL2_Vd_Em16_Vn {
    const OPCODE: u32 = 0x2f808000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vn_Vd_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLAL2_Vn_Vd_Em16 {
    const OPCODE: u32 = 0x6f808000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALB_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLALB_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x64a04000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64a08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALT_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLALT_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64a04400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a08400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLS_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1500010;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508010;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_Zm_INDEX1_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLS_SME_Zm_INDEX1_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1d00010;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLS_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08010;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201808;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLS_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1301808;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01808;
    const MASK: u32 = 0xffa19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a11808;
    const MASK: u32 = 0xffa39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zm3_22_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for FMLS_SVE_Zm3_22_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64200400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x64a00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64e00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x65202000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_Vn_Vm_Vd {
    const OPCODE: u32 = 0xec00c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_Vn_Vd_Vm {
    const OPCODE: u32 = 0xea0cc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_Em16_Vd_Vn {
    const OPCODE: u32 = 0xf005000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Em_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_Em_Vn_Vd {
    const OPCODE: u32 = 0xf805000;
    const MASK: u32 = 0xbf80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Sn_Em16_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_Sn_Em16_Sd {
    const OPCODE: u32 = 0x5f005000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Sn_Em_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLS_Sn_Em_Sd {
    const OPCODE: u32 = 0x5f805000;
    const MASK: u32 = 0xff80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLSL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1801008;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLSL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1901008;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1909008;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200808;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1300808;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1a00808;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10808;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_Zm_SME_ZA_array_off3x2_SVE_Zn {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FMLSL_SME_Zm_SME_ZA_array_off3x2_SVE_Zn {
    const OPCODE: u32 = 0xc1200c08;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL_Vn_Vm_Vd {
    const OPCODE: u32 = 0xea0ec00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL_Vd_Vm_Vn {
    const OPCODE: u32 = 0x4ea0ec00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf804000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL_Em16_Vd_Vn {
    const OPCODE: u32 = 0x4f804000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL2_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2ea0cc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL2_Vm_Vn_Vd {
    const OPCODE: u32 = 0x6ea0cc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f80c000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Em16_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSL2_Em16_Vn_Vd {
    const OPCODE: u32 = 0x6f80c000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64a06000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLT_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSLT_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x64a0a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMLSLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64a06400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a0e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64e0e400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPA_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOPA_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm {
    const OPCODE: u32 = 0x80c00000;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPA_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOPA_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x81a00000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPS_SME_Pm_SVE_Pg3_SVE_Zn_SME_ZAda_2b_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOPS_SME_Pm_SVE_Pg3_SVE_Zn_SME_ZAda_2b_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_3b_SVE_Pg3_SME_Pm {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_3b_SVE_Pg3_SME_Pm {
    const OPCODE: u32 = 0x80c00010;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPS_SME_Pm_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOPS_SME_Pm_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x81a00010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Fn_Rd {
    const OPCODE: u32 = 0x1e260000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Rd_Fn {
    const OPCODE: u32 = 0x1ee60000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_VnD1_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_VnD1_Rd {
    const OPCODE: u32 = 0x9eae0000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Fd_Rn {
    const OPCODE: u32 = 0x1e270000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Rn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Rn_Fd {
    const OPCODE: u32 = 0x1ee70000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Rn_VdD1 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Rn_VdD1 {
    const OPCODE: u32 = 0x9eaf0000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Fd_Fn {
    const OPCODE: u32 = 0x1e204000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FMOV_Fn_Fd {
    const OPCODE: u32 = 0x1ee04000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(8)]
    pub _op_5: u32,
    #[bits(8)]
    pub imm8: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOV_Fd_FPIMM {
    const OPCODE: u32 = 0x1e201000;
    const MASK: u32 = 0xff201fe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_FPIMM_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(8)]
    pub _op_5: u32,
    #[bits(8)]
    pub imm8: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMOV_FPIMM_Fd {
    const OPCODE: u32 = 0x1ee01000;
    const MASK: u32 = 0xffe01fe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_SIMD_FPIMM_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for FMOV_SIMD_FPIMM_Vd {
    const OPCODE: u32 = 0xf00f400;
    const MASK: u32 = 0xbff8fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Vd_SIMD_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for FMOV_Vd_SIMD_FPIMM {
    const OPCODE: u32 = 0x6f00f400;
    const MASK: u32 = 0xfff8fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_SIMD_FPIMM_Vd_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for FMOV_SIMD_FPIMM_Vd_V_4H {
    const OPCODE: u32 = 0xf00fc00;
    const MASK: u32 = 0xbff8fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMSB_SVE_Za_16_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMSB_SVE_Za_16_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x6520a000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMSUB_Fm_Fa_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMSUB_Fm_Fa_Fn_Fd {
    const OPCODE: u32 = 0x1f008000;
    const MASK: u32 = 0xff208000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMSUB_Fm_Fd_Fa_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMSUB_Fm_Fd_Fa_Fn {
    const OPCODE: u32 = 0x1fc08000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for FMUL_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x64202000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x64a02000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x64e02000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x65028000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Pg3_SVE_I1_HALF_TWO_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMUL_SVE_Pg3_SVE_I1_HALF_TWO_SVE_Zd {
    const OPCODE: u32 = 0x651a8000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e401c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vn_V_2S_Vm_V_2S_Vd_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Vn_V_2S_Vm_V_2S_Vd_V_2S {
    const OPCODE: u32 = 0x2e20dc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Fd_Fm_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Fd_Fm_Fn {
    const OPCODE: u32 = 0x1e200800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Fn_Fd_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Fn_Fd_Fm {
    const OPCODE: u32 = 0x1ee00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vn_Vd_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Vn_Vd_Em16 {
    const OPCODE: u32 = 0xf009000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Vd_Vn_Em {
    const OPCODE: u32 = 0xf809000;
    const MASK: u32 = 0xbf80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Sn_Sd_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Sn_Sd_Em16 {
    const OPCODE: u32 = 0x5f009000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Sd_Em_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMUL_Sd_Em_Sn {
    const OPCODE: u32 = 0x5f809000;
    const MASK: u32 = 0xff80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FMULX_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x650a8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe401c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Sn_Sd_Sm {
    const OPCODE: u32 = 0x5e401c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe20dc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sn_S_S_Sd_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Sn_S_S_Sd_S_S_Sm_S_S {
    const OPCODE: u32 = 0x5e20dc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Vn_Em16_Vd {
    const OPCODE: u32 = 0x2f009000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vd_Em_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Vd_Em_Vn {
    const OPCODE: u32 = 0x2f809000;
    const MASK: u32 = 0xbf80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sn_Em16_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Sn_Em16_Sd {
    const OPCODE: u32 = 0x7f009000;
    const MASK: u32 = 0xffc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sd_Em_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FMULX_Sd_Em_Sn {
    const OPCODE: u32 = 0x7f809000;
    const MASK: u32 = 0xff80f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FNEG_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x41da000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FNEG_Vd_Vn {
    const OPCODE: u32 = 0x2ea0f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FNEG_Vn_Vd {
    const OPCODE: u32 = 0x2ef8f800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FNEG_Fd_Fn {
    const OPCODE: u32 = 0x1e214000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FNEG_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee14000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = 0x6520c000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMADD_Fd_Fn_Fm_Fa {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMADD_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = 0x1f200000;
    const MASK: u32 = 0xff208000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMADD_Fm_Fa_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMADD_Fm_Fa_Fn_Fd {
    const OPCODE: u32 = 0x1fe00000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMLA_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMLA_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x65204000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMLS_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMLS_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x65206000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMSB_SVE_Zm_5_SVE_Zd_SVE_Pg3_SVE_Za_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMSB_SVE_Zm_5_SVE_Zd_SVE_Pg3_SVE_Za_16 {
    const OPCODE: u32 = 0x6520e000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMSUB_Fn_Fm_Fa_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMSUB_Fn_Fm_Fa_Fd {
    const OPCODE: u32 = 0x1f208000;
    const MASK: u32 = 0xff208000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMSUB_Fm_Fa_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMSUB_Fm_Fa_Fd_Fn {
    const OPCODE: u32 = 0x1fe08000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMUL_Fn_Fd_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMUL_Fn_Fd_Fm {
    const OPCODE: u32 = 0x1e208800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMUL_Fn_S_H_Fd_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FNMUL_Fn_S_H_Fd_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee08800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x650e3000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPE_Vn_Vd {
    const OPCODE: u32 = 0xea1d800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Vn_V_4H_Vd_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPE_Vn_V_4H_Vd_V_4H {
    const OPCODE: u32 = 0xef9d800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPE_Sn_Sd {
    const OPCODE: u32 = 0x5ea1d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPE_Sd_Sn {
    const OPCODE: u32 = 0x5ef9d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRECPS_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x65001800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRECPS_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe403c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Sn_Sd_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRECPS_Sn_Sd_Sm {
    const OPCODE: u32 = 0x5e403c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20fc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Sn_S_S_Sd_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRECPS_Sn_S_S_Sd_S_S_Sm_S_S {
    const OPCODE: u32 = 0x5e20fc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPX_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRECPX_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x650ca000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPX_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPX_Sn_Sd {
    const OPCODE: u32 = 0x5ea1f800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPX_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRECPX_Sd_Sn {
    const OPCODE: u32 = 0x5ef9f800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32X_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT32X_Vd_Vn {
    const OPCODE: u32 = 0x2e21e800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32X_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT32X_Fd_Fn {
    const OPCODE: u32 = 0x1e28c000;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32Z_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT32Z_Vn_Vd {
    const OPCODE: u32 = 0xe21e800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32Z_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT32Z_Fn_Fd {
    const OPCODE: u32 = 0x1e284000;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64X_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT64X_Vd_Vn {
    const OPCODE: u32 = 0x2e21f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64X_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT64X_Fn_Fd {
    const OPCODE: u32 = 0x1e29c000;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64Z_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT64Z_Vn_Vd {
    const OPCODE: u32 = 0xe21f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64Z_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINT64Z_Fd_Fn {
    const OPCODE: u32 = 0x1e294000;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_SME_Znx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTA_SME_Znx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc1ace000;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_SME_Znx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTA_SME_Znx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc1bce000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTA_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x6504a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTA_Vn_Vd {
    const OPCODE: u32 = 0x2e218800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTA_Vd_Vn {
    const OPCODE: u32 = 0x2e798800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTA_Fd_Fn {
    const OPCODE: u32 = 0x1e264000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTA_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee64000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTI_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x6507a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTI_Vn_Vd {
    const OPCODE: u32 = 0x2ea19800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTI_Vd_Vn {
    const OPCODE: u32 = 0x2ef99800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTI_Fn_Fd {
    const OPCODE: u32 = 0x1e27c000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTI_Fd_Fn {
    const OPCODE: u32 = 0x1ee7c000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_SME_Znx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTM_SME_Znx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc1aae000;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTM_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1bae000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTM_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x6502a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTM_Vd_Vn {
    const OPCODE: u32 = 0xe219800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTM_Vn_Vd {
    const OPCODE: u32 = 0xe799800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTM_Fd_Fn {
    const OPCODE: u32 = 0x1e254000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTM_Fn_Fd {
    const OPCODE: u32 = 0x1ee54000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTN_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a8e000;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTN_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1b8e000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTN_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x6500a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTN_Vn_Vd {
    const OPCODE: u32 = 0xe218800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTN_Vd_Vn {
    const OPCODE: u32 = 0xe798800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTN_Fd_Fn {
    const OPCODE: u32 = 0x1e244000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTN_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee44000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_SME_Znx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTP_SME_Znx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc1a9e000;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_SME_Znx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTP_SME_Znx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc1b9e000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTP_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x6501a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTP_Vd_Vn {
    const OPCODE: u32 = 0xea18800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTP_Vn_Vd {
    const OPCODE: u32 = 0xef98800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTP_Fn_Fd {
    const OPCODE: u32 = 0x1e24c000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTP_Fd_Fn {
    const OPCODE: u32 = 0x1ee4c000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTX_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x6506a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTX_Vn_Vd {
    const OPCODE: u32 = 0x2e219800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Vn_V_4H_Vd_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTX_Vn_V_4H_Vd_V_4H {
    const OPCODE: u32 = 0x2e799800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTX_Fn_Fd {
    const OPCODE: u32 = 0x1e274000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTX_Fd_Fn {
    const OPCODE: u32 = 0x1ee74000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FRINTZ_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x6503a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTZ_Vd_Vn {
    const OPCODE: u32 = 0xea19800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTZ_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef99800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTZ_Fd_Fn {
    const OPCODE: u32 = 0x1e25c000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRINTZ_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee5c000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRSQRTE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x650f3000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRSQRTE_Vd_Vn {
    const OPCODE: u32 = 0x2ea1d800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRSQRTE_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9d800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRSQRTE_Sn_Sd {
    const OPCODE: u32 = 0x7ea1d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FRSQRTE_Sd_Sn {
    const OPCODE: u32 = 0x7ef9d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65001c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRSQRTS_Vm_Vn_Vd {
    const OPCODE: u32 = 0xec03c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRSQRTS_Sd_Sm_Sn {
    const OPCODE: u32 = 0x5ec03c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRSQRTS_Vd_Vn_Vm {
    const OPCODE: u32 = 0xea0fc00;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FRSQRTS_Sn_Sm_Sd {
    const OPCODE: u32 = 0x5ea0fc00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSCALE_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FSCALE_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65098000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FSQRT_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x650da000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FSQRT_Vd_Vn {
    const OPCODE: u32 = 0x2ea1f800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FSQRT_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9f800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FSQRT_Fd_Fn {
    const OPCODE: u32 = 0x1e21c000;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for FSQRT_Fn_Fd {
    const OPCODE: u32 = 0x1ee1c000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for FSUB_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c08;
    const MASK: u32 = 0xffbf9c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SME_Znx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for FSUB_SME_Znx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a11c08;
    const MASK: u32 = 0xffbf9c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65018000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SVE_Pg3_SVE_I1_HALF_ONE_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FSUB_SVE_Pg3_SVE_I1_HALF_ONE_SVE_Zd {
    const OPCODE: u32 = 0x65198000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FSUB_Vn_Vd_Vm {
    const OPCODE: u32 = 0xec01400;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0xea0d400;
    const MASK: u32 = 0xbfa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FSUB_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e203800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Fn_Fm_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FSUB_Fn_Fm_Fd {
    const OPCODE: u32 = 0x1ee03800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FSUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x65038000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUBR_SVE_I1_HALF_ONE_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for FSUBR_SVE_I1_HALF_ONE_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x651b8000;
    const MASK: u32 = 0xff3fe3c0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FTMAD_SVE_Zm_5_SVE_UIMM3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl InsnOpcode for FTMAD_SVE_Zm_5_SVE_UIMM3_SVE_Zd {
    const OPCODE: u32 = 0x65108000;
    const MASK: u32 = 0xff38fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FTSMUL_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FTSMUL_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x65000c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FTSSEL_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for FTSSEL_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x420b000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FVDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for FVDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1500008;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPCX {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for GCSPOPCX {
    const OPCODE: u32 = 0xd50877bf;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPM {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for GCSPOPM {
    const OPCODE: u32 = 0xd52b773f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPM_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for GCSPOPM_Rt {
    const OPCODE: u32 = 0xd52b7720;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPX {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for GCSPOPX {
    const OPCODE: u32 = 0xd50877df;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPUSHM_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for GCSPUSHM_Rt {
    const OPCODE: u32 = 0xd50b7700;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPUSHX {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for GCSPUSHX {
    const OPCODE: u32 = 0xd508779f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSS1_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for GCSSS1_Rt {
    const OPCODE: u32 = 0xd50b7740;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSS2_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for GCSSS2_Rt {
    const OPCODE: u32 = 0xd52b7760;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSTR_Rt_Rn_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for GCSSTR_Rt_Rn_SP {
    const OPCODE: u32 = 0xd91f0c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSTTR_Rt_Rn_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for GCSSTTR_Rt_Rn_SP {
    const OPCODE: u32 = 0xd91f1c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GMI_Rn_SP_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for GMI_Rn_SP_Rm_Rd {
    const OPCODE: u32 = 0x9ac01400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HINT_UIMM7 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl InsnOpcode for HINT_UIMM7 {
    const OPCODE: u32 = 0xd503201f;
    const MASK: u32 = 0xfffff01f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HISTCNT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for HISTCNT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x45a0c000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HISTSEG_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for HISTSEG_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4520a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HLT_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for HLT_EXCEPTION {
    const OPCODE: u32 = 0xd4400000;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HVC_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for HVC_EXCEPTION {
    const OPCODE: u32 = 0xd4000002;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0c000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCH_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCH_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x470c000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCH_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCH_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x470e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCP_SVE_Pg4_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for INCP_SVE_Pg4_5_SVE_Zd {
    const OPCODE: u32 = 0x252c8000;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCP_SVE_Pg4_5_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for INCP_SVE_Pg4_5_Rd {
    const OPCODE: u32 = 0x252c8800;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0c000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCW_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INCW_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4b0e000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_SVE_SIMM5_SVE_SIMM5B_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for INDEX_SVE_SIMM5_SVE_SIMM5B_SVE_Zd {
    const OPCODE: u32 = 0x4204000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_Rn_SVE_Zd_SIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for INDEX_Rn_SVE_Zd_SIMM5 {
    const OPCODE: u32 = 0x4204400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_SVE_Zd_SVE_SIMM5_Rm {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for INDEX_SVE_Zd_SVE_SIMM5_Rm {
    const OPCODE: u32 = 0x4204800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_Rn_Rm_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for INDEX_Rn_Rm_SVE_Zd {
    const OPCODE: u32 = 0x4204c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INS_Rn_Ed {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INS_Rn_Ed {
    const OPCODE: u32 = 0x4e001c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INS_Ed_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INS_Ed_En {
    const OPCODE: u32 = 0x6e000400;
    const MASK: u32 = 0xffe08400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INSR_SVE_Rm_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_rm: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INSR_SVE_Rm_SVE_Zd {
    const OPCODE: u32 = 0x5243800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INSR_SVE_Zd_SVE_Vm {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_vm: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for INSR_SVE_Zd_SVE_Vm {
    const OPCODE: u32 = 0x5343800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct IRG_Rd_SP_Rn_SP_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for IRG_Rd_SP_Rn_SP_Rm {
    const OPCODE: u32 = 0x9ac01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ISB_BARRIER_ISB {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ISB_BARRIER_ISB {
    const OPCODE: u32 = 0xd50330df;
    const MASK: u32 = 0xfffff0ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTA_SVE_Zn_SVE_Pg3_SVE_Vd {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LASTA_SVE_Zn_SVE_Pg3_SVE_Vd {
    const OPCODE: u32 = 0x5228000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTA_SVE_Zn_Rd_SVE_Pg3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LASTA_SVE_Zn_Rd_SVE_Pg3 {
    const OPCODE: u32 = 0x520a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTB_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LASTB_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5238000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTB_SVE_Pg3_Rd_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LASTB_SVE_Pg3_Rd_SVE_Zn {
    const OPCODE: u32 = 0x521a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_SIMD_ADDR_SIMPLE_LVt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD1_SIMD_ADDR_SIMPLE_LVt {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_SIMD_ADDR_SIMPLE_LEt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD1_SIMD_ADDR_SIMPLE_LEt {
    const OPCODE: u32 = 0xd400000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD1_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_SIMD_ADDR_POST_LEt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD1_SIMD_ADDR_POST_LEt {
    const OPCODE: u32 = 0xdc00000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0000000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0008000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ADDR_RR_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ADDR_RR_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe0000000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3 {
    const OPCODE: u32 = 0xe0000000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0400000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa0408000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx2_STRIDED_SVE_ADDR_RR_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SME_Ztx2_STRIDED_SVE_ADDR_RR_SME_PNg3 {
    const OPCODE: u32 = 0xa1000000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1008000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1400000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa1408000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84004000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4004000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x8420c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc440c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0xc420c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4004000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    const OPCODE: u32 = 0xa4404000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa400a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa440a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4204000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4604000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa420a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa460a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0006000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa000e000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0406000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa040e000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ADDR_RR_LSL3_SME_ZA_HV_idx_ldstr_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1D_SVE_ADDR_RR_LSL3_SME_ZA_HV_idx_ldstr_SVE_Pg3 {
    const OPCODE: u32 = 0xe0c00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 {
    const OPCODE: u32 = 0xe0c00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa1006000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa100e000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1D_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1406000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140e000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1D_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    const OPCODE: u32 = 0xc5804000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc5a04000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_ADDR_RZ_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_ADDR_RZ_SVE_Pg3 {
    const OPCODE: u32 = 0xc5c0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = 0xc5a0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_Pg3_SVE_ADDR_RZ_LSL3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SVE_Pg3_SVE_ADDR_RZ_LSL3_SVE_ZtxN {
    const OPCODE: u32 = 0xc5e0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5e04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa5e0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 {
    const OPCODE: u32 = 0xa0002000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa000a000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0402000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa040a000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL1_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1H_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL1_SVE_Pg3 {
    const OPCODE: u32 = 0xe0400000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0400000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 {
    const OPCODE: u32 = 0xa1002000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 {
    const OPCODE: u32 = 0xa100a000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa1402000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140a000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84804000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1H_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    const OPCODE: u32 = 0xc4804000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1H_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0x84a04000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 {
    const OPCODE: u32 = 0xc4a04000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_ADDR_ZI_U5x2_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_ADDR_ZI_U5x2_SVE_Pg3 {
    const OPCODE: u32 = 0x84a0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4c0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xc4a0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc4e0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 {
    const OPCODE: u32 = 0xa4c04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa4c0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_H_SVE_ADDR_RX_LSL1_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_H_SVE_ADDR_RX_LSL1_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa4a04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4e04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4a0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa4e0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1Q_SVE_ADDR_RR_LSL4_SME_ZA_HV_idx_ldstr_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1Q_SVE_ADDR_RR_LSL4_SME_ZA_HV_idx_ldstr_SVE_Pg3 {
    const OPCODE: u32 = 0xe1c00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 {
    const OPCODE: u32 = 0xe1c00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1Q_SVE_Pg3_SVE_ADDR_ZX_SVE_Zt {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1Q_SVE_Pg3_SVE_ADDR_ZX_SVE_Zt {
    const OPCODE: u32 = 0xc400a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD1R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd40c000;
    const MASK: u32 = 0xbffff000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD1R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc0c000;
    const MASK: u32 = 0xbfe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN {
    const OPCODE: u32 = 0x84408000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S {
    const OPCODE: u32 = 0x8440c000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_ADDR_RI_U6_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RB_SVE_ADDR_RI_U6_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0x8440a000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x8440e000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RD_SVE_Pg3_SVE_ADDR_RI_U6x8_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RD_SVE_Pg3_SVE_ADDR_RI_U6x8_SVE_ZtxN {
    const OPCODE: u32 = 0x85c0e000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x84c0c000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN {
    const OPCODE: u32 = 0x84c0a000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RH_SVE_ZtxN_SVE_ADDR_RI_U6x2_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RH_SVE_ZtxN_SVE_ADDR_RI_U6x2_SVE_Pg3 {
    const OPCODE: u32 = 0x84c0e000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1ROB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4200000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROB_SVE_ADDR_RI_S4x32_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1ROB_SVE_ADDR_RI_S4x32_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa4202000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROD_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1ROD_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5a00000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROD_SVE_ADDR_RI_S4x32_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1ROD_SVE_ADDR_RI_S4x32_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5a02000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROH_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1ROH_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4a00000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROH_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1ROH_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN {
    const OPCODE: u32 = 0xa4a02000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1ROW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN {
    const OPCODE: u32 = 0xa5200000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROW_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1ROW_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN {
    const OPCODE: u32 = 0xa5202000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1RQB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    const OPCODE: u32 = 0xa4000000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = 0xa4002000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQD_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1RQD_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5800000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQD_SVE_ADDR_RI_S4x16_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RQD_SVE_ADDR_RI_S4x16_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa5802000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQH_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1RQH_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 {
    const OPCODE: u32 = 0xa4800000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = 0xa4802000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQW_SVE_ZtxN_SVE_ADDR_RX_LSL2_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1RQW_SVE_ZtxN_SVE_ADDR_RX_LSL2_SVE_Pg3 {
    const OPCODE: u32 = 0xa5000000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQW_SVE_Pg3_SVE_ADDR_RI_S4x16_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RQW_SVE_Pg3_SVE_ADDR_RI_S4x16_SVE_ZtxN {
    const OPCODE: u32 = 0xa5002000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RSB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x85c08000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RSB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN {
    const OPCODE: u32 = 0x85c0c000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RSB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S {
    const OPCODE: u32 = 0x85c0a000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x85408000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RSH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN {
    const OPCODE: u32 = 0x8540a000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RSW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = 0x84c08000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = 0x8540c000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RW_SVE_ADDR_RI_U6x4_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1RW_SVE_ADDR_RI_U6x4_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0x8540e000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84000000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4000000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN {
    const OPCODE: u32 = 0x84208000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 {
    const OPCODE: u32 = 0xc4208000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SB_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN {
    const OPCODE: u32 = 0xc4408000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa5804000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    const OPCODE: u32 = 0xa5c04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SB_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5a04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa580a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa5c0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5a0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SH_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0x84800000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SH_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc4800000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 {
    const OPCODE: u32 = 0x84a00000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0xc4a00000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ADDR_ZI_U5x2_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SH_SVE_ADDR_ZI_U5x2_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0x84a08000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xc4a08000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SH_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc4c08000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 {
    const OPCODE: u32 = 0xc4e08000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SH_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa5004000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa5204000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SH_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa500a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa520a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa4804000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SW_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa480a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5000000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_ADDR_RZ_XTW2_22_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_ADDR_RZ_XTW2_22_SVE_Pg3 {
    const OPCODE: u32 = 0xc5200000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SW_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc5408000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xc5208000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1SW_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN {
    const OPCODE: u32 = 0xc5608000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa0004000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa000c000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ADDR_RR_LSL2_SVE_Pg3_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1W_SVE_ADDR_RR_LSL2_SVE_Pg3_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe0800000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0800000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0404000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa040c000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa1004000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa100c000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1404000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140c000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x85004000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0x85204000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_ZtxN {
    const OPCODE: u32 = 0x8520c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5004000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    const OPCODE: u32 = 0xc5204000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN {
    const OPCODE: u32 = 0xc540c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xc520c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc560c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa5404000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa5604000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa540a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa560a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD2_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD2_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd600000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD2_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD2_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xde00000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD2B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa420c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa420e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD2D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN {
    const OPCODE: u32 = 0xa5a0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2D_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD2D_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5a0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD2H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 {
    const OPCODE: u32 = 0xa4a0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2H_SVE_ZtxN_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD2H_SVE_ZtxN_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa4a0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2Q_SME_Zt2_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD2Q_SME_Zt2_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa490e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2 {
    const OPCODE: u32 = 0xa4a0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD2R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd60c000;
    const MASK: u32 = 0xbffff000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2R_SIMD_ADDR_POST_LVt_AL {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD2R_SIMD_ADDR_POST_LVt_AL {
    const OPCODE: u32 = 0xde0c000;
    const MASK: u32 = 0xbfe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa520c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa520e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD3_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD3_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd402000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_SIMD_ADDR_POST_LVt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD3_SIMD_ADDR_POST_LVt {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD3_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc02000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD3B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa440c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3B_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD3B_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa440e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5c0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3D_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD3D_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa5c0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3H_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD3H_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_ZtxN {
    const OPCODE: u32 = 0xa4c0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3H_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD3H_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa4c0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3Q_SVE_ADDR_RI_S4x2xVL_SME_Zt3_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD3Q_SVE_ADDR_RI_S4x2xVL_SME_Zt3_SVE_Pg3 {
    const OPCODE: u32 = 0xa510e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xa5208000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD3R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd40e000;
    const MASK: u32 = 0xbffff000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD3R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc0e000;
    const MASK: u32 = 0xbfe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa540c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa540e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD4_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD4_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd602000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD4_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_SIMD_ADDR_POST_LEt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD4_SIMD_ADDR_POST_LEt {
    const OPCODE: u32 = 0xde02000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa460c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa460e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD4D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN {
    const OPCODE: u32 = 0xa5e0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4D_SVE_Pg3_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD4D_SVE_Pg3_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xa5e0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD4H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4e0c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa4e0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4Q_SVE_ADDR_RI_S4x2xVL_SME_Zt4_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD4Q_SVE_ADDR_RI_S4x2xVL_SME_Zt4_SVE_Pg3 {
    const OPCODE: u32 = 0xa590e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xa5a08000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD4R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd60e000;
    const MASK: u32 = 0xbffff000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LD4R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xde0e000;
    const MASK: u32 = 0xbfe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4W_SVE_ADDR_RX_LSL2_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LD4W_SVE_ADDR_RX_LSL2_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa560c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa560e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD64B_ADDR_SIMPLE_Rt_LS64 {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LD64B_ADDR_SIMPLE_Rt_LS64 {
    const OPCODE: u32 = 0xf83fd000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADD_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADD_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8200000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDA_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDA_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8a00000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDAH_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDAH_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78a00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDAL_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDAL_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0xb8e00000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDALB_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDALB_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x38e00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38200000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78200000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDL_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDL_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0xb8600000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDLB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDLB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38600000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDLH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDADDLH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78600000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAP1_SIMD_ADDR_SIMPLE_LEt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LDAP1_SIMD_ADDR_SIMPLE_LEt {
    const OPCODE: u32 = 0xd418400;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAPR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8bfc000;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPR_RCPC3_ADDR_POSTIND_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAPR_RCPC3_ADDR_POSTIND_Rt {
    const OPCODE: u32 = 0x19c00800;
    const MASK: u32 = 0x3ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAPRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38bfc000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPRH_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAPRH_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78bfc000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPUR_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPUR_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x99400000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPUR_Rt_X_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPUR_Rt_X_ADDR_OFFSET {
    const OPCODE: u32 = 0xd9400000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPUR_Ft_RCPC3_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(2)]
    pub _op_10: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPUR_Ft_RCPC3_ADDR_OFFSET {
    const OPCODE: u32 = 0x1d400800;
    const MASK: u32 = 0x3f600c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURB_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x19400000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURH_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x59400000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSB_ADDR_OFFSET_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURSB_ADDR_OFFSET_Rt {
    const OPCODE: u32 = 0x19800000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSB_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURSB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x19c00000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSH_ADDR_OFFSET_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURSH_ADDR_OFFSET_Rt {
    const OPCODE: u32 = 0x59800000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSH_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURSH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x59c00000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSW_ADDR_OFFSET_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDAPURSW_ADDR_OFFSET_Rt {
    const OPCODE: u32 = 0x99800000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88dffc00;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDARB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDARB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8dffc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDARH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDARH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48dffc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXP_ADDR_SIMPLE_Rt_Rt2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for LDAXP_ADDR_SIMPLE_Rt_Rt2 {
    const OPCODE: u32 = 0x887f8000;
    const MASK: u32 = 0xbfff8000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAXR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x885ffc00;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXRB_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAXRB_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x85ffc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXRH_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDAXRH_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x485ffc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLR_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLR_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0xb8201000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a01000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRAB_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRAB_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRAH_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRAH_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x78a01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRAL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRAL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8e01000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRALB_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRALB_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38201000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78201000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8601000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38601000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRLH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRLH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78601000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19201000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 {
    const OPCODE: u32 = 0x19a01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19601000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEOR_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEOR_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0xb8202000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORA_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORA_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8a02000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a02000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORAH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORAH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78a02000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORAL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORAL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8e02000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORALB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORALB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38e02000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORALH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORALH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78e02000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38202000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78202000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8602000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORLB_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORLB_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x38602000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDEORLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78602000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_ADDR_RZ_XTW_22_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_ADDR_RZ_XTW_22_SVE_Pg3 {
    const OPCODE: u32 = 0x84006000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1B_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc4006000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 {
    const OPCODE: u32 = 0x8420e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc440e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0xc420e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4006000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4006000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_ADDR_RR_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_ADDR_RR_SVE_Pg3 {
    const OPCODE: u32 = 0xa4406000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4406000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_H_SVE_ADDR_RR_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_H_SVE_ADDR_RR_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa4206000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN {
    const OPCODE: u32 = 0xa4206000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_D_SVE_ADDR_RR_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_D_SVE_ADDR_RR_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa4606000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa4606000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5806000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc5a06000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1D_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc5c0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ADDR_ZI_U5x8_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1D_SVE_ADDR_ZI_U5x8_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc5a0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = 0xc5e0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ADDR_RR_LSL3_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1D_SVE_ADDR_RR_LSL3_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5e06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5e06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84806000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc4806000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84a06000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ADDR_RZ_XTW1_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1H_SVE_ADDR_RZ_XTW1_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc4a06000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1H_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0x84a0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4c0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xc4a0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ADDR_RZ_LSL1_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_ADDR_RZ_LSL1_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc4e0e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SVE_ZtxN {
    const OPCODE: u32 = 0xa4c06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4c06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa4a06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 {
    const OPCODE: u32 = 0xa4a06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ADDR_RR_LSL1_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_ADDR_RR_LSL1_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4e06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa4e06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0x84002000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    const OPCODE: u32 = 0xc4002000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x8420a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc440a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN {
    const OPCODE: u32 = 0xc420a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa5806000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5806000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa5c06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5c06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5a06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5a06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84802000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN {
    const OPCODE: u32 = 0xc4802000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN {
    const OPCODE: u32 = 0x84a02000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0xc4a02000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1SH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_ZtxN {
    const OPCODE: u32 = 0x84a0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc4c0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc4a0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 {
    const OPCODE: u32 = 0xc4e0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa5006000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN {
    const OPCODE: u32 = 0xa5006000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa5206000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 {
    const OPCODE: u32 = 0xa5206000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa4806000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa4806000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5002000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1SW_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc5202000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SW_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc540a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ADDR_ZI_U5x4_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1SW_SVE_ADDR_ZI_U5x4_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xc520a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc560a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0x85006000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1W_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0x85206000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0x8520e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc5006000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDFF1W_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN {
    const OPCODE: u32 = 0xc5206000;
    const MASK: u32 = 0xffa0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc540e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ADDR_ZI_U5x4_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDFF1W_SVE_ADDR_ZI_U5x4_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc520e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ADDR_RZ_LSL2_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1W_SVE_ADDR_RZ_LSL2_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc560e000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa5406000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN {
    const OPCODE: u32 = 0xa5406000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ADDR_RR_LSL2_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1W_SVE_ADDR_RR_LSL2_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa5606000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5606000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDG_ADDR_SIMM13_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDG_ADDR_SIMM13_Rt {
    const OPCODE: u32 = 0xd9600000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDGM_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd9e00000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDIAPP_Rt_RCPC3_ADDR_OPT_POSTIND_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(4)]
    pub opc2: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDIAPP_Rt_RCPC3_ADDR_OPT_POSTIND_Rs {
    const OPCODE: u32 = 0x19400800;
    const MASK: u32 = 0x3fe0ec00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDLAR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDLAR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88df7c00;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDLARB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDLARB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8df7c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDLARH_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDLARH_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x48df7c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1B_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa410a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa450a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_H_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_H_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa430a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa470a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5f0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4d0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa4b0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z {
    const OPCODE: u32 = 0xa4f0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa590a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa5d0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5b0a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SH_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1SH_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa510a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SH_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1SH_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa530a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SW_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1SW_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xa490a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa550a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1W_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNF1W_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xa570a000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNP_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDNP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x28400000;
    const MASK: u32 = 0x7fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNP_Ft2_ADDR_SIMM7_Ft {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDNP_Ft2_ADDR_SIMM7_Ft {
    const OPCODE: u32 = 0x2c400000;
    const MASK: u32 = 0x3fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0000001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 {
    const OPCODE: u32 = 0xa0008001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1B_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0400001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa0408001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1000008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 {
    const OPCODE: u32 = 0xa1008008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1400008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1B_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa1408008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xc400c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ADDR_ZX_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SVE_ADDR_ZX_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0x8400a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    const OPCODE: u32 = 0xa400c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa400e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_PNg3_SME_Zdnx2_SVE_ADDR_RR_LSL3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1D_SME_PNg3_SME_Zdnx2_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa0006001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa000e001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1D_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa0406001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa040e001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1006008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1D_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa100e008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1406008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa140e008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1D_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    const OPCODE: u32 = 0xc580c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa580c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1D_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xa580e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx2_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx2_SME_PNg3 {
    const OPCODE: u32 = 0xa0002001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa000a001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1H_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa0402001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa040a001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa1002008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa100a008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1402008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa140a008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    const OPCODE: u32 = 0xc480c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0x8480a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa480c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa480e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1SB_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1SB_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 {
    const OPCODE: u32 = 0x84008000;
    const MASK: u32 = 0xbfe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0x84808000;
    const MASK: u32 = 0xbfe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1SW_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1SW_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    const OPCODE: u32 = 0xc5008000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa0004001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 {
    const OPCODE: u32 = 0xa000c001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0404001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1W_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa040c001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1004008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa100c008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1404008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa140c008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0x8500a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D {
    const OPCODE: u32 = 0xc500c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa500c000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LDNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa500e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_ADDR_SIMM7_Rt_Rt2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDP_ADDR_SIMM7_Rt_Rt2 {
    const OPCODE: u32 = 0x29400000;
    const MASK: u32 = 0x7fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_Rt2_Rt_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDP_Rt2_Rt_ADDR_SIMM7 {
    const OPCODE: u32 = 0x28c00000;
    const MASK: u32 = 0x7ec00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_ADDR_SIMM7_Ft_Ft2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDP_ADDR_SIMM7_Ft_Ft2 {
    const OPCODE: u32 = 0x2d400000;
    const MASK: u32 = 0x3fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_ADDR_SIMM7_S_S_Ft_S_S_Ft2_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDP_ADDR_SIMM7_S_S_Ft_S_S_Ft2_S_S {
    const OPCODE: u32 = 0x2cc00000;
    const MASK: u32 = 0x3ec00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDPSW_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDPSW_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x69400000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDPSW_ADDR_SIMM7_Rt2_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for LDPSW_ADDR_SIMM7_Rt2_Rt {
    const OPCODE: u32 = 0x68c00000;
    const MASK: u32 = 0xfec00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for LDR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 {
    const OPCODE: u32 = 0xe1000000;
    const MASK: u32 = 0xffff9c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SIMD_ADDR_SIMPLE_SME_ZT0 {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for LDR_SIMD_ADDR_SIMPLE_SME_ZT0 {
    const OPCODE: u32 = 0xe11f8000;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LDR_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x18000000;
    const MASK: u32 = 0xbf000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_ADDR_REGOFF_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDR_ADDR_REGOFF_Rt {
    const OPCODE: u32 = 0xb8600800;
    const MASK: u32 = 0xbfe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8400400;
    const MASK: u32 = 0xbfe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_ADDR_UIMM12_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDR_ADDR_UIMM12_Rt {
    const OPCODE: u32 = 0xb9400000;
    const MASK: u32 = 0xbfc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for LDR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0x85800000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SVE_ADDR_RI_S9xVL_SVE_PNt {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for LDR_SVE_ADDR_RI_S9xVL_SVE_PNt {
    const OPCODE: u32 = 0x85800000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for LDR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0x85804000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LDR_Ft_ADDR_PCREL19 {
    const OPCODE: u32 = 0x1c000000;
    const MASK: u32 = 0x3f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDR_Ft_ADDR_REGOFF {
    const OPCODE: u32 = 0x3c600800;
    const MASK: u32 = 0x3f600c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = 0x3c400400;
    const MASK: u32 = 0x3f600400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_ADDR_UIMM12_Ft {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDR_ADDR_UIMM12_Ft {
    const OPCODE: u32 = 0x3d400000;
    const MASK: u32 = 0x3f400000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRAA_ADDR_SIMM10_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub s_imm10: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDRAA_ADDR_SIMM10_Rt {
    const OPCODE: u32 = 0xf8200400;
    const MASK: u32 = 0xffa00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRAB_ADDR_SIMM10_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub s_imm10: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for LDRAB_ADDR_SIMM10_Rt {
    const OPCODE: u32 = 0xf8a00400;
    const MASK: u32 = 0xffa00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRB_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDRB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x38600800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38400400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRB_ADDR_UIMM12_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDRB_ADDR_UIMM12_Rt {
    const OPCODE: u32 = 0x39400000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRH_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDRH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x78600800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78400400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRH_ADDR_UIMM12_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDRH_ADDR_UIMM12_Rt {
    const OPCODE: u32 = 0x79400000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSB_ADDR_REGOFF_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDRSB_ADDR_REGOFF_Rt {
    const OPCODE: u32 = 0x38a00800;
    const MASK: u32 = 0xffa00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDRSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38800400;
    const MASK: u32 = 0xffa00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSB_ADDR_UIMM12_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDRSB_ADDR_UIMM12_Rt {
    const OPCODE: u32 = 0x39800000;
    const MASK: u32 = 0xff800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSH_ADDR_REGOFF_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDRSH_ADDR_REGOFF_Rt {
    const OPCODE: u32 = 0x78a00800;
    const MASK: u32 = 0xffa00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSH_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDRSH_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0x78800400;
    const MASK: u32 = 0xffa00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSH_ADDR_UIMM12_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDRSH_ADDR_UIMM12_Rt {
    const OPCODE: u32 = 0x79800000;
    const MASK: u32 = 0xff800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LDRSW_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x98000000;
    const MASK: u32 = 0xff000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDRSW_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0xb8a00800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDRSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8800400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for LDRSW_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0xb9800000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSET_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSET_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8203000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETA_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETA_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0xb8a03000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e03000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETALB_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETALB_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x38e03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETALH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETALH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38203000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78203000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8603000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETLB_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETLB_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x38603000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78603000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt {
    const OPCODE: u32 = 0x19203000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETPA_ADDR_SIMPLE_LSE128_Rt_LSE128_Rt2 {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETPA_ADDR_SIMPLE_LSE128_Rt_LSE128_Rt2 {
    const OPCODE: u32 = 0x19a03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETPAL_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETPAL_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 {
    const OPCODE: u32 = 0x19e03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19603000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAX_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAX_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0xb8204000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXA_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXA_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0xb8a04000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXAB_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXAB_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x38a04000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXAH_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXAH_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78a04000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXAL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXAL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8e04000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXALB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXALB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38e04000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXALH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXALH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e04000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38204000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78204000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8604000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38604000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXLH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMAXLH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78604000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMIN_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMIN_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8205000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINA_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINA_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8a05000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINAB_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINAB_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a05000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINAH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINAH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78a05000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINAL_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINAL_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0xb8e05000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINALB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINALB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38e05000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINALH_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINALH_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78e05000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38205000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78205000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8605000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38605000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINLH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDSMINLH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78605000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDTR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8400800;
    const MASK: u32 = 0xbfe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDTRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38400800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDTRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78400800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRSB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDTRSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38800800;
    const MASK: u32 = 0xffa00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRSH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDTRSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78800800;
    const MASK: u32 = 0xffa00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRSW_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDTRSW_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0xb8800800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAX_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAX_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0xb8206000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXA_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXA_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0xb8a06000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXAB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXAB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38a06000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXAH_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXAH_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x78a06000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXAL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXAL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8e06000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXALB_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXALB_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x38e06000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXALH_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXALH_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78e06000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXB_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXB_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x38206000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXH_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXH_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78206000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8606000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXLB_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXLB_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x38606000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXLH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMAXLH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78606000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMIN_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMIN_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8207000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINA_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINA_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8a07000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINAB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINAB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38a07000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINAH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINAH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78a07000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e07000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e07000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINALH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINALH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78e07000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38207000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINH_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINH_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78207000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8607000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINLB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINLB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38607000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUMINLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78607000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8400000;
    const MASK: u32 = 0xbfe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUR_Ft_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDUR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = 0x3c400000;
    const MASK: u32 = 0x3f600c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDURB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38400000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDURH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78400000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURSB_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDURSB_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0x38800000;
    const MASK: u32 = 0xffa00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURSH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDURSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78800000;
    const MASK: u32 = 0xffa00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURSW_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LDURSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8800000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXP_Rt_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for LDXP_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x887f0000;
    const MASK: u32 = 0xbfff8000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDXR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x885f7c00;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDXRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x85f7c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXRH_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for LDXRH_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x485f7c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LSL_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = 0x4038000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LSL_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4138000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LSL_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x41b8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LSL_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4208c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_SHLIMM_UNPRED_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LSL_SVE_SHLIMM_UNPRED_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4209c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSLR_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LSLR_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x4178000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSLV_Rn_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LSLV_Rn_Rm_Rd {
    const OPCODE: u32 = 0x1ac02000;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LSR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 {
    const OPCODE: u32 = 0x4018000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LSR_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4118000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LSR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4198000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LSR_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4208400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_SHRIMM_UNPRED_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for LSR_SVE_Zd_SVE_SHRIMM_UNPRED_SVE_Zn {
    const OPCODE: u32 = 0x4209400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSRR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for LSRR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4158000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSRV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for LSRV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02400;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI2_SME_Zn_INDEX2_16_SME_Zdnx4_SME_ZT0 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(2)]
    pub imm2_16: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for LUTI2_SME_Zn_INDEX2_16_SME_Zdnx4_SME_ZT0 {
    const OPCODE: u32 = 0xc08c8000;
    const MASK: u32 = 0xfffccc03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(5)]
    pub _op_10: u32,
    #[bits(3)]
    pub imm3_15: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 {
    const OPCODE: u32 = 0xc08c4000;
    const MASK: u32 = 0xfffc4c01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(4)]
    pub _op_10: u32,
    #[bits(4)]
    pub imm4_14: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 {
    const OPCODE: u32 = 0xc0cc0000;
    const MASK: u32 = 0xfffc0c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI4_SME_Zdnx4_SME_Zn_INDEX1_16_SME_ZT0 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(1)]
    pub imm1_16: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl InsnOpcode for LUTI4_SME_Zdnx4_SME_Zn_INDEX1_16_SME_ZT0 {
    const OPCODE: u32 = 0xc08a8000;
    const MASK: u32 = 0xfffecc03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI4_SME_ZT0_SME_Zdnx2_SME_Zn_INDEX2_15 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(5)]
    pub _op_10: u32,
    #[bits(2)]
    pub imm2_15: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl InsnOpcode for LUTI4_SME_ZT0_SME_Zdnx2_SME_Zn_INDEX2_15 {
    const OPCODE: u32 = 0xc08a4000;
    const MASK: u32 = 0xfffe4c01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI4_SVE_Zd_SME_Zn_INDEX3_14_SME_ZT0 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(4)]
    pub _op_10: u32,
    #[bits(3)]
    pub imm3_14: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl InsnOpcode for LUTI4_SVE_Zd_SME_Zn_INDEX3_14_SME_ZT0 {
    const OPCODE: u32 = 0xc0ca0000;
    const MASK: u32 = 0xfffe0c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MAD_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Za_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_za_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MAD_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Za_5 {
    const OPCODE: u32 = 0x400c000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MADD_Rn_Rd_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MADD_Rn_Rd_Rm_Ra {
    const OPCODE: u32 = 0x1b000000;
    const MASK: u32 = 0x7fe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MATCH_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MATCH_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd {
    const OPCODE: u32 = 0x45208000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for MLA_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44200800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLA_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLA_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44e00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zm_16_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLA_SVE_Zm_16_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x4004000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLA_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe209400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLA_Em16_Vd_Vn {
    const OPCODE: u32 = 0x2f000000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for MLS_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x44200c00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLS_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zm_16_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLS_SVE_Zm_16_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4006000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLS_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e209400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MLS_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f004000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SVE_Zn_SVE_Pg3_SME_ZA_HV_idx_dest {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for MOV_SVE_Zn_SVE_Pg3_SME_ZA_HV_idx_dest {
    const OPCODE: u32 = 0xc0000000;
    const MASK: u32 = 0xff3e0010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_HV_idx_src_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub imm4_5: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for MOV_SME_ZA_HV_idx_src_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0xc0020000;
    const MASK: u32 = 0xff3e0200;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_Znx2_SME_ZA_HV_idx_destxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOV_SME_Znx2_SME_ZA_HV_idx_destxN {
    const OPCODE: u32 = 0xc0040000;
    const MASK: u32 = 0xff3f1c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = 0xc0060000;
    const MASK: u32 = 0xff3f1f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOV_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc0040800;
    const MASK: u32 = 0xffff9c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_array_off3_5_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOV_SME_ZA_array_off3_5_SME_Zdnx2 {
    const OPCODE: u32 = 0xc0060800;
    const MASK: u32 = 0xffff9f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_HV_idx_destxN_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOV_SME_ZA_HV_idx_destxN_SME_Znx4 {
    const OPCODE: u32 = 0xc0040400;
    const MASK: u32 = 0xff3f1c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_HV_idx_srcxN_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOV_SME_ZA_HV_idx_srcxN_SME_Zdnx4 {
    const OPCODE: u32 = 0xc0060400;
    const MASK: u32 = 0xff3f1f03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOV_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc0040c00;
    const MASK: u32 = 0xffff9c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_array_off3_5_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOV_SME_ZA_array_off3_5_SME_Zdnx4 {
    const OPCODE: u32 = 0xc0060c00;
    const MASK: u32 = 0xffff9f03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3 {
    const OPCODE: u32 = 0xc0000000;
    const MASK: u32 = 0xff3e0010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub imm4_5: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src {
    const OPCODE: u32 = 0xc0020000;
    const MASK: u32 = 0xff3e0200;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 {
    const OPCODE: u32 = 0xc0040000;
    const MASK: u32 = 0xff3f1c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = 0xc0060000;
    const MASK: u32 = 0xff3f1f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOVA_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc0040800;
    const MASK: u32 = 0xffff9c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Zdnx2_SME_ZA_array_off3_5 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOVA_SME_Zdnx2_SME_ZA_array_off3_5 {
    const OPCODE: u32 = 0xc0060800;
    const MASK: u32 = 0xffff9f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 {
    const OPCODE: u32 = 0xc0040400;
    const MASK: u32 = 0xff3f1c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4 {
    const OPCODE: u32 = 0xc0060400;
    const MASK: u32 = 0xff3f1f03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Znx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOVA_SME_Znx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc0040c00;
    const MASK: u32 = 0xffff9c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_array_off3_5_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOVA_SME_ZA_array_off3_5_SME_Zdnx4 {
    const OPCODE: u32 = 0xc0060c00;
    const MASK: u32 = 0xffff9f03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_ZA_array_vrsb_1_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub off3: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_ZA_array_vrsb_1_SME_Zdnx2 {
    const OPCODE: u32 = 0xc0060200;
    const MASK: u32 = 0xffff1f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_ZA_array_vrss_1_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub ol: u32,
    #[bits(2)]
    pub zan_2: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_ZA_array_vrss_1_SME_Zdnx2 {
    const OPCODE: u32 = 0xc0860200;
    const MASK: u32 = 0xffff1f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(2)]
    pub off2: u32,
    #[bits(1)]
    pub zan_1: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 {
    const OPCODE: u32 = 0xc0460200;
    const MASK: u32 = 0xffff1f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_ZA_array_vrsd_1_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub zan_3: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_ZA_array_vrsd_1_SME_Zdnx2 {
    const OPCODE: u32 = 0xc0c60200;
    const MASK: u32 = 0xffff1f01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub off2: u32,
    #[bits(6)]
    pub _op_7: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 {
    const OPCODE: u32 = 0xc0060600;
    const MASK: u32 = 0xffff1f83;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub off2: u32,
    #[bits(6)]
    pub _op_7: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 {
    const OPCODE: u32 = 0xc0860600;
    const MASK: u32 = 0xffff1f83;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(1)]
    pub ol: u32,
    #[bits(1)]
    pub zan: u32,
    #[bits(6)]
    pub _op_7: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 {
    const OPCODE: u32 = 0xc0460600;
    const MASK: u32 = 0xffff1f83;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_ZA_array_vrsd_2_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub zan_3: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for MOVAZ_SME_ZA_array_vrsd_2_SME_Zdnx4 {
    const OPCODE: u32 = 0xc0c60600;
    const MASK: u32 = 0xffff1f03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MOVI_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0xf000400;
    const MASK: u32 = 0xbff89c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0xf008400;
    const MASK: u32 = 0xbff8dc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    const OPCODE: u32 = 0xf00c400;
    const MASK: u32 = 0xbff8ec00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0xf00e400;
    const MASK: u32 = 0xbff8fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Sd_SIMD_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MOVI_Sd_SIMD_IMM {
    const OPCODE: u32 = 0x2f00e400;
    const MASK: u32 = 0xfff8fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_SIMD_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MOVI_Vd_SIMD_IMM {
    const OPCODE: u32 = 0x6f00e400;
    const MASK: u32 = 0xfff8fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVK_Rd_HALF {
    #[bits(5)]
    pub rd: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MOVK_Rd_HALF {
    const OPCODE: u32 = 0x72800000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVN_HALF_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MOVN_HALF_Rd {
    const OPCODE: u32 = 0x12800000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVPRFX_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for MOVPRFX_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4102000;
    const MASK: u32 = 0xff3ee000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVPRFX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for MOVPRFX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x420bc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVT_SME_ZT0_INDEX_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(3)]
    pub imm3_12: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOVT_SME_ZT0_INDEX_Rt {
    const OPCODE: u32 = 0xc04c03e0;
    const MASK: u32 = 0xffff8fe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVT_Rt_SME_ZT0_INDEX {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(3)]
    pub imm3_12: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for MOVT_Rt_SME_ZT0_INDEX {
    const OPCODE: u32 = 0xc04e03e0;
    const MASK: u32 = 0xffff8fe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVZ_HALF_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MOVZ_HALF_Rd {
    const OPCODE: u32 = 0x52800000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MRRS_SYSREG128_Rt_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MRRS_SYSREG128_Rt_PAIRREG {
    const OPCODE: u32 = 0xd5700000;
    const MASK: u32 = 0xfff00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MRS_Rt_SYSREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MRS_Rt_SYSREG {
    const OPCODE: u32 = 0xd5200000;
    const MASK: u32 = 0xffe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSB_SVE_Za_5_SVE_Pg3_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_za_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MSB_SVE_Za_5_SVE_Pg3_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x400e000;
    const MASK: u32 = 0xff20e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSR_UIMM4_PSTATEFIELD {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl InsnOpcode for MSR_UIMM4_PSTATEFIELD {
    const OPCODE: u32 = 0xd500401f;
    const MASK: u32 = 0xfff8f01f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSR_Rt_SYSREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MSR_Rt_SYSREG {
    const OPCODE: u32 = 0xd5000000;
    const MASK: u32 = 0xffe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSRR_PAIRREG_Rt_SYSREG128 {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MSRR_PAIRREG_Rt_SYSREG128 {
    const OPCODE: u32 = 0xd5500000;
    const MASK: u32 = 0xfff00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSUB_Rn_Rm_Rd_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MSUB_Rn_Rm_Rd_Ra {
    const OPCODE: u32 = 0x1b008000;
    const MASK: u32 = 0x7fe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4100000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MUL_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x4420f800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a0f800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MUL_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44e0f800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_SIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for MUL_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = 0x2530c000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MUL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe209c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for MUL_Em16_Vd_Vn {
    const OPCODE: u32 = 0xf008000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MVNI_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MVNI_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0x2f000400;
    const MASK: u32 = 0xbff89c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MVNI_SIMD_IMM_SFT_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MVNI_SIMD_IMM_SFT_Vd {
    const OPCODE: u32 = 0x2f008400;
    const MASK: u32 = 0xbff8dc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MVNI_SIMD_IMM_SFT_MSL_Vd_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for MVNI_SIMD_IMM_SFT_MSL_Vd_V_2S {
    const OPCODE: u32 = 0x2f00c400;
    const MASK: u32 = 0xbff8ec00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NAND_SVE_Pg4_10_SVE_Pn_SVE_Pd_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for NAND_SVE_Pg4_10_SVE_Pn_SVE_Pd_SVE_Pm {
    const OPCODE: u32 = 0x25804210;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NANDS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for NANDS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm {
    const OPCODE: u32 = 0x25c04210;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NBSL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for NBSL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4e03c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NEG_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for NEG_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x417a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NEG_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for NEG_Vd_Vn {
    const OPCODE: u32 = 0x2e20b800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NEG_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for NEG_Sn_Sd {
    const OPCODE: u32 = 0x7e20b800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45208010;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NOR_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for NOR_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 {
    const OPCODE: u32 = 0x25804200;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NORS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for NORS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd {
    const OPCODE: u32 = 0x25c04200;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for NOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41ea000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NOT_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for NOT_Vn_Vd {
    const OPCODE: u32 = 0x2e205800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORN_Rd_Rm_SFT_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ORN_Rd_Rm_SFT_Rn {
    const OPCODE: u32 = 0x2a200000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORN_SVE_Pg4_10_SVE_Pm_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ORN_SVE_Pg4_10_SVE_Pm_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x25804010;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORN_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ORN_Vm_Vn_Vd {
    const OPCODE: u32 = 0xee01c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORNS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ORNS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm {
    const OPCODE: u32 = 0x25c04010;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Rd_SP_Rn_LIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for ORR_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = 0x32000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Rm_SFT_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ORR_Rm_SFT_Rn_Rd {
    const OPCODE: u32 = 0x2a000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ORR_SVE_Zm_5_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x4180000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ORR_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4603000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for ORR_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5000000;
    const MASK: u32 = 0xfffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ORR_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm {
    const OPCODE: u32 = 0x25804000;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ORR_Vn_Vd_Vm {
    const OPCODE: u32 = 0xea01c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SIMD_IMM_SFT_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for ORR_SIMD_IMM_SFT_Vd {
    const OPCODE: u32 = 0xf001400;
    const MASK: u32 = 0xbff89c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for ORR_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0xf009400;
    const MASK: u32 = 0xbff8dc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORRS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ORRS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd {
    const OPCODE: u32 = 0x25c04000;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4182000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDA_Rn_SP_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PACDA_Rn_SP_Rd {
    const OPCODE: u32 = 0xdac10800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDB_Rn_SP_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PACDB_Rn_SP_Rd {
    const OPCODE: u32 = 0xdac10c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for PACDZA_Rd {
    const OPCODE: u32 = 0xdac12be0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for PACDZB_Rd {
    const OPCODE: u32 = 0xdac12fe0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACGA_Rm_SP_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PACGA_Rm_SP_Rn_Rd {
    const OPCODE: u32 = 0x9ac03000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIA_Rn_SP_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PACIA_Rn_SP_Rd {
    const OPCODE: u32 = 0xdac10000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIB_Rn_SP_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PACIB_Rn_SP_Rd {
    const OPCODE: u32 = 0xdac10400;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for PACIZA_Rd {
    const OPCODE: u32 = 0xdac123e0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for PACIZB_Rd {
    const OPCODE: u32 = 0xdac127e0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PEXT_SME_PNn3_INDEX2_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(3)]
    pub sme_pnn3: u32,
    #[bits(2)]
    pub imm2_8: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PEXT_SME_PNn3_INDEX2_SVE_Pd {
    const OPCODE: u32 = 0x25207010;
    const MASK: u32 = 0xff3ffc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PEXT_SME_PdxN_SME_PNn3_INDEX1 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(3)]
    pub sme_pnn3: u32,
    #[bits(1)]
    pub imm1_8: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for PEXT_SME_PdxN_SME_PNn3_INDEX1 {
    const OPCODE: u32 = 0x25207410;
    const MASK: u32 = 0xff3ffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PFALSE_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(28)]
    pub _op_4: u32,
}
impl InsnOpcode for PFALSE_SVE_Pd {
    const OPCODE: u32 = 0x2518e400;
    const MASK: u32 = 0xfffffff0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PFALSE_SVE_PNd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(28)]
    pub _op_4: u32,
}
impl InsnOpcode for PFALSE_SVE_PNd {
    const OPCODE: u32 = 0x2518e400;
    const MASK: u32 = 0xfffffff0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PFIRST_SVE_Pd_SVE_Pg4_5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for PFIRST_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x2558c000;
    const MASK: u32 = 0xfffffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMUL_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMUL_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4206400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMUL_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMUL_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2e209c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULL_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe20e000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xee0e000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20e000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULL2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x4ee0e000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45406800;
    const MASK: u32 = 0xff60fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLT_SVE_Zn_S_B_SVE_Zd_S_H_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PMULLT_SVE_Zn_S_B_SVE_Zd_S_H_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x45406c00;
    const MASK: u32 = 0xff60fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PNEXT_SVE_Pg4_5_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for PNEXT_SVE_Pg4_5_SVE_Pd {
    const OPCODE: u32 = 0x2519c400;
    const MASK: u32 = 0xff3ffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_PRFOP {
    const OPCODE: u32 = 0x84200000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_PRFOP {
    const OPCODE: u32 = 0xc4200000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_ADDR_RZ_SVE_Pg3_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFB_SVE_ADDR_RZ_SVE_Pg3_SVE_PRFOP {
    const OPCODE: u32 = 0xc4608000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_ADDR_RX_SVE_PRFOP_SVE_Pg3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFB_SVE_ADDR_RX_SVE_PRFOP_SVE_Pg3 {
    const OPCODE: u32 = 0x8400c000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_ADDR_ZI_U5_SVE_Pg3_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFB_SVE_ADDR_ZI_U5_SVE_Pg3_SVE_PRFOP {
    const OPCODE: u32 = 0x8400e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_ADDR_ZI_U5_SVE_PRFOP_SVE_Pg3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFB_SVE_ADDR_ZI_U5_SVE_PRFOP_SVE_Pg3 {
    const OPCODE: u32 = 0xc400e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c00000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFD_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_SVE_PRFOP {
    const OPCODE: u32 = 0x84206000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW3_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = 0xc4206000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = 0xc460e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFD_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_PRFOP {
    const OPCODE: u32 = 0x8580c000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_Pg3_SVE_ADDR_RI_S6xVL_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFD_SVE_Pg3_SVE_ADDR_RI_S6xVL_SVE_PRFOP {
    const OPCODE: u32 = 0x85c06000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = 0x8580e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8_c580e000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8_c580e000 {
    const OPCODE: u32 = 0xc580e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFH_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_PRFOP {
    const OPCODE: u32 = 0x8480c000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW1_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84202000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0xc4202000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc460a000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_PRFOP {
    const OPCODE: u32 = 0x8480e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_ADDR_ZI_U5x2_SVE_Pg3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_ADDR_ZI_U5x2_SVE_Pg3 {
    const OPCODE: u32 = 0xc480e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c02000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFM_PRFOP_ADDR_PCREL19 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for PRFM_PRFOP_ADDR_PCREL19 {
    const OPCODE: u32 = 0xd8000000;
    const MASK: u32 = 0xff000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFM_PRFOP_ADDR_REGOFF {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for PRFM_PRFOP_ADDR_REGOFF {
    const OPCODE: u32 = 0xf8a00800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFM_PRFOP_ADDR_UIMM12 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for PRFM_PRFOP_ADDR_UIMM12 {
    const OPCODE: u32 = 0xf9800000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFUM_PRFOP_ADDR_SIMM9 {
    #[bits(11)]
    pub _op_0: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFUM_PRFOP_ADDR_SIMM9 {
    const OPCODE: u32 = 0xf8800000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0x84204000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for PRFW_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_PRFOP {
    const OPCODE: u32 = 0xc4204000;
    const MASK: u32 = 0xffa0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_ADDR_RZ_LSL2_SVE_PRFOP_SVE_Pg3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFW_SVE_ADDR_RZ_LSL2_SVE_PRFOP_SVE_Pg3 {
    const OPCODE: u32 = 0xc460c000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFW_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c04000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for PRFW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_PRFOP {
    const OPCODE: u32 = 0x8500c000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_ADDR_ZI_U5x4_SVE_Pg3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_ADDR_ZI_U5x4_SVE_Pg3 {
    const OPCODE: u32 = 0x8500e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_PRFOP {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for PRFW_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_PRFOP {
    const OPCODE: u32 = 0xc500e000;
    const MASK: u32 = 0xffe0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PSEL_SVE_Pd_SME_PnT_Wm_imm_SVE_Pg4_10 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(2)]
    pub sme_rm: u32,
    #[bits(3)]
    pub sme_tszl: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sme_tszh: u32,
    #[bits(1)]
    pub sme_i1: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for PSEL_SVE_Pd_SME_PnT_Wm_imm_SVE_Pg4_10 {
    const OPCODE: u32 = 0x25204000;
    const MASK: u32 = 0xff20c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(2)]
    pub sme_rm: u32,
    #[bits(3)]
    pub sme_tszl: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sme_tszh: u32,
    #[bits(1)]
    pub sme_i1: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd {
    const OPCODE: u32 = 0x25204000;
    const MASK: u32 = 0xff20c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTEST_SVE_Pg4_10_SVE_Pn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for PTEST_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x2550c000;
    const MASK: u32 = 0xffffc21f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTRUE_SME_PNd3 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(29)]
    pub _op_3: u32,
}
impl InsnOpcode for PTRUE_SME_PNd3 {
    const OPCODE: u32 = 0x25207810;
    const MASK: u32 = 0xff3ffff8;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTRUE_SVE_Pd_SVE_PATTERN {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PTRUE_SVE_Pd_SVE_PATTERN {
    const OPCODE: u32 = 0x2518e000;
    const MASK: u32 = 0xff3ffc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTRUES_SVE_Pd_SVE_PATTERN {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for PTRUES_SVE_Pd_SVE_PATTERN {
    const OPCODE: u32 = 0x2519e000;
    const MASK: u32 = 0xff3ffc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PUNPKHI_SVE_Pn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for PUNPKHI_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = 0x5314000;
    const MASK: u32 = 0xfffffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PUNPKLO_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for PUNPKLO_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x5304000;
    const MASK: u32 = 0xfffffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RADDHN_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e204000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RADDHN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e204000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHNB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RADDHNB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45206800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RADDHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45206c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RAX1_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RAX1_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4520f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RAX1_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RAX1_Vd_Vm_Vn {
    const OPCODE: u32 = 0xce608c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RBIT_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for RBIT_Rd_Rn {
    const OPCODE: u32 = 0x5ac00000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RBIT_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for RBIT_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x5278000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RBIT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for RBIT_Vd_Vn {
    const OPCODE: u32 = 0x2e605800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCAS_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCAS_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19200800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASA_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASA_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x19a00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASAL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASAL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x19e00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19600800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASP_Rs_ADDR_SIMPLE_Rt_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASP_Rs_ADDR_SIMPLE_Rt_PAIRREG {
    const OPCODE: u32 = 0x19200c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASPA_Rt_Rs_ADDR_SIMPLE_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASPA_Rt_Rs_ADDR_SIMPLE_PAIRREG {
    const OPCODE: u32 = 0x19a00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASPAL_Rt_PAIRREG_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASPAL_Rt_PAIRREG_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASPL_Rt_ADDR_SIMPLE_Rs_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCASPL_Rt_ADDR_SIMPLE_Rs_PAIRREG {
    const OPCODE: u32 = 0x19600c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38209000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRA_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRA_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38a09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRAL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRAL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x38e09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38609000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRP_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRP_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x19209000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRPA_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRPA_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x19a09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRPAL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRPAL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x19e09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRPL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWCLRPL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x19609000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCAS_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCAS_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x59200800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASA_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASA_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x59a00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASAL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASAL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x59e00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59600800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASP_PAIRREG_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASP_PAIRREG_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x59200c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASPA_PAIRREG_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASPA_PAIRREG_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x59a00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASPAL_ADDR_SIMPLE_Rs_Rt_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASPAL_ADDR_SIMPLE_Rs_Rt_PAIRREG {
    const OPCODE: u32 = 0x59e00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASPL_PAIRREG_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCASPL_PAIRREG_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x59600c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLR_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLR_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78209000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRA_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRA_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78a09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRAL_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRAL_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x78e09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78609000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRP_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRP_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x59209000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRPA_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRPA_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x59a09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRPAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59e09000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRPL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSCLRPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59609000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSET_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3820b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETAL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETAL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38e0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3860b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x1920b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETPA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSETPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x1960b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSET_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSET_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x7820b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETAL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETAL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78e0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x7860b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETP_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETP_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x5920b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETPAL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETPAL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x59e0b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETPL_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSETPL_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x5960b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWP_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWP_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x7820a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPAL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPAL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x78e0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x7860a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPP_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPP_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x5920a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPPA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPPAL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPPAL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x59e0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPPL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSSWPPL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x5960a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWP_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWP_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x3820a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPA_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPA_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38a0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3860a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPP_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPP_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x1920a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPPA_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPPA_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x19a0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPPAL_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPPAL_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x19e0a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPPL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RCWSWPPL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x1960a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDFFR_SVE_Pd_SVE_Pg4_5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for RDFFR_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x2518f000;
    const MASK: u32 = 0xfffffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDFFR_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(28)]
    pub _op_4: u32,
}
impl InsnOpcode for RDFFR_SVE_Pd {
    const OPCODE: u32 = 0x2519f000;
    const MASK: u32 = 0xfffffff0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDFFRS_SVE_Pd_SVE_Pg4_5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for RDFFRS_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x2558f000;
    const MASK: u32 = 0xfffffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDSVL_Rd_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl InsnOpcode for RDSVL_Rd_SVE_SIMM6 {
    const OPCODE: u32 = 0x4bf5800;
    const MASK: u32 = 0xfffff800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDVL_Rd_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl InsnOpcode for RDVL_Rd_SVE_SIMM6 {
    const OPCODE: u32 = 0x4bf5000;
    const MASK: u32 = 0xfffff800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RET_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for RET_Rn {
    const OPCODE: u32 = 0xd65f0000;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RETAA {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for RETAA {
    const OPCODE: u32 = 0xd65f0bff;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RETAB {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for RETAB {
    const OPCODE: u32 = 0xd65f0fff;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV_Rd_Rn {
    const OPCODE: u32 = 0x5ac00800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV_Rn_Rd {
    const OPCODE: u32 = 0xdac00c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5383800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_SVE_Pn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for REV_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = 0x5344000;
    const MASK: u32 = 0xff3ffe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV16_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV16_Rn_Rd {
    const OPCODE: u32 = 0x5ac00400;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV16_Vd_Vn {
    const OPCODE: u32 = 0xe201800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV32_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV32_Rn_Rd {
    const OPCODE: u32 = 0xdac00800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV32_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV32_Vn_Vd {
    const OPCODE: u32 = 0x2e200800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV64_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for REV64_Vn_Vd {
    const OPCODE: u32 = 0xe200800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVB_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for REVB_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x5248000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVD_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for REVD_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x52e8000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVH_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for REVH_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5a58000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVW_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for REVW_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x5e68000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RMIF_MASK_Rn_IMM_2 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub _op_10: u32,
    #[bits(6)]
    pub imm6_15: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RMIF_MASK_Rn_IMM_2 {
    const OPCODE: u32 = 0xba000400;
    const MASK: u32 = 0xffe07c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RORV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RORV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02c00;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RPRFM_Rm_SIMD_ADDR_SIMPLE_RPRFMOP {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(9)]
    pub _op_3: u32,
    #[bits(2)]
    pub imm2_12: u32,
    #[bits(1)]
    pub _op_14: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RPRFM_Rm_SIMD_ADDR_SIMPLE_RPRFMOP {
    const OPCODE: u32 = 0xf8a04818;
    const MASK: u32 = 0xffe04c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRN_Vd_IMM_VLSR_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for RSHRN_Vd_IMM_VLSR_Vn {
    const OPCODE: u32 = 0xf008c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for RSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x4f008c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for RSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    const OPCODE: u32 = 0x45201800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRNT_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for RSHRNT_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn {
    const OPCODE: u32 = 0x45201c00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHN_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RSUBHN_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHN2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RSUBHN2_Vn_Vd_Vm {
    const OPCODE: u32 = 0x6e206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHNB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RSUBHNB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45207800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for RSUBHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45207c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500f800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABA_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABA_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe207c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe205000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABAL2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABAL2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x4e205000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500c000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABALT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABALT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4500c400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x40c0000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABD_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe207400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDL_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABDL_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDL2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABDL2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x4e207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SABDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4404a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADALP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SADALP_Vd_Vn {
    const OPCODE: u32 = 0xe206800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe200000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDL2_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDL2_Vd_Vm_Vn {
    const OPCODE: u32 = 0x4e200000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDLB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45000000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLBT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDLBT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45008000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SADDLP_Vd_Vn {
    const OPCODE: u32 = 0xe202800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45000400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SADDLV_Fd_Vn {
    const OPCODE: u32 = 0xe303800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDV_SVE_Pg3_SVE_Zn_SVE_Vd {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SADDV_SVE_Pg3_SVE_Zn_SVE_Vd {
    const OPCODE: u32 = 0x4002000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDW_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDW_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe201000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDW2_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDW2_Vm_Vd_Vn {
    const OPCODE: u32 = 0x4e201000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45004000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDWT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SADDWT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45004400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SB {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for SB {
    const OPCODE: u32 = 0xd50330ff;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBC_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SBC_Rm_Rd_Rn {
    const OPCODE: u32 = 0x5a000000;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBCLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SBCLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4580d000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBCLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SBCLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4580d400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBCS_Rn_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SBCS_Rn_Rd_Rm {
    const OPCODE: u32 = 0x7a000000;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBFM_Rd_Rn_IMMS_IMMR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for SBFM_Rd_Rn_IMMS_IMMR {
    const OPCODE: u32 = 0x13000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120c400;
    const MASK: u32 = 0xff20fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120cc00;
    const MASK: u32 = 0xff20fc03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCLAMP_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SCLAMP_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4400c000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SME_Znx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_SME_Znx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc122e000;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc132e000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x65d0a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x6594a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6554a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x65d4a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zn_S_H_SVE_Zd_S_H_SVE_Pg3_P_M {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Zn_S_H_SVE_Zd_S_H_SVE_Pg3_P_M {
    const OPCODE: u32 = 0x6552a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x6556a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SCVTF_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_D {
    const OPCODE: u32 = 0x65d6a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Rn_Fd_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for SCVTF_Rn_Fd_FBITS {
    const OPCODE: u32 = 0x1e020000;
    const MASK: u32 = 0x7f3f0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Fd_Rn_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for SCVTF_Fd_Rn_FBITS {
    const OPCODE: u32 = 0x1ec20000;
    const MASK: u32 = 0x7fff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Vn_Vd {
    const OPCODE: u32 = 0xe21d800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Vd_Vn {
    const OPCODE: u32 = 0xe79d800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Rn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Rn_Fd {
    const OPCODE: u32 = 0x1e220000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Fd_Rn {
    const OPCODE: u32 = 0x1ee20000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Sn_Sd {
    const OPCODE: u32 = 0x5e21d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Sn_S_H_Sd_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Sn_S_H_Sd_S_H {
    const OPCODE: u32 = 0x5e79d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0xf00e400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf10e400;
    const MASK: u32 = 0xbf90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_IMM_VLSR_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_IMM_VLSR_Sn_Sd {
    const OPCODE: u32 = 0x5f00e400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_IMM_VLSR_S_H_Sn_S_H_Sd_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SCVTF_IMM_VLSR_S_H_Sn_S_H_Sd_S_H {
    const OPCODE: u32 = 0x5f10e400;
    const MASK: u32 = 0xff90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDIV_Rn_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDIV_Rn_Rd_Rm {
    const OPCODE: u32 = 0x1ac00c00;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDIV_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SDIV_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x4940000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDIVR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SDIVR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4960000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501000;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1501020;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 {
    const OPCODE: u32 = 0xc1509000;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1509020;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Znx2_SME_Zm_INDEX1_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_Znx2_SME_Zm_INDEX1_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1d00008;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Znx4_SME_Zm_INDEX1_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_Znx4_SME_Zm_INDEX1_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1d08008;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201400;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1301400;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Zmx2_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SME_Zmx2_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01400;
    const MASK: u32 = 0xffa19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11400;
    const MASK: u32 = 0xffa39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H {
    const OPCODE: u32 = 0xc1601408;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN {
    const OPCODE: u32 = 0xc1701408;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e01408;
    const MASK: u32 = 0xffe19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e11408;
    const MASK: u32 = 0xffe39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x44800000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4400c800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub imm2_19: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4480c800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe009400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_Em_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SDOT_Em_Vd_Vn {
    const OPCODE: u32 = 0xf00e000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SME_Zdnx2_SME_Znx2_SME_PNg3_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(4)]
    pub _op_13: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SEL_SME_Zdnx2_SME_Znx2_SME_PNg3_SME_Zmx2 {
    const OPCODE: u32 = 0xc1208000;
    const MASK: u32 = 0xff21e021;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SME_Zdnx4_SME_Znx4_SME_PNg3_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(5)]
    pub _op_13: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SEL_SME_Zdnx4_SME_Znx4_SME_PNg3_SME_Zmx4 {
    const OPCODE: u32 = 0xc1218000;
    const MASK: u32 = 0xff23e063;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SVE_Pg4_10_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SEL_SVE_Pg4_10_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x520c000;
    const MASK: u32 = 0xff20c000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SEL_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm {
    const OPCODE: u32 = 0x25004210;
    const MASK: u32 = 0xfff0c210;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETE_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETE_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19c08400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETEN_Rm_MOPS_WB_Rn_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETEN_Rm_MOPS_WB_Rn_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19c0a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETET_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETET_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19c09400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETETN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETETN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19c0b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETF16_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SETF16_Rn {
    const OPCODE: u32 = 0x3a00480d;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETF8_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SETF8_Rn {
    const OPCODE: u32 = 0x3a00080d;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETFFR {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for SETFFR {
    const OPCODE: u32 = 0x252c9000;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGE_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGE_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc08400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc0a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGET_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGET_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc09400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGETN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGETN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc0b400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGM_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGM_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc04400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc06400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGMT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGMT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc05400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc07400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGP_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGP_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    const OPCODE: u32 = 0x1dc02400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGPT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGPT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1dc01400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc03400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETM_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETM_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19c04400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETMN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETMN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19c06400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETMT_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETMT_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    const OPCODE: u32 = 0x19c05400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c07400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETP_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETP_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    const OPCODE: u32 = 0x19c00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm {
    const OPCODE: u32 = 0x19c02400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETPT_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETPT_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19c01400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETPTN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SETPTN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd {
    const OPCODE: u32 = 0x19c03400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1C_Vm_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA1C_Vm_Fd_Fn {
    const OPCODE: u32 = 0x5e000000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1H_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHA1H_Fd_Fn {
    const OPCODE: u32 = 0x5e280800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1M_Vm_Fn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA1M_Vm_Fn_Fd {
    const OPCODE: u32 = 0x5e002000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1P_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA1P_Fd_Fn_Vm {
    const OPCODE: u32 = 0x5e001000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1SU0_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA1SU0_Vd_Vn_Vm {
    const OPCODE: u32 = 0x5e003000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1SU1_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHA1SU1_Vd_Vn {
    const OPCODE: u32 = 0x5e281800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256H_Fd_Vm_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA256H_Fd_Vm_Fn {
    const OPCODE: u32 = 0x5e004000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256H2_Vm_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA256H2_Vm_Fd_Fn {
    const OPCODE: u32 = 0x5e005000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256SU0_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHA256SU0_Vn_Vd {
    const OPCODE: u32 = 0x5e282800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256SU1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA256SU1_Vd_Vn_Vm {
    const OPCODE: u32 = 0x5e006000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512H_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA512H_Fd_Fn_Vm {
    const OPCODE: u32 = 0xce608000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512H2_Fn_Fd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA512H2_Fn_Fd_Vm {
    const OPCODE: u32 = 0xce608400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512SU0_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHA512SU0_Vd_Vn {
    const OPCODE: u32 = 0xcec08000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512SU1_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHA512SU1_Vn_Vm_Vd {
    const OPCODE: u32 = 0xce608800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHADD_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SHADD_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x44108000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe200400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHL_IMM_VLSL_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHL_IMM_VLSL_Vn_Vd {
    const OPCODE: u32 = 0xf005400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHL_IMM_VLSL_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHL_IMM_VLSL_Sd_Sn {
    const OPCODE: u32 = 0x5f005400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHLL_Vn_Vd_SHLL_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHLL_Vn_Vd_SHLL_IMM {
    const OPCODE: u32 = 0x2e213800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHLL2_Vd_Vn_SHLL_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHLL2_Vd_Vn_SHLL_IMM {
    const OPCODE: u32 = 0x6e213800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf008400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRN2_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SHRN2_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0x4f008400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45201000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SHRNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45201400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHSUB_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SHSUB_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x44128000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHSUB_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SHSUB_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe202400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHSUBR_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SHSUBR_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x44168000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SLI_SVE_SHLIMM_UNPRED_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SLI_SVE_SHLIMM_UNPRED_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4500f400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SLI_IMM_VLSL_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SLI_IMM_VLSL_Vd_Vn {
    const OPCODE: u32 = 0x2f005400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SLI_Sd_Sn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SLI_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = 0x7f005400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3PARTW1_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3PARTW1_Vm_Vd_Vn {
    const OPCODE: u32 = 0xce60c000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3PARTW2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3PARTW2_Vn_Vd_Vm {
    const OPCODE: u32 = 0xce60c400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3SS1_Vd_Vn_Va_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3SS1_Vd_Vn_Va_Vm {
    const OPCODE: u32 = 0xce400000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT1A_Vn_Vd_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3TT1A_Vn_Vd_Em {
    const OPCODE: u32 = 0xce408000;
    const MASK: u32 = 0xffe0cc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT1B_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3TT1B_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408400;
    const MASK: u32 = 0xffe0cc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT2A_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3TT2A_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408800;
    const MASK: u32 = 0xffe0cc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT2B_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM3TT2B_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408c00;
    const MASK: u32 = 0xffe0cc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4E_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SM4E_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4523e000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4E_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SM4E_Vd_Vn {
    const OPCODE: u32 = 0xcec08400;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4520f000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4EKEY_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SM4EKEY_Vm_Vn_Vd {
    const OPCODE: u32 = 0xce60c800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMADDL_Rn_Ra_Rd_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMADDL_Rn_Ra_Rd_Rm {
    const OPCODE: u32 = 0x9b200000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMAX_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a000;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMAX_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b000;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMAX_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a800;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMAX_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120b800;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_CSSC_SIMM8_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for SMAX_CSSC_SIMM8_Rd_Rn {
    const OPCODE: u32 = 0x11c00000;
    const MASK: u32 = 0x7ffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMAX_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06000;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4080000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SVE_Zd_SVE_SIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMAX_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = 0x2528c000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMAX_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe206400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXP_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMAXP_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4414a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXP_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMAXP_Vm_Vn_Vd {
    const OPCODE: u32 = 0xe20a400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40c2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXV_SVE_Pg3_SVE_Zn_SVE_Vd {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMAXV_SVE_Pg3_SVE_Zn_SVE_Vd {
    const OPCODE: u32 = 0x4082000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXV_Vn_Fd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SMAXV_Vn_Fd {
    const OPCODE: u32 = 0xe30a800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMC_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMC_EXCEPTION {
    const OPCODE: u32 = 0xd4000003;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMIN_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a020;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zmx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMIN_SME_Zmx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120b020;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMIN_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a820;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMIN_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120b820;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_CSSC_SIMM8_Rn_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for SMIN_CSSC_SIMM8_Rn_Rd {
    const OPCODE: u32 = 0x11c80000;
    const MASK: u32 = 0x7ffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMIN_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06800;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMIN_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x40a0000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SVE_Zd_SVE_SIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMIN_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = 0x252ac000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMIN_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe206c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINP_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMINP_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4416a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINP_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMINP_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe20ac00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINQV_SVE_Zn_Vd_SVE_Pg3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMINQV_SVE_Zn_Vd_SVE_Pg3 {
    const OPCODE: u32 = 0x40e2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINV_SVE_Vd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMINV_SVE_Vd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x40a2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SMINV_Fd_Vn {
    const OPCODE: u32 = 0xe31a800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLAL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn {
    const OPCODE: u32 = 0xc1c01000;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 {
    const OPCODE: u32 = 0xc1d01000;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1d09000;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Zm_SME_ZA_array_off2x2_SVE_ZnxN {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLAL_SME_Zm_SME_ZA_array_off2x2_SVE_ZnxN {
    const OPCODE: u32 = 0xc1600800;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Zm_S_H_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLAL_SME_Zm_S_H_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H {
    const OPCODE: u32 = 0xc1700800;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLAL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 {
    const OPCODE: u32 = 0xc1e00800;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10800;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1600c00;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe208000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf002000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLAL2_Vn_Vd_Vm {
    const OPCODE: u32 = 0x4e208000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL2_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLAL2_Vn_Em16_Vd {
    const OPCODE: u32 = 0x4f002000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44a08000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e08000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44004000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 {
    const OPCODE: u32 = 0xc1000000;
    const MASK: u32 = 0xfff0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 {
    const OPCODE: u32 = 0xc1100000;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX4_1_SME_Znx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX4_1_SME_Znx4 {
    const OPCODE: u32 = 0xc1108000;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn {
    const OPCODE: u32 = 0xc1800000;
    const MASK: u32 = 0xfff0101c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1900000;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 {
    const OPCODE: u32 = 0xc1908000;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200000;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm {
    const OPCODE: u32 = 0xc1300000;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_Zmx2_SME_Znx2_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALL_SME_Zmx2_SME_Znx2_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1a00000;
    const MASK: u32 = 0xffa19c3e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_Zmx4_SME_Znx4_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALL_SME_Zmx4_SME_Znx4_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1a10000;
    const MASK: u32 = 0xffa39c7e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_Zm_SVE_Zn_SME_ZA_array_off2x4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLALL_SME_Zm_SVE_Zn_SME_ZA_array_off2x4 {
    const OPCODE: u32 = 0xc1200400;
    const MASK: u32 = 0xffb09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a08400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e08400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44004400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01008;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d01008;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d09008;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1600808;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm {
    const OPCODE: u32 = 0xc1700808;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e00808;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 {
    const OPCODE: u32 = 0xc1e10808;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1600c08;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20a000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSL_Em16_Vd_Vn {
    const OPCODE: u32 = 0xf006000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20a000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL2_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSL2_Em16_Vd_Vn {
    const OPCODE: u32 = 0x4f006000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x44005000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a0a000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e0a000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 {
    const OPCODE: u32 = 0xc1000008;
    const MASK: u32 = 0xfff0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 {
    const OPCODE: u32 = 0xc1100008;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 {
    const OPCODE: u32 = 0xc1108008;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn {
    const OPCODE: u32 = 0xc1800008;
    const MASK: u32 = 0xfff0101c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1900008;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1908008;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200008;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Zm_SVE_ZnxN_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SME_Zm_SVE_ZnxN_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1300008;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_Znx2_SME_ZA_array_off1x4_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLL_SME_Znx2_SME_ZA_array_off1x4_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00008;
    const MASK: u32 = 0xffa19c3e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Zmx4_SME_Znx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Zmx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1a10008;
    const MASK: u32 = 0xffa39c7e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SMLSLL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm {
    const OPCODE: u32 = 0xc1200408;
    const MASK: u32 = 0xffb09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x44005400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0a400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0a400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMMLA_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMMLA_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x45009800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMMLA_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMMLA_Vn_Vm_Vd {
    const OPCODE: u32 = 0x4e80a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zm_16_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0xa0800000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0800008;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_3b {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_3b {
    const OPCODE: u32 = 0xa0c00000;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPS_SVE_Pg3_SVE_Zn_SME_Pm_SVE_Zm_16_SME_ZAda_2b {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMOPS_SVE_Pg3_SVE_Zn_SME_Pm_SVE_Zm_16_SME_ZAda_2b {
    const OPCODE: u32 = 0xa0800010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_2b_SVE_Pg3_SME_Pm {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_2b_SVE_Pg3_SME_Pm {
    const OPCODE: u32 = 0xa0800018;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPS_SVE_Zm_16_SME_Pm_SME_ZAda_3b_SVE_Pg3_SVE_Zn {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMOPS_SVE_Zm_16_SME_Pm_SME_ZAda_3b_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0xa0c00010;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOV_Rd_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SMOV_Rd_En {
    const OPCODE: u32 = 0xe002c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTART {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for SMSTART {
    const OPCODE: u32 = 0xd503477f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTART_SME_SM_ZA {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl InsnOpcode for SMSTART_SME_SM_ZA {
    const OPCODE: u32 = 0xd503417f;
    const MASK: u32 = 0xfffff1ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTOP {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for SMSTOP {
    const OPCODE: u32 = 0xd503467f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTOP_SME_SM_ZA {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl InsnOpcode for SMSTOP_SME_SM_ZA {
    const OPCODE: u32 = 0xd503407f;
    const MASK: u32 = 0xfffff1ff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSUBL_Rn_Rd_Ra_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMSUBL_Rn_Rd_Ra_Rm {
    const OPCODE: u32 = 0x9b208000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULH_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULH_Rm_Rd_Rn {
    const OPCODE: u32 = 0x9b407c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULH_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SMULH_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4120000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULH_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULH_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x4206800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULL_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe20c000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULL_Em16_Vd_Vn {
    const OPCODE: u32 = 0xf00a000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20c000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f00a000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44a0c000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0c000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45007000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x44a0c400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e0c400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SMULLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45007400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SPLICE_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SPLICE_SVE_Zm_5_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x52c8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SPLICE_SVE_Zd_SVE_ZnxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SPLICE_SVE_Zd_SVE_ZnxN_SVE_Pg3 {
    const OPCODE: u32 = 0x52d8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQABS_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQABS_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4408a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQABS_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQABS_Vn_Vd {
    const OPCODE: u32 = 0xe207800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQABS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQABS_Sd_Sn {
    const OPCODE: u32 = 0x5e207800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQADD_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4201000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQADD_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x44188000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_SVE_AIMM_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for SQADD_SVE_AIMM_SVE_Zd {
    const OPCODE: u32 = 0x2524c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQADD_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe200c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQADD_Sn_Sm_Sd {
    const OPCODE: u32 = 0x5e200c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCADD_SVE_Zn_SVE_Zd_SVE_IMM_ROT3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub sve_rot3: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl InsnOpcode for SQCADD_SVE_Zn_SVE_Zd_SVE_IMM_ROT3 {
    const OPCODE: u32 = 0x4501d800;
    const MASK: u32 = 0xff3ff800;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc123e000;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVT_SME_Znx4_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVT_SME_Znx4_SVE_Zd {
    const OPCODE: u32 = 0xc133e000;
    const MASK: u32 = 0xff7ffc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTN_SME_Znx4_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVTN_SME_Znx4_SVE_Zd {
    const OPCODE: u32 = 0xc133e040;
    const MASK: u32 = 0xff7ffc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTN_SME_Znx2_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVTN_SME_Znx2_SVE_Zd {
    const OPCODE: u32 = 0x45314000;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTU_SME_Znx2_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVTU_SME_Znx2_SVE_Zd {
    const OPCODE: u32 = 0xc163e000;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTU_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVTU_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc173e000;
    const MASK: u32 = 0xff7ffc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTUN_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVTUN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc173e040;
    const MASK: u32 = 0xff7ffc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTUN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQCVTUN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0x45315000;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECB_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECB_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x430f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0c800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECD_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECD_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECH_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECH_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x460c800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECH_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECH_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x470f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECP_SVE_Pg4_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for SQDECP_SVE_Pg4_5_SVE_Zd {
    const OPCODE: u32 = 0x252a8000;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for SQDECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252a8800;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECP_SVE_Pg4_5_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for SQDECP_SVE_Pg4_5_Rd {
    const OPCODE: u32 = 0x252a8c00;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0c800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECW_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQDECW_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0f800;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLAL_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe209000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Sm_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLAL_Sm_Sn_Sd {
    const OPCODE: u32 = 0x5e209000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf003000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLAL_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f003000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLAL2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x4e209000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL2_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLAL2_Vn_Em16_Vd {
    const OPCODE: u32 = 0x4f003000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44a02000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e02000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44006000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALBT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALBT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x44000800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a02400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e02400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44006400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20b000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSL_Sn_Sm_Sd {
    const OPCODE: u32 = 0x5e20b000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Em16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSL_Em16_Vd_Vn {
    const OPCODE: u32 = 0xf007000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Em16_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSL_Em16_Sn_Sd {
    const OPCODE: u32 = 0x5f007000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSL2_Vn_Vd_Vm {
    const OPCODE: u32 = 0x4e20b000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL2_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSL2_Vn_Em16_Vd {
    const OPCODE: u32 = 0x4f007000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44a03000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e03000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x44006800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x44000c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a03400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44e03400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x44006c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SQDMULH_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a400;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zmx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_SME_Zmx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120b400;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zm_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SQDMULH_SME_Zm_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120ac00;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120bc00;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x4420f000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a0f000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e0f000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe20b400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_Sd_Sm_Sn {
    const OPCODE: u32 = 0x5e20b400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_Vn_Em16_Vd {
    const OPCODE: u32 = 0xf00c000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Sn_Sd_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULH_Sn_Sd_Em16 {
    const OPCODE: u32 = 0x5f00c000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULL_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe20d000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e20d000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Vn_Vd_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULL_Vn_Vd_Em16 {
    const OPCODE: u32 = 0xf00b000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Sd_Em16_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULL_Sd_Em16_Sn {
    const OPCODE: u32 = 0x5f00b000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULL2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x4e20d000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f00b000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a0e000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLB_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULLB_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44e0e000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULLB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45006000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0e400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e0e400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCB_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCB_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x420f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCD_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCD_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x4e0c000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCD_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCD_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4f0f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460c000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCH_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCH_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCP_SVE_Pg4_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for SQINCP_SVE_Pg4_5_SVE_Zd {
    const OPCODE: u32 = 0x25288000;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCP_SVE_Pg4_5_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for SQINCP_SVE_Pg4_5_Rd {
    const OPCODE: u32 = 0x25288800;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCP_SVE_Pg4_5_S_B_Rd_X {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for SQINCP_SVE_Pg4_5_S_B_Rd_X {
    const OPCODE: u32 = 0x25288c00;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0c000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCW_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCW_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4a0f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCW_SVE_PATTERN_SCALED_Rd_X {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQINCW_SVE_PATTERN_SCALED_Rd_X {
    const OPCODE: u32 = 0x4b0f000;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQNEG_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQNEG_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x4409a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQNEG_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQNEG_Vn_Vd {
    const OPCODE: u32 = 0x2e207800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQNEG_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQNEG_Sd_Sn {
    const OPCODE: u32 = 0x7e207800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDCMLAH_SVE_Zm_16_SVE_Zd_SVE_IMM_ROT2_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDCMLAH_SVE_Zm_16_SVE_Zd_SVE_IMM_ROT2_SVE_Zn {
    const OPCODE: u32 = 0x44003000;
    const MASK: u32 = 0xff20f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_IMM_ROT2_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_IMM_ROT2_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a07000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDCMLAH_SVE_Zm4_INDEX_SVE_IMM_ROT2_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDCMLAH_SVE_Zm4_INDEX_SVE_IMM_ROT2_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44e07000;
    const MASK: u32 = 0xffe0f000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44201000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e01000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44007000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e008400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Sm_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_Sm_Sn_Sd {
    const OPCODE: u32 = 0x7e008400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f00d000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLAH_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x7f00d000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zm3_22_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRDMLSH_SVE_Zm3_22_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44201400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a01400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e01400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x44007400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e008c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_Sd_Sm_Sn {
    const OPCODE: u32 = 0x7e008c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f00f000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Em16_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMLSH_Em16_Sn_Sd {
    const OPCODE: u32 = 0x7f00f000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4207400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x4420f400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a0f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e0f400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e20b400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Sm_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_Sm_Sd_Sn {
    const OPCODE: u32 = 0x7e20b400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf00d000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Sn_Em16_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRDMULH_Sn_Em16_Sd {
    const OPCODE: u32 = 0x5f00d000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x440a8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe205c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHL_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQRSHL_Sd_Sm_Sn {
    const OPCODE: u32 = 0x5e205c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHLR_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQRSHLR_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x440e8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120d800;
    const MASK: u32 = 0xff20fc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0xc1e0d400;
    const MASK: u32 = 0xfff0fc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_SME_Znx4_SME_SHRIMM5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SQRSHRN_SME_Znx4_SME_SHRIMM5_SVE_Zd {
    const OPCODE: u32 = 0xc120dc00;
    const MASK: u32 = 0xff20fc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd {
    const OPCODE: u32 = 0x45b02800;
    const MASK: u32 = 0xfff0fc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQRSHRN_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0xf009c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_Sn_IMM_VLSR_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQRSHRN_Sn_IMM_VLSR_Sd {
    const OPCODE: u32 = 0x5f009c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQRSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x4f009c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45202800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45202c00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRU_SME_SHRIMM5_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SQRSHRU_SME_SHRIMM5_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc120d840;
    const MASK: u32 = 0xff20fc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRU_SME_SHRIMM4_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SQRSHRU_SME_SHRIMM4_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc1f0d400;
    const MASK: u32 = 0xfff0fc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120dc40;
    const MASK: u32 = 0xff20fc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_SME_Znx2_SVE_Zd_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SQRSHRUN_SME_Znx2_SVE_Zd_SME_SHRIMM4 {
    const OPCODE: u32 = 0x45b00800;
    const MASK: u32 = 0xfff0fc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_IMM_VLSR_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQRSHRUN_IMM_VLSR_Vn_Vd {
    const OPCODE: u32 = 0x2f008c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_Sn_Sd_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQRSHRUN_Sn_Sd_IMM_VLSR {
    const OPCODE: u32 = 0x7f008c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN2_IMM_VLSR_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQRSHRUN2_IMM_VLSR_Vn_Vd {
    const OPCODE: u32 = 0x6f008c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45200800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45200c00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQSHL_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x44088000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_SVE_Zd_SVE_Pg3_SVE_SHLIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SQSHL_SVE_Zd_SVE_Pg3_SVE_SHLIMM_PRED {
    const OPCODE: u32 = 0x4068000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe204c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQSHL_Sn_Sm_Sd {
    const OPCODE: u32 = 0x5e204c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Vd_IMM_VLSL_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHL_Vd_IMM_VLSL_Vn {
    const OPCODE: u32 = 0xf007400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_IMM_VLSL_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHL_IMM_VLSL_Sn_Sd {
    const OPCODE: u32 = 0x5f007400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLR_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQSHLR_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x440c8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLU_SVE_Zd_SVE_SHLIMM_PRED_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SQSHLU_SVE_Zd_SVE_SHLIMM_PRED_SVE_Pg3 {
    const OPCODE: u32 = 0x40f8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLU_IMM_VLSL_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHLU_IMM_VLSL_Vd_Vn {
    const OPCODE: u32 = 0x2f006400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLU_Sn_Sd_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHLU_Sn_Sd_IMM_VLSL {
    const OPCODE: u32 = 0x7f006400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRN_Vn_Vd_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHRN_Vn_Vd_IMM_VLSR {
    const OPCODE: u32 = 0xf009400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRN_IMM_VLSR_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHRN_IMM_VLSR_Sd_Sn {
    const OPCODE: u32 = 0x5f009400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRN2_Vn_Vd_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHRN2_Vn_Vd_IMM_VLSR {
    const OPCODE: u32 = 0x4f009400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45202000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRNT_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQSHRNT_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    const OPCODE: u32 = 0x45202400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUN_Vn_IMM_VLSR_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHRUN_Vn_IMM_VLSR_Vd {
    const OPCODE: u32 = 0x2f008400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHRUN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f008400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUN2_Vd_IMM_VLSR_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQSHRUN2_Vd_IMM_VLSR_Vn {
    const OPCODE: u32 = 0x6f008400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUNB_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQSHRUNB_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn {
    const OPCODE: u32 = 0x45200000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SQSHRUNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45200400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQSUB_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4201800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQSUB_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x441a8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for SQSUB_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2526c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQSUB_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe202c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SQSUB_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e202c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUBR_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SQSUBR_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x441e8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTN_Vd_Vn {
    const OPCODE: u32 = 0xe214800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTN_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTN_Sn_Sd {
    const OPCODE: u32 = 0x5e214800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTN2_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTN2_Vn_Vd {
    const OPCODE: u32 = 0x4e214800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTNB_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTNB_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45204000;
    const MASK: u32 = 0xffa7fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTNT_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45204400;
    const MASK: u32 = 0xffa7fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTUN_Vd_Vn {
    const OPCODE: u32 = 0x2e212800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUN_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTUN_Sd_Sn {
    const OPCODE: u32 = 0x7e212800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUN2_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTUN2_Vn_Vd {
    const OPCODE: u32 = 0x6e212800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUNB_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTUNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45205000;
    const MASK: u32 = 0xffa7fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUNT_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SQXTUNT_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45205400;
    const MASK: u32 = 0xffa7fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRHADD_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SRHADD_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x44148000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRHADD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SRHADD_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe201400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRI_SVE_SHRIMM_UNPRED_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SRI_SVE_SHRIMM_UNPRED_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4500f000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRI_Vn_IMM_VLSR_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SRI_Vn_IMM_VLSR_Vd {
    const OPCODE: u32 = 0x2f004400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRI_Sd_IMM_VLSR_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SRI_Sd_IMM_VLSR_Sn {
    const OPCODE: u32 = 0x7f004400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SRSHL_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a220;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SRSHL_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b220;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SRSHL_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120aa20;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SRSHL_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120ba20;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SRSHL_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44028000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SRSHL_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe205400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee05400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x44068000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SRSHR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 {
    const OPCODE: u32 = 0x40c8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHR_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SRSHR_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0xf002400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHR_IMM_VLSR_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SRSHR_IMM_VLSR_Sn_Sd {
    const OPCODE: u32 = 0x5f002400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SRSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500e800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSRA_Vn_IMM_VLSR_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SRSRA_Vn_IMM_VLSR_Vd {
    const OPCODE: u32 = 0xf003400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSRA_Sn_IMM_VLSR_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SRSRA_Sn_IMM_VLSR_Sd {
    const OPCODE: u32 = 0x5f003400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSHL_Vn_Vm_Vd {
    const OPCODE: u32 = 0xe204400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHL_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSHL_Sn_Sm_Sd {
    const OPCODE: u32 = 0x5ee04400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLL_Vd_IMM_VLSL_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SSHLL_Vd_IMM_VLSL_Vn {
    const OPCODE: u32 = 0xf00a400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLL2_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SSHLL2_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x4f00a400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLLB_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SSHLLB_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn {
    const OPCODE: u32 = 0x4500a000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = 0x4500a400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHR_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SSHR_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0xf000400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHR_IMM_VLSR_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SSHR_IMM_VLSR_Sd_Sn {
    const OPCODE: u32 = 0x5f000400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSRA_SVE_Zn_SVE_SHRIMM_UNPRED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SSRA_SVE_Zn_SVE_SHRIMM_UNPRED_SVE_Zd {
    const OPCODE: u32 = 0x4500e000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSRA_Vn_Vd_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SSRA_Vn_Vd_IMM_VLSR {
    const OPCODE: u32 = 0xf001400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f001400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBL_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBL_Vd_Vm_Vn {
    const OPCODE: u32 = 0xe202000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBL2_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBL2_Vm_Vd_Vn {
    const OPCODE: u32 = 0x4e202000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBLB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45001000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45008800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBLT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45001400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLTB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBLTB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45008c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBW_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBW_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe203000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBW2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBW2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e203000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBWB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBWB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x45005000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBWT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SSUBWT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45005400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_SIMD_ADDR_SIMPLE_LVt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST1_SIMD_ADDR_SIMPLE_LVt {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_SIMD_ADDR_SIMPLE_LEt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST1_SIMD_ADDR_SIMPLE_LEt {
    const OPCODE: u32 = 0xd000000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST1_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST1_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xd800000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0200000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RR_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RR_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa0208000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RR_SVE_Pg3_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RR_SVE_Pg3_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe0200000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0200000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 {
    const OPCODE: u32 = 0xa0600000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa0608000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1200000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 {
    const OPCODE: u32 = 0xa1208000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1600000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa1608000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 {
    const OPCODE: u32 = 0xe4004000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4404000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe4008000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4408000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe400a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0xe440a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe400e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe440e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4204000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_D_SVE_ADDR_RX_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_D_SVE_ADDR_RX_SVE_Pg3 {
    const OPCODE: u32 = 0xe4604000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN {
    const OPCODE: u32 = 0xe460a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe420e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe460e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa0206000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa020e000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0606000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1D_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060e000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1D_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xe0e00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe0e00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1206000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa120e000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1D_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1606000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa160e000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5e04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_Pg3_SVE_ADDR_RZ_XTW_14_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_Pg3_SVE_ADDR_RZ_XTW_14_SVE_ZtxN {
    const OPCODE: u32 = 0xe5808000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe580a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_Pg3_SVE_ADDR_ZI_U5x8_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1D_SVE_Pg3_SVE_ADDR_ZI_U5x8_SVE_ZtxN {
    const OPCODE: u32 = 0xe5c0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ADDR_RZ_XTW3_14_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_ADDR_RZ_XTW3_14_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe5a08000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_ADDR_RZ_LSL3_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_ADDR_RZ_LSL3_SVE_Pg3 {
    const OPCODE: u32 = 0xe5a0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xe5e0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 {
    const OPCODE: u32 = 0xa0202000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa020a000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0602000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa060a000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe0600000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0600000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 {
    const OPCODE: u32 = 0xa1202000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa120a000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1602000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160a000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4c04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe4808000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4c08000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xe480a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xe4c0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xe4c0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4a04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ZtxN_S_D_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ZtxN_S_D_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4e04000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ADDR_RZ_XTW1_14_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ADDR_RZ_XTW1_14_SVE_ZtxN {
    const OPCODE: u32 = 0xe4a08000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW1_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW1_14 {
    const OPCODE: u32 = 0xe4e08000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xe4a0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xe4e0a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4a0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xe4e0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe1e00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe1e00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1Q_SVE_ADDR_ZX_SVE_Pg3_SVE_Zt {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1Q_SVE_ADDR_ZX_SVE_Pg3_SVE_Zt {
    const OPCODE: u32 = 0xe4202000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0204000;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 {
    const OPCODE: u32 = 0xa020c000;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_Pg3_SVE_ADDR_RR_LSL2_SME_ZA_HV_idx_ldstr {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1W_SVE_Pg3_SVE_ADDR_RR_LSL2_SME_ZA_HV_idx_ldstr {
    const OPCODE: u32 = 0xe0a00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0a00000;
    const MASK: u32 = 0xffe00010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa0604000;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060c000;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1204000;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa120c000;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1604000;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RI_S4x4xVL_SME_PNg3_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RI_S4x4xVL_SME_PNg3_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa160c000;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5404000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RX_LSL2_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RX_LSL2_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe5604000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe5008000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe5408000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe500a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xe540a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe540e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe5208000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN_S_S {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN_S_S {
    const OPCODE: u32 = 0xe5608000;
    const MASK: u32 = 0xffe0a000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST1W_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN {
    const OPCODE: u32 = 0xe520a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xe560a000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe560e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST2_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST2_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd200000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST2_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST2_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xda00000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4206000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe430e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2D_SVE_ADDR_RX_LSL3_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2D_SVE_ADDR_RX_LSL3_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe5a06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2D_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST2D_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN {
    const OPCODE: u32 = 0xe5b0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2G_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2G_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9a00800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2G_ADDR_SIMM13_Rt_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2G_ADDR_SIMM13_Rt_SP {
    const OPCODE: u32 = 0xd9a00400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4a06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2H_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST2H_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4b0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe4400000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe4600000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2W_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST2W_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN {
    const OPCODE: u32 = 0xe5206000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe530e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_SIMD_ADDR_SIMPLE_LVt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST3_SIMD_ADDR_SIMPLE_LVt {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST3_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd002000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_SIMD_ADDR_POST_LVt {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST3_SIMD_ADDR_POST_LVt {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST3_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xd802000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4406000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST3B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xe450e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5c06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xe5d0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST3H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4c06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3H_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST3H_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4d0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3Q_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SME_Zt3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST3Q_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SME_Zt3 {
    const OPCODE: u32 = 0xe4800000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3Q_SVE_ADDR_RR_LSL4_SVE_Pg3_SME_Zt3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST3Q_SVE_ADDR_RR_LSL4_SVE_Pg3_SME_Zt3 {
    const OPCODE: u32 = 0xe4a00000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5406000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe550e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST4_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST4_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd202000;
    const MASK: u32 = 0xbfff2000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST4_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ST4_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xda02000;
    const MASK: u32 = 0xbfe02000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST4B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN {
    const OPCODE: u32 = 0xe4606000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe470e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4D_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST4D_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe5e06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe5f0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4H_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST4H_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe4e06000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe4f0e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4Q_SME_Zt4_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST4Q_SME_Zt4_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 {
    const OPCODE: u32 = 0xe4c00000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST4Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt4 {
    const OPCODE: u32 = 0xe4e00000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5606000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe570e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST64B_Rt_LS64_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for ST64B_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf83f9000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST64BV_Rs_Rt_LS64_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST64BV_Rs_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf820b000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST64BV0_ADDR_SIMPLE_Rs_Rt_LS64 {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ST64BV0_ADDR_SIMPLE_Rs_Rt_LS64 {
    const OPCODE: u32 = 0xf820a000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STG_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STG_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9200800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = 0xd9200400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STGM_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STGM_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0xd9a00000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STGP_Rt2_Rt_ADDR_SIMM11 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STGP_Rt2_Rt_ADDR_SIMM11 {
    const OPCODE: u32 = 0x69000000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STGP_Rt_Rt2_ADDR_SIMM11 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STGP_Rt_Rt2_ADDR_SIMM11 {
    const OPCODE: u32 = 0x68800000;
    const MASK: u32 = 0xfec00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STILP_Rs_Rt_RCPC3_ADDR_OPT_PREIND_WB {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(4)]
    pub opc2: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STILP_Rs_Rt_RCPC3_ADDR_OPT_PREIND_WB {
    const OPCODE: u32 = 0x19000800;
    const MASK: u32 = 0x3fe0ec00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STL1_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for STL1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd018400;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLLR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLLR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x889f7c00;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLLRB_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLLRB_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x89f7c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLLRH_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLLRH_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x489f7c00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x889ffc00;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLR_RCPC3_ADDR_PREIND_WB_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLR_RCPC3_ADDR_PREIND_WB_Rt {
    const OPCODE: u32 = 0x19800800;
    const MASK: u32 = 0x3ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLRB_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLRB_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x89ffc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLRH_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STLRH_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x489ffc00;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLUR_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLUR_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x99000000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLUR_ADDR_OFFSET_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLUR_ADDR_OFFSET_Rt {
    const OPCODE: u32 = 0xd9000000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLUR_RCPC3_ADDR_OFFSET_Ft {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(2)]
    pub _op_10: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLUR_RCPC3_ADDR_OFFSET_Ft {
    const OPCODE: u32 = 0x1d000800;
    const MASK: u32 = 0x3f600c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLURB_ADDR_OFFSET_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLURB_ADDR_OFFSET_Rt {
    const OPCODE: u32 = 0x19000000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLURH_ADDR_OFFSET_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLURH_ADDR_OFFSET_Rt {
    const OPCODE: u32 = 0x59000000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXP_Rt_ADDR_SIMPLE_Rt2_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLXP_Rt_ADDR_SIMPLE_Rt2_Rs {
    const OPCODE: u32 = 0x88208000;
    const MASK: u32 = 0xbfe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXR_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLXR_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x8800fc00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXRB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLXRB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x800fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXRH_Rs_ADDR_SIMPLE_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STLXRH_Rs_ADDR_SIMPLE_Rt {
    const OPCODE: u32 = 0x4800fc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNP_ADDR_SIMM7_Rt2_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STNP_ADDR_SIMM7_Rt2_Rt {
    const OPCODE: u32 = 0x28000000;
    const MASK: u32 = 0x7fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNP_ADDR_SIMM7_Ft_Ft2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STNP_ADDR_SIMM7_Ft_Ft2 {
    const OPCODE: u32 = 0x2c000000;
    const MASK: u32 = 0x3fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0200001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 {
    const OPCODE: u32 = 0xa0208001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1B_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 {
    const OPCODE: u32 = 0xa0600001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa0608001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ADDR_RR_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SVE_ADDR_RR_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1200008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ADDR_RR_SME_PNg3_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SVE_ADDR_RR_SME_PNg3_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa1208008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1600008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa1608008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    const OPCODE: u32 = 0xe4002000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe4402000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 {
    const OPCODE: u32 = 0xe4006000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe410e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0206001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 {
    const OPCODE: u32 = 0xa020e001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0606001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060e001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1206008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa120e008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1606008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa160e008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1D_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe5802000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN {
    const OPCODE: u32 = 0xe5806000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe590e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa0202001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa020a001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 {
    const OPCODE: u32 = 0xa0602001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 {
    const OPCODE: u32 = 0xa060a001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ADDR_RR_LSL1_SME_PNg3_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SVE_ADDR_RR_LSL1_SME_PNg3_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1202008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa120a008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1602008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa160a008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 {
    const OPCODE: u32 = 0xe4802000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN {
    const OPCODE: u32 = 0xe4c02000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 {
    const OPCODE: u32 = 0xe4806000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe490e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 {
    const OPCODE: u32 = 0xa0204001;
    const MASK: u32 = 0xffe0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa020c001;
    const MASK: u32 = 0xffe0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1W_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 {
    const OPCODE: u32 = 0xa0604001;
    const MASK: u32 = 0xfff0e001;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060c001;
    const MASK: u32 = 0xfff0e003;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa1204008;
    const MASK: u32 = 0xffe0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Ztx4_STRIDED {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Ztx4_STRIDED {
    const OPCODE: u32 = 0xa120c008;
    const MASK: u32 = 0xffe0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED {
    const OPCODE: u32 = 0xa1604008;
    const MASK: u32 = 0xfff0e008;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 {
    const OPCODE: u32 = 0xa160c008;
    const MASK: u32 = 0xfff0e00c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe5002000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe5402000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5006000;
    const MASK: u32 = 0xffe0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for STNT1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN {
    const OPCODE: u32 = 0xe510e000;
    const MASK: u32 = 0xfff0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Rt_ADDR_SIMM7_Rt2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STP_Rt_ADDR_SIMM7_Rt2 {
    const OPCODE: u32 = 0x29000000;
    const MASK: u32 = 0x7fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Rt2_Rt_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STP_Rt2_Rt_ADDR_SIMM7 {
    const OPCODE: u32 = 0x28800000;
    const MASK: u32 = 0x7ec00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Ft_Ft2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x2d000000;
    const MASK: u32 = 0x3fc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl InsnOpcode for STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    const OPCODE: u32 = 0x2c800000;
    const MASK: u32 = 0x3ec00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for STR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 {
    const OPCODE: u32 = 0xe1200000;
    const MASK: u32 = 0xffff9c10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SIMD_ADDR_SIMPLE_SME_ZT0 {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for STR_SIMD_ADDR_SIMPLE_SME_ZT0 {
    const OPCODE: u32 = 0xe13f8000;
    const MASK: u32 = 0xfffffc1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_ADDR_REGOFF_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STR_ADDR_REGOFF_Rt {
    const OPCODE: u32 = 0xb8200800;
    const MASK: u32 = 0xbfe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STR_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0xb8000400;
    const MASK: u32 = 0xbfe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_ADDR_UIMM12_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for STR_ADDR_UIMM12_Rt {
    const OPCODE: u32 = 0xb9000000;
    const MASK: u32 = 0xbfc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for STR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0xe5800000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SVE_ADDR_RI_S9xVL_SVE_PNt {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for STR_SVE_ADDR_RI_S9xVL_SVE_PNt {
    const OPCODE: u32 = 0xe5800000;
    const MASK: u32 = 0xffc0e010;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for STR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0xe5804000;
    const MASK: u32 = 0xffc0e000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_ADDR_REGOFF_Ft {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STR_ADDR_REGOFF_Ft {
    const OPCODE: u32 = 0x3c200800;
    const MASK: u32 = 0x3f600c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_ADDR_SIMM9_Ft {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STR_ADDR_SIMM9_Ft {
    const OPCODE: u32 = 0x3c000400;
    const MASK: u32 = 0x3f600400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Ft_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for STR_Ft_ADDR_UIMM12 {
    const OPCODE: u32 = 0x3d000000;
    const MASK: u32 = 0x3f400000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRB_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STRB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x38200800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38000400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRB_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for STRB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x39000000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRH_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STRH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x78200800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78000400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRH_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for STRH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x79000000;
    const MASK: u32 = 0xffc00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STTR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STTR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8000800;
    const MASK: u32 = 0xbfe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STTRB_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STTRB_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0x38000800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STTRH_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STTRH_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0x78000800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STUR_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STUR_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0xb8000000;
    const MASK: u32 = 0xbfe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STUR_ADDR_SIMM9_Ft {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STUR_ADDR_SIMM9_Ft {
    const OPCODE: u32 = 0x3c000000;
    const MASK: u32 = 0x3f600c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STURB_ADDR_SIMM9_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STURB_ADDR_SIMM9_Rt {
    const OPCODE: u32 = 0x38000000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STURH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STURH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78000000;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXP_ADDR_SIMPLE_Rt2_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STXP_ADDR_SIMPLE_Rt2_Rt_Rs {
    const OPCODE: u32 = 0x88200000;
    const MASK: u32 = 0xbfe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXR_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STXR_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x88007c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXRB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STXRB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x8007c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXRH_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STXRH_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48007c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZ2G_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STZ2G_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9e00800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZ2G_ADDR_SIMM13_Rt_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STZ2G_ADDR_SIMM13_Rt_SP {
    const OPCODE: u32 = 0xd9e00400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZG_ADDR_SIMM13_Rt_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STZG_ADDR_SIMM13_Rt_SP {
    const OPCODE: u32 = 0xd9600800;
    const MASK: u32 = 0xffe00c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZG_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for STZG_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9600400;
    const MASK: u32 = 0xffe00400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZGM_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for STZGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd9200000;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201818;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN {
    const OPCODE: u32 = 0xc1301818;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUB_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a01818;
    const MASK: u32 = 0xffa19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUB_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a11818;
    const MASK: u32 = 0xffa39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c18;
    const MASK: u32 = 0xffbf9c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_Znx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl InsnOpcode for SUB_SME_Znx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a11c18;
    const MASK: u32 = 0xffbf9c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_AIMM_Rn_SP_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SUB_AIMM_Rn_SP_Rd_SP {
    const OPCODE: u32 = 0x51000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Rn_Rm_SFT_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUB_Rn_Rm_SFT_Rd {
    const OPCODE: u32 = 0x4b000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Rd_SP_Rn_SP_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUB_Rd_SP_Rn_SP_Rm_EXT {
    const OPCODE: u32 = 0x4b200000;
    const MASK: u32 = 0x7fe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SUB_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x4010000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4200400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for SUB_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2521c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUB_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e208400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUB_Sd_Sm_Sn {
    const OPCODE: u32 = 0x7ee08400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBG_UIMM4_ADDG_Rn_SP_UIMM10_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(4)]
    pub imm4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for SUBG_UIMM4_ADDG_Rn_SP_UIMM10_Rd_SP {
    const OPCODE: u32 = 0xd1800000;
    const MASK: u32 = 0xffc0c000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHN_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUBHN_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHN2_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUBHN2_Vm_Vn_Vd {
    const OPCODE: u32 = 0x4e206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHNB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUBHNB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x45207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHNT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUBHNT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45207400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBP_Rm_SP_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUBP_Rm_SP_Rd_Rn_SP {
    const OPCODE: u32 = 0x9ac00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBPS_Rm_SP_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUBPS_Rm_SP_Rd_Rn_SP {
    const OPCODE: u32 = 0xbac00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x4030000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBR_SVE_AIMM_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for SUBR_SVE_AIMM_SVE_Zd {
    const OPCODE: u32 = 0x2523c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBS_Rd_AIMM_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for SUBS_Rd_AIMM_Rn_SP {
    const OPCODE: u32 = 0x71000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBS_Rm_SFT_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUBS_Rm_SFT_Rd_Rn {
    const OPCODE: u32 = 0x6b000000;
    const MASK: u32 = 0x7f200000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBS_Rn_SP_Rd_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUBS_Rn_SP_Rd_Rm_EXT {
    const OPCODE: u32 = 0x6b200000;
    const MASK: u32 = 0x7fe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1501038;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1509038;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm {
    const OPCODE: u32 = 0xc1201418;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1301418;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a01c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUDOT_Vd_Vn_Em {
    const OPCODE: u32 = 0xf00f000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn {
    const OPCODE: u32 = 0xc1000014;
    const MASK: u32 = 0xfff0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1100030;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108030;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN {
    const OPCODE: u32 = 0xc1200014;
    const MASK: u32 = 0xfff09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUMLALL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1300014;
    const MASK: u32 = 0xfff09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPA_SVE_Zn_SVE_Zm_16_SME_Pm_SVE_Pg3_SME_ZAda_2b {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUMOPA_SVE_Zn_SVE_Zm_16_SME_Pm_SVE_Pg3_SME_ZAda_2b {
    const OPCODE: u32 = 0xa0a00000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPA_SME_ZAda_3b_SVE_Pg3_SVE_Zn_SVE_Zm_16_SME_Pm {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUMOPA_SME_ZAda_3b_SVE_Pg3_SVE_Zn_SVE_Zm_16_SME_Pm {
    const OPCODE: u32 = 0xa0e00000;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPS_SME_ZAda_2b_SVE_Zm_16_SME_Pm_SVE_Pg3_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUMOPS_SME_ZAda_2b_SVE_Zm_16_SME_Pm_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0xa0a00010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPS_SME_ZAda_3b_SVE_Zm_16_SVE_Pg3_SME_Pm_SVE_Zn {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SUMOPS_SME_ZAda_3b_SVE_Zm_16_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = 0xa0e00010;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPK_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUNPK_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc125e000;
    const MASK: u32 = 0xff3ffc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPK_SME_Zdnx4_SME_Znx2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUNPK_SME_Zdnx4_SME_Znx2 {
    const OPCODE: u32 = 0xc135e000;
    const MASK: u32 = 0xff3ffc23;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPKHI_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUNPKHI_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5313800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPKLO_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUNPKLO_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5303800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUQADD_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SUQADD_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x441c8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUQADD_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUQADD_Vd_Vn {
    const OPCODE: u32 = 0xe203800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUQADD_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for SUQADD_Sd_Sn {
    const OPCODE: u32 = 0x5e203800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUVDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SUVDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 {
    const OPCODE: u32 = 0xc1508038;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVC_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SVC_EXCEPTION {
    const OPCODE: u32 = 0xd4000001;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1500020;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508020;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for SVDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08808;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWP_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWP_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0xb8208000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPA_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPA_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8a08000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPAB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPAB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38a08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPAH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPAH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78a08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPAL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPAL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8e08000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPALB_Rt_ADDR_SIMPLE_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPALB_Rt_ADDR_SIMPLE_Rs {
    const OPCODE: u32 = 0x38e08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPB_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPB_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x38208000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPH_ADDR_SIMPLE_Rt_Rs {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPH_ADDR_SIMPLE_Rt_Rs {
    const OPCODE: u32 = 0x78208000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPL_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPL_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0xb8608000;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPLB_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPLB_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x38608000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPLH_ADDR_SIMPLE_Rs_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPLH_ADDR_SIMPLE_Rs_Rt {
    const OPCODE: u32 = 0x78608000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt {
    const OPCODE: u32 = 0x19208000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 {
    const OPCODE: u32 = 0x19a08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPPAL_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPPAL_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt {
    const OPCODE: u32 = 0x19e08000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19608000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SXTB_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SXTB_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x410a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SXTH_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SXTH_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x492a000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SXTW_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for SXTW_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4d4a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SYS_UIMM3_OP2_CRn_CRm_Rt_UIMM3_OP1 {
    #[bits(5)]
    pub rt: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(4)]
    pub crn: u32,
    #[bits(3)]
    pub op1: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl InsnOpcode for SYS_UIMM3_OP2_CRn_CRm_Rt_UIMM3_OP1 {
    const OPCODE: u32 = 0xd5080000;
    const MASK: u32 = 0xfff80000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SYSL_CRn_Rt_UIMM3_OP1_CRm_UIMM3_OP2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(4)]
    pub crn: u32,
    #[bits(3)]
    pub op1: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl InsnOpcode for SYSL_CRn_Rt_UIMM3_OP1_CRm_UIMM3_OP2 {
    const OPCODE: u32 = 0xd5280000;
    const MASK: u32 = 0xfff80000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SYSP_PAIRREG_OR_XZR_Rt_UIMM3_OP2_CRn_UIMM3_OP1_CRm {
    #[bits(5)]
    pub rt: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(4)]
    pub crn: u32,
    #[bits(3)]
    pub op1: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl InsnOpcode for SYSP_PAIRREG_OR_XZR_Rt_UIMM3_OP2_CRn_UIMM3_OP1_CRm {
    const OPCODE: u32 = 0xd5480000;
    const MASK: u32 = 0xfff80000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 {
    const OPCODE: u32 = 0x5203000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5202800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBL_Vd_LVn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TBL_Vd_LVn_Vm {
    const OPCODE: u32 = 0xe000000;
    const MASK: u32 = 0xbfe09c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBNZ_Rt_BIT_NUM_ADDR_PCREL14 {
    #[bits(5)]
    pub rt: u32,
    #[bits(14)]
    pub imm14: u32,
    #[bits(5)]
    pub b40: u32,
    #[bits(7)]
    pub _op_24: u32,
    #[bits(1)]
    pub b5: u32,
}
impl InsnOpcode for TBNZ_Rt_BIT_NUM_ADDR_PCREL14 {
    const OPCODE: u32 = 0x37000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBX_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TBX_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5202c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBX_Vm_LVn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TBX_Vm_LVn_Vd {
    const OPCODE: u32 = 0xe001000;
    const MASK: u32 = 0xbfe09c00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBZ_Rt_ADDR_PCREL14_BIT_NUM {
    #[bits(5)]
    pub rt: u32,
    #[bits(14)]
    pub imm14: u32,
    #[bits(5)]
    pub b40: u32,
    #[bits(7)]
    pub _op_24: u32,
    #[bits(1)]
    pub b5: u32,
}
impl InsnOpcode for TBZ_Rt_ADDR_PCREL14_BIT_NUM {
    const OPCODE: u32 = 0x36000000;
    const MASK: u32 = 0x7f000000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TCANCEL_TME_UIMM16 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TCANCEL_TME_UIMM16 {
    const OPCODE: u32 = 0xd4600000;
    const MASK: u32 = 0xffe0001f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TCOMMIT {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for TCOMMIT {
    const OPCODE: u32 = 0xd503307f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a01800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_SVE_Pm_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for TRN1_SVE_Pm_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x5205000;
    const MASK: u32 = 0xff30fe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TRN1_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TRN1_Vm_Vd_Vn {
    const OPCODE: u32 = 0xe002800;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TRN2_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a01c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_SVE_Pm_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for TRN2_SVE_Pm_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x5205400;
    const MASK: u32 = 0xff30fe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TRN2_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x5207400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for TRN2_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe006800;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TSTART_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for TSTART_Rd {
    const OPCODE: u32 = 0xd5233060;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TTEST_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for TTEST_Rd {
    const OPCODE: u32 = 0xd5233160;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABA_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABA_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500fc00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABA_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABA_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2e207c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e205000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e205000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABALB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABALB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x4500c800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABALT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABALT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4500cc00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABD_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UABD_SVE_Zd_SVE_Pg3_SVE_Zm_5 {
    const OPCODE: u32 = 0x40d0000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABD_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e207400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDL_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABDL_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDL2_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABDL2_Vm_Vd_Vn {
    const OPCODE: u32 = 0x6e207000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDLT_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UABDLT_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x45003c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADALP_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UADALP_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4405a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADALP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UADALP_Vd_Vn {
    const OPCODE: u32 = 0x2e206800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDL_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDL_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2e200000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDL2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDL2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x6e200000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDLB_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45000800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UADDLP_Vd_Vn {
    const OPCODE: u32 = 0x2e202800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDLT_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45000c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UADDLV_Fd_Vn {
    const OPCODE: u32 = 0x2e303800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDV_SVE_Pg3_SVE_Zn_SVE_Vd {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UADDV_SVE_Pg3_SVE_Zn_SVE_Vd {
    const OPCODE: u32 = 0x4012000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDW_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDW_Vm_Vn_Vd {
    const OPCODE: u32 = 0x2e201000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDW2_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDW2_Vm_Vd_Vn {
    const OPCODE: u32 = 0x6e201000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDWB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDWB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45004800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDWT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UADDWT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45004c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UBFM_Rd_IMMS_Rn_IMMR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl InsnOpcode for UBFM_Rd_IMMS_Rn_IMMR {
    const OPCODE: u32 = 0x53000000;
    const MASK: u32 = 0x7f800000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120c401;
    const MASK: u32 = 0xff20fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120cc01;
    const MASK: u32 = 0xff20fc03;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4400c400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc122e020;
    const MASK: u32 = 0xfffffc21;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc132e020;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x65d1a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x6595a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x6555a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x65d5a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_H_SVE_Zn_S_H_SVE_Pg3_P_M {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Zd_S_H_SVE_Zn_S_H_SVE_Pg3_P_M {
    const OPCODE: u32 = 0x6553a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Pg3_P_M_SVE_Zd_S_H_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Pg3_P_M_SVE_Zd_S_H_SVE_Zn_S_D {
    const OPCODE: u32 = 0x6557a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UCVTF_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x65d7a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Rn_Fd_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for UCVTF_Rn_Fd_FBITS {
    const OPCODE: u32 = 0x1e030000;
    const MASK: u32 = 0x7f3f0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_FBITS_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for UCVTF_FBITS_Fd_Rn {
    const OPCODE: u32 = 0x1ec30000;
    const MASK: u32 = 0x7fff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Vn_Vd {
    const OPCODE: u32 = 0x2e21d800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vn_V_4H_Vd_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Vn_V_4H_Vd_V_4H {
    const OPCODE: u32 = 0x2e79d800;
    const MASK: u32 = 0xbffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Fd_Rn {
    const OPCODE: u32 = 0x1e230000;
    const MASK: u32 = 0x7f3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Fd_S_H_Rn_W {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Fd_S_H_Rn_W {
    const OPCODE: u32 = 0x1ee30000;
    const MASK: u32 = 0x7ffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Sn_Sd {
    const OPCODE: u32 = 0x7e21d800;
    const MASK: u32 = 0xffbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Sd_Sn {
    const OPCODE: u32 = 0x7e79d800;
    const MASK: u32 = 0xfffffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_IMM_VLSR_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_IMM_VLSR_Vn_Vd {
    const OPCODE: u32 = 0x2f00e400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vd_IMM_VLSR_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Vd_IMM_VLSR_Vn {
    const OPCODE: u32 = 0x2f10e400;
    const MASK: u32 = 0xbf90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_IMM_VLSR_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Sd_IMM_VLSR_Sn {
    const OPCODE: u32 = 0x7f00e400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_S_H_IMM_VLSR_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UCVTF_Sd_S_H_IMM_VLSR_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7f10e400;
    const MASK: u32 = 0xff90fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDF_UNDEFINED {
    #[bits(16)]
    pub imm16_0: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl InsnOpcode for UDF_UNDEFINED {
    const OPCODE: u32 = 0x000000;
    const MASK: u32 = 0xffff0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDIV_Rn_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDIV_Rn_Rm_Rd {
    const OPCODE: u32 = 0x1ac00800;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDIV_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UDIV_SVE_Zd_SVE_Zm_5_SVE_Pg3 {
    const OPCODE: u32 = 0x4950000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x4970000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1501010;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1501030;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1509010;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509030;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d00018;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08018;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN {
    const OPCODE: u32 = 0xc1201410;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1301410;
    const MASK: u32 = 0xffb09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01410;
    const MASK: u32 = 0xffa19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11410;
    const MASK: u32 = 0xffa39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H {
    const OPCODE: u32 = 0xc1601418;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_c1701418 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_c1701418 {
    const OPCODE: u32 = 0xc1701418;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1e01418;
    const MASK: u32 = 0xffe19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1e11418;
    const MASK: u32 = 0xffe39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44800400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4400cc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub imm2_19: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = 0x4480cc00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e009400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_Vn_Vd_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UDOT_Vn_Vd_Em {
    const OPCODE: u32 = 0x2f00e000;
    const MASK: u32 = 0xbf00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHADD_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UHADD_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x44118000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHADD_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UHADD_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e200400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHSUB_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UHSUB_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x44138000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHSUB_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UHSUB_Vn_Vd_Vm {
    const OPCODE: u32 = 0x2e202400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHSUBR_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UHSUBR_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44178000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMADDL_Rm_Ra_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMADDL_Rm_Ra_Rd_Rn {
    const OPCODE: u32 = 0x9ba00000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMAX_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a001;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMAX_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b001;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMAX_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a801;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zmx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMAX_SME_Zmx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120b801;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_Rn_CSSC_UIMM8_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for UMAX_Rn_CSSC_UIMM8_Rd {
    const OPCODE: u32 = 0x11c40000;
    const MASK: u32 = 0x7ffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMAX_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06400;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4090000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SVE_Zd_SVE_UIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMAX_SVE_Zd_SVE_UIMM8 {
    const OPCODE: u32 = 0x2529c000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMAX_Vd_Vm_Vn {
    const OPCODE: u32 = 0x2e206400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXP_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMAXP_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4415a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20a400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXQV_Vd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMAXQV_Vd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x40d2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXV_SVE_Zn_SVE_Pg3_SVE_Vd {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMAXV_SVE_Zn_SVE_Pg3_SVE_Vd {
    const OPCODE: u32 = 0x4092000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UMAXV_Fd_Vn {
    const OPCODE: u32 = 0x2e30a800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMIN_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a021;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zmx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMIN_SME_Zmx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120b021;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zm_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMIN_SME_Zm_SME_Zdnx4 {
    const OPCODE: u32 = 0xc120a821;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMIN_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b821;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_Rn_CSSC_UIMM8_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl InsnOpcode for UMIN_Rn_CSSC_UIMM8_Rd {
    const OPCODE: u32 = 0x11cc0000;
    const MASK: u32 = 0x7ffc0000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_Rm_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMIN_Rm_Rd_Rn {
    const OPCODE: u32 = 0x1ac06c00;
    const MASK: u32 = 0x7fe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMIN_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x40b0000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SVE_Zd_SVE_UIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMIN_SVE_Zd_SVE_UIMM8 {
    const OPCODE: u32 = 0x252bc000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMIN_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e206c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINP_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMINP_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x4417a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMINP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20ac00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINQV_SVE_Pg3_SVE_Zn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMINQV_SVE_Pg3_SVE_Zn_Vd {
    const OPCODE: u32 = 0x40f2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINV_SVE_Zn_SVE_Vd_SVE_Pg3 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMINV_SVE_Zn_SVE_Vd_SVE_Pg3 {
    const OPCODE: u32 = 0x40b2000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UMINV_Fd_Vn {
    const OPCODE: u32 = 0x2e31a800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01010;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d01010;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1d09010;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1600810;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLAL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm {
    const OPCODE: u32 = 0xc1700810;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e00810;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10810;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off3x2_SME_Zm_SVE_Zn {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLAL_SME_ZA_array_off3x2_SME_Zm_SVE_Zn {
    const OPCODE: u32 = 0xc1600c10;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e208000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_Vn_Vd_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLAL_Vn_Vd_Em16 {
    const OPCODE: u32 = 0x2f002000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e208000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL2_Vn_Em16_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLAL2_Vn_Em16_Vd {
    const OPCODE: u32 = 0x6f002000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44a09000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e09000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44004800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000010;
    const MASK: u32 = 0xfff0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1100010;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108010;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn {
    const OPCODE: u32 = 0xc1800010;
    const MASK: u32 = 0xfff0101c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx2 {
    const OPCODE: u32 = 0xc1900010;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_Zm_INDEX3_1_SME_Znx4_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_Zm_INDEX3_1_SME_Znx4_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1908010;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN {
    const OPCODE: u32 = 0xc1200010;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1300010;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Zmx2_SME_Znx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Zmx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a00010;
    const MASK: u32 = 0xffa19c3e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10010;
    const MASK: u32 = 0xffa39c7e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 {
    const OPCODE: u32 = 0xc1200410;
    const MASK: u32 = 0xffb09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALT_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALT_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44a09400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44e09400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44004c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01018;
    const MASK: u32 = 0xfff01018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_Znx2_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSL_SME_Znx2_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1d01018;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1d09018;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1600818;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 {
    const OPCODE: u32 = 0xc1700818;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 {
    const OPCODE: u32 = 0xc1e00818;
    const MASK: u32 = 0xffe19c3c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10818;
    const MASK: u32 = 0xffe39c7c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 {
    const OPCODE: u32 = 0xc1600c18;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSL_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e20a000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f006000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL2_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSL2_Vm_Vd_Vn {
    const OPCODE: u32 = 0x6e20a000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL2_Vd_Em16_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSL2_Vd_Em16_Vn {
    const OPCODE: u32 = 0x6f006000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x44005800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0b000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e0b000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_Zm_INDEX4_10_SME_ZA_array_off2x4_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_Zm_INDEX4_10_SME_ZA_array_off2x4_SVE_Zn {
    const OPCODE: u32 = 0xc1000018;
    const MASK: u32 = 0xfff0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_Zm_INDEX4_1_SME_Znx2_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_Zm_INDEX4_1_SME_Znx2_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1100018;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 {
    const OPCODE: u32 = 0xc1108018;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn {
    const OPCODE: u32 = 0xc1800018;
    const MASK: u32 = 0xfff0101c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1900018;
    const MASK: u32 = 0xfff09838;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 {
    const OPCODE: u32 = 0xc1908018;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1200018;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN {
    const OPCODE: u32 = 0xc1300018;
    const MASK: u32 = 0xffb09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00018;
    const MASK: u32 = 0xffa19c3e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10018;
    const MASK: u32 = 0xffa39c7e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200418;
    const MASK: u32 = 0xffb09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44005c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0b400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLT_SVE_Zd_SVE_Zm4_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMLSLT_SVE_Zd_SVE_Zm4_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44e0b400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45c09800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMMLA_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMMLA_Vn_Vm_Vd {
    const OPCODE: u32 = 0x6e80a400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPA_SVE_Pg3_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMOPA_SVE_Pg3_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Zn {
    const OPCODE: u32 = 0xa1800008;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_2b {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_2b {
    const OPCODE: u32 = 0xa1a00000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPA_SME_ZAda_3b_SME_Pm_SVE_Zn_SVE_Zm_16_SVE_Pg3 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMOPA_SME_ZAda_3b_SME_Pm_SVE_Zn_SVE_Zm_16_SVE_Pg3 {
    const OPCODE: u32 = 0xa1e00000;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPS_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMOPS_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1800018;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPS_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMOPS_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1a00010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPS_SME_Pm_SVE_Zn_SVE_Pg3_SME_ZAda_3b_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMOPS_SME_Pm_SVE_Zn_SVE_Pg3_SME_ZAda_3b_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1e00010;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOV_En_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UMOV_En_Rd {
    const OPCODE: u32 = 0xe003c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMSUBL_Rn_Rd_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMSUBL_Rn_Rd_Rm_Ra {
    const OPCODE: u32 = 0x9ba08000;
    const MASK: u32 = 0xffe08000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULH_Rn_Rm_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULH_Rn_Rm_Rd {
    const OPCODE: u32 = 0x9bc07c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULH_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UMULH_SVE_Pg3_SVE_Zm_5_SVE_Zd {
    const OPCODE: u32 = 0x4130000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4206c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULL_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e20c000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f00a000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL2_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULL2_Vd_Vm_Vn {
    const OPCODE: u32 = 0x6e20c000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x6f00a000;
    const MASK: u32 = 0xff00f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a0d000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0d000;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45007800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a0d400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd {
    const OPCODE: u32 = 0x44e0d400;
    const MASK: u32 = 0xffe0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UMULLT_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x45007c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQADD_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x4201400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQADD_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x44198000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for UQADD_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2525c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQADD_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e200c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQADD_Sn_Sm_Sd {
    const OPCODE: u32 = 0x7e200c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc123e020;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVT_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQCVT_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc133e020;
    const MASK: u32 = 0xff7ffc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVTN_SME_Znx4_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQCVTN_SME_Znx4_SVE_Zd {
    const OPCODE: u32 = 0xc133e060;
    const MASK: u32 = 0xff7ffc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVTN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0x45314800;
    const MASK: u32 = 0xfffffc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECB_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECB_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x430fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0cc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECD_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECD_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460cc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECH_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECH_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x470fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for UQDECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252b8000;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for UQDECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252b8800;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECP_Rd_X_SVE_Pg4_5_S_B {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for UQDECP_Rd_X_SVE_Pg4_5_S_B {
    const OPCODE: u32 = 0x252b8c00;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECW_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECW_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x4a0cc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECW_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECW_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4a0fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQDECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0fc00;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCB_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCB_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x420f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCB_SVE_PATTERN_SCALED_Rd_X {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCB_SVE_PATTERN_SCALED_Rd_X {
    const OPCODE: u32 = 0x430f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCD_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCD_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x4e0c400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCD_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCD_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4e0f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCD_SVE_PATTERN_SCALED_Rd_X {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCD_SVE_PATTERN_SCALED_Rd_X {
    const OPCODE: u32 = 0x4f0f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCH_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCH_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x460c400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCH_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCH_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x460f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for UQINCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x25298000;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCP_SVE_Pg4_5_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for UQINCP_SVE_Pg4_5_Rd {
    const OPCODE: u32 = 0x25298800;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for UQINCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x25298c00;
    const MASK: u32 = 0xff3ffe00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCW_SVE_PATTERN_SCALED_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCW_SVE_PATTERN_SCALED_SVE_Zd {
    const OPCODE: u32 = 0x4a0c400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCW_SVE_PATTERN_SCALED_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCW_SVE_PATTERN_SCALED_Rd {
    const OPCODE: u32 = 0x4a0f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQINCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0f400;
    const MASK: u32 = 0xfff0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHL_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQRSHL_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x440b8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e205c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHL_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQRSHL_Sn_Sm_Sd {
    const OPCODE: u32 = 0x7e205c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHLR_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQRSHLR_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x440f8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120d820;
    const MASK: u32 = 0xff20fc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0xc1e0d420;
    const MASK: u32 = 0xfff0fc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120dc20;
    const MASK: u32 = 0xff20fc60;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd {
    const OPCODE: u32 = 0x45b03800;
    const MASK: u32 = 0xfff0fc20;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQRSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f009c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_IMM_VLSR_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQRSHRN_IMM_VLSR_Sd_Sn {
    const OPCODE: u32 = 0x7f009c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQRSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x6f009c00;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for UQRSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    const OPCODE: u32 = 0x45203800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45203c00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQSHL_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44098000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_SVE_SHLIMM_PRED_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for UQSHL_SVE_SHLIMM_PRED_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x4078000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Vm_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQSHL_Vm_Vd_Vn {
    const OPCODE: u32 = 0x2e204c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQSHL_Sd_Sm_Sn {
    const OPCODE: u32 = 0x7e204c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQSHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x2f007400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Sn_Sd_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQSHL_Sn_Sd_IMM_VLSL {
    const OPCODE: u32 = 0x7f007400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHLR_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQSHLR_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440d8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRN_Vn_IMM_VLSR_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQSHRN_Vn_IMM_VLSR_Vd {
    const OPCODE: u32 = 0x2f009400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f009400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRN2_Vn_Vd_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQSHRN2_Vn_Vd_IMM_VLSR {
    const OPCODE: u32 = 0x6f009400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for UQSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd {
    const OPCODE: u32 = 0x45203000;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45203400;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQSUB_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4201c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_SVE_Zn_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQSUB_SVE_Zn_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x441b8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl InsnOpcode for UQSUB_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2527c000;
    const MASK: u32 = 0xff3fc000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e202c00;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_Sd_Sm_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UQSUB_Sd_Sm_Sn {
    const OPCODE: u32 = 0x7e202c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUBR_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UQSUBR_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441f8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQXTN_Vd_Vn {
    const OPCODE: u32 = 0x2e214800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTN_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQXTN_Sn_Sd {
    const OPCODE: u32 = 0x7e214800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQXTN2_Vd_Vn {
    const OPCODE: u32 = 0x6e214800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTNB_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQXTNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45204800;
    const MASK: u32 = 0xffa7fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTNT_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UQXTNT_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45204c00;
    const MASK: u32 = 0xffa7fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URECPE_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for URECPE_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4480a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URECPE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for URECPE_Vd_Vn {
    const OPCODE: u32 = 0xea1c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URHADD_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for URHADD_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x44158000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URHADD_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for URHADD_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e201400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zm_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for URSHL_SME_Zm_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120a221;
    const MASK: u32 = 0xff30ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zmx2_SME_Zdnx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for URSHL_SME_Zmx2_SME_Zdnx2 {
    const OPCODE: u32 = 0xc120b221;
    const MASK: u32 = 0xff21ffe1;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for URSHL_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120aa21;
    const MASK: u32 = 0xff30ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for URSHL_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120ba21;
    const MASK: u32 = 0xff23ffe3;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for URSHL_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x44038000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for URSHL_Vn_Vm_Vd {
    const OPCODE: u32 = 0x2e205400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_Sn_Sm_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for URSHL_Sn_Sm_Sd {
    const OPCODE: u32 = 0x7ee05400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHLR_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for URSHLR_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x44078000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for URSHR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 {
    const OPCODE: u32 = 0x40d8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHR_IMM_VLSR_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for URSHR_IMM_VLSR_Vn_Vd {
    const OPCODE: u32 = 0x2f002400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHR_Sd_IMM_VLSR_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for URSHR_Sd_IMM_VLSR_Sn {
    const OPCODE: u32 = 0x7f002400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSQRTE_SVE_Zd_SVE_Zn_SVE_Pg3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for URSQRTE_SVE_Zd_SVE_Zn_SVE_Pg3 {
    const OPCODE: u32 = 0x4481a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSQRTE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for URSQRTE_Vd_Vn {
    const OPCODE: u32 = 0x2ea1c800;
    const MASK: u32 = 0xbfbffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for URSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500ec00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSRA_Vn_Vd_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for URSRA_Vn_Vd_IMM_VLSR {
    const OPCODE: u32 = 0x2f003400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for URSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f003400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1501028;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_Zm_INDEX2_SME_Znx4_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USDOT_SME_Zm_INDEX2_SME_Znx4_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1509028;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1201408;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1301408;
    const MASK: u32 = 0xfff09c18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1a01408;
    const MASK: u32 = 0xffe19c38;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11408;
    const MASK: u32 = 0xffe39c78;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn {
    const OPCODE: u32 = 0x44a01800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USDOT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x44807800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe809c00;
    const MASK: u32 = 0xbfe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_Vd_Em_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USDOT_Vd_Em_Vn {
    const OPCODE: u32 = 0xf80f000;
    const MASK: u32 = 0xbfc0f400;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHL_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USHL_Vm_Vn_Vd {
    const OPCODE: u32 = 0x2e204400;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee04400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLL_Vn_IMM_VLSL_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USHLL_Vn_IMM_VLSL_Vd {
    const OPCODE: u32 = 0x2f00a400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLL2_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USHLL2_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x6f00a400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLLB_SVE_SHLIMM_UNPRED_22_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for USHLLB_SVE_SHLIMM_UNPRED_22_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4500a800;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLLT_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl InsnOpcode for USHLLT_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn {
    const OPCODE: u32 = 0x4500ac00;
    const MASK: u32 = 0xffa0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHR_IMM_VLSR_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USHR_IMM_VLSR_Vd_Vn {
    const OPCODE: u32 = 0x2f000400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHR_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f000400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn {
    const OPCODE: u32 = 0xc1000004;
    const MASK: u32 = 0xfff0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100020;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108020;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN {
    const OPCODE: u32 = 0xc1200004;
    const MASK: u32 = 0xfff09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm {
    const OPCODE: u32 = 0xc1300004;
    const MASK: u32 = 0xfff09c1e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_Znx2_SME_Zmx2_SME_ZA_array_off1x4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMLALL_SME_Znx2_SME_Zmx2_SME_ZA_array_off1x4 {
    const OPCODE: u32 = 0xc1a00004;
    const MASK: u32 = 0xffe19c3e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10004;
    const MASK: u32 = 0xffe39c7e;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 {
    const OPCODE: u32 = 0xc1200404;
    const MASK: u32 = 0xfff09c1c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45809800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMMLA_Vd_Vm_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMMLA_Vd_Vm_Vn {
    const OPCODE: u32 = 0x4e80ac00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1800000;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm {
    const OPCODE: u32 = 0xa1c00000;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPS_SVE_Zn_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMOPS_SVE_Zn_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3 {
    const OPCODE: u32 = 0xa1800010;
    const MASK: u32 = 0xffe0001c;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPS_SME_ZAda_3b_SVE_Zn_SME_Pm_SVE_Zm_16_SVE_Pg3 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USMOPS_SME_ZAda_3b_SVE_Zn_SME_Pm_SVE_Zm_16_SVE_Pg3 {
    const OPCODE: u32 = 0xa1c00010;
    const MASK: u32 = 0xffe00018;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USQADD_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for USQADD_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x441d8000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USQADD_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USQADD_Vd_Vn {
    const OPCODE: u32 = 0x2e203800;
    const MASK: u32 = 0xbf3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USQADD_Sn_Sd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USQADD_Sn_Sd {
    const OPCODE: u32 = 0x7e203800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USRA_SVE_SHRIMM_UNPRED_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for USRA_SVE_SHRIMM_UNPRED_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4500e400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USRA_IMM_VLSR_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USRA_IMM_VLSR_Vn_Vd {
    const OPCODE: u32 = 0x2f001400;
    const MASK: u32 = 0xbf80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for USRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f001400;
    const MASK: u32 = 0xff80fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e202000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e202000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45001800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBLT_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x45001c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBW_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBW_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e203000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBW2_Vn_Vm_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBW2_Vn_Vm_Vd {
    const OPCODE: u32 = 0x6e203000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBWB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBWB_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x45005800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45005c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USVDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for USVDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1508028;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPK_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UUNPK_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc125e001;
    const MASK: u32 = 0xff3ffc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPK_SME_Znx2_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UUNPK_SME_Znx2_SME_Zdnx4 {
    const OPCODE: u32 = 0xc135e001;
    const MASK: u32 = 0xff3ffc23;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPKHI_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UUNPKHI_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x5333800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPKLO_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UUNPKLO_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5323800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UVDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UVDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500030;
    const MASK: u32 = 0xfff09038;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UVDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UVDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 {
    const OPCODE: u32 = 0xc1508030;
    const MASK: u32 = 0xfff09078;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UVDOT_SME_Zm_INDEX1_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UVDOT_SME_Zm_INDEX1_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1d08818;
    const MASK: u32 = 0xfff09878;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x411a000;
    const MASK: u32 = 0xff3fe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UXTH_SVE_Zn_SVE_Pg3_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UXTH_SVE_Zn_SVE_Pg3_SVE_Zd {
    const OPCODE: u32 = 0x493a000;
    const MASK: u32 = 0xffbfe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UXTW_SVE_Pg3_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl InsnOpcode for UXTW_SVE_Pg3_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x4d5a000;
    const MASK: u32 = 0xffffe000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SVE_Zm_16_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP_SVE_Zm_16_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc120d001;
    const MASK: u32 = 0xff20fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120d401;
    const MASK: u32 = 0xffe0fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Znx4_SME_Zdnx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UZP_SME_Znx4_SME_Zdnx4 {
    const OPCODE: u32 = 0xc136e002;
    const MASK: u32 = 0xff3ffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Znx4_S_Q_SME_Zdnx4_S_Q {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for UZP_SME_Znx4_S_Q_SME_Zdnx4_S_Q {
    const OPCODE: u32 = 0xc137e002;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP1_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x5a00800;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_SVE_Pn_SVE_Pm_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UZP1_SVE_Pn_SVE_Pm_SVE_Pd {
    const OPCODE: u32 = 0x5204800;
    const MASK: u32 = 0xff30fe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP1_SVE_Zn_SVE_Zd_SVE_Zm_16 {
    const OPCODE: u32 = 0x5206800;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP1_Vm_Vn_Vd {
    const OPCODE: u32 = 0xe001800;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP2_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5a00c00;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for UZP2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5204c00;
    const MASK: u32 = 0xff30fe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_SVE_Zn_SVE_Zm_16_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP2_SVE_Zn_SVE_Zm_16_SVE_Zd {
    const OPCODE: u32 = 0x5206c00;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_Vm_Vn_Vd {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for UZP2_Vm_Vn_Vd {
    const OPCODE: u32 = 0xe005800;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WFET_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for WFET_Rd {
    const OPCODE: u32 = 0xd5031000;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WFIT_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for WFIT_Rd {
    const OPCODE: u32 = 0xd5031020;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGE_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200000;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_Rn_SVE_Pd_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGE_Rn_SVE_Pd_Rm {
    const OPCODE: u32 = 0x25201000;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_Rn_Rm_SME_VLxN_13_SME_PNd3 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGE_Rn_Rm_SME_VLxN_13_SME_PNd3 {
    const OPCODE: u32 = 0x25204010;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_Rm_Rn_SME_Pdx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGE_Rm_Rn_SME_Pdx2 {
    const OPCODE: u32 = 0x25205010;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGT_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200010;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_Rn_Rm_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGT_Rn_Rm_SVE_Pd {
    const OPCODE: u32 = 0x25201010;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_Rm_Rn_SME_PNd3_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGT_Rm_Rn_SME_PNd3_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204018;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEGT_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205011;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_Rn_SVE_Pd_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHI_Rn_SVE_Pd_Rm {
    const OPCODE: u32 = 0x25200810;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_Rm_Rn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHI_Rm_Rn_SVE_Pd {
    const OPCODE: u32 = 0x25201810;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_SME_VLxN_13_Rn_SME_PNd3_Rm {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHI_SME_VLxN_13_Rn_SME_PNd3_Rm {
    const OPCODE: u32 = 0x25204818;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_Rn_SME_Pdx2_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHI_Rn_SME_Pdx2_Rm {
    const OPCODE: u32 = 0x25205811;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHS_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200800;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201800;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_Rn_SME_PNd3_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHS_Rn_SME_PNd3_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204810;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_Rn_Rm_SME_Pdx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEHS_Rn_Rm_SME_Pdx2 {
    const OPCODE: u32 = 0x25205810;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_Rm_SVE_Pd_Rn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELE_Rm_SVE_Pd_Rn {
    const OPCODE: u32 = 0x25200410;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_Rm_X_SVE_Pd_S_B_Rn_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELE_Rm_X_SVE_Pd_S_B_Rn_X {
    const OPCODE: u32 = 0x25201410;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_SME_PNd3_SME_VLxN_13_Rn_Rm {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELE_SME_PNd3_SME_VLxN_13_Rn_Rm {
    const OPCODE: u32 = 0x25204418;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELE_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205411;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELO_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200c00;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELO_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201c00;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_Rn_SME_VLxN_13_Rm_SME_PNd3 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELO_Rn_SME_VLxN_13_Rm_SME_PNd3 {
    const OPCODE: u32 = 0x25204c10;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELO_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205c10;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELS_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200c10;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_Rm_SVE_Pd_Rn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELS_Rm_SVE_Pd_Rn {
    const OPCODE: u32 = 0x25201c10;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_SME_VLxN_13_SME_PNd3_Rm_Rn {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELS_SME_VLxN_13_SME_PNd3_Rm_Rn {
    const OPCODE: u32 = 0x25204c18;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_Rn_Rm_SME_Pdx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELS_Rn_Rm_SME_Pdx2 {
    const OPCODE: u32 = 0x25205c11;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_Rm_SVE_Pd_Rn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELT_Rm_SVE_Pd_Rn {
    const OPCODE: u32 = 0x25200400;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELT_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25201400;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_Rm_SME_VLxN_13_Rn_SME_PNd3 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELT_Rm_SME_VLxN_13_Rn_SME_PNd3 {
    const OPCODE: u32 = 0x25204410;
    const MASK: u32 = 0xff20dc18;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_Rm_Rn_SME_Pdx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILELT_Rm_Rn_SME_Pdx2 {
    const OPCODE: u32 = 0x25205410;
    const MASK: u32 = 0xff20fc11;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILERW_Rm_Rn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILERW_Rm_Rn_SVE_Pd {
    const OPCODE: u32 = 0x25203010;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEWR_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for WHILEWR_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25203000;
    const MASK: u32 = 0xff20fc10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WRFFR_SVE_Pn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl InsnOpcode for WRFFR_SVE_Pn {
    const OPCODE: u32 = 0x25289000;
    const MASK: u32 = 0xfffffe1f;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XAFLAG {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for XAFLAG {
    const OPCODE: u32 = 0xd500403f;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XAR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl InsnOpcode for XAR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4203400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XAR_Vd_Vn_Vm_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for XAR_Vd_Vn_Vm_IMM {
    const OPCODE: u32 = 0xce800000;
    const MASK: u32 = 0xffe00000;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XPACD_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for XPACD_Rd {
    const OPCODE: u32 = 0xdac147e0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XPACI_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl InsnOpcode for XPACI_Rd {
    const OPCODE: u32 = 0xdac143e0;
    const MASK: u32 = 0xffffffe0;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for XTN_Vd_Vn {
    const OPCODE: u32 = 0xe212800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for XTN2_Vd_Vn {
    const OPCODE: u32 = 0x4e212800;
    const MASK: u32 = 0xff3ffc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZERO_SME_list_of_64bit_tiles {
    #[bits(8)]
    pub sme_zero_mask: u32,
    #[bits(24)]
    pub _op_8: u32,
}
impl InsnOpcode for ZERO_SME_list_of_64bit_tiles {
    const OPCODE: u32 = 0xc0080000;
    const MASK: u32 = 0xffffff00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZERO_SME_ZT0_LIST {
    #[bits(32)]
    pub _op_0: u32,
}
impl InsnOpcode for ZERO_SME_ZT0_LIST {
    const OPCODE: u32 = 0xc0480001;
    const MASK: u32 = 0xffffffff;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx2_SVE_Zm_16_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP_SME_Zdnx2_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0xc120d000;
    const MASK: u32 = 0xff20fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SVE_Zm_16_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP_SVE_Zm_16_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc120d400;
    const MASK: u32 = 0xffe0fc01;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ZIP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc136e000;
    const MASK: u32 = 0xff3ffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl InsnOpcode for ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    const OPCODE: u32 = 0xc137e000;
    const MASK: u32 = 0xfffffc63;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP1_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5a00000;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_SVE_Pn_SVE_Pd_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ZIP1_SVE_Pn_SVE_Pd_SVE_Pm {
    const OPCODE: u32 = 0x5204000;
    const MASK: u32 = 0xff30fe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_SVE_Zm_16_S_B_SVE_Zd_S_B_SVE_Zn_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP1_SVE_Zm_16_S_B_SVE_Zd_S_B_SVE_Zn_S_B {
    const OPCODE: u32 = 0x5206000;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe003800;
    const MASK: u32 = 0xbf20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_SVE_Zm_16_SVE_Zn_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP2_SVE_Zm_16_SVE_Zn_SVE_Zd {
    const OPCODE: u32 = 0x5a00400;
    const MASK: u32 = 0xffe0fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_SVE_Pm_SVE_Pn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl InsnOpcode for ZIP2_SVE_Pm_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = 0x5204400;
    const MASK: u32 = 0xff30fe10;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_SVE_Zm_16_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP2_SVE_Zm_16_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5206400;
    const MASK: u32 = 0xff20fc00;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_Vn_Vd_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl InsnOpcode for ZIP2_Vn_Vd_Vm {
    const OPCODE: u32 = 0xe007800;
    const MASK: u32 = 0xbf20fc00;
}
#[derive(Debug, PartialEq, Eq, Copy, Clone)]
pub enum Opcode {
    ABS_Rd_Rn(ABS_Rd_Rn),
    ABS_SVE_Pg3_SVE_Zd_SVE_Zn(ABS_SVE_Pg3_SVE_Zd_SVE_Zn),
    ABS_Sn_Sd(ABS_Sn_Sd),
    ABS_Vn_Vd(ABS_Vn_Vd),
    ADCLB_SVE_Zd_SVE_Zm_16_SVE_Zn(ADCLB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    ADCLT_SVE_Zm_16_SVE_Zd_SVE_Zn(ADCLT_SVE_Zm_16_SVE_Zd_SVE_Zn),
    ADCS_Rm_Rn_Rd(ADCS_Rm_Rn_Rd),
    ADC_Rm_Rd_Rn(ADC_Rm_Rd_Rn),
    ADDG_Rn_SP_UIMM4_ADDG_Rd_SP_UIMM10(ADDG_Rn_SP_UIMM4_ADDG_Rd_SP_UIMM10),
    ADDHA_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SME_Pm(ADDHA_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SME_Pm),
    ADDHA_SVE_Pg3_SME_ZAda_3b_SVE_Zn_SME_Pm(ADDHA_SVE_Pg3_SME_ZAda_3b_SVE_Zn_SME_Pm),
    ADDHN2_Vd_Vn_Vm(ADDHN2_Vd_Vn_Vm),
    ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16(ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ADDHNT_SVE_Zn_SVE_Zm_16_SVE_Zd(ADDHNT_SVE_Zn_SVE_Zm_16_SVE_Zd),
    ADDHN_Vd_Vn_Vm(ADDHN_Vd_Vn_Vm),
    ADDPL_Rd_SP_SVE_SIMM6_SVE_Rn_SP(ADDPL_Rd_SP_SVE_SIMM6_SVE_Rn_SP),
    ADDP_SVE_Zd_SVE_Pg3_SVE_Zn(ADDP_SVE_Zd_SVE_Pg3_SVE_Zn),
    ADDP_Sd_Vn(ADDP_Sd_Vn),
    ADDP_Vm_Vn_Vd(ADDP_Vm_Vn_Vd),
    ADDQV_SVE_Zn_Vd_SVE_Pg3(ADDQV_SVE_Zn_Vd_SVE_Pg3),
    ADDSPL_SVE_Rn_SP_SVE_SIMM6_Rd_SP(ADDSPL_SVE_Rn_SP_SVE_SIMM6_Rd_SP),
    ADDSVL_Rd_SP_SVE_SIMM6_SVE_Rn_SP(ADDSVL_Rd_SP_SVE_SIMM6_SVE_Rn_SP),
    ADDS_Rd_Rm_SFT_Rn(ADDS_Rd_Rm_SFT_Rn),
    ADDS_Rd_Rn_SP_Rm_EXT(ADDS_Rd_Rn_SP_Rm_EXT),
    ADDS_Rn_SP_Rd_AIMM(ADDS_Rn_SP_Rd_AIMM),
    ADDVA_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Pg3(ADDVA_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Pg3),
    ADDVA_SME_Pm_SVE_Pg3_SME_ZAda_3b_SVE_Zn(ADDVA_SME_Pm_SVE_Pg3_SME_ZAda_3b_SVE_Zn),
    ADDVL_SVE_SIMM6_Rd_SP_SVE_Rn_SP(ADDVL_SVE_SIMM6_Rd_SP_SVE_Rn_SP),
    ADDV_Vn_Fd(ADDV_Vn_Fd),
    ADD_Rd_SP_Rm_EXT_Rn_SP(ADD_Rd_SP_Rm_EXT_Rn_SP),
    ADD_Rd_SP_Rn_SP_AIMM(ADD_Rd_SP_Rn_SP_AIMM),
    ADD_Rm_SFT_Rd_Rn(ADD_Rm_SFT_Rd_Rn),
    ADD_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2(ADD_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2),
    ADD_SME_Zdnx4_SME_Zm(ADD_SME_Zdnx4_SME_Zm),
    ADD_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(ADD_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    ADD_SME_Zm_SME_Zdnx2(ADD_SME_Zm_SME_Zdnx2),
    ADD_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4(ADD_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4),
    ADD_SME_Znx2_SME_ZA_array_off3_0(ADD_SME_Znx2_SME_ZA_array_off3_0),
    ADD_SME_Znx4_SME_ZA_array_off3_0(ADD_SME_Znx4_SME_ZA_array_off3_0),
    ADD_SVE_AIMM_SVE_Zd(ADD_SVE_AIMM_SVE_Zd),
    ADD_SVE_Pg3_SVE_Zm_5_SVE_Zd(ADD_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    ADD_SVE_Zm_16_SVE_Zn_SVE_Zd(ADD_SVE_Zm_16_SVE_Zn_SVE_Zd),
    ADD_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0(ADD_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0),
    ADD_Sd_Sn_Sm(ADD_Sd_Sn_Sm),
    ADD_Vd_Vm_Vn(ADD_Vd_Vm_Vn),
    ADRP_Rd_ADDR_ADRP(ADRP_Rd_ADDR_ADRP),
    ADR_Rd_ADDR_PCREL21(ADR_Rd_ADDR_PCREL21),
    ADR_SVE_ADDR_ZZ_LSL_SVE_Zd(ADR_SVE_ADDR_ZZ_LSL_SVE_Zd),
    ADR_SVE_ADDR_ZZ_SXTW_SVE_Zd(ADR_SVE_ADDR_ZZ_SXTW_SVE_Zd),
    ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW(ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW),
    AESD_SVE_Zd_SVE_Zn(AESD_SVE_Zd_SVE_Zn),
    AESD_Vd_Vn(AESD_Vd_Vn),
    AESE_SVE_Zd_SVE_Zn(AESE_SVE_Zd_SVE_Zn),
    AESE_Vn_Vd(AESE_Vn_Vd),
    AESIMC_SVE_Zd(AESIMC_SVE_Zd),
    AESIMC_Vd_Vn(AESIMC_Vd_Vn),
    AESMC_SVE_Zd(AESMC_SVE_Zd),
    AESMC_Vn_Vd(AESMC_Vn_Vd),
    ANDQV_Vd_SVE_Pg3_SVE_Zn(ANDQV_Vd_SVE_Pg3_SVE_Zn),
    ANDS_Rd_Rn_LIMM(ANDS_Rd_Rn_LIMM),
    ANDS_Rn_Rm_SFT_Rd(ANDS_Rn_Rm_SFT_Rd),
    ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn(ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn),
    ANDV_SVE_Zn_SVE_Vd_SVE_Pg3(ANDV_SVE_Zn_SVE_Vd_SVE_Pg3),
    AND_LIMM_Rn_Rd_SP(AND_LIMM_Rn_Rd_SP),
    AND_Rd_Rm_SFT_Rn(AND_Rd_Rm_SFT_Rn),
    AND_SVE_LIMM_SVE_Zd(AND_SVE_LIMM_SVE_Zd),
    AND_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn(AND_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn),
    AND_SVE_Zd_SVE_Pg3_SVE_Zm_5(AND_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    AND_SVE_Zn_SVE_Zd_SVE_Zm_16(AND_SVE_Zn_SVE_Zd_SVE_Zm_16),
    AND_Vn_Vm_Vd(AND_Vn_Vm_Vd),
    ASRD_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED(ASRD_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED),
    ASRR_SVE_Zm_5_SVE_Pg3_SVE_Zd(ASRR_SVE_Zm_5_SVE_Pg3_SVE_Zd),
    ASRV_Rd_Rn_Rm(ASRV_Rd_Rn_Rm),
    ASR_SVE_Pg3_SVE_Zd_SVE_Zm_5(ASR_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    ASR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3(ASR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3),
    ASR_SVE_Zd_SVE_Pg3_SVE_Zm_5(ASR_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    ASR_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED(ASR_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED),
    ASR_SVE_Zn_SVE_Zm_16_SVE_Zd(ASR_SVE_Zn_SVE_Zm_16_SVE_Zd),
    AUTDA_Rn_SP_Rd(AUTDA_Rn_SP_Rd),
    AUTDB_Rd_Rn_SP(AUTDB_Rd_Rn_SP),
    AUTDZA_Rd(AUTDZA_Rd),
    AUTDZB_Rd(AUTDZB_Rd),
    AUTIA_Rd_Rn_SP(AUTIA_Rd_Rn_SP),
    AUTIB_Rn_SP_Rd(AUTIB_Rn_SP_Rd),
    AUTIZA_Rd(AUTIZA_Rd),
    AUTIZB_Rd(AUTIZB_Rd),
    AXFLAG(AXFLAG),
    BCAX_SVE_Zd_SVE_Zm_16_SVE_Zn(BCAX_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BCAX_Va_Vn_Vm_Vd(BCAX_Va_Vn_Vm_Vd),
    BC_C_ADDR_PCREL19(BC_C_ADDR_PCREL19),
    BDEP_SVE_Zn_SVE_Zd_SVE_Zm_16(BDEP_SVE_Zn_SVE_Zd_SVE_Zm_16),
    BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16(BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFADD_SVE_Zm_5_SVE_Zd_SVE_Pg3(BFADD_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    BFADD_SVE_Zn_SVE_Zm_16_SVE_Zd(BFADD_SVE_Zn_SVE_Zm_16_SVE_Zd),
    BFCLAMP_SVE_Zn_SVE_Zm_16_SVE_Zd(BFCLAMP_SVE_Zn_SVE_Zm_16_SVE_Zd),
    BFCVTN2_Vd_Vn(BFCVTN2_Vd_Vn),
    BFCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd(BFCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd),
    BFCVTN_SME_Znx2_SVE_Zd(BFCVTN_SME_Znx2_SVE_Zd),
    BFCVTN_Vn_Vd(BFCVTN_Vn_Vd),
    BFCVT_Fd_Fn(BFCVT_Fd_Fn),
    BFCVT_SVE_Zd_SME_Znx2(BFCVT_SVE_Zd_SME_Znx2),
    BFCVT_SVE_Zd_SVE_Zn_SVE_Pg3(BFCVT_SVE_Zd_SVE_Zn_SVE_Pg3),
    BFDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2(BFDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2),
    BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    BFDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0(
        BFDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0,
    ),
    BFDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0(BFDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0),
    BFDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2(
        BFDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2,
    ),
    BFDOT_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd(BFDOT_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd),
    BFDOT_SVE_Zm_16_SVE_Zn_SVE_Zd(BFDOT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    BFDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm(BFDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm),
    BFDOT_Vd_Vn_Vm(BFDOT_Vd_Vn_Vm),
    BFDOT_Vn_Em_Vd(BFDOT_Vn_Em_Vd),
    BFMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3(BFMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    BFMAX_SVE_Zd_SVE_Zm_5_SVE_Pg3(BFMAX_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    BFMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd(BFMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd),
    BFMIN_SVE_Pg3_SVE_Zm_5_SVE_Zd(BFMIN_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    BFMLALB_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd(BFMLALB_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd),
    BFMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd(BFMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd),
    BFMLALB_Vn_Em16_Vd(BFMLALB_Vn_Em16_Vd),
    BFMLALB_Vn_Vd_Vm(BFMLALB_Vn_Vd_Vm),
    BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLALT_SVE_Zm_16_SVE_Zn_SVE_Zd(BFMLALT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    BFMLALT_Vd_Vn_Vm(BFMLALT_Vd_Vn_Vm),
    BFMLALT_Vn_Em16_Vd(BFMLALT_Vn_Em16_Vd),
    BFMLAL_SME_ZA_array_off2x2_SME_Zmx2_SME_Znx2(BFMLAL_SME_ZA_array_off2x2_SME_Zmx2_SME_Znx2),
    BFMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4(BFMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4),
    BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    BFMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx4(
        BFMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx4,
    ),
    BFMLAL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2(
        BFMLAL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2,
    ),
    BFMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2(BFMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2),
    BFMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2(BFMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2),
    BFMLAL_SVE_Zn_SME_Zm_INDEX3_10_SME_ZA_array_off3x2(
        BFMLAL_SVE_Zn_SME_Zm_INDEX3_10_SME_ZA_array_off3x2,
    ),
    BFMLA_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(BFMLA_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    BFMLA_SVE_Zn_SVE_Zm_16_SVE_Zd_SVE_Pg3(BFMLA_SVE_Zn_SVE_Zm_16_SVE_Zd_SVE_Pg3),
    BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(BFMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    BFMLSLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn(BFMLSLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn),
    BFMLSLT_SVE_Zm_16_SVE_Zd_SVE_Zn(BFMLSLT_SVE_Zm_16_SVE_Zd_SVE_Zn),
    BFMLSL_SME_ZA_array_off2x2_SME_Zm_INDEX3_2_SME_Znx4(
        BFMLSL_SME_ZA_array_off2x2_SME_Zm_INDEX3_2_SME_Znx4,
    ),
    BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    BFMLSL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn(
        BFMLSL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn,
    ),
    BFMLSL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2(
        BFMLSL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2,
    ),
    BFMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4(BFMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4),
    BFMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2(BFMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2),
    BFMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2(BFMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2),
    BFMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm(BFMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm),
    BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLS_SVE_Zn_SVE_Zd_SVE_Pg3_SVE_Zm_16(BFMLS_SVE_Zn_SVE_Zd_SVE_Pg3_SVE_Zm_16),
    BFMMLA_SVE_Zn_SVE_Zm_16_SVE_Zd(BFMMLA_SVE_Zn_SVE_Zm_16_SVE_Zd),
    BFMMLA_Vn_Vm_Vd(BFMMLA_Vn_Vm_Vd),
    BFMOPA_SVE_Zn_SME_ZAda_2b_SME_Pm_SVE_Zm_16_SVE_Pg3(
        BFMOPA_SVE_Zn_SME_ZAda_2b_SME_Pm_SVE_Zm_16_SVE_Pg3,
    ),
    BFMOPS_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Zm_16_SVE_Pg3(
        BFMOPS_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Zm_16_SVE_Pg3,
    ),
    BFMUL_SVE_Zd_SVE_Pg3_SVE_Zm_5(BFMUL_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    BFMUL_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn(BFMUL_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn),
    BFMUL_SVE_Zm_16_SVE_Zd_SVE_Zn(BFMUL_SVE_Zm_16_SVE_Zd_SVE_Zn),
    BFM_IMMR_Rd_Rn_IMMS(BFM_IMMR_Rd_Rn_IMMS),
    BFSUB_SVE_Zd_SVE_Zm_16_SVE_Zn(BFSUB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BFSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3(BFSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    BFVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        BFVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    BGRP_SVE_Zd_SVE_Zm_16_SVE_Zn(BGRP_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BICS_Rd_Rm_SFT_Rn(BICS_Rd_Rm_SFT_Rn),
    BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BIC_Rd_Rn_Rm_SFT(BIC_Rd_Rn_Rm_SFT),
    BIC_SIMD_IMM_SFT_LSL_Vd_V_4H(BIC_SIMD_IMM_SFT_LSL_Vd_V_4H),
    BIC_SIMD_IMM_SFT_Vd(BIC_SIMD_IMM_SFT_Vd),
    BIC_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn(BIC_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn),
    BIC_SVE_Zd_SVE_Pg3_SVE_Zm_5(BIC_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    BIC_SVE_Zm_16_SVE_Zd_SVE_Zn(BIC_SVE_Zm_16_SVE_Zd_SVE_Zn),
    BIC_Vm_Vd_Vn(BIC_Vm_Vd_Vn),
    BIF_Vd_Vn_Vm(BIF_Vd_Vn_Vm),
    BIT_Vd_Vn_Vm(BIT_Vd_Vn_Vm),
    BLRAAZ_Rn(BLRAAZ_Rn),
    BLRAA_Rn_Rd_SP(BLRAA_Rn_Rd_SP),
    BLRABZ_Rn(BLRABZ_Rn),
    BLRAB_Rn_Rd_SP(BLRAB_Rn_Rd_SP),
    BLR_Rn(BLR_Rn),
    BL_ADDR_PCREL26(BL_ADDR_PCREL26),
    BMOPA_SME_Pm_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SVE_Zm_16(
        BMOPA_SME_Pm_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SVE_Zm_16,
    ),
    BMOPS_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SME_Pm(
        BMOPS_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SME_Pm,
    ),
    BRAAZ_Rn(BRAAZ_Rn),
    BRAA_Rn_Rd_SP(BRAA_Rn_Rd_SP),
    BRABZ_Rn(BRABZ_Rn),
    BRAB_Rn_Rd_SP(BRAB_Rn_Rd_SP),
    BRKAS_SVE_Pn_SVE_Pd_SVE_Pg4_10(BRKAS_SVE_Pn_SVE_Pd_SVE_Pg4_10),
    BRKA_SVE_Pn_SVE_Pg4_10_SVE_Pd(BRKA_SVE_Pn_SVE_Pg4_10_SVE_Pd),
    BRKBS_SVE_Pg4_10_SVE_Pn_SVE_Pd(BRKBS_SVE_Pg4_10_SVE_Pn_SVE_Pd),
    BRKB_SVE_Pn_SVE_Pg4_10_SVE_Pd(BRKB_SVE_Pn_SVE_Pg4_10_SVE_Pd),
    BRKNS_SVE_Pn_SVE_Pd_SVE_Pg4_10(BRKNS_SVE_Pn_SVE_Pd_SVE_Pg4_10),
    BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn(BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn),
    BRKPAS_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm(BRKPAS_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm),
    BRKPA_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10(BRKPA_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10),
    BRKPBS_SVE_Pn_SVE_Pm_SVE_Pg4_10_SVE_Pd(BRKPBS_SVE_Pn_SVE_Pm_SVE_Pg4_10_SVE_Pd),
    BRKPB_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10(BRKPB_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10),
    BRK_EXCEPTION(BRK_EXCEPTION),
    BR_Rn(BR_Rn),
    BSL1N_SVE_Zn_SVE_Zm_16_SVE_Zd(BSL1N_SVE_Zn_SVE_Zm_16_SVE_Zd),
    BSL2N_SVE_Zn_SVE_Zm_16_SVE_Zd(BSL2N_SVE_Zn_SVE_Zm_16_SVE_Zd),
    BSL_SVE_Zn_SVE_Zd_SVE_Zm_16(BSL_SVE_Zn_SVE_Zd_SVE_Zm_16),
    BSL_Vd_Vn_Vm(BSL_Vd_Vn_Vm),
    B_ADDR_PCREL26(B_ADDR_PCREL26),
    B_C_ADDR_PCREL19(B_C_ADDR_PCREL19),
    CADD_SVE_Zd_SVE_Zn_SVE_IMM_ROT3(CADD_SVE_Zd_SVE_Zn_SVE_IMM_ROT3),
    CASAB_Rs_Rt_ADDR_SIMPLE(CASAB_Rs_Rt_ADDR_SIMPLE),
    CASAH_Rt_Rs_ADDR_SIMPLE(CASAH_Rt_Rs_ADDR_SIMPLE),
    CASALB_ADDR_SIMPLE_Rs_Rt(CASALB_ADDR_SIMPLE_Rs_Rt),
    CASALH_Rt_Rs_ADDR_SIMPLE(CASALH_Rt_Rs_ADDR_SIMPLE),
    CASAL_Rt_ADDR_SIMPLE_Rs(CASAL_Rt_ADDR_SIMPLE_Rs),
    CASA_Rs_ADDR_SIMPLE_Rt(CASA_Rs_ADDR_SIMPLE_Rt),
    CASB_Rs_Rt_ADDR_SIMPLE(CASB_Rs_Rt_ADDR_SIMPLE),
    CASH_ADDR_SIMPLE_Rs_Rt(CASH_ADDR_SIMPLE_Rs_Rt),
    CASLB_Rs_Rt_ADDR_SIMPLE(CASLB_Rs_Rt_ADDR_SIMPLE),
    CASLH_ADDR_SIMPLE_Rt_Rs(CASLH_ADDR_SIMPLE_Rt_Rs),
    CASL_Rs_ADDR_SIMPLE_Rt(CASL_Rs_ADDR_SIMPLE_Rt),
    CASPAL_Rt_PAIRREG_ADDR_SIMPLE_Rs(CASPAL_Rt_PAIRREG_ADDR_SIMPLE_Rs),
    CASPA_ADDR_SIMPLE_Rt_Rs_PAIRREG(CASPA_ADDR_SIMPLE_Rt_Rs_PAIRREG),
    CASPL_PAIRREG_Rs_Rt_ADDR_SIMPLE(CASPL_PAIRREG_Rs_Rt_ADDR_SIMPLE),
    CASP_ADDR_SIMPLE_Rt_PAIRREG_Rs(CASP_ADDR_SIMPLE_Rt_PAIRREG_Rs),
    CAS_ADDR_SIMPLE_Rs_Rt(CAS_ADDR_SIMPLE_Rs_Rt),
    CBNZ_Rt_ADDR_PCREL19(CBNZ_Rt_ADDR_PCREL19),
    CBZ_ADDR_PCREL19_Rt(CBZ_ADDR_PCREL19_Rt),
    CCMN_Rn_CCMP_IMM_COND_NZCV(CCMN_Rn_CCMP_IMM_COND_NZCV),
    CCMN_Rn_COND_NZCV_Rm(CCMN_Rn_COND_NZCV_Rm),
    CCMP_Rn_NZCV_COND_CCMP_IMM(CCMP_Rn_NZCV_COND_CCMP_IMM),
    CCMP_Rn_NZCV_Rm_COND(CCMP_Rn_NZCV_Rm_COND),
    CDOT_SVE_IMM_ROT2_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX(CDOT_SVE_IMM_ROT2_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX),
    CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2(CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2),
    CDOT_SVE_Zn_SVE_Zd_SVE_IMM_ROT2_SVE_Zm_16(CDOT_SVE_Zn_SVE_Zd_SVE_IMM_ROT2_SVE_Zm_16),
    CFINV(CFINV),
    CHKFEAT_X16(CHKFEAT_X16),
    CLASTA_SVE_Pg3_Rd_SVE_Zm_5(CLASTA_SVE_Pg3_Rd_SVE_Zm_5),
    CLASTA_SVE_Pg3_SVE_Zm_5_SVE_Zd(CLASTA_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    CLASTA_SVE_Zm_5_SVE_Vd_SVE_Pg3(CLASTA_SVE_Zm_5_SVE_Vd_SVE_Pg3),
    CLASTB_Rd_SVE_Pg3_SVE_Zm_5(CLASTB_Rd_SVE_Pg3_SVE_Zm_5),
    CLASTB_SVE_Vd_SVE_Pg3_SVE_Zm_5(CLASTB_SVE_Vd_SVE_Pg3_SVE_Zm_5),
    CLASTB_SVE_Zm_5_SVE_Pg3_SVE_Zd(CLASTB_SVE_Zm_5_SVE_Pg3_SVE_Zd),
    CLREX_UIMM4(CLREX_UIMM4),
    CLS_Rd_Rn(CLS_Rd_Rn),
    CLS_SVE_Pg3_SVE_Zd_SVE_Zn(CLS_SVE_Pg3_SVE_Zd_SVE_Zn),
    CLS_Vd_Vn(CLS_Vd_Vn),
    CLZ_Rd_Rn(CLZ_Rd_Rn),
    CLZ_SVE_Zd_SVE_Zn_SVE_Pg3(CLZ_SVE_Zd_SVE_Zn_SVE_Pg3),
    CLZ_Vd_Vn(CLZ_Vd_Vn),
    CMEQ_IMM0_Sn_Sd(CMEQ_IMM0_Sn_Sd),
    CMEQ_Sn_Sm_Sd(CMEQ_Sn_Sm_Sd),
    CMEQ_Vd_Vn_IMM0(CMEQ_Vd_Vn_IMM0),
    CMEQ_Vn_Vm_Vd(CMEQ_Vn_Vm_Vd),
    CMGE_Sn_Sd_IMM0(CMGE_Sn_Sd_IMM0),
    CMGE_Sn_Sm_Sd(CMGE_Sn_Sm_Sd),
    CMGE_Vd_IMM0_Vn(CMGE_Vd_IMM0_Vn),
    CMGE_Vm_Vd_Vn(CMGE_Vm_Vd_Vn),
    CMGT_Sm_Sn_Sd(CMGT_Sm_Sn_Sd),
    CMGT_Sn_Sd_IMM0(CMGT_Sn_Sd_IMM0),
    CMGT_Vd_Vn_IMM0(CMGT_Vd_Vn_IMM0),
    CMGT_Vm_Vd_Vn(CMGT_Vm_Vd_Vn),
    CMHI_Sn_Sd_Sm(CMHI_Sn_Sd_Sm),
    CMHI_Vn_Vm_Vd(CMHI_Vn_Vm_Vd),
    CMHS_Sd_Sn_Sm(CMHS_Sd_Sn_Sm),
    CMHS_Vn_Vd_Vm(CMHS_Vn_Vd_Vm),
    CMLA_SVE_IMM_ROT2_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(CMLA_SVE_IMM_ROT2_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    CMLA_SVE_Zd_SVE_Zm3_INDEX_SVE_IMM_ROT2_SVE_Zn(CMLA_SVE_Zd_SVE_Zm3_INDEX_SVE_IMM_ROT2_SVE_Zn),
    CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2(CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2),
    CMLE_Sn_IMM0_Sd(CMLE_Sn_IMM0_Sd),
    CMLE_Vn_IMM0_Vd(CMLE_Vn_IMM0_Vd),
    CMLT_Sd_Sn_IMM0(CMLT_Sd_Sn_IMM0),
    CMLT_Vn_IMM0_Vd(CMLT_Vn_IMM0_Vd),
    CMPEQ_SIMM5_SVE_Pd_SVE_Pg3_SVE_Zn(CMPEQ_SIMM5_SVE_Pd_SVE_Pg3_SVE_Zn),
    CMPEQ_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3(CMPEQ_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3),
    CMPEQ_SVE_Zn_SVE_Zm_16_SVE_Pd_SVE_Pg3(CMPEQ_SVE_Zn_SVE_Zm_16_SVE_Pd_SVE_Pg3),
    CMPGE_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3(CMPGE_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3),
    CMPGE_SVE_Zn_SVE_Pd_SVE_Pg3_SIMM5(CMPGE_SVE_Zn_SVE_Pd_SVE_Pg3_SIMM5),
    CMPGE_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_Zm_16(CMPGE_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_Zm_16),
    CMPGT_SVE_Pd_SVE_Zm_16_SVE_Pg3_SVE_Zn(CMPGT_SVE_Pd_SVE_Zm_16_SVE_Pg3_SVE_Zn),
    CMPGT_SVE_Pg3_SIMM5_SVE_Pd_SVE_Zn(CMPGT_SVE_Pg3_SIMM5_SVE_Pd_SVE_Zn),
    CMPGT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd(CMPGT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd),
    CMPHI_SVE_Pd_SVE_Zn_SVE_Pg3_SVE_Zm_16(CMPHI_SVE_Pd_SVE_Zn_SVE_Pg3_SVE_Zm_16),
    CMPHI_SVE_UIMM7_SVE_Pd_SVE_Pg3_SVE_Zn(CMPHI_SVE_UIMM7_SVE_Pd_SVE_Pg3_SVE_Zn),
    CMPHI_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3(CMPHI_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3),
    CMPHS_SVE_Pd_SVE_Pg3_SVE_UIMM7_SVE_Zn(CMPHS_SVE_Pd_SVE_Pg3_SVE_UIMM7_SVE_Zn),
    CMPHS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16(CMPHS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16),
    CMPHS_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3(CMPHS_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3),
    CMPLE_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16(CMPLE_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16),
    CMPLE_SVE_Zn_SVE_Pg3_SVE_Pd_SIMM5(CMPLE_SVE_Zn_SVE_Pg3_SVE_Pd_SIMM5),
    CMPLO_SVE_Pd_SVE_UIMM7_SVE_Pg3_SVE_Zn(CMPLO_SVE_Pd_SVE_UIMM7_SVE_Pg3_SVE_Zn),
    CMPLO_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3(CMPLO_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3),
    CMPLS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16(CMPLS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16),
    CMPLS_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_UIMM7(CMPLS_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_UIMM7),
    CMPLT_SVE_Pg3_SVE_Pd_SIMM5_SVE_Zn(CMPLT_SVE_Pg3_SVE_Pd_SIMM5_SVE_Zn),
    CMPLT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd(CMPLT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd),
    CMPNE_SIMM5_SVE_Pg3_SVE_Zn_SVE_Pd(CMPNE_SIMM5_SVE_Pg3_SVE_Zn_SVE_Pd),
    CMPNE_SVE_Pd_SVE_Pg3_SVE_Zm_16_SVE_Zn(CMPNE_SVE_Pd_SVE_Pg3_SVE_Zm_16_SVE_Zn),
    CMPNE_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3(CMPNE_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3),
    CMTST_Sn_Sd_Sm(CMTST_Sn_Sd_Sm),
    CMTST_Vd_Vn_Vm(CMTST_Vd_Vn_Vm),
    CNOT_SVE_Zn_SVE_Zd_SVE_Pg3(CNOT_SVE_Zn_SVE_Zd_SVE_Pg3),
    CNTB_SVE_PATTERN_SCALED_Rd(CNTB_SVE_PATTERN_SCALED_Rd),
    CNTD_Rd_SVE_PATTERN_SCALED(CNTD_Rd_SVE_PATTERN_SCALED),
    CNTH_Rd_SVE_PATTERN_SCALED(CNTH_Rd_SVE_PATTERN_SCALED),
    CNTP_Rd_SME_VLxN_10_SME_PNn(CNTP_Rd_SME_VLxN_10_SME_PNn),
    CNTP_SVE_Pg4_10_SVE_Pn_Rd(CNTP_SVE_Pg4_10_SVE_Pn_Rd),
    CNTW_SVE_PATTERN_SCALED_Rd(CNTW_SVE_PATTERN_SCALED_Rd),
    CNT_Rn_Rd(CNT_Rn_Rd),
    CNT_SVE_Zn_SVE_Zd_SVE_Pg3(CNT_SVE_Zn_SVE_Zd_SVE_Pg3),
    CNT_Vd_Vn(CNT_Vd_Vn),
    COMPACT_SVE_Pg3_SVE_Zd_SVE_Zn(COMPACT_SVE_Pg3_SVE_Zd_SVE_Zn),
    CPYEN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYEN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYERN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYERN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYERTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYERTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYERTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYERTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYERTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYERTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYERT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYERT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYETRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYETRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYETWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYETWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYET_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYET_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYEWTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYEWTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYEWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYEWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYEWT_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYEWT_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFEN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFERTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFERTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFERTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFERTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFERTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYFERTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFETRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFETRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFETWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYFETWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYFET_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFET_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEWTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFEWTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFEWTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFEWTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFEWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFEWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFE_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFE_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYFMRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYFMRTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFMRTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFMRTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFMRTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFMRTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFMRTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFMRT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFMRT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFMTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFMTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFMTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFMTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFMT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFMT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFMWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFMWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFMWTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFMWTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFMWTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFMWTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFMWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFM_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYFM_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYFPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFPRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYFPRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYFPRTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFPTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFPTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFPTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFPTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYFPTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYFPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFPWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFPWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYFPWTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYFPWTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPWTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFPWTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFPWT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYFPWT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYFP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYFP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYMRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYMRTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYMRT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYMTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYMTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYMTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYMTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYMWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYMWTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYMWTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYMWTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYMWT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYMWT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYPRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYPRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYPRTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYPRTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYPRTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn(CPYPRTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn),
    CPYPRTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYPRTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYPTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYPTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYPTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYPTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYPTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPYPWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYPWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYPWTN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYPWTN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYPWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs(CPYPWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs),
    CPYPWTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs(CPYPWTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs),
    CPYPWT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd(CPYPWT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd),
    CPYP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd(CPYP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd),
    CPY_SVE_ASIMM_SVE_Pg4_16_SVE_Zd(CPY_SVE_ASIMM_SVE_Pg4_16_SVE_Zd),
    CPY_SVE_Pg3_Rn_SP_SVE_Zd(CPY_SVE_Pg3_Rn_SP_SVE_Zd),
    CPY_SVE_Pg3_SVE_Vn_SVE_Zd(CPY_SVE_Pg3_SVE_Vn_SVE_Zd),
    CRC32B_Rd_Rn_Rm(CRC32B_Rd_Rn_Rm),
    CRC32CB_Rn_Rd_Rm(CRC32CB_Rn_Rd_Rm),
    CRC32CH_Rn_Rm_Rd(CRC32CH_Rn_Rm_Rd),
    CRC32CW_Rn_Rd_Rm(CRC32CW_Rn_Rd_Rm),
    CRC32CX_Rn_Rm_Rd(CRC32CX_Rn_Rm_Rd),
    CRC32H_Rm_Rd_Rn(CRC32H_Rm_Rd_Rn),
    CRC32W_Rn_Rm_Rd(CRC32W_Rn_Rm_Rd),
    CRC32X_Rm_Rd_Rn(CRC32X_Rm_Rd_Rn),
    CSEL_COND_Rn_Rd_Rm(CSEL_COND_Rn_Rd_Rm),
    CSINC_Rd_Rn_COND_Rm(CSINC_Rd_Rn_COND_Rm),
    CSINV_Rd_COND_Rn_Rm(CSINV_Rd_COND_Rn_Rm),
    CSNEG_COND_Rm_Rd_Rn(CSNEG_COND_Rm_Rd_Rn),
    CTERMEQ_Rn_Rm(CTERMEQ_Rn_Rm),
    CTERMNE_Rm_Rn(CTERMNE_Rm_Rn),
    CTZ_Rd_Rn(CTZ_Rd_Rn),
    DCPS1_EXCEPTION(DCPS1_EXCEPTION),
    DCPS2_EXCEPTION(DCPS2_EXCEPTION),
    DCPS3_EXCEPTION(DCPS3_EXCEPTION),
    DECB_SVE_PATTERN_SCALED_Rd(DECB_SVE_PATTERN_SCALED_Rd),
    DECD_SVE_PATTERN_SCALED_Rd(DECD_SVE_PATTERN_SCALED_Rd),
    DECD_SVE_PATTERN_SCALED_SVE_Zd(DECD_SVE_PATTERN_SCALED_SVE_Zd),
    DECH_Rd_SVE_PATTERN_SCALED(DECH_Rd_SVE_PATTERN_SCALED),
    DECH_SVE_PATTERN_SCALED_SVE_Zd(DECH_SVE_PATTERN_SCALED_SVE_Zd),
    DECP_Rd_SVE_Pg4_5(DECP_Rd_SVE_Pg4_5),
    DECP_SVE_Pg4_5_SVE_Zd(DECP_SVE_Pg4_5_SVE_Zd),
    DECW_Rd_SVE_PATTERN_SCALED(DECW_Rd_SVE_PATTERN_SCALED),
    DECW_SVE_PATTERN_SCALED_SVE_Zd(DECW_SVE_PATTERN_SCALED_SVE_Zd),
    DGH(DGH),
    DMB_BARRIER(DMB_BARRIER),
    DRPS(DRPS),
    DSB_BARRIER(DSB_BARRIER),
    DSB_BARRIER_DSB_NXS(DSB_BARRIER_DSB_NXS),
    DUPM_SVE_Zd_SVE_LIMM(DUPM_SVE_Zd_SVE_LIMM),
    DUPQ_SVE_Zd_SVE_Zn_5_INDEX(DUPQ_SVE_Zd_SVE_Zn_5_INDEX),
    DUP_En_Sd(DUP_En_Sd),
    DUP_En_Vd(DUP_En_Vd),
    DUP_Rn_SP_SVE_Zd(DUP_Rn_SP_SVE_Zd),
    DUP_SVE_ASIMM_SVE_Zd(DUP_SVE_ASIMM_SVE_Zd),
    DUP_SVE_Zd_SVE_Zn_INDEX(DUP_SVE_Zd_SVE_Zn_INDEX),
    DUP_Vd_Rn(DUP_Vd_Rn),
    EON_Rn_Rd_Rm_SFT(EON_Rn_Rd_Rm_SFT),
    EOR3_SVE_Zm_16_SVE_Zd_SVE_Zn(EOR3_SVE_Zm_16_SVE_Zd_SVE_Zn),
    EOR3_Vm_Va_Vd_Vn(EOR3_Vm_Va_Vd_Vn),
    EORBT_SVE_Zn_SVE_Zd_SVE_Zm_16(EORBT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    EORQV_SVE_Pg3_Vd_SVE_Zn(EORQV_SVE_Pg3_Vd_SVE_Zn),
    EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    EORTB_SVE_Zn_SVE_Zm_16_SVE_Zd(EORTB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    EORV_SVE_Zn_SVE_Vd_SVE_Pg3(EORV_SVE_Zn_SVE_Vd_SVE_Pg3),
    EOR_LIMM_Rd_SP_Rn(EOR_LIMM_Rd_SP_Rn),
    EOR_Rm_SFT_Rn_Rd(EOR_Rm_SFT_Rn_Rd),
    EOR_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn(EOR_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn),
    EOR_SVE_Zd_SVE_LIMM(EOR_SVE_Zd_SVE_LIMM),
    EOR_SVE_Zm_5_SVE_Zd_SVE_Pg3(EOR_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    EOR_SVE_Zn_SVE_Zm_16_SVE_Zd(EOR_SVE_Zn_SVE_Zm_16_SVE_Zd),
    EOR_Vd_Vm_Vn(EOR_Vd_Vm_Vn),
    ERET(ERET),
    ERETAA(ERETAA),
    ERETAB(ERETAB),
    EXTQ_SVE_Zd_SVE_Zm_imm4(EXTQ_SVE_Zd_SVE_Zm_imm4),
    EXTR_Rm_Rn_Rd_IMMS(EXTR_Rm_Rn_Rd_IMMS),
    EXT_SVE_UIMM8_53_SVE_Zd_SVE_ZnxN(EXT_SVE_UIMM8_53_SVE_Zd_SVE_ZnxN),
    EXT_SVE_Zd_SVE_UIMM8_53_SVE_Zm_5(EXT_SVE_Zd_SVE_UIMM8_53_SVE_Zm_5),
    EXT_Vd_Vm_IDX_Vn(EXT_Vd_Vm_IDX_Vn),
    FABD_SVE_Zd_SVE_Zm_5_SVE_Pg3(FABD_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    FABD_Sd_Sm_Sn(FABD_Sd_Sm_Sn),
    FABD_Sd_Sn_Sm(FABD_Sd_Sn_Sm),
    FABD_Vm_Vd_Vn(FABD_Vm_Vd_Vn),
    FABD_Vn_Vd_Vm(FABD_Vn_Vd_Vm),
    FABS_Fd_Fn(FABS_Fd_Fn),
    FABS_Fd_S_H_Fn_S_H(FABS_Fd_S_H_Fn_S_H),
    FABS_SVE_Pg3_SVE_Zn_SVE_Zd(FABS_SVE_Pg3_SVE_Zn_SVE_Zd),
    FABS_Vd_Vn(FABS_Vd_Vn),
    FABS_Vn_Vd(FABS_Vn_Vd),
    FACGE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16(FACGE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16),
    FACGE_Sd_Sm_Sn(FACGE_Sd_Sm_Sn),
    FACGE_Sn_Sd_Sm(FACGE_Sn_Sd_Sm),
    FACGE_Vm_Vd_Vn(FACGE_Vm_Vd_Vn),
    FACGE_Vn_Vm_Vd(FACGE_Vn_Vm_Vd),
    FACGT_SVE_Pd_SVE_Zn_SVE_Zm_16_SVE_Pg3(FACGT_SVE_Pd_SVE_Zn_SVE_Zm_16_SVE_Pg3),
    FACGT_Sn_S_S_Sm_S_S_Sd_S_S(FACGT_Sn_S_S_Sm_S_S_Sd_S_S),
    FACGT_Sn_Sm_Sd(FACGT_Sn_Sm_Sd),
    FACGT_Vd_Vm_Vn(FACGT_Vd_Vm_Vn),
    FACGT_Vm_Vd_Vn(FACGT_Vm_Vd_Vn),
    FADDA_SVE_Vd_SVE_Pg3_SVE_Zm_5(FADDA_SVE_Vd_SVE_Pg3_SVE_Zm_5),
    FADDP_SVE_Pg3_SVE_Zd_SVE_Zn(FADDP_SVE_Pg3_SVE_Zd_SVE_Zn),
    FADDP_Sd_S_S_Vn_V_2S(FADDP_Sd_S_S_Vn_V_2S),
    FADDP_Sd_Vn(FADDP_Sd_Vn),
    FADDP_Vd_Vn_Vm(FADDP_Vd_Vn_Vm),
    FADDP_Vn_Vm_Vd(FADDP_Vn_Vm_Vd),
    FADDQV_Vd_SVE_Zn_SVE_Pg3(FADDQV_Vd_SVE_Zn_SVE_Pg3),
    FADDV_SVE_Pg3_SVE_Vd_SVE_Zn(FADDV_SVE_Pg3_SVE_Vd_SVE_Zn),
    FADD_Fd_Fn_Fm(FADD_Fd_Fn_Fm),
    FADD_Fn_Fd_Fm(FADD_Fn_Fd_Fm),
    FADD_SME_ZA_array_off3_0_SME_Znx2(FADD_SME_ZA_array_off3_0_SME_Znx2),
    FADD_SME_Znx4_SME_ZA_array_off3_0(FADD_SME_Znx4_SME_ZA_array_off3_0),
    FADD_SVE_I1_HALF_ONE_SVE_Pg3_SVE_Zd(FADD_SVE_I1_HALF_ONE_SVE_Pg3_SVE_Zd),
    FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5(FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    FADD_SVE_Zd_SVE_Zn_SVE_Zm_16(FADD_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FADD_Vm_Vd_Vn(FADD_Vm_Vd_Vn),
    FADD_Vn_Vm_Vd(FADD_Vn_Vm_Vd),
    FCADD_SVE_Zm_5_SVE_IMM_ROT1_SVE_Zd_SVE_Pg3(FCADD_SVE_Zm_5_SVE_IMM_ROT1_SVE_Zd_SVE_Pg3),
    FCADD_Vm_Vd_Vn_IMM_ROT3(FCADD_Vm_Vd_Vn_IMM_ROT3),
    FCCMPE_COND_Fm_Fn_NZCV(FCCMPE_COND_Fm_Fn_NZCV),
    FCCMPE_Fm_COND_Fn_NZCV(FCCMPE_Fm_COND_Fn_NZCV),
    FCCMP_Fm_Fn_COND_NZCV(FCCMP_Fm_Fn_COND_NZCV),
    FCCMP_Fn_Fm_NZCV_COND(FCCMP_Fn_Fm_NZCV_COND),
    FCLAMP_SVE_Zm_16_SME_Zdnx2_SVE_Zn(FCLAMP_SVE_Zm_16_SME_Zdnx2_SVE_Zn),
    FCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4(FCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4),
    FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16(FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16),
    FCMEQ_FPIMM0_Sd_Sn(FCMEQ_FPIMM0_Sd_Sn),
    FCMEQ_SVE_Pg3_FPIMM0_SVE_Pd_SVE_Zn(FCMEQ_SVE_Pg3_FPIMM0_SVE_Pd_SVE_Zn),
    FCMEQ_SVE_Zm_16_SVE_Pg3_SVE_Zn_SVE_Pd(FCMEQ_SVE_Zm_16_SVE_Pg3_SVE_Zn_SVE_Pd),
    FCMEQ_Sd_Sn_FPIMM0(FCMEQ_Sd_Sn_FPIMM0),
    FCMEQ_Sd_Sn_Sm(FCMEQ_Sd_Sn_Sm),
    FCMEQ_Sm_Sd_Sn(FCMEQ_Sm_Sd_Sn),
    FCMEQ_Vd_Vn_Vm(FCMEQ_Vd_Vn_Vm),
    FCMEQ_Vm_Vn_Vd(FCMEQ_Vm_Vn_Vd),
    FCMEQ_Vn_V_4H_Vd_V_4H_FPIMM0(FCMEQ_Vn_V_4H_Vd_V_4H_FPIMM0),
    FCMEQ_Vn_Vd_FPIMM0(FCMEQ_Vn_Vd_FPIMM0),
    FCMGE_FPIMM0_SVE_Pd_SVE_Pg3_SVE_Zn(FCMGE_FPIMM0_SVE_Pd_SVE_Pg3_SVE_Zn),
    FCMGE_FPIMM0_Sd_Sn(FCMGE_FPIMM0_Sd_Sn),
    FCMGE_FPIMM0_Vn_Vd(FCMGE_FPIMM0_Vn_Vd),
    FCMGE_SVE_Zm_16_SVE_Pg3_SVE_Pd_SVE_Zn(FCMGE_SVE_Zm_16_SVE_Pg3_SVE_Pd_SVE_Zn),
    FCMGE_Sd_FPIMM0_Sn(FCMGE_Sd_FPIMM0_Sn),
    FCMGE_Sn_Sd_Sm(FCMGE_Sn_Sd_Sm),
    FCMGE_Sn_Sm_Sd(FCMGE_Sn_Sm_Sd),
    FCMGE_Vd_Vm_Vn(FCMGE_Vd_Vm_Vn),
    FCMGE_Vd_Vn_FPIMM0(FCMGE_Vd_Vn_FPIMM0),
    FCMGE_Vd_Vn_Vm(FCMGE_Vd_Vn_Vm),
    FCMGT_FPIMM0_Vd_V_4H_Vn_V_4H(FCMGT_FPIMM0_Vd_V_4H_Vn_V_4H),
    FCMGT_FPIMM0_Vd_Vn(FCMGT_FPIMM0_Vd_Vn),
    FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FCMGT_SVE_Zn_SVE_Pg3_SVE_Pd_FPIMM0(FCMGT_SVE_Zn_SVE_Pg3_SVE_Pd_FPIMM0),
    FCMGT_Sd_Sn_FPIMM0(FCMGT_Sd_Sn_FPIMM0),
    FCMGT_Sm_Sd_Sn(FCMGT_Sm_Sd_Sn),
    FCMGT_Sn_Sd_FPIMM0(FCMGT_Sn_Sd_FPIMM0),
    FCMGT_Sn_Sd_Sm(FCMGT_Sn_Sd_Sm),
    FCMGT_Vd_V_2S_Vm_V_2S_Vn_V_2S(FCMGT_Vd_V_2S_Vm_V_2S_Vn_V_2S),
    FCMGT_Vd_Vm_Vn(FCMGT_Vd_Vm_Vn),
    FCMLA_Em_IMM_ROT2_Vn_Vd(FCMLA_Em_IMM_ROT2_Vn_Vd),
    FCMLA_SVE_IMM_ROT2_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd(FCMLA_SVE_IMM_ROT2_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd),
    FCMLA_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2_SVE_Zd(FCMLA_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2_SVE_Zd),
    FCMLA_SVE_Zn_SVE_IMM_ROT2_SVE_Zd_SVE_Zm3_INDEX(FCMLA_SVE_Zn_SVE_IMM_ROT2_SVE_Zd_SVE_Zm3_INDEX),
    FCMLA_Vd_Vm_Vn_IMM_ROT1(FCMLA_Vd_Vm_Vn_IMM_ROT1),
    FCMLE_FPIMM0_Vd_Vn(FCMLE_FPIMM0_Vd_Vn),
    FCMLE_SVE_Zn_SVE_Pd_FPIMM0_SVE_Pg3(FCMLE_SVE_Zn_SVE_Pd_FPIMM0_SVE_Pg3),
    FCMLE_Sd_Sn_FPIMM0(FCMLE_Sd_Sn_FPIMM0),
    FCMLE_Sn_FPIMM0_Sd(FCMLE_Sn_FPIMM0_Sd),
    FCMLE_Vn_Vd_FPIMM0(FCMLE_Vn_Vd_FPIMM0),
    FCMLT_FPIMM0_Sd_Sn(FCMLT_FPIMM0_Sd_Sn),
    FCMLT_FPIMM0_Sn_Sd(FCMLT_FPIMM0_Sn_Sd),
    FCMLT_FPIMM0_Vn_Vd(FCMLT_FPIMM0_Vn_Vd),
    FCMLT_SVE_Zn_SVE_Pg3_FPIMM0_SVE_Pd(FCMLT_SVE_Zn_SVE_Pg3_FPIMM0_SVE_Pd),
    FCMLT_Vd_FPIMM0_Vn(FCMLT_Vd_FPIMM0_Vn),
    FCMNE_FPIMM0_SVE_Zn_SVE_Pd_SVE_Pg3(FCMNE_FPIMM0_SVE_Zn_SVE_Pd_SVE_Pg3),
    FCMNE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16(FCMNE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16),
    FCMPE_Fn_FPIMM0(FCMPE_Fn_FPIMM0),
    FCMPE_Fn_Fm(FCMPE_Fn_Fm),
    FCMPE_Fn_S_H_FPIMM0_S_H(FCMPE_Fn_S_H_FPIMM0_S_H),
    FCMPE_Fn_S_H_Fm_S_H(FCMPE_Fn_S_H_Fm_S_H),
    FCMP_FPIMM0_Fn(FCMP_FPIMM0_Fn),
    FCMP_FPIMM0_S_H_Fn_S_H(FCMP_FPIMM0_S_H_Fn_S_H),
    FCMP_Fm_Fn(FCMP_Fm_Fn),
    FCMP_Fn_Fm(FCMP_Fn_Fm),
    FCMUO_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16(FCMUO_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16),
    FCPY_SVE_Zd_SVE_FPIMM8_SVE_Pg4_16(FCPY_SVE_Zd_SVE_FPIMM8_SVE_Pg4_16),
    FCSEL_Fn_COND_Fd_Fm(FCSEL_Fn_COND_Fd_Fm),
    FCSEL_Fn_S_H_COND_Fd_S_H_Fm_S_H(FCSEL_Fn_S_H_COND_Fd_S_H_Fm_S_H),
    FCVTAS_Fn_Rd(FCVTAS_Fn_Rd),
    FCVTAS_Rd_Fn(FCVTAS_Rd_Fn),
    FCVTAS_Sn_S_H_Sd_S_H(FCVTAS_Sn_S_H_Sd_S_H),
    FCVTAS_Sn_Sd(FCVTAS_Sn_Sd),
    FCVTAS_Vd_Vn(FCVTAS_Vd_Vn),
    FCVTAS_Vn_Vd(FCVTAS_Vn_Vd),
    FCVTAU_Fn_Rd(FCVTAU_Fn_Rd),
    FCVTAU_Rd_Fn(FCVTAU_Rd_Fn),
    FCVTAU_Sd_S_H_Sn_S_H(FCVTAU_Sd_S_H_Sn_S_H),
    FCVTAU_Sd_Sn(FCVTAU_Sd_Sn),
    FCVTAU_Vd_Vn(FCVTAU_Vd_Vn),
    FCVTAU_Vn_Vd(FCVTAU_Vn_Vd),
    FCVTL2_Vd_Vn(FCVTL2_Vd_Vn),
    FCVTLT_SVE_Pg3_P_M_SVE_Zn_S_S_SVE_Zd_S_D(FCVTLT_SVE_Pg3_P_M_SVE_Zn_S_S_SVE_Zd_S_D),
    FCVTLT_SVE_Pg3_SVE_Zn_SVE_Zd(FCVTLT_SVE_Pg3_SVE_Zn_SVE_Zd),
    FCVTL_Vd_Vn(FCVTL_Vd_Vn),
    FCVTMS_Fn_Rd(FCVTMS_Fn_Rd),
    FCVTMS_Rd_Fn(FCVTMS_Rd_Fn),
    FCVTMS_Sd_Sn(FCVTMS_Sd_Sn),
    FCVTMS_Sn_Sd(FCVTMS_Sn_Sd),
    FCVTMS_Vd_Vn(FCVTMS_Vd_Vn),
    FCVTMS_Vn_Vd(FCVTMS_Vn_Vd),
    FCVTMU_Rd_Fn(FCVTMU_Rd_Fn),
    FCVTMU_Rd_W_Fn_S_H(FCVTMU_Rd_W_Fn_S_H),
    FCVTMU_Sd_Sn(FCVTMU_Sd_Sn),
    FCVTMU_Sn_Sd(FCVTMU_Sn_Sd),
    FCVTMU_Vd_V_4H_Vn_V_4H(FCVTMU_Vd_V_4H_Vn_V_4H),
    FCVTMU_Vd_Vn(FCVTMU_Vd_Vn),
    FCVTN2_Vn_Vd(FCVTN2_Vn_Vd),
    FCVTNS_Fn_Rd(FCVTNS_Fn_Rd),
    FCVTNS_Rd_Fn(FCVTNS_Rd_Fn),
    FCVTNS_Sd_Sn(FCVTNS_Sd_Sn),
    FCVTNS_Sn_Sd(FCVTNS_Sn_Sd),
    FCVTNS_Vd_V_4H_Vn_V_4H(FCVTNS_Vd_V_4H_Vn_V_4H),
    FCVTNS_Vd_Vn(FCVTNS_Vd_Vn),
    FCVTNT_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_S(FCVTNT_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_S),
    FCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd(FCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd),
    FCVTNU_Fn_Rd(FCVTNU_Fn_Rd),
    FCVTNU_Fn_S_H_Rd_W(FCVTNU_Fn_S_H_Rd_W),
    FCVTNU_Sn_S_H_Sd_S_H(FCVTNU_Sn_S_H_Sd_S_H),
    FCVTNU_Sn_Sd(FCVTNU_Sn_Sd),
    FCVTNU_Vn_V_4H_Vd_V_4H(FCVTNU_Vn_V_4H_Vd_V_4H),
    FCVTNU_Vn_Vd(FCVTNU_Vn_Vd),
    FCVTN_SVE_Zd_SME_Znx2(FCVTN_SVE_Zd_SME_Znx2),
    FCVTN_Vd_Vn(FCVTN_Vd_Vn),
    FCVTPS_Fn_Rd(FCVTPS_Fn_Rd),
    FCVTPS_Rd_Fn(FCVTPS_Rd_Fn),
    FCVTPS_Sd_Sn(FCVTPS_Sd_Sn),
    FCVTPS_Sn_Sd(FCVTPS_Sn_Sd),
    FCVTPS_Vd_Vn(FCVTPS_Vd_Vn),
    FCVTPS_Vn_Vd(FCVTPS_Vn_Vd),
    FCVTPU_Fn_Rd(FCVTPU_Fn_Rd),
    FCVTPU_Rd_Fn(FCVTPU_Rd_Fn),
    FCVTPU_Sd_Sn(FCVTPU_Sd_Sn),
    FCVTPU_Sn_Sd(FCVTPU_Sn_Sd),
    FCVTPU_Vd_Vn(FCVTPU_Vd_Vn),
    FCVTPU_Vn_Vd(FCVTPU_Vn_Vd),
    FCVTXN2_Vd_Vn(FCVTXN2_Vd_Vn),
    FCVTXNT_SVE_Pg3_SVE_Zd_SVE_Zn(FCVTXNT_SVE_Pg3_SVE_Zd_SVE_Zn),
    FCVTXN_Sd_Sn(FCVTXN_Sd_Sn),
    FCVTXN_Vn_Vd(FCVTXN_Vn_Vd),
    FCVTX_SVE_Zn_SVE_Zd_SVE_Pg3(FCVTX_SVE_Zn_SVE_Zd_SVE_Pg3),
    FCVTZS_FBITS_Rd_Fn(FCVTZS_FBITS_Rd_Fn),
    FCVTZS_FBITS_imm_1_32_Rd_W_Fn_S_H(FCVTZS_FBITS_imm_1_32_Rd_W_Fn_S_H),
    FCVTZS_Fn_Rd(FCVTZS_Fn_Rd),
    FCVTZS_Fn_S_H_Rd_W(FCVTZS_Fn_S_H_Rd_W),
    FCVTZS_IMM_VLSR_Vd_Vn(FCVTZS_IMM_VLSR_Vd_Vn),
    FCVTZS_IMM_VLSR_Vn_Vd(FCVTZS_IMM_VLSR_Vn_Vd),
    FCVTZS_SME_Zdnx2_SME_Znx2(FCVTZS_SME_Zdnx2_SME_Znx2),
    FCVTZS_SME_Zdnx4_SME_Znx4(FCVTZS_SME_Zdnx4_SME_Znx4),
    FCVTZS_SVE_Pg3_P_M_SVE_Zd_S_S_SVE_Zn_S_H(FCVTZS_SVE_Pg3_P_M_SVE_Zd_S_S_SVE_Zn_S_H),
    FCVTZS_SVE_Pg3_P_M_SVE_Zn_S_H_SVE_Zd_S_H(FCVTZS_SVE_Pg3_P_M_SVE_Zn_S_H_SVE_Zd_S_H),
    FCVTZS_SVE_Pg3_SVE_Zd_SVE_Zn(FCVTZS_SVE_Pg3_SVE_Zd_SVE_Zn),
    FCVTZS_SVE_Pg3_SVE_Zn_SVE_Zd(FCVTZS_SVE_Pg3_SVE_Zn_SVE_Zd),
    FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTZS_SVE_Zn_SVE_Zd_SVE_Pg3(FCVTZS_SVE_Zn_SVE_Zd_SVE_Pg3),
    FCVTZS_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M(FCVTZS_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M),
    FCVTZS_Sd_IMM_VLSR_Sn(FCVTZS_Sd_IMM_VLSR_Sn),
    FCVTZS_Sd_Sn(FCVTZS_Sd_Sn),
    FCVTZS_Sd_Sn_IMM_VLSR(FCVTZS_Sd_Sn_IMM_VLSR),
    FCVTZS_Sn_Sd(FCVTZS_Sn_Sd),
    FCVTZS_Vd_Vn(FCVTZS_Vd_Vn),
    FCVTZS_Vn_Vd(FCVTZS_Vn_Vd),
    FCVTZU_IMM_VLSR_Sd_Sn(FCVTZU_IMM_VLSR_Sd_Sn),
    FCVTZU_Rd_FBITS_Fn(FCVTZU_Rd_FBITS_Fn),
    FCVTZU_Rd_Fn(FCVTZU_Rd_Fn),
    FCVTZU_Rd_Fn_FBITS(FCVTZU_Rd_Fn_FBITS),
    FCVTZU_Rd_W_Fn_S_H(FCVTZU_Rd_W_Fn_S_H),
    FCVTZU_SME_Znx2_SME_Zdnx2(FCVTZU_SME_Znx2_SME_Zdnx2),
    FCVTZU_SME_Znx4_SME_Zdnx4(FCVTZU_SME_Znx4_SME_Zdnx4),
    FCVTZU_SVE_Pg3_SVE_Zn_SVE_Zd(FCVTZU_SVE_Pg3_SVE_Zn_SVE_Zd),
    FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S(FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVTZU_SVE_Zn_SVE_Pg3_SVE_Zd(FCVTZU_SVE_Zn_SVE_Pg3_SVE_Zd),
    FCVTZU_SVE_Zn_SVE_Zd_SVE_Pg3(FCVTZU_SVE_Zn_SVE_Zd_SVE_Pg3),
    FCVTZU_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M(FCVTZU_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M),
    FCVTZU_SVE_Zn_S_H_SVE_Zd_S_D_SVE_Pg3_P_M(FCVTZU_SVE_Zn_S_H_SVE_Zd_S_D_SVE_Pg3_P_M),
    FCVTZU_Sd_Sn(FCVTZU_Sd_Sn),
    FCVTZU_Sd_Sn_IMM_VLSR(FCVTZU_Sd_Sn_IMM_VLSR),
    FCVTZU_Sn_Sd(FCVTZU_Sn_Sd),
    FCVTZU_Vd_V_4H_Vn_V_4H(FCVTZU_Vd_V_4H_Vn_V_4H),
    FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H(FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H),
    FCVTZU_Vd_Vn(FCVTZU_Vd_Vn),
    FCVTZU_Vd_Vn_IMM_VLSR(FCVTZU_Vd_Vn_IMM_VLSR),
    FCVT_Fd_Fn(FCVT_Fd_Fn),
    FCVT_SME_Znx2_SVE_Zd(FCVT_SME_Znx2_SVE_Zd),
    FCVT_SVE_Pg3_SVE_Zd_SVE_Zn(FCVT_SVE_Pg3_SVE_Zd_SVE_Zn),
    FCVT_SVE_Pg3_SVE_Zn_SVE_Zd(FCVT_SVE_Pg3_SVE_Zn_SVE_Zd),
    FCVT_SVE_Zd_SVE_Pg3_SVE_Zn(FCVT_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H(FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S(FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVT_SVE_Zn_SVE_Pg3_SVE_Zd(FCVT_SVE_Zn_SVE_Pg3_SVE_Zd),
    FDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd(FDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    FDIV_Fd_Fn_Fm(FDIV_Fd_Fn_Fm),
    FDIV_Fn_Fd_Fm(FDIV_Fn_Fd_Fm),
    FDIV_SVE_Zm_5_SVE_Pg3_SVE_Zd(FDIV_SVE_Zm_5_SVE_Pg3_SVE_Zd),
    FDIV_Vd_Vm_Vn(FDIV_Vd_Vm_Vn),
    FDIV_Vd_Vn_Vm(FDIV_Vd_Vn_Vm),
    FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    FDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(FDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    FDOT_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0(FDOT_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0),
    FDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zmx4(FDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zmx4),
    FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd(FDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd),
    FDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0(FDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0),
    FDUP_SVE_Zd_SVE_FPIMM8(FDUP_SVE_Zd_SVE_FPIMM8),
    FEXPA_SVE_Zn_SVE_Zd(FEXPA_SVE_Zn_SVE_Zd),
    FJCVTZS_Fn_Rd(FJCVTZS_Fn_Rd),
    FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn(FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn),
    FMADD_Fa_Fd_Fn_Fm(FMADD_Fa_Fd_Fn_Fm),
    FMADD_Fm_Fd_Fa_Fn(FMADD_Fm_Fd_Fa_Fn),
    FMAD_SVE_Pg3_SVE_Za_16_SVE_Zm_5_SVE_Zd(FMAD_SVE_Pg3_SVE_Za_16_SVE_Zm_5_SVE_Zd),
    FMAXNMP_SVE_Zn_SVE_Zd_SVE_Pg3(FMAXNMP_SVE_Zn_SVE_Zd_SVE_Pg3),
    FMAXNMP_Sd_Vn(FMAXNMP_Sd_Vn),
    FMAXNMP_Vd_Vm_Vn(FMAXNMP_Vd_Vm_Vn),
    FMAXNMP_Vm_Vd_Vn(FMAXNMP_Vm_Vd_Vn),
    FMAXNMP_Vn_Sd(FMAXNMP_Vn_Sd),
    FMAXNMQV_SVE_Zn_SVE_Pg3_Vd(FMAXNMQV_SVE_Zn_SVE_Pg3_Vd),
    FMAXNMV_Fd_Vn(FMAXNMV_Fd_Vn),
    FMAXNMV_SVE_Pg3_SVE_Vd_SVE_Zn(FMAXNMV_SVE_Pg3_SVE_Vd_SVE_Zn),
    FMAXNMV_Vn_Fd(FMAXNMV_Vn_Fd),
    FMAXNM_Fm_Fd_Fn(FMAXNM_Fm_Fd_Fn),
    FMAXNM_Fn_Fm_Fd(FMAXNM_Fn_Fm_Fd),
    FMAXNM_SME_Zdnx2_SME_Zmx2(FMAXNM_SME_Zdnx2_SME_Zmx2),
    FMAXNM_SME_Zdnx4_SME_Zm(FMAXNM_SME_Zdnx4_SME_Zm),
    FMAXNM_SME_Zm_SME_Zdnx2(FMAXNM_SME_Zm_SME_Zdnx2),
    FMAXNM_SME_Zmx4_SME_Zdnx4(FMAXNM_SME_Zmx4_SME_Zdnx4),
    FMAXNM_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3(FMAXNM_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3),
    FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3(FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    FMAXNM_Vd_Vm_Vn(FMAXNM_Vd_Vm_Vn),
    FMAXNM_Vn_Vm_Vd(FMAXNM_Vn_Vm_Vd),
    FMAXP_SVE_Pg3_SVE_Zn_SVE_Zd(FMAXP_SVE_Pg3_SVE_Zn_SVE_Zd),
    FMAXP_Vd_Vm_Vn(FMAXP_Vd_Vm_Vn),
    FMAXP_Vm_Vn_Vd(FMAXP_Vm_Vn_Vd),
    FMAXP_Vn_Sd(FMAXP_Vn_Sd),
    FMAXP_Vn_V_2S_Sd_S_S(FMAXP_Vn_V_2S_Sd_S_S),
    FMAXQV_Vd_SVE_Pg3_SVE_Zn(FMAXQV_Vd_SVE_Pg3_SVE_Zn),
    FMAXV_Fd_Vn(FMAXV_Fd_Vn),
    FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn(FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn),
    FMAXV_Vn_Fd(FMAXV_Vn_Fd),
    FMAX_Fd_Fn_Fm(FMAX_Fd_Fn_Fm),
    FMAX_Fn_Fd_Fm(FMAX_Fn_Fd_Fm),
    FMAX_SME_Zdnx2_SME_Zm(FMAX_SME_Zdnx2_SME_Zm),
    FMAX_SME_Zdnx2_SME_Zmx2(FMAX_SME_Zdnx2_SME_Zmx2),
    FMAX_SME_Zm_SME_Zdnx4(FMAX_SME_Zm_SME_Zdnx4),
    FMAX_SME_Zmx4_SME_Zdnx4(FMAX_SME_Zmx4_SME_Zdnx4),
    FMAX_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE(FMAX_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE),
    FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd(FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    FMAX_Vd_Vn_Vm(FMAX_Vd_Vn_Vm),
    FMAX_Vn_Vd_Vm(FMAX_Vn_Vd_Vm),
    FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zn(FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zn),
    FMINNMP_Sd_Vn(FMINNMP_Sd_Vn),
    FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMINNMP_Vd_Vn_Vm(FMINNMP_Vd_Vn_Vm),
    FMINNMP_Vn_Sd(FMINNMP_Vn_Sd),
    FMINNMQV_Vd_SVE_Zn_SVE_Pg3(FMINNMQV_Vd_SVE_Zn_SVE_Pg3),
    FMINNMV_Fd_Vn(FMINNMV_Fd_Vn),
    FMINNMV_SVE_Pg3_SVE_Vd_SVE_Zn(FMINNMV_SVE_Pg3_SVE_Vd_SVE_Zn),
    FMINNMV_Vn_Fd(FMINNMV_Vn_Fd),
    FMINNM_Fd_Fn_Fm(FMINNM_Fd_Fn_Fm),
    FMINNM_Fm_Fd_Fn(FMINNM_Fm_Fd_Fn),
    FMINNM_SME_Zdnx2_SME_Zmx2(FMINNM_SME_Zdnx2_SME_Zmx2),
    FMINNM_SME_Zdnx4_SME_Zm(FMINNM_SME_Zdnx4_SME_Zm),
    FMINNM_SME_Zm_SME_Zdnx2(FMINNM_SME_Zm_SME_Zdnx2),
    FMINNM_SME_Zmx4_SME_Zdnx4(FMINNM_SME_Zmx4_SME_Zdnx4),
    FMINNM_SVE_I1_ZERO_ONE_SVE_Pg3_SVE_Zd(FMINNM_SVE_I1_ZERO_ONE_SVE_Pg3_SVE_Zd),
    FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd(FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd),
    FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMINNM_Vd_Vn_Vm(FMINNM_Vd_Vn_Vm),
    FMINP_SVE_Zn_SVE_Pg3_SVE_Zd(FMINP_SVE_Zn_SVE_Pg3_SVE_Zd),
    FMINP_Sd_S_S_Vn_V_2S(FMINP_Sd_S_S_Vn_V_2S),
    FMINP_Sd_Vn(FMINP_Sd_Vn),
    FMINP_Vd_Vm_Vn(FMINP_Vd_Vm_Vn),
    FMINP_Vd_Vn_Vm(FMINP_Vd_Vn_Vm),
    FMINQV_Vd_SVE_Pg3_SVE_Zn(FMINQV_Vd_SVE_Pg3_SVE_Zn),
    FMINV_SVE_Pg3_SVE_Vd_SVE_Zn(FMINV_SVE_Pg3_SVE_Vd_SVE_Zn),
    FMINV_Vn_Fd(FMINV_Vn_Fd),
    FMINV_Vn_V_4S_Fd_S_S(FMINV_Vn_V_4S_Fd_S_S),
    FMIN_Fd_Fm_Fn(FMIN_Fd_Fm_Fn),
    FMIN_Fm_Fd_Fn(FMIN_Fm_Fd_Fn),
    FMIN_SME_Zdnx2_SME_Zm(FMIN_SME_Zdnx2_SME_Zm),
    FMIN_SME_Zdnx2_SME_Zmx2(FMIN_SME_Zdnx2_SME_Zmx2),
    FMIN_SME_Zdnx4_SME_Zm(FMIN_SME_Zdnx4_SME_Zm),
    FMIN_SME_Zdnx4_SME_Zmx4(FMIN_SME_Zdnx4_SME_Zmx4),
    FMIN_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3(FMIN_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3),
    FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3(FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    FMIN_Vm_V_2S_Vd_V_2S_Vn_V_2S(FMIN_Vm_V_2S_Vd_V_2S_Vn_V_2S),
    FMIN_Vm_Vd_Vn(FMIN_Vm_Vd_Vn),
    FMLAL2_Vd_Em16_Vn(FMLAL2_Vd_Em16_Vn),
    FMLAL2_Vm_Vd_Vn(FMLAL2_Vm_Vd_Vn),
    FMLAL2_Vm_Vn_Vd(FMLAL2_Vm_Vn_Vd),
    FMLAL2_Vn_Vd_Em16(FMLAL2_Vn_Vd_Em16),
    FMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd(FMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd),
    FMLALB_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd(FMLALB_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd),
    FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMLALT_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(FMLALT_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    FMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4(FMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4),
    FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    FMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2(FMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2),
    FMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2(FMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2),
    FMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2(
        FMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2,
    ),
    FMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2(
        FMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2,
    ),
    FMLAL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10(
        FMLAL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10,
    ),
    FMLAL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2(FMLAL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2),
    FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H(FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H),
    FMLAL_Vd_Vm_Vn(FMLAL_Vd_Vm_Vn),
    FMLAL_Vd_Vn_Em16(FMLAL_Vd_Vn_Em16),
    FMLAL_Vd_Vn_Vm(FMLAL_Vd_Vn_Vm),
    FMLA_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4(FMLA_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4),
    FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    FMLA_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(FMLA_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    FMLA_SME_Zm_S_S_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S(
        FMLA_SME_Zm_S_S_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S,
    ),
    FMLA_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX1(
        FMLA_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX1,
    ),
    FMLA_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        FMLA_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    FMLA_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0(FMLA_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0),
    FMLA_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2(
        FMLA_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2,
    ),
    FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn(FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn),
    FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    FMLA_SVE_Zm3_INDEX_SVE_Zd_SVE_Zn(FMLA_SVE_Zm3_INDEX_SVE_Zd_SVE_Zn),
    FMLA_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd(FMLA_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd),
    FMLA_Sd_Sn_Em16(FMLA_Sd_Sn_Em16),
    FMLA_Sn_Em_Sd(FMLA_Sn_Em_Sd),
    FMLA_Vd_Vn_Em16(FMLA_Vd_Vn_Em16),
    FMLA_Vm_Vd_Vn(FMLA_Vm_Vd_Vn),
    FMLA_Vn_Em_Vd(FMLA_Vn_Em_Vd),
    FMLA_Vn_Vm_Vd(FMLA_Vn_Vm_Vd),
    FMLSL2_Em16_Vn_Vd(FMLSL2_Em16_Vn_Vd),
    FMLSL2_Vd_Vn_Em16(FMLSL2_Vd_Vn_Em16),
    FMLSL2_Vm_Vn_Vd(FMLSL2_Vm_Vn_Vd),
    FMLSL2_Vn_Vd_Vm(FMLSL2_Vn_Vd_Vm),
    FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX(FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX),
    FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm_16(FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm_16),
    FMLSLT_SVE_Zd_SVE_Zm_16_SVE_Zn(FMLSLT_SVE_Zd_SVE_Zm_16_SVE_Zn),
    FMLSLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd(FMLSLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd),
    FMLSL_Em16_Vd_Vn(FMLSL_Em16_Vd_Vn),
    FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    FMLSL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2(
        FMLSL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2,
    ),
    FMLSL_SME_Zm_SME_ZA_array_off3x2_SVE_Zn(FMLSL_SME_Zm_SME_ZA_array_off3x2_SVE_Zn),
    FMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2(FMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2),
    FMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4(FMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4),
    FMLSL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10(
        FMLSL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10,
    ),
    FMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2(FMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2),
    FMLSL_Vd_Vm_Vn(FMLSL_Vd_Vm_Vn),
    FMLSL_Vd_Vn_Em16(FMLSL_Vd_Vn_Em16),
    FMLSL_Vn_Vm_Vd(FMLSL_Vn_Vm_Vd),
    FMLS_Em16_Vd_Vn(FMLS_Em16_Vd_Vn),
    FMLS_Em_Vn_Vd(FMLS_Em_Vn_Vd),
    FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    FMLS_SME_Zm_INDEX1_SME_Znx2_SME_ZA_array_off3_0(
        FMLS_SME_Zm_INDEX1_SME_Znx2_SME_ZA_array_off3_0,
    ),
    FMLS_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2(
        FMLS_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2,
    ),
    FMLS_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(FMLS_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    FMLS_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2(FMLS_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2),
    FMLS_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1(
        FMLS_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1,
    ),
    FMLS_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0(FMLS_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0),
    FMLS_SVE_Zm3_22_INDEX_SVE_Zn_SVE_Zd(FMLS_SVE_Zm3_22_INDEX_SVE_Zn_SVE_Zd),
    FMLS_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn(FMLS_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn),
    FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn(FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn),
    FMLS_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX(FMLS_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX),
    FMLS_Sn_Em16_Sd(FMLS_Sn_Em16_Sd),
    FMLS_Sn_Em_Sd(FMLS_Sn_Em_Sd),
    FMLS_Vn_Vd_Vm(FMLS_Vn_Vd_Vm),
    FMLS_Vn_Vm_Vd(FMLS_Vn_Vm_Vd),
    FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd(FMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd),
    FMOPA_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn(
        FMOPA_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn,
    ),
    FMOPA_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16(
        FMOPA_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16,
    ),
    FMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm(
        FMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm,
    ),
    FMOPS_SME_Pm_SVE_Pg3_SVE_Zn_SME_ZAda_2b_SVE_Zm_16(
        FMOPS_SME_Pm_SVE_Pg3_SVE_Zn_SME_ZAda_2b_SVE_Zm_16,
    ),
    FMOPS_SME_Pm_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn(
        FMOPS_SME_Pm_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn,
    ),
    FMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_3b_SVE_Pg3_SME_Pm(
        FMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_3b_SVE_Pg3_SME_Pm,
    ),
    FMOV_FPIMM_Fd(FMOV_FPIMM_Fd),
    FMOV_Fd_FPIMM(FMOV_Fd_FPIMM),
    FMOV_Fd_Fn(FMOV_Fd_Fn),
    FMOV_Fd_Rn(FMOV_Fd_Rn),
    FMOV_Fn_Fd(FMOV_Fn_Fd),
    FMOV_Fn_Rd(FMOV_Fn_Rd),
    FMOV_Rd_Fn(FMOV_Rd_Fn),
    FMOV_Rn_Fd(FMOV_Rn_Fd),
    FMOV_Rn_VdD1(FMOV_Rn_VdD1),
    FMOV_SIMD_FPIMM_Vd(FMOV_SIMD_FPIMM_Vd),
    FMOV_SIMD_FPIMM_Vd_V_4H(FMOV_SIMD_FPIMM_Vd_V_4H),
    FMOV_Vd_SIMD_FPIMM(FMOV_Vd_SIMD_FPIMM),
    FMOV_VnD1_Rd(FMOV_VnD1_Rd),
    FMSB_SVE_Za_16_SVE_Zd_SVE_Zm_5_SVE_Pg3(FMSB_SVE_Za_16_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    FMSUB_Fm_Fa_Fn_Fd(FMSUB_Fm_Fa_Fn_Fd),
    FMSUB_Fm_Fd_Fa_Fn(FMSUB_Fm_Fd_Fa_Fn),
    FMULX_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMULX_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMULX_Sd_Em_Sn(FMULX_Sd_Em_Sn),
    FMULX_Sn_Em16_Sd(FMULX_Sn_Em16_Sd),
    FMULX_Sn_S_S_Sd_S_S_Sm_S_S(FMULX_Sn_S_S_Sd_S_S_Sm_S_S),
    FMULX_Sn_Sd_Sm(FMULX_Sn_Sd_Sm),
    FMULX_Vd_Em_Vn(FMULX_Vd_Em_Vn),
    FMULX_Vn_Em16_Vd(FMULX_Vn_Em16_Vd),
    FMULX_Vn_Vd_Vm(FMULX_Vn_Vd_Vm),
    FMULX_Vn_Vm_Vd(FMULX_Vn_Vm_Vd),
    FMUL_Fd_Fm_Fn(FMUL_Fd_Fm_Fn),
    FMUL_Fn_Fd_Fm(FMUL_Fn_Fd_Fm),
    FMUL_SVE_Pg3_SVE_I1_HALF_TWO_SVE_Zd(FMUL_SVE_Pg3_SVE_I1_HALF_TWO_SVE_Zd),
    FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd(FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16(FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMUL_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd(FMUL_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd),
    FMUL_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd(FMUL_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd),
    FMUL_Sd_Em_Sn(FMUL_Sd_Em_Sn),
    FMUL_Sn_Sd_Em16(FMUL_Sn_Sd_Em16),
    FMUL_Vd_Vn_Em(FMUL_Vd_Vn_Em),
    FMUL_Vn_V_2S_Vm_V_2S_Vd_V_2S(FMUL_Vn_V_2S_Vm_V_2S_Vd_V_2S),
    FMUL_Vn_Vd_Em16(FMUL_Vn_Vd_Em16),
    FMUL_Vn_Vm_Vd(FMUL_Vn_Vm_Vd),
    FNEG_Fd_Fn(FNEG_Fd_Fn),
    FNEG_Fd_S_H_Fn_S_H(FNEG_Fd_S_H_Fn_S_H),
    FNEG_SVE_Zn_SVE_Pg3_SVE_Zd(FNEG_SVE_Zn_SVE_Pg3_SVE_Zd),
    FNEG_Vd_Vn(FNEG_Vd_Vn),
    FNEG_Vn_Vd(FNEG_Vn_Vd),
    FNMADD_Fd_Fn_Fm_Fa(FNMADD_Fd_Fn_Fm_Fa),
    FNMADD_Fm_Fa_Fn_Fd(FNMADD_Fm_Fa_Fn_Fd),
    FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16(FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16),
    FNMLA_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16(FNMLA_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16),
    FNMLS_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16(FNMLS_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16),
    FNMSB_SVE_Zm_5_SVE_Zd_SVE_Pg3_SVE_Za_16(FNMSB_SVE_Zm_5_SVE_Zd_SVE_Pg3_SVE_Za_16),
    FNMSUB_Fm_Fa_Fd_Fn(FNMSUB_Fm_Fa_Fd_Fn),
    FNMSUB_Fn_Fm_Fa_Fd(FNMSUB_Fn_Fm_Fa_Fd),
    FNMUL_Fn_Fd_Fm(FNMUL_Fn_Fd_Fm),
    FNMUL_Fn_S_H_Fd_S_H_Fm_S_H(FNMUL_Fn_S_H_Fd_S_H_Fm_S_H),
    FRECPE_SVE_Zd_SVE_Zn(FRECPE_SVE_Zd_SVE_Zn),
    FRECPE_Sd_Sn(FRECPE_Sd_Sn),
    FRECPE_Sn_Sd(FRECPE_Sn_Sd),
    FRECPE_Vn_V_4H_Vd_V_4H(FRECPE_Vn_V_4H_Vd_V_4H),
    FRECPE_Vn_Vd(FRECPE_Vn_Vd),
    FRECPS_SVE_Zn_SVE_Zm_16_SVE_Zd(FRECPS_SVE_Zn_SVE_Zm_16_SVE_Zd),
    FRECPS_Sn_S_S_Sd_S_S_Sm_S_S(FRECPS_Sn_S_S_Sd_S_S_Sm_S_S),
    FRECPS_Sn_Sd_Sm(FRECPS_Sn_Sd_Sm),
    FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S(FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FRECPS_Vd_Vn_Vm(FRECPS_Vd_Vn_Vm),
    FRECPX_SVE_Pg3_SVE_Zd_SVE_Zn(FRECPX_SVE_Pg3_SVE_Zd_SVE_Zn),
    FRECPX_Sd_Sn(FRECPX_Sd_Sn),
    FRECPX_Sn_Sd(FRECPX_Sn_Sd),
    FRINT32X_Fd_Fn(FRINT32X_Fd_Fn),
    FRINT32X_Vd_Vn(FRINT32X_Vd_Vn),
    FRINT32Z_Fn_Fd(FRINT32Z_Fn_Fd),
    FRINT32Z_Vn_Vd(FRINT32Z_Vn_Vd),
    FRINT64X_Fn_Fd(FRINT64X_Fn_Fd),
    FRINT64X_Vd_Vn(FRINT64X_Vd_Vn),
    FRINT64Z_Fd_Fn(FRINT64Z_Fd_Fn),
    FRINT64Z_Vn_Vd(FRINT64Z_Vn_Vd),
    FRINTA_Fd_Fn(FRINTA_Fd_Fn),
    FRINTA_Fd_S_H_Fn_S_H(FRINTA_Fd_S_H_Fn_S_H),
    FRINTA_SME_Znx2_SME_Zdnx2(FRINTA_SME_Znx2_SME_Zdnx2),
    FRINTA_SME_Znx4_SME_Zdnx4(FRINTA_SME_Znx4_SME_Zdnx4),
    FRINTA_SVE_Zd_SVE_Zn_SVE_Pg3(FRINTA_SVE_Zd_SVE_Zn_SVE_Pg3),
    FRINTA_Vd_Vn(FRINTA_Vd_Vn),
    FRINTA_Vn_Vd(FRINTA_Vn_Vd),
    FRINTI_Fd_Fn(FRINTI_Fd_Fn),
    FRINTI_Fn_Fd(FRINTI_Fn_Fd),
    FRINTI_SVE_Pg3_SVE_Zn_SVE_Zd(FRINTI_SVE_Pg3_SVE_Zn_SVE_Zd),
    FRINTI_Vd_Vn(FRINTI_Vd_Vn),
    FRINTI_Vn_Vd(FRINTI_Vn_Vd),
    FRINTM_Fd_Fn(FRINTM_Fd_Fn),
    FRINTM_Fn_Fd(FRINTM_Fn_Fd),
    FRINTM_SME_Zdnx4_SME_Znx4(FRINTM_SME_Zdnx4_SME_Znx4),
    FRINTM_SME_Znx2_SME_Zdnx2(FRINTM_SME_Znx2_SME_Zdnx2),
    FRINTM_SVE_Pg3_SVE_Zn_SVE_Zd(FRINTM_SVE_Pg3_SVE_Zn_SVE_Zd),
    FRINTM_Vd_Vn(FRINTM_Vd_Vn),
    FRINTM_Vn_Vd(FRINTM_Vn_Vd),
    FRINTN_Fd_Fn(FRINTN_Fd_Fn),
    FRINTN_Fd_S_H_Fn_S_H(FRINTN_Fd_S_H_Fn_S_H),
    FRINTN_SME_Zdnx2_SME_Znx2(FRINTN_SME_Zdnx2_SME_Znx2),
    FRINTN_SME_Zdnx4_SME_Znx4(FRINTN_SME_Zdnx4_SME_Znx4),
    FRINTN_SVE_Zn_SVE_Pg3_SVE_Zd(FRINTN_SVE_Zn_SVE_Pg3_SVE_Zd),
    FRINTN_Vd_Vn(FRINTN_Vd_Vn),
    FRINTN_Vn_Vd(FRINTN_Vn_Vd),
    FRINTP_Fd_Fn(FRINTP_Fd_Fn),
    FRINTP_Fn_Fd(FRINTP_Fn_Fd),
    FRINTP_SME_Znx2_SME_Zdnx2(FRINTP_SME_Znx2_SME_Zdnx2),
    FRINTP_SME_Znx4_SME_Zdnx4(FRINTP_SME_Znx4_SME_Zdnx4),
    FRINTP_SVE_Pg3_SVE_Zn_SVE_Zd(FRINTP_SVE_Pg3_SVE_Zn_SVE_Zd),
    FRINTP_Vd_Vn(FRINTP_Vd_Vn),
    FRINTP_Vn_Vd(FRINTP_Vn_Vd),
    FRINTX_Fd_Fn(FRINTX_Fd_Fn),
    FRINTX_Fn_Fd(FRINTX_Fn_Fd),
    FRINTX_SVE_Zn_SVE_Pg3_SVE_Zd(FRINTX_SVE_Zn_SVE_Pg3_SVE_Zd),
    FRINTX_Vn_V_4H_Vd_V_4H(FRINTX_Vn_V_4H_Vd_V_4H),
    FRINTX_Vn_Vd(FRINTX_Vn_Vd),
    FRINTZ_Fd_Fn(FRINTZ_Fd_Fn),
    FRINTZ_Fd_S_H_Fn_S_H(FRINTZ_Fd_S_H_Fn_S_H),
    FRINTZ_SVE_Zn_SVE_Zd_SVE_Pg3(FRINTZ_SVE_Zn_SVE_Zd_SVE_Pg3),
    FRINTZ_Vd_V_4H_Vn_V_4H(FRINTZ_Vd_V_4H_Vn_V_4H),
    FRINTZ_Vd_Vn(FRINTZ_Vd_Vn),
    FRSQRTE_SVE_Zd_SVE_Zn(FRSQRTE_SVE_Zd_SVE_Zn),
    FRSQRTE_Sd_Sn(FRSQRTE_Sd_Sn),
    FRSQRTE_Sn_Sd(FRSQRTE_Sn_Sd),
    FRSQRTE_Vd_V_4H_Vn_V_4H(FRSQRTE_Vd_V_4H_Vn_V_4H),
    FRSQRTE_Vd_Vn(FRSQRTE_Vd_Vn),
    FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16(FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FRSQRTS_Sd_Sm_Sn(FRSQRTS_Sd_Sm_Sn),
    FRSQRTS_Sn_Sm_Sd(FRSQRTS_Sn_Sm_Sd),
    FRSQRTS_Vd_Vn_Vm(FRSQRTS_Vd_Vn_Vm),
    FRSQRTS_Vm_Vn_Vd(FRSQRTS_Vm_Vn_Vd),
    FSCALE_SVE_Zm_5_SVE_Zd_SVE_Pg3(FSCALE_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    FSQRT_Fd_Fn(FSQRT_Fd_Fn),
    FSQRT_Fn_Fd(FSQRT_Fn_Fd),
    FSQRT_SVE_Pg3_SVE_Zd_SVE_Zn(FSQRT_SVE_Pg3_SVE_Zd_SVE_Zn),
    FSQRT_Vd_V_4H_Vn_V_4H(FSQRT_Vd_V_4H_Vn_V_4H),
    FSQRT_Vd_Vn(FSQRT_Vd_Vn),
    FSUBR_SVE_I1_HALF_ONE_SVE_Zd_SVE_Pg3(FSUBR_SVE_I1_HALF_ONE_SVE_Zd_SVE_Pg3),
    FSUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5(FSUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    FSUB_Fd_Fn_Fm(FSUB_Fd_Fn_Fm),
    FSUB_Fn_Fm_Fd(FSUB_Fn_Fm_Fd),
    FSUB_SME_ZA_array_off3_0_SME_Znx2(FSUB_SME_ZA_array_off3_0_SME_Znx2),
    FSUB_SME_Znx4_SME_ZA_array_off3_0(FSUB_SME_Znx4_SME_ZA_array_off3_0),
    FSUB_SVE_Pg3_SVE_I1_HALF_ONE_SVE_Zd(FSUB_SVE_Pg3_SVE_I1_HALF_ONE_SVE_Zd),
    FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16(FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3(FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    FSUB_Vd_Vn_Vm(FSUB_Vd_Vn_Vm),
    FSUB_Vn_Vd_Vm(FSUB_Vn_Vd_Vm),
    FTMAD_SVE_Zm_5_SVE_UIMM3_SVE_Zd(FTMAD_SVE_Zm_5_SVE_UIMM3_SVE_Zd),
    FTSMUL_SVE_Zd_SVE_Zm_16_SVE_Zn(FTSMUL_SVE_Zd_SVE_Zm_16_SVE_Zn),
    FTSSEL_SVE_Zm_16_SVE_Zn_SVE_Zd(FTSSEL_SVE_Zm_16_SVE_Zn_SVE_Zd),
    FVDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0(
        FVDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0,
    ),
    GCSPOPCX(GCSPOPCX),
    GCSPOPM(GCSPOPM),
    GCSPOPM_Rt(GCSPOPM_Rt),
    GCSPOPX(GCSPOPX),
    GCSPUSHM_Rt(GCSPUSHM_Rt),
    GCSPUSHX(GCSPUSHX),
    GCSSS1_Rt(GCSSS1_Rt),
    GCSSS2_Rt(GCSSS2_Rt),
    GCSSTR_Rt_Rn_SP(GCSSTR_Rt_Rn_SP),
    GCSSTTR_Rt_Rn_SP(GCSSTTR_Rt_Rn_SP),
    GMI_Rn_SP_Rm_Rd(GMI_Rn_SP_Rm_Rd),
    HINT_UIMM7(HINT_UIMM7),
    HISTCNT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Zd(HISTCNT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Zd),
    HISTSEG_SVE_Zd_SVE_Zm_16_SVE_Zn(HISTSEG_SVE_Zd_SVE_Zm_16_SVE_Zn),
    HLT_EXCEPTION(HLT_EXCEPTION),
    HVC_EXCEPTION(HVC_EXCEPTION),
    INCB_Rd_SVE_PATTERN_SCALED(INCB_Rd_SVE_PATTERN_SCALED),
    INCD_Rd_SVE_PATTERN_SCALED(INCD_Rd_SVE_PATTERN_SCALED),
    INCD_SVE_Zd_SVE_PATTERN_SCALED(INCD_SVE_Zd_SVE_PATTERN_SCALED),
    INCH_SVE_PATTERN_SCALED_Rd(INCH_SVE_PATTERN_SCALED_Rd),
    INCH_SVE_PATTERN_SCALED_SVE_Zd(INCH_SVE_PATTERN_SCALED_SVE_Zd),
    INCP_SVE_Pg4_5_Rd(INCP_SVE_Pg4_5_Rd),
    INCP_SVE_Pg4_5_SVE_Zd(INCP_SVE_Pg4_5_SVE_Zd),
    INCW_SVE_PATTERN_SCALED_Rd(INCW_SVE_PATTERN_SCALED_Rd),
    INCW_SVE_Zd_SVE_PATTERN_SCALED(INCW_SVE_Zd_SVE_PATTERN_SCALED),
    INDEX_Rn_Rm_SVE_Zd(INDEX_Rn_Rm_SVE_Zd),
    INDEX_Rn_SVE_Zd_SIMM5(INDEX_Rn_SVE_Zd_SIMM5),
    INDEX_SVE_SIMM5_SVE_SIMM5B_SVE_Zd(INDEX_SVE_SIMM5_SVE_SIMM5B_SVE_Zd),
    INDEX_SVE_Zd_SVE_SIMM5_Rm(INDEX_SVE_Zd_SVE_SIMM5_Rm),
    INSR_SVE_Rm_SVE_Zd(INSR_SVE_Rm_SVE_Zd),
    INSR_SVE_Zd_SVE_Vm(INSR_SVE_Zd_SVE_Vm),
    INS_Ed_En(INS_Ed_En),
    INS_Rn_Ed(INS_Rn_Ed),
    IRG_Rd_SP_Rn_SP_Rm(IRG_Rd_SP_Rn_SP_Rm),
    ISB_BARRIER_ISB(ISB_BARRIER_ISB),
    LASTA_SVE_Zn_Rd_SVE_Pg3(LASTA_SVE_Zn_Rd_SVE_Pg3),
    LASTA_SVE_Zn_SVE_Pg3_SVE_Vd(LASTA_SVE_Zn_SVE_Pg3_SVE_Vd),
    LASTB_SVE_Pg3_Rd_SVE_Zn(LASTB_SVE_Pg3_Rd_SVE_Zn),
    LASTB_SVE_Vd_SVE_Pg3_SVE_Zn(LASTB_SVE_Vd_SVE_Pg3_SVE_Zn),
    LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED(
        LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED,
    ),
    LD1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2(LD1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2),
    LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR(LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR),
    LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LD1B_SME_Ztx2_STRIDED_SVE_ADDR_RR_SME_PNg3(LD1B_SME_Ztx2_STRIDED_SVE_ADDR_RR_SME_PNg3),
    LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR(LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR),
    LD1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3(LD1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3),
    LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3(LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3),
    LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RI_S4xVL(
        LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RI_S4xVL,
    ),
    LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RX(LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RX),
    LD1B_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN(LD1B_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN),
    LD1B_SVE_Pg3_SVE_ADDR_RR_SME_ZA_HV_idx_ldstr(LD1B_SVE_Pg3_SVE_ADDR_RR_SME_ZA_HV_idx_ldstr),
    LD1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN(LD1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN),
    LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX(LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX),
    LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ(LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ),
    LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5(LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(LD1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    LD1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Zdnx2(LD1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Zdnx2),
    LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3(LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3),
    LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1D_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED(
        LD1D_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED,
    ),
    LD1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED(
        LD1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED,
    ),
    LD1D_SVE_ADDR_RR_LSL3_SME_ZA_HV_idx_ldstr_SVE_Pg3(
        LD1D_SVE_ADDR_RR_LSL3_SME_ZA_HV_idx_ldstr_SVE_Pg3,
    ),
    LD1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3(LD1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3),
    LD1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN(LD1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN),
    LD1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN(LD1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN),
    LD1D_SVE_Pg3_SVE_ADDR_RZ_LSL3_SVE_ZtxN(LD1D_SVE_Pg3_SVE_ADDR_RZ_LSL3_SVE_ZtxN),
    LD1D_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN(LD1D_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN),
    LD1D_SVE_ZtxN_SVE_ADDR_RZ_SVE_Pg3(LD1D_SVE_ZtxN_SVE_ADDR_RZ_SVE_Pg3),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8),
    LD1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2(LD1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2),
    LD1H_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL1_SVE_Pg3(
        LD1H_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL1_SVE_Pg3,
    ),
    LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3(LD1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3),
    LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1(LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1),
    LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL_SME_PNg3(
        LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL_SME_PNg3,
    ),
    LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3(
        LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3,
    ),
    LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1H_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3(
        LD1H_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3,
    ),
    LD1H_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3(LD1H_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3),
    LD1H_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN_SVE_Pg3(LD1H_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN_SVE_Pg3),
    LD1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN(LD1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN),
    LD1H_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN(LD1H_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN),
    LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ(LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ),
    LD1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3(LD1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3),
    LD1H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3(LD1H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3),
    LD1H_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3(LD1H_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3),
    LD1H_SVE_ZtxN_SVE_ADDR_ZI_U5x2_SVE_Pg3(LD1H_SVE_ZtxN_SVE_ADDR_ZI_U5x2_SVE_Pg3),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    LD1H_SVE_ZtxN_S_H_SVE_ADDR_RX_LSL1_SVE_Pg3_P_Z(LD1H_SVE_ZtxN_S_H_SVE_ADDR_RX_LSL1_SVE_Pg3_P_Z),
    LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3(LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3),
    LD1Q_SVE_ADDR_RR_LSL4_SME_ZA_HV_idx_ldstr_SVE_Pg3(
        LD1Q_SVE_ADDR_RR_LSL4_SME_ZA_HV_idx_ldstr_SVE_Pg3,
    ),
    LD1Q_SVE_Pg3_SVE_ADDR_ZX_SVE_Zt(LD1Q_SVE_Pg3_SVE_ADDR_ZX_SVE_Zt),
    LD1RB_SVE_ADDR_RI_U6_SVE_ZtxN_SVE_Pg3(LD1RB_SVE_ADDR_RI_U6_SVE_ZtxN_SVE_Pg3),
    LD1RB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S(LD1RB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S),
    LD1RB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN(LD1RB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN),
    LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6(LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6),
    LD1RD_SVE_Pg3_SVE_ADDR_RI_U6x8_SVE_ZtxN(LD1RD_SVE_Pg3_SVE_ADDR_RI_U6x8_SVE_ZtxN),
    LD1RH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN(LD1RH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN),
    LD1RH_SVE_ZtxN_SVE_ADDR_RI_U6x2_SVE_Pg3(LD1RH_SVE_ZtxN_SVE_ADDR_RI_U6x2_SVE_Pg3),
    LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2(LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2),
    LD1ROB_SVE_ADDR_RI_S4x32_SVE_Pg3_SVE_ZtxN(LD1ROB_SVE_ADDR_RI_S4x32_SVE_Pg3_SVE_ZtxN),
    LD1ROB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX(LD1ROB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX),
    LD1ROD_SVE_ADDR_RI_S4x32_SVE_ZtxN_SVE_Pg3(LD1ROD_SVE_ADDR_RI_S4x32_SVE_ZtxN_SVE_Pg3),
    LD1ROD_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3(LD1ROD_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3),
    LD1ROH_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3(LD1ROH_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3),
    LD1ROH_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN(LD1ROH_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN),
    LD1ROW_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN(LD1ROW_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN),
    LD1ROW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN(LD1ROW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN),
    LD1RQB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN(LD1RQB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN),
    LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16(LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16),
    LD1RQD_SVE_ADDR_RI_S4x16_SVE_Pg3_SVE_ZtxN(LD1RQD_SVE_ADDR_RI_S4x16_SVE_Pg3_SVE_ZtxN),
    LD1RQD_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3(LD1RQD_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3),
    LD1RQH_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3(LD1RQH_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3),
    LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16(LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16),
    LD1RQW_SVE_Pg3_SVE_ADDR_RI_S4x16_SVE_ZtxN(LD1RQW_SVE_Pg3_SVE_ADDR_RI_S4x16_SVE_ZtxN),
    LD1RQW_SVE_ZtxN_SVE_ADDR_RX_LSL2_SVE_Pg3(LD1RQW_SVE_ZtxN_SVE_ADDR_RX_LSL2_SVE_Pg3),
    LD1RSB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S(LD1RSB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S),
    LD1RSB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN(LD1RSB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN),
    LD1RSB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6(LD1RSB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6),
    LD1RSH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN(LD1RSH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN),
    LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2(LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2),
    LD1RSW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6x4(LD1RSW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6x4),
    LD1RW_SVE_ADDR_RI_U6x4_SVE_ZtxN_SVE_Pg3(LD1RW_SVE_ADDR_RI_U6x4_SVE_ZtxN_SVE_Pg3),
    LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4(LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4),
    LD1R_LVt_AL_SIMD_ADDR_POST(LD1R_LVt_AL_SIMD_ADDR_POST),
    LD1R_LVt_AL_SIMD_ADDR_SIMPLE(LD1R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(LD1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    LD1SB_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3(LD1SB_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3),
    LD1SB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN(LD1SB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN),
    LD1SB_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN(LD1SB_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN),
    LD1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN(LD1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN),
    LD1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(LD1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    LD1SB_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3(LD1SB_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3),
    LD1SB_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3(LD1SB_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1SH_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN(LD1SH_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN),
    LD1SH_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3(LD1SH_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3),
    LD1SH_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN(LD1SH_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN),
    LD1SH_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3(LD1SH_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3),
    LD1SH_SVE_ADDR_ZI_U5x2_SVE_Pg3_SVE_ZtxN(LD1SH_SVE_ADDR_ZI_U5x2_SVE_Pg3_SVE_ZtxN),
    LD1SH_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN(LD1SH_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN),
    LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1(LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1),
    LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2(LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2),
    LD1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3(LD1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3),
    LD1SH_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3(LD1SH_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LD1SW_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(LD1SW_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    LD1SW_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3(LD1SW_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3),
    LD1SW_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN(LD1SW_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN),
    LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2(LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2),
    LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x4(LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x4),
    LD1SW_SVE_ZtxN_SVE_ADDR_RZ_XTW2_22_SVE_Pg3(LD1SW_SVE_ZtxN_SVE_ADDR_RZ_XTW2_22_SVE_Pg3),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1W_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL(LD1W_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL),
    LD1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RR_LSL2(LD1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RR_LSL2),
    LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2(LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2),
    LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    LD1W_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3(LD1W_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3),
    LD1W_SVE_ADDR_RR_LSL2_SVE_Pg3_SME_ZA_HV_idx_ldstr(
        LD1W_SVE_ADDR_RR_LSL2_SVE_Pg3_SME_ZA_HV_idx_ldstr,
    ),
    LD1W_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN(LD1W_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN),
    LD1W_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_ZtxN(LD1W_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_ZtxN),
    LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2(LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2),
    LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22(LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D(
        LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D,
    ),
    LD1_LVt_SIMD_ADDR_POST(LD1_LVt_SIMD_ADDR_POST),
    LD1_SIMD_ADDR_POST_LEt(LD1_SIMD_ADDR_POST_LEt),
    LD1_SIMD_ADDR_SIMPLE_LEt(LD1_SIMD_ADDR_SIMPLE_LEt),
    LD1_SIMD_ADDR_SIMPLE_LVt(LD1_SIMD_ADDR_SIMPLE_LVt),
    LD2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3(LD2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3),
    LD2B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN(LD2B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN),
    LD2D_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3(LD2D_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3),
    LD2D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN(LD2D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN),
    LD2H_SVE_ZtxN_SVE_ADDR_RI_S4x2xVL_SVE_Pg3(LD2H_SVE_ZtxN_SVE_ADDR_RI_S4x2xVL_SVE_Pg3),
    LD2H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3(LD2H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3),
    LD2Q_SME_Zt2_SVE_ADDR_RI_S4x2xVL_SVE_Pg3(LD2Q_SME_Zt2_SVE_ADDR_RI_S4x2xVL_SVE_Pg3),
    LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2(LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2),
    LD2R_LVt_AL_SIMD_ADDR_SIMPLE(LD2R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD2R_SIMD_ADDR_POST_LVt_AL(LD2R_SIMD_ADDR_POST_LVt_AL),
    LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD2_LEt_SIMD_ADDR_POST(LD2_LEt_SIMD_ADDR_POST),
    LD2_LEt_SIMD_ADDR_SIMPLE(LD2_LEt_SIMD_ADDR_SIMPLE),
    LD2_LVt_SIMD_ADDR_POST(LD2_LVt_SIMD_ADDR_POST),
    LD2_LVt_SIMD_ADDR_SIMPLE(LD2_LVt_SIMD_ADDR_SIMPLE),
    LD3B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN(LD3B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN),
    LD3B_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN(LD3B_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN),
    LD3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3(LD3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3),
    LD3D_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL_SVE_Pg3(LD3D_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL_SVE_Pg3),
    LD3H_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN(LD3H_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN),
    LD3H_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_ZtxN(LD3H_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_ZtxN),
    LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4(LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4),
    LD3Q_SVE_ADDR_RI_S4x2xVL_SME_Zt3_SVE_Pg3(LD3Q_SVE_ADDR_RI_S4x2xVL_SME_Zt3_SVE_Pg3),
    LD3R_LVt_AL_SIMD_ADDR_POST(LD3R_LVt_AL_SIMD_ADDR_POST),
    LD3R_LVt_AL_SIMD_ADDR_SIMPLE(LD3R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN(LD3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN),
    LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD3_LEt_SIMD_ADDR_POST(LD3_LEt_SIMD_ADDR_POST),
    LD3_LEt_SIMD_ADDR_SIMPLE(LD3_LEt_SIMD_ADDR_SIMPLE),
    LD3_LVt_SIMD_ADDR_SIMPLE(LD3_LVt_SIMD_ADDR_SIMPLE),
    LD3_SIMD_ADDR_POST_LVt(LD3_SIMD_ADDR_POST_LVt),
    LD4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3(LD4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3),
    LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD4D_SVE_Pg3_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN(LD4D_SVE_Pg3_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN),
    LD4D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN(LD4D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN),
    LD4H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3(LD4H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3),
    LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4(LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4),
    LD4Q_SVE_ADDR_RI_S4x2xVL_SME_Zt4_SVE_Pg3(LD4Q_SVE_ADDR_RI_S4x2xVL_SME_Zt4_SVE_Pg3),
    LD4R_LVt_AL_SIMD_ADDR_POST(LD4R_LVt_AL_SIMD_ADDR_POST),
    LD4R_LVt_AL_SIMD_ADDR_SIMPLE(LD4R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD4W_SVE_ADDR_RX_LSL2_SVE_ZtxN_SVE_Pg3(LD4W_SVE_ADDR_RX_LSL2_SVE_ZtxN_SVE_Pg3),
    LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    LD4_LEt_SIMD_ADDR_SIMPLE(LD4_LEt_SIMD_ADDR_SIMPLE),
    LD4_LVt_SIMD_ADDR_POST(LD4_LVt_SIMD_ADDR_POST),
    LD4_LVt_SIMD_ADDR_SIMPLE(LD4_LVt_SIMD_ADDR_SIMPLE),
    LD4_SIMD_ADDR_POST_LEt(LD4_SIMD_ADDR_POST_LEt),
    LD64B_ADDR_SIMPLE_Rt_LS64(LD64B_ADDR_SIMPLE_Rt_LS64),
    LDADDAB_Rs_Rt_ADDR_SIMPLE(LDADDAB_Rs_Rt_ADDR_SIMPLE),
    LDADDAH_Rs_ADDR_SIMPLE_Rt(LDADDAH_Rs_ADDR_SIMPLE_Rt),
    LDADDALB_Rs_ADDR_SIMPLE_Rt(LDADDALB_Rs_ADDR_SIMPLE_Rt),
    LDADDALH_Rs_Rt_ADDR_SIMPLE(LDADDALH_Rs_Rt_ADDR_SIMPLE),
    LDADDAL_ADDR_SIMPLE_Rt_Rs(LDADDAL_ADDR_SIMPLE_Rt_Rs),
    LDADDA_ADDR_SIMPLE_Rs_Rt(LDADDA_ADDR_SIMPLE_Rs_Rt),
    LDADDB_Rt_ADDR_SIMPLE_Rs(LDADDB_Rt_ADDR_SIMPLE_Rs),
    LDADDH_Rt_Rs_ADDR_SIMPLE(LDADDH_Rt_Rs_ADDR_SIMPLE),
    LDADDLB_ADDR_SIMPLE_Rs_Rt(LDADDLB_ADDR_SIMPLE_Rs_Rt),
    LDADDLH_ADDR_SIMPLE_Rs_Rt(LDADDLH_ADDR_SIMPLE_Rs_Rt),
    LDADDL_ADDR_SIMPLE_Rt_Rs(LDADDL_ADDR_SIMPLE_Rt_Rs),
    LDADD_Rs_Rt_ADDR_SIMPLE(LDADD_Rs_Rt_ADDR_SIMPLE),
    LDAP1_SIMD_ADDR_SIMPLE_LEt(LDAP1_SIMD_ADDR_SIMPLE_LEt),
    LDAPRB_Rt_ADDR_SIMPLE(LDAPRB_Rt_ADDR_SIMPLE),
    LDAPRH_ADDR_SIMPLE_Rt(LDAPRH_ADDR_SIMPLE_Rt),
    LDAPR_RCPC3_ADDR_POSTIND_Rt(LDAPR_RCPC3_ADDR_POSTIND_Rt),
    LDAPR_Rt_ADDR_SIMPLE(LDAPR_Rt_ADDR_SIMPLE),
    LDAPURB_Rt_ADDR_OFFSET(LDAPURB_Rt_ADDR_OFFSET),
    LDAPURH_Rt_ADDR_OFFSET(LDAPURH_Rt_ADDR_OFFSET),
    LDAPURSB_ADDR_OFFSET_Rt(LDAPURSB_ADDR_OFFSET_Rt),
    LDAPURSB_Rt_ADDR_OFFSET(LDAPURSB_Rt_ADDR_OFFSET),
    LDAPURSH_ADDR_OFFSET_Rt(LDAPURSH_ADDR_OFFSET_Rt),
    LDAPURSH_Rt_ADDR_OFFSET(LDAPURSH_Rt_ADDR_OFFSET),
    LDAPURSW_ADDR_OFFSET_Rt(LDAPURSW_ADDR_OFFSET_Rt),
    LDAPUR_Ft_RCPC3_ADDR_OFFSET(LDAPUR_Ft_RCPC3_ADDR_OFFSET),
    LDAPUR_Rt_ADDR_OFFSET(LDAPUR_Rt_ADDR_OFFSET),
    LDAPUR_Rt_X_ADDR_OFFSET(LDAPUR_Rt_X_ADDR_OFFSET),
    LDARB_Rt_ADDR_SIMPLE(LDARB_Rt_ADDR_SIMPLE),
    LDARH_Rt_ADDR_SIMPLE(LDARH_Rt_ADDR_SIMPLE),
    LDAR_Rt_ADDR_SIMPLE(LDAR_Rt_ADDR_SIMPLE),
    LDAXP_ADDR_SIMPLE_Rt_Rt2(LDAXP_ADDR_SIMPLE_Rt_Rt2),
    LDAXRB_ADDR_SIMPLE_Rt(LDAXRB_ADDR_SIMPLE_Rt),
    LDAXRH_ADDR_SIMPLE_Rt(LDAXRH_ADDR_SIMPLE_Rt),
    LDAXR_Rt_ADDR_SIMPLE(LDAXR_Rt_ADDR_SIMPLE),
    LDCLRAB_Rt_Rs_ADDR_SIMPLE(LDCLRAB_Rt_Rs_ADDR_SIMPLE),
    LDCLRAH_ADDR_SIMPLE_Rt_Rs(LDCLRAH_ADDR_SIMPLE_Rt_Rs),
    LDCLRALB_Rt_Rs_ADDR_SIMPLE(LDCLRALB_Rt_Rs_ADDR_SIMPLE),
    LDCLRALH_Rs_Rt_ADDR_SIMPLE(LDCLRALH_Rs_Rt_ADDR_SIMPLE),
    LDCLRAL_ADDR_SIMPLE_Rs_Rt(LDCLRAL_ADDR_SIMPLE_Rs_Rt),
    LDCLRA_Rs_Rt_ADDR_SIMPLE(LDCLRA_Rs_Rt_ADDR_SIMPLE),
    LDCLRB_Rt_ADDR_SIMPLE_Rs(LDCLRB_Rt_ADDR_SIMPLE_Rs),
    LDCLRH_ADDR_SIMPLE_Rs_Rt(LDCLRH_ADDR_SIMPLE_Rs_Rt),
    LDCLRLB_Rs_Rt_ADDR_SIMPLE(LDCLRLB_Rs_Rt_ADDR_SIMPLE),
    LDCLRLH_Rt_ADDR_SIMPLE_Rs(LDCLRLH_Rt_ADDR_SIMPLE_Rs),
    LDCLRL_Rt_ADDR_SIMPLE_Rs(LDCLRL_Rt_ADDR_SIMPLE_Rs),
    LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLRPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2(LDCLRPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2),
    LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLR_ADDR_SIMPLE_Rt_Rs(LDCLR_ADDR_SIMPLE_Rt_Rs),
    LDEORAB_Rs_Rt_ADDR_SIMPLE(LDEORAB_Rs_Rt_ADDR_SIMPLE),
    LDEORAH_Rt_ADDR_SIMPLE_Rs(LDEORAH_Rt_ADDR_SIMPLE_Rs),
    LDEORALB_Rt_ADDR_SIMPLE_Rs(LDEORALB_Rt_ADDR_SIMPLE_Rs),
    LDEORALH_ADDR_SIMPLE_Rs_Rt(LDEORALH_ADDR_SIMPLE_Rs_Rt),
    LDEORAL_Rt_ADDR_SIMPLE_Rs(LDEORAL_Rt_ADDR_SIMPLE_Rs),
    LDEORA_ADDR_SIMPLE_Rs_Rt(LDEORA_ADDR_SIMPLE_Rs_Rt),
    LDEORB_Rt_ADDR_SIMPLE_Rs(LDEORB_Rt_ADDR_SIMPLE_Rs),
    LDEORH_ADDR_SIMPLE_Rs_Rt(LDEORH_ADDR_SIMPLE_Rs_Rt),
    LDEORLB_ADDR_SIMPLE_Rt_Rs(LDEORLB_ADDR_SIMPLE_Rt_Rs),
    LDEORLH_Rs_Rt_ADDR_SIMPLE(LDEORLH_Rs_Rt_ADDR_SIMPLE),
    LDEORL_Rs_Rt_ADDR_SIMPLE(LDEORL_Rs_Rt_ADDR_SIMPLE),
    LDEOR_Rs_ADDR_SIMPLE_Rt(LDEOR_Rs_ADDR_SIMPLE_Rt),
    LDFF1B_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3(LDFF1B_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3),
    LDFF1B_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3(LDFF1B_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3),
    LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3(LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3),
    LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z(LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z),
    LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN(LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN),
    LDFF1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ(LDFF1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ),
    LDFF1B_SVE_ZtxN_SVE_ADDR_RR_SVE_Pg3(LDFF1B_SVE_ZtxN_SVE_ADDR_RR_SVE_Pg3),
    LDFF1B_SVE_ZtxN_SVE_ADDR_RZ_XTW_22_SVE_Pg3(LDFF1B_SVE_ZtxN_SVE_ADDR_RZ_XTW_22_SVE_Pg3),
    LDFF1B_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3(LDFF1B_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LDFF1B_SVE_ZtxN_S_D_SVE_ADDR_RR_SVE_Pg3_P_Z(LDFF1B_SVE_ZtxN_S_D_SVE_ADDR_RR_SVE_Pg3_P_Z),
    LDFF1B_SVE_ZtxN_S_H_SVE_ADDR_RR_SVE_Pg3_P_Z(LDFF1B_SVE_ZtxN_S_H_SVE_ADDR_RR_SVE_Pg3_P_Z),
    LDFF1D_SVE_ADDR_RR_LSL3_SVE_ZtxN_SVE_Pg3(LDFF1D_SVE_ADDR_RR_LSL3_SVE_ZtxN_SVE_Pg3),
    LDFF1D_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3(LDFF1D_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3),
    LDFF1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN(LDFF1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN),
    LDFF1D_SVE_ADDR_ZI_U5x8_SVE_Pg3_SVE_ZtxN(LDFF1D_SVE_ADDR_ZI_U5x8_SVE_Pg3_SVE_ZtxN),
    LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R(LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1H_SVE_ADDR_RR_LSL1_SVE_ZtxN_SVE_Pg3(LDFF1H_SVE_ADDR_RR_LSL1_SVE_ZtxN_SVE_Pg3),
    LDFF1H_SVE_ADDR_RZ_LSL1_SVE_Pg3_SVE_ZtxN(LDFF1H_SVE_ADDR_RZ_LSL1_SVE_Pg3_SVE_ZtxN),
    LDFF1H_SVE_ADDR_RZ_XTW1_22_SVE_Pg3_SVE_ZtxN(LDFF1H_SVE_ADDR_RZ_XTW1_22_SVE_Pg3_SVE_ZtxN),
    LDFF1H_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3(LDFF1H_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3),
    LDFF1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SVE_ZtxN(LDFF1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SVE_ZtxN),
    LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R(LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R),
    LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR_LSL1(LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR_LSL1),
    LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ(LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ),
    LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22(LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22),
    LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2(LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2),
    LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3(LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z(LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z),
    LDFF1SB_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3(LDFF1SB_SVE_ADDR_RR_SVE_ZtxN_SVE_Pg3),
    LDFF1SB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN(LDFF1SB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN),
    LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3(LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3),
    LDFF1SB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN(LDFF1SB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN),
    LDFF1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN(LDFF1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN),
    LDFF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR(LDFF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RR),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1SH_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN(LDFF1SH_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN),
    LDFF1SH_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3(LDFF1SH_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3),
    LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN(LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN),
    LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN(LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN),
    LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN(LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN),
    LDFF1SH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_ZtxN(LDFF1SH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_ZtxN),
    LDFF1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3(LDFF1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3),
    LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3(LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1(
        LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1,
    ),
    LDFF1SW_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN(LDFF1SW_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN),
    LDFF1SW_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN_SVE_Pg3(LDFF1SW_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN_SVE_Pg3),
    LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN(LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN),
    LDFF1SW_SVE_ADDR_ZI_U5x4_SVE_ZtxN_SVE_Pg3(LDFF1SW_SVE_ADDR_ZI_U5x4_SVE_ZtxN_SVE_Pg3),
    LDFF1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL2(LDFF1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL2),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1W_SVE_ADDR_RR_LSL2_SVE_ZtxN_SVE_Pg3(LDFF1W_SVE_ADDR_RR_LSL2_SVE_ZtxN_SVE_Pg3),
    LDFF1W_SVE_ADDR_RZ_LSL2_SVE_Pg3_SVE_ZtxN(LDFF1W_SVE_ADDR_RZ_LSL2_SVE_Pg3_SVE_ZtxN),
    LDFF1W_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_ZtxN(LDFF1W_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_ZtxN),
    LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN(LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN),
    LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3(LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3),
    LDFF1W_SVE_ADDR_ZI_U5x4_SVE_Pg3_SVE_ZtxN(LDFF1W_SVE_ADDR_ZI_U5x4_SVE_Pg3_SVE_ZtxN),
    LDFF1W_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN(LDFF1W_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN),
    LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN(LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN),
    LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R(LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    LDGM_Rt_ADDR_SIMPLE(LDGM_Rt_ADDR_SIMPLE),
    LDG_ADDR_SIMM13_Rt(LDG_ADDR_SIMM13_Rt),
    LDIAPP_Rt_RCPC3_ADDR_OPT_POSTIND_Rs(LDIAPP_Rt_RCPC3_ADDR_OPT_POSTIND_Rs),
    LDLARB_Rt_ADDR_SIMPLE(LDLARB_Rt_ADDR_SIMPLE),
    LDLARH_ADDR_SIMPLE_Rt(LDLARH_ADDR_SIMPLE_Rt),
    LDLAR_Rt_ADDR_SIMPLE(LDLAR_Rt_ADDR_SIMPLE),
    LDNF1B_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(LDNF1B_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3(LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3),
    LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z(
        LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z,
    ),
    LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_H_SVE_Pg3_P_Z(
        LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_H_SVE_Pg3_P_Z,
    ),
    LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3(LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3),
    LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z(
        LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z,
    ),
    LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(LDNF1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    LDNF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(LDNF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1SH_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3(LDNF1SH_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3),
    LDNF1SH_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3(LDNF1SH_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3),
    LDNF1SW_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3(LDNF1SW_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3),
    LDNF1W_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3(LDNF1W_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3),
    LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNP_Ft2_ADDR_SIMM7_Ft(LDNP_Ft2_ADDR_SIMM7_Ft),
    LDNP_Rt_Rt2_ADDR_SIMM7(LDNP_Rt_Rt2_ADDR_SIMM7),
    LDNT1B_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL(LDNT1B_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL),
    LDNT1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR(LDNT1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR),
    LDNT1B_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL(
        LDNT1B_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL,
    ),
    LDNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED(
        LDNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED,
    ),
    LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR(LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR),
    LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LDNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3(LDNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3),
    LDNT1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3(LDNT1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3),
    LDNT1B_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN(LDNT1B_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN),
    LDNT1B_SVE_ADDR_ZX_SVE_ZtxN_SVE_Pg3(LDNT1B_SVE_ADDR_ZX_SVE_ZtxN_SVE_Pg3),
    LDNT1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN(LDNT1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN),
    LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNT1D_SME_PNg3_SME_Zdnx2_SVE_ADDR_RR_LSL3(LDNT1D_SME_PNg3_SME_Zdnx2_SVE_ADDR_RR_LSL3),
    LDNT1D_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL3(
        LDNT1D_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL3,
    ),
    LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED(
        LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED,
    ),
    LDNT1D_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3(LDNT1D_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3),
    LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LDNT1D_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(LDNT1D_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    LDNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3(LDNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3),
    LDNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3(
        LDNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    LDNT1D_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN(LDNT1D_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN),
    LDNT1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3(LDNT1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3),
    LDNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(LDNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    LDNT1H_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3(LDNT1H_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3),
    LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    LDNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3(
        LDNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx2_SME_PNg3(LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx2_SME_PNg3),
    LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3(LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3),
    LDNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3(
        LDNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    LDNT1H_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN(LDNT1H_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN),
    LDNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN(LDNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN),
    LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LDNT1SB_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3(LDNT1SB_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3),
    LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1SW_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN(LDNT1SW_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN),
    LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2(LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2),
    LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED(
        LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED,
    ),
    LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4(LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4),
    LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx4_STRIDED(
        LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx4_STRIDED,
    ),
    LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2(LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2),
    LDNT1W_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL_SME_PNg3(LDNT1W_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL_SME_PNg3),
    LDNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3(
        LDNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    LDNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3(
        LDNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    LDNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(LDNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D(
        LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D,
    ),
    LDPSW_ADDR_SIMM7_Rt2_Rt(LDPSW_ADDR_SIMM7_Rt2_Rt),
    LDPSW_Rt_Rt2_ADDR_SIMM7(LDPSW_Rt_Rt2_ADDR_SIMM7),
    LDP_ADDR_SIMM7_Ft_Ft2(LDP_ADDR_SIMM7_Ft_Ft2),
    LDP_ADDR_SIMM7_Rt_Rt2(LDP_ADDR_SIMM7_Rt_Rt2),
    LDP_ADDR_SIMM7_S_S_Ft_S_S_Ft2_S_S(LDP_ADDR_SIMM7_S_S_Ft_S_S_Ft2_S_S),
    LDP_Rt2_Rt_ADDR_SIMM7(LDP_Rt2_Rt_ADDR_SIMM7),
    LDRAA_ADDR_SIMM10_Rt(LDRAA_ADDR_SIMM10_Rt),
    LDRAB_ADDR_SIMM10_Rt(LDRAB_ADDR_SIMM10_Rt),
    LDRB_ADDR_UIMM12_Rt(LDRB_ADDR_UIMM12_Rt),
    LDRB_Rt_ADDR_REGOFF(LDRB_Rt_ADDR_REGOFF),
    LDRB_Rt_ADDR_SIMM9(LDRB_Rt_ADDR_SIMM9),
    LDRH_ADDR_UIMM12_Rt(LDRH_ADDR_UIMM12_Rt),
    LDRH_Rt_ADDR_REGOFF(LDRH_Rt_ADDR_REGOFF),
    LDRH_Rt_ADDR_SIMM9(LDRH_Rt_ADDR_SIMM9),
    LDRSB_ADDR_REGOFF_Rt(LDRSB_ADDR_REGOFF_Rt),
    LDRSB_ADDR_UIMM12_Rt(LDRSB_ADDR_UIMM12_Rt),
    LDRSB_Rt_ADDR_SIMM9(LDRSB_Rt_ADDR_SIMM9),
    LDRSH_ADDR_REGOFF_Rt(LDRSH_ADDR_REGOFF_Rt),
    LDRSH_ADDR_SIMM9_Rt(LDRSH_ADDR_SIMM9_Rt),
    LDRSH_ADDR_UIMM12_Rt(LDRSH_ADDR_UIMM12_Rt),
    LDRSW_Rt_ADDR_PCREL19(LDRSW_Rt_ADDR_PCREL19),
    LDRSW_Rt_ADDR_REGOFF(LDRSW_Rt_ADDR_REGOFF),
    LDRSW_Rt_ADDR_SIMM9(LDRSW_Rt_ADDR_SIMM9),
    LDRSW_Rt_ADDR_UIMM12(LDRSW_Rt_ADDR_UIMM12),
    LDR_ADDR_REGOFF_Rt(LDR_ADDR_REGOFF_Rt),
    LDR_ADDR_UIMM12_Ft(LDR_ADDR_UIMM12_Ft),
    LDR_ADDR_UIMM12_Rt(LDR_ADDR_UIMM12_Rt),
    LDR_Ft_ADDR_PCREL19(LDR_Ft_ADDR_PCREL19),
    LDR_Ft_ADDR_REGOFF(LDR_Ft_ADDR_REGOFF),
    LDR_Ft_ADDR_SIMM9(LDR_Ft_ADDR_SIMM9),
    LDR_Rt_ADDR_PCREL19(LDR_Rt_ADDR_PCREL19),
    LDR_Rt_ADDR_SIMM9(LDR_Rt_ADDR_SIMM9),
    LDR_SIMD_ADDR_SIMPLE_SME_ZT0(LDR_SIMD_ADDR_SIMPLE_SME_ZT0),
    LDR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4(LDR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4),
    LDR_SVE_ADDR_RI_S9xVL_SVE_PNt(LDR_SVE_ADDR_RI_S9xVL_SVE_PNt),
    LDR_SVE_Pt_SVE_ADDR_RI_S9xVL(LDR_SVE_Pt_SVE_ADDR_RI_S9xVL),
    LDR_SVE_Zt_SVE_ADDR_RI_S9xVL(LDR_SVE_Zt_SVE_ADDR_RI_S9xVL),
    LDSETAB_Rs_Rt_ADDR_SIMPLE(LDSETAB_Rs_Rt_ADDR_SIMPLE),
    LDSETAH_Rs_Rt_ADDR_SIMPLE(LDSETAH_Rs_Rt_ADDR_SIMPLE),
    LDSETALB_Rs_ADDR_SIMPLE_Rt(LDSETALB_Rs_ADDR_SIMPLE_Rt),
    LDSETALH_Rt_Rs_ADDR_SIMPLE(LDSETALH_Rt_Rs_ADDR_SIMPLE),
    LDSETAL_Rt_Rs_ADDR_SIMPLE(LDSETAL_Rt_Rs_ADDR_SIMPLE),
    LDSETA_Rs_ADDR_SIMPLE_Rt(LDSETA_Rs_ADDR_SIMPLE_Rt),
    LDSETB_ADDR_SIMPLE_Rs_Rt(LDSETB_ADDR_SIMPLE_Rs_Rt),
    LDSETH_Rt_Rs_ADDR_SIMPLE(LDSETH_Rt_Rs_ADDR_SIMPLE),
    LDSETLB_ADDR_SIMPLE_Rt_Rs(LDSETLB_ADDR_SIMPLE_Rt_Rs),
    LDSETLH_Rs_Rt_ADDR_SIMPLE(LDSETLH_Rs_Rt_ADDR_SIMPLE),
    LDSETL_Rt_ADDR_SIMPLE_Rs(LDSETL_Rt_ADDR_SIMPLE_Rs),
    LDSETPAL_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2(LDSETPAL_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2),
    LDSETPA_ADDR_SIMPLE_LSE128_Rt_LSE128_Rt2(LDSETPA_ADDR_SIMPLE_LSE128_Rt_LSE128_Rt2),
    LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDSETP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt(LDSETP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt),
    LDSET_Rt_ADDR_SIMPLE_Rs(LDSET_Rt_ADDR_SIMPLE_Rs),
    LDSMAXAB_Rs_ADDR_SIMPLE_Rt(LDSMAXAB_Rs_ADDR_SIMPLE_Rt),
    LDSMAXAH_Rs_ADDR_SIMPLE_Rt(LDSMAXAH_Rs_ADDR_SIMPLE_Rt),
    LDSMAXALB_ADDR_SIMPLE_Rs_Rt(LDSMAXALB_ADDR_SIMPLE_Rs_Rt),
    LDSMAXALH_Rt_Rs_ADDR_SIMPLE(LDSMAXALH_Rt_Rs_ADDR_SIMPLE),
    LDSMAXAL_Rt_ADDR_SIMPLE_Rs(LDSMAXAL_Rt_ADDR_SIMPLE_Rs),
    LDSMAXA_ADDR_SIMPLE_Rt_Rs(LDSMAXA_ADDR_SIMPLE_Rt_Rs),
    LDSMAXB_Rs_Rt_ADDR_SIMPLE(LDSMAXB_Rs_Rt_ADDR_SIMPLE),
    LDSMAXH_Rs_Rt_ADDR_SIMPLE(LDSMAXH_Rs_Rt_ADDR_SIMPLE),
    LDSMAXLB_Rs_Rt_ADDR_SIMPLE(LDSMAXLB_Rs_Rt_ADDR_SIMPLE),
    LDSMAXLH_Rt_ADDR_SIMPLE_Rs(LDSMAXLH_Rt_ADDR_SIMPLE_Rs),
    LDSMAXL_Rs_Rt_ADDR_SIMPLE(LDSMAXL_Rs_Rt_ADDR_SIMPLE),
    LDSMAX_Rs_ADDR_SIMPLE_Rt(LDSMAX_Rs_ADDR_SIMPLE_Rt),
    LDSMINAB_Rt_Rs_ADDR_SIMPLE(LDSMINAB_Rt_Rs_ADDR_SIMPLE),
    LDSMINAH_ADDR_SIMPLE_Rs_Rt(LDSMINAH_ADDR_SIMPLE_Rs_Rt),
    LDSMINALB_Rt_ADDR_SIMPLE_Rs(LDSMINALB_Rt_ADDR_SIMPLE_Rs),
    LDSMINALH_Rs_ADDR_SIMPLE_Rt(LDSMINALH_Rs_ADDR_SIMPLE_Rt),
    LDSMINAL_ADDR_SIMPLE_Rt_Rs(LDSMINAL_ADDR_SIMPLE_Rt_Rs),
    LDSMINA_ADDR_SIMPLE_Rs_Rt(LDSMINA_ADDR_SIMPLE_Rs_Rt),
    LDSMINB_ADDR_SIMPLE_Rs_Rt(LDSMINB_ADDR_SIMPLE_Rs_Rt),
    LDSMINH_Rs_Rt_ADDR_SIMPLE(LDSMINH_Rs_Rt_ADDR_SIMPLE),
    LDSMINLB_Rs_Rt_ADDR_SIMPLE(LDSMINLB_Rs_Rt_ADDR_SIMPLE),
    LDSMINLH_ADDR_SIMPLE_Rs_Rt(LDSMINLH_ADDR_SIMPLE_Rs_Rt),
    LDSMINL_Rt_ADDR_SIMPLE_Rs(LDSMINL_Rt_ADDR_SIMPLE_Rs),
    LDSMIN_ADDR_SIMPLE_Rs_Rt(LDSMIN_ADDR_SIMPLE_Rs_Rt),
    LDTRB_Rt_ADDR_SIMM9(LDTRB_Rt_ADDR_SIMM9),
    LDTRH_Rt_ADDR_SIMM9(LDTRH_Rt_ADDR_SIMM9),
    LDTRSB_Rt_ADDR_SIMM9(LDTRSB_Rt_ADDR_SIMM9),
    LDTRSH_Rt_ADDR_SIMM9(LDTRSH_Rt_ADDR_SIMM9),
    LDTRSW_ADDR_SIMM9_Rt(LDTRSW_ADDR_SIMM9_Rt),
    LDTR_Rt_ADDR_SIMM9(LDTR_Rt_ADDR_SIMM9),
    LDUMAXAB_ADDR_SIMPLE_Rs_Rt(LDUMAXAB_ADDR_SIMPLE_Rs_Rt),
    LDUMAXAH_ADDR_SIMPLE_Rt_Rs(LDUMAXAH_ADDR_SIMPLE_Rt_Rs),
    LDUMAXALB_ADDR_SIMPLE_Rt_Rs(LDUMAXALB_ADDR_SIMPLE_Rt_Rs),
    LDUMAXALH_Rs_ADDR_SIMPLE_Rt(LDUMAXALH_Rs_ADDR_SIMPLE_Rt),
    LDUMAXAL_ADDR_SIMPLE_Rs_Rt(LDUMAXAL_ADDR_SIMPLE_Rs_Rt),
    LDUMAXA_Rs_ADDR_SIMPLE_Rt(LDUMAXA_Rs_ADDR_SIMPLE_Rt),
    LDUMAXB_ADDR_SIMPLE_Rt_Rs(LDUMAXB_ADDR_SIMPLE_Rt_Rs),
    LDUMAXH_Rs_ADDR_SIMPLE_Rt(LDUMAXH_Rs_ADDR_SIMPLE_Rt),
    LDUMAXLB_Rs_ADDR_SIMPLE_Rt(LDUMAXLB_Rs_ADDR_SIMPLE_Rt),
    LDUMAXLH_Rt_ADDR_SIMPLE_Rs(LDUMAXLH_Rt_ADDR_SIMPLE_Rs),
    LDUMAXL_ADDR_SIMPLE_Rs_Rt(LDUMAXL_ADDR_SIMPLE_Rs_Rt),
    LDUMAX_Rs_ADDR_SIMPLE_Rt(LDUMAX_Rs_ADDR_SIMPLE_Rt),
    LDUMINAB_ADDR_SIMPLE_Rs_Rt(LDUMINAB_ADDR_SIMPLE_Rs_Rt),
    LDUMINAH_Rt_ADDR_SIMPLE_Rs(LDUMINAH_Rt_ADDR_SIMPLE_Rs),
    LDUMINALB_Rs_Rt_ADDR_SIMPLE(LDUMINALB_Rs_Rt_ADDR_SIMPLE),
    LDUMINALH_Rt_ADDR_SIMPLE_Rs(LDUMINALH_Rt_ADDR_SIMPLE_Rs),
    LDUMINAL_Rs_Rt_ADDR_SIMPLE(LDUMINAL_Rs_Rt_ADDR_SIMPLE),
    LDUMINA_Rt_ADDR_SIMPLE_Rs(LDUMINA_Rt_ADDR_SIMPLE_Rs),
    LDUMINB_Rs_Rt_ADDR_SIMPLE(LDUMINB_Rs_Rt_ADDR_SIMPLE),
    LDUMINH_Rt_ADDR_SIMPLE_Rs(LDUMINH_Rt_ADDR_SIMPLE_Rs),
    LDUMINLB_Rt_ADDR_SIMPLE_Rs(LDUMINLB_Rt_ADDR_SIMPLE_Rs),
    LDUMINLH_Rs_Rt_ADDR_SIMPLE(LDUMINLH_Rs_Rt_ADDR_SIMPLE),
    LDUMINL_Rt_ADDR_SIMPLE_Rs(LDUMINL_Rt_ADDR_SIMPLE_Rs),
    LDUMIN_ADDR_SIMPLE_Rs_Rt(LDUMIN_ADDR_SIMPLE_Rs_Rt),
    LDURB_Rt_ADDR_SIMM9(LDURB_Rt_ADDR_SIMM9),
    LDURH_Rt_ADDR_SIMM9(LDURH_Rt_ADDR_SIMM9),
    LDURSB_ADDR_SIMM9_Rt(LDURSB_ADDR_SIMM9_Rt),
    LDURSH_Rt_ADDR_SIMM9(LDURSH_Rt_ADDR_SIMM9),
    LDURSW_Rt_ADDR_SIMM9(LDURSW_Rt_ADDR_SIMM9),
    LDUR_Ft_ADDR_SIMM9(LDUR_Ft_ADDR_SIMM9),
    LDUR_Rt_ADDR_SIMM9(LDUR_Rt_ADDR_SIMM9),
    LDXP_Rt_Rt2_ADDR_SIMPLE(LDXP_Rt_Rt2_ADDR_SIMPLE),
    LDXRB_Rt_ADDR_SIMPLE(LDXRB_Rt_ADDR_SIMPLE),
    LDXRH_ADDR_SIMPLE_Rt(LDXRH_ADDR_SIMPLE_Rt),
    LDXR_Rt_ADDR_SIMPLE(LDXR_Rt_ADDR_SIMPLE),
    LSLR_SVE_Zd_SVE_Zm_5_SVE_Pg3(LSLR_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    LSLV_Rn_Rm_Rd(LSLV_Rn_Rm_Rd),
    LSL_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED(LSL_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED),
    LSL_SVE_Pg3_SVE_Zd_SVE_Zm_5(LSL_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    LSL_SVE_SHLIMM_UNPRED_SVE_Zn_SVE_Zd(LSL_SVE_SHLIMM_UNPRED_SVE_Zn_SVE_Zd),
    LSL_SVE_Zd_SVE_Zm_5_SVE_Pg3(LSL_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    LSL_SVE_Zn_SVE_Zd_SVE_Zm_16(LSL_SVE_Zn_SVE_Zd_SVE_Zm_16),
    LSRR_SVE_Zd_SVE_Pg3_SVE_Zm_5(LSRR_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    LSRV_Rd_Rn_Rm(LSRV_Rd_Rn_Rm),
    LSR_SVE_Zd_SVE_Pg3_SVE_Zm_5(LSR_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    LSR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3(LSR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3),
    LSR_SVE_Zd_SVE_SHRIMM_UNPRED_SVE_Zn(LSR_SVE_Zd_SVE_SHRIMM_UNPRED_SVE_Zn),
    LSR_SVE_Zd_SVE_Zm_16_SVE_Zn(LSR_SVE_Zd_SVE_Zm_16_SVE_Zn),
    LSR_SVE_Zm_5_SVE_Zd_SVE_Pg3(LSR_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15(LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15),
    LUTI2_SME_Zn_INDEX2_16_SME_Zdnx4_SME_ZT0(LUTI2_SME_Zn_INDEX2_16_SME_Zdnx4_SME_ZT0),
    LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14(LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14),
    LUTI4_SME_ZT0_SME_Zdnx2_SME_Zn_INDEX2_15(LUTI4_SME_ZT0_SME_Zdnx2_SME_Zn_INDEX2_15),
    LUTI4_SME_Zdnx4_SME_Zn_INDEX1_16_SME_ZT0(LUTI4_SME_Zdnx4_SME_Zn_INDEX1_16_SME_ZT0),
    LUTI4_SVE_Zd_SME_Zn_INDEX3_14_SME_ZT0(LUTI4_SVE_Zd_SME_Zn_INDEX3_14_SME_ZT0),
    MADD_Rn_Rd_Rm_Ra(MADD_Rn_Rd_Rm_Ra),
    MAD_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Za_5(MAD_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Za_5),
    MATCH_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd(MATCH_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd),
    MLA_Em16_Vd_Vn(MLA_Em16_Vd_Vn),
    MLA_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn(MLA_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn),
    MLA_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn(MLA_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn),
    MLA_SVE_Zm_16_SVE_Zd_SVE_Zn_SVE_Pg3(MLA_SVE_Zm_16_SVE_Zd_SVE_Zn_SVE_Pg3),
    MLA_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX(MLA_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX),
    MLA_Vd_Vm_Vn(MLA_Vd_Vm_Vn),
    MLS_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn(MLS_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn),
    MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    MLS_SVE_Zm_16_SVE_Zn_SVE_Zd_SVE_Pg3(MLS_SVE_Zm_16_SVE_Zn_SVE_Zd_SVE_Pg3),
    MLS_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX(MLS_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX),
    MLS_Vd_Vn_Em16(MLS_Vd_Vn_Em16),
    MLS_Vn_Vm_Vd(MLS_Vn_Vm_Vd),
    MOVAZ_SME_ZA_array_vrsb_1_SME_Zdnx2(MOVAZ_SME_ZA_array_vrsb_1_SME_Zdnx2),
    MOVAZ_SME_ZA_array_vrsd_1_SME_Zdnx2(MOVAZ_SME_ZA_array_vrsd_1_SME_Zdnx2),
    MOVAZ_SME_ZA_array_vrsd_2_SME_Zdnx4(MOVAZ_SME_ZA_array_vrsd_2_SME_Zdnx4),
    MOVAZ_SME_ZA_array_vrss_1_SME_Zdnx2(MOVAZ_SME_ZA_array_vrss_1_SME_Zdnx2),
    MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1(MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2),
    MOVA_SME_ZA_HV_idx_destxN_SME_Znx2(MOVA_SME_ZA_HV_idx_destxN_SME_Znx2),
    MOVA_SME_ZA_HV_idx_destxN_SME_Znx4(MOVA_SME_ZA_HV_idx_destxN_SME_Znx4),
    MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4(MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4),
    MOVA_SME_ZA_array_off3_5_SME_Zdnx4(MOVA_SME_ZA_array_off3_5_SME_Zdnx4),
    MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN(MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN),
    MOVA_SME_Zdnx2_SME_ZA_array_off3_5(MOVA_SME_Zdnx2_SME_ZA_array_off3_5),
    MOVA_SME_Znx2_SME_ZA_array_off3_0(MOVA_SME_Znx2_SME_ZA_array_off3_0),
    MOVA_SME_Znx4_SME_ZA_array_off3_0(MOVA_SME_Znx4_SME_ZA_array_off3_0),
    MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src(MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src),
    MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3(MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3),
    MOVI_Sd_SIMD_IMM(MOVI_Sd_SIMD_IMM),
    MOVI_Vd_SIMD_IMM(MOVI_Vd_SIMD_IMM),
    MOVI_Vd_SIMD_IMM_SFT(MOVI_Vd_SIMD_IMM_SFT),
    MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL(MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL),
    MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL(MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL),
    MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL(MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL),
    MOVK_Rd_HALF(MOVK_Rd_HALF),
    MOVN_HALF_Rd(MOVN_HALF_Rd),
    MOVPRFX_SVE_Pg3_SVE_Zd_SVE_Zn(MOVPRFX_SVE_Pg3_SVE_Zd_SVE_Zn),
    MOVPRFX_SVE_Zn_SVE_Zd(MOVPRFX_SVE_Zn_SVE_Zd),
    MOVT_Rt_SME_ZT0_INDEX(MOVT_Rt_SME_ZT0_INDEX),
    MOVT_SME_ZT0_INDEX_Rt(MOVT_SME_ZT0_INDEX_Rt),
    MOVZ_HALF_Rd(MOVZ_HALF_Rd),
    MOV_SME_ZA_HV_idx_destxN_SME_Znx4(MOV_SME_ZA_HV_idx_destxN_SME_Znx4),
    MOV_SME_ZA_HV_idx_src_SVE_Pg3_SVE_Zd(MOV_SME_ZA_HV_idx_src_SVE_Pg3_SVE_Zd),
    MOV_SME_ZA_HV_idx_srcxN_SME_Zdnx4(MOV_SME_ZA_HV_idx_srcxN_SME_Zdnx4),
    MOV_SME_ZA_array_off3_0_SME_Znx2(MOV_SME_ZA_array_off3_0_SME_Znx2),
    MOV_SME_ZA_array_off3_0_SME_Znx4(MOV_SME_ZA_array_off3_0_SME_Znx4),
    MOV_SME_ZA_array_off3_5_SME_Zdnx2(MOV_SME_ZA_array_off3_5_SME_Zdnx2),
    MOV_SME_ZA_array_off3_5_SME_Zdnx4(MOV_SME_ZA_array_off3_5_SME_Zdnx4),
    MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN(MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN),
    MOV_SME_Znx2_SME_ZA_HV_idx_destxN(MOV_SME_Znx2_SME_ZA_HV_idx_destxN),
    MOV_SVE_Zn_SVE_Pg3_SME_ZA_HV_idx_dest(MOV_SVE_Zn_SVE_Pg3_SME_ZA_HV_idx_dest),
    MRRS_SYSREG128_Rt_PAIRREG(MRRS_SYSREG128_Rt_PAIRREG),
    MRS_Rt_SYSREG(MRS_Rt_SYSREG),
    MSB_SVE_Za_5_SVE_Pg3_SVE_Zm_16_SVE_Zd(MSB_SVE_Za_5_SVE_Pg3_SVE_Zm_16_SVE_Zd),
    MSRR_PAIRREG_Rt_SYSREG128(MSRR_PAIRREG_Rt_SYSREG128),
    MSR_Rt_SYSREG(MSR_Rt_SYSREG),
    MSR_UIMM4_PSTATEFIELD(MSR_UIMM4_PSTATEFIELD),
    MSUB_Rn_Rm_Rd_Ra(MSUB_Rn_Rm_Rd_Ra),
    MUL_Em16_Vd_Vn(MUL_Em16_Vd_Vn),
    MUL_SVE_Zd_SVE_Pg3_SVE_Zm_5(MUL_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    MUL_SVE_Zd_SVE_SIMM8(MUL_SVE_Zd_SVE_SIMM8),
    MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    MUL_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn(MUL_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn),
    MUL_SVE_Zm_16_SVE_Zd_SVE_Zn(MUL_SVE_Zm_16_SVE_Zd_SVE_Zn),
    MUL_Vd_Vn_Vm(MUL_Vd_Vn_Vm),
    MVNI_SIMD_IMM_SFT_MSL_Vd_V_2S(MVNI_SIMD_IMM_SFT_MSL_Vd_V_2S),
    MVNI_SIMD_IMM_SFT_Vd(MVNI_SIMD_IMM_SFT_Vd),
    MVNI_Vd_SIMD_IMM_SFT(MVNI_Vd_SIMD_IMM_SFT),
    NANDS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm(NANDS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm),
    NAND_SVE_Pg4_10_SVE_Pn_SVE_Pd_SVE_Pm(NAND_SVE_Pg4_10_SVE_Pn_SVE_Pd_SVE_Pm),
    NBSL_SVE_Zd_SVE_Zn_SVE_Zm_16(NBSL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    NEG_SVE_Zd_SVE_Zn_SVE_Pg3(NEG_SVE_Zd_SVE_Zn_SVE_Pg3),
    NEG_Sn_Sd(NEG_Sn_Sd),
    NEG_Vd_Vn(NEG_Vd_Vn),
    NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    NORS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd(NORS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd),
    NOR_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10(NOR_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10),
    NOT_SVE_Zd_SVE_Pg3_SVE_Zn(NOT_SVE_Zd_SVE_Pg3_SVE_Zn),
    NOT_Vn_Vd(NOT_Vn_Vd),
    ORNS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm(ORNS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm),
    ORN_Rd_Rm_SFT_Rn(ORN_Rd_Rm_SFT_Rn),
    ORN_SVE_Pg4_10_SVE_Pm_SVE_Pd_SVE_Pn(ORN_SVE_Pg4_10_SVE_Pm_SVE_Pd_SVE_Pn),
    ORN_Vm_Vn_Vd(ORN_Vm_Vn_Vd),
    ORRS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd(ORRS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd),
    ORR_Rd_SP_Rn_LIMM(ORR_Rd_SP_Rn_LIMM),
    ORR_Rm_SFT_Rn_Rd(ORR_Rm_SFT_Rn_Rd),
    ORR_SIMD_IMM_SFT_Vd(ORR_SIMD_IMM_SFT_Vd),
    ORR_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm(ORR_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm),
    ORR_SVE_Zd_SVE_LIMM(ORR_SVE_Zd_SVE_LIMM),
    ORR_SVE_Zd_SVE_Zm_16_SVE_Zn(ORR_SVE_Zd_SVE_Zm_16_SVE_Zn),
    ORR_SVE_Zm_5_SVE_Pg3_SVE_Zd(ORR_SVE_Zm_5_SVE_Pg3_SVE_Zd),
    ORR_Vd_SIMD_IMM_SFT(ORR_Vd_SIMD_IMM_SFT),
    ORR_Vn_Vd_Vm(ORR_Vn_Vd_Vm),
    ORV_SVE_Vd_SVE_Pg3_SVE_Zn(ORV_SVE_Vd_SVE_Pg3_SVE_Zn),
    PACDA_Rn_SP_Rd(PACDA_Rn_SP_Rd),
    PACDB_Rn_SP_Rd(PACDB_Rn_SP_Rd),
    PACDZA_Rd(PACDZA_Rd),
    PACDZB_Rd(PACDZB_Rd),
    PACGA_Rm_SP_Rn_Rd(PACGA_Rm_SP_Rn_Rd),
    PACIA_Rn_SP_Rd(PACIA_Rn_SP_Rd),
    PACIB_Rn_SP_Rd(PACIB_Rn_SP_Rd),
    PACIZA_Rd(PACIZA_Rd),
    PACIZB_Rd(PACIZB_Rd),
    PEXT_SME_PNn3_INDEX2_SVE_Pd(PEXT_SME_PNn3_INDEX2_SVE_Pd),
    PEXT_SME_PdxN_SME_PNn3_INDEX1(PEXT_SME_PdxN_SME_PNn3_INDEX1),
    PFALSE_SVE_PNd(PFALSE_SVE_PNd),
    PFALSE_SVE_Pd(PFALSE_SVE_Pd),
    PFIRST_SVE_Pd_SVE_Pg4_5(PFIRST_SVE_Pd_SVE_Pg4_5),
    PMULL2_Vd_Vn_Vm(PMULL2_Vd_Vn_Vm),
    PMULL2_Vn_Vm_Vd(PMULL2_Vn_Vm_Vd),
    PMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16(PMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16),
    PMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd(PMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    PMULLT_SVE_Zn_SVE_Zd_SVE_Zm_16(PMULLT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    PMULLT_SVE_Zn_S_B_SVE_Zd_S_H_SVE_Zm_16_S_B(PMULLT_SVE_Zn_S_B_SVE_Zd_S_H_SVE_Zm_16_S_B),
    PMULL_Vd_Vn_Vm(PMULL_Vd_Vn_Vm),
    PMULL_Vn_Vm_Vd(PMULL_Vn_Vm_Vd),
    PMUL_SVE_Zd_SVE_Zm_16_SVE_Zn(PMUL_SVE_Zd_SVE_Zm_16_SVE_Zn),
    PMUL_Vn_Vd_Vm(PMUL_Vn_Vd_Vm),
    PNEXT_SVE_Pg4_5_SVE_Pd(PNEXT_SVE_Pg4_5_SVE_Pd),
    PRFB_SVE_ADDR_RX_SVE_PRFOP_SVE_Pg3(PRFB_SVE_ADDR_RX_SVE_PRFOP_SVE_Pg3),
    PRFB_SVE_ADDR_RZ_SVE_Pg3_SVE_PRFOP(PRFB_SVE_ADDR_RZ_SVE_Pg3_SVE_PRFOP),
    PRFB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_PRFOP(PRFB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_PRFOP),
    PRFB_SVE_ADDR_ZI_U5_SVE_PRFOP_SVE_Pg3(PRFB_SVE_ADDR_ZI_U5_SVE_PRFOP_SVE_Pg3),
    PRFB_SVE_ADDR_ZI_U5_SVE_Pg3_SVE_PRFOP(PRFB_SVE_ADDR_ZI_U5_SVE_Pg3_SVE_PRFOP),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL),
    PRFB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_PRFOP(PRFB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_PRFOP),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3(PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3),
    PRFD_SVE_Pg3_SVE_ADDR_RI_S6xVL_SVE_PRFOP(PRFD_SVE_Pg3_SVE_ADDR_RI_S6xVL_SVE_PRFOP),
    PRFD_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_PRFOP(PRFD_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_PRFOP),
    PRFD_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_SVE_PRFOP(PRFD_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_SVE_PRFOP),
    PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW3_22(PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW3_22),
    PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8(PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8),
    PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8_c580e000(
        PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8_c580e000,
    ),
    PRFH_SVE_PRFOP_SVE_ADDR_ZI_U5x2_SVE_Pg3(PRFH_SVE_PRFOP_SVE_ADDR_ZI_U5x2_SVE_Pg3),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    PRFH_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_PRFOP(PRFH_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_PRFOP),
    PRFH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_PRFOP(PRFH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_PRFOP),
    PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL(PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL),
    PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW1_22(PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW1_22),
    PRFM_PRFOP_ADDR_PCREL19(PRFM_PRFOP_ADDR_PCREL19),
    PRFM_PRFOP_ADDR_REGOFF(PRFM_PRFOP_ADDR_REGOFF),
    PRFM_PRFOP_ADDR_UIMM12(PRFM_PRFOP_ADDR_UIMM12),
    PRFUM_PRFOP_ADDR_SIMM9(PRFUM_PRFOP_ADDR_SIMM9),
    PRFW_SVE_ADDR_RZ_LSL2_SVE_PRFOP_SVE_Pg3(PRFW_SVE_ADDR_RZ_LSL2_SVE_PRFOP_SVE_Pg3),
    PRFW_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_PRFOP(PRFW_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_PRFOP),
    PRFW_SVE_PRFOP_SVE_ADDR_ZI_U5x4_SVE_Pg3(PRFW_SVE_PRFOP_SVE_ADDR_ZI_U5x4_SVE_Pg3),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    PRFW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_PRFOP(PRFW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_PRFOP),
    PRFW_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_PRFOP(PRFW_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_PRFOP),
    PRFW_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL(PRFW_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL),
    PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd(PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd),
    PSEL_SVE_Pd_SME_PnT_Wm_imm_SVE_Pg4_10(PSEL_SVE_Pd_SME_PnT_Wm_imm_SVE_Pg4_10),
    PTEST_SVE_Pg4_10_SVE_Pn(PTEST_SVE_Pg4_10_SVE_Pn),
    PTRUES_SVE_Pd_SVE_PATTERN(PTRUES_SVE_Pd_SVE_PATTERN),
    PTRUE_SME_PNd3(PTRUE_SME_PNd3),
    PTRUE_SVE_Pd_SVE_PATTERN(PTRUE_SVE_Pd_SVE_PATTERN),
    PUNPKHI_SVE_Pn_SVE_Pd(PUNPKHI_SVE_Pn_SVE_Pd),
    PUNPKLO_SVE_Pd_SVE_Pn(PUNPKLO_SVE_Pd_SVE_Pn),
    RADDHN2_Vd_Vn_Vm(RADDHN2_Vd_Vn_Vm),
    RADDHNB_SVE_Zm_16_SVE_Zn_SVE_Zd(RADDHNB_SVE_Zm_16_SVE_Zn_SVE_Zd),
    RADDHNT_SVE_Zn_SVE_Zd_SVE_Zm_16(RADDHNT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    RADDHN_Vd_Vn_Vm(RADDHN_Vd_Vn_Vm),
    RAX1_SVE_Zn_SVE_Zd_SVE_Zm_16(RAX1_SVE_Zn_SVE_Zd_SVE_Zm_16),
    RAX1_Vd_Vm_Vn(RAX1_Vd_Vm_Vn),
    RBIT_Rd_Rn(RBIT_Rd_Rn),
    RBIT_SVE_Zd_SVE_Zn_SVE_Pg3(RBIT_SVE_Zd_SVE_Zn_SVE_Pg3),
    RBIT_Vd_Vn(RBIT_Vd_Vn),
    RCWCASAL_Rt_ADDR_SIMPLE_Rs(RCWCASAL_Rt_ADDR_SIMPLE_Rs),
    RCWCASA_ADDR_SIMPLE_Rs_Rt(RCWCASA_ADDR_SIMPLE_Rs_Rt),
    RCWCASL_Rs_Rt_ADDR_SIMPLE(RCWCASL_Rs_Rt_ADDR_SIMPLE),
    RCWCASPAL_Rt_PAIRREG_Rs_ADDR_SIMPLE(RCWCASPAL_Rt_PAIRREG_Rs_ADDR_SIMPLE),
    RCWCASPA_Rt_Rs_ADDR_SIMPLE_PAIRREG(RCWCASPA_Rt_Rs_ADDR_SIMPLE_PAIRREG),
    RCWCASPL_Rt_ADDR_SIMPLE_Rs_PAIRREG(RCWCASPL_Rt_ADDR_SIMPLE_Rs_PAIRREG),
    RCWCASP_Rs_ADDR_SIMPLE_Rt_PAIRREG(RCWCASP_Rs_ADDR_SIMPLE_Rt_PAIRREG),
    RCWCAS_Rt_Rs_ADDR_SIMPLE(RCWCAS_Rt_Rs_ADDR_SIMPLE),
    RCWCLRAL_Rs_ADDR_SIMPLE_Rt(RCWCLRAL_Rs_ADDR_SIMPLE_Rt),
    RCWCLRA_Rt_ADDR_SIMPLE_Rs(RCWCLRA_Rt_ADDR_SIMPLE_Rs),
    RCWCLRL_ADDR_SIMPLE_Rs_Rt(RCWCLRL_ADDR_SIMPLE_Rs_Rt),
    RCWCLRPAL_Rs_ADDR_SIMPLE_Rt(RCWCLRPAL_Rs_ADDR_SIMPLE_Rt),
    RCWCLRPA_ADDR_SIMPLE_Rs_Rt(RCWCLRPA_ADDR_SIMPLE_Rs_Rt),
    RCWCLRPL_Rt_ADDR_SIMPLE_Rs(RCWCLRPL_Rt_ADDR_SIMPLE_Rs),
    RCWCLRP_ADDR_SIMPLE_Rs_Rt(RCWCLRP_ADDR_SIMPLE_Rs_Rt),
    RCWCLR_Rs_Rt_ADDR_SIMPLE(RCWCLR_Rs_Rt_ADDR_SIMPLE),
    RCWSCASAL_ADDR_SIMPLE_Rs_Rt(RCWSCASAL_ADDR_SIMPLE_Rs_Rt),
    RCWSCASA_Rt_ADDR_SIMPLE_Rs(RCWSCASA_Rt_ADDR_SIMPLE_Rs),
    RCWSCASL_Rs_Rt_ADDR_SIMPLE(RCWSCASL_Rs_Rt_ADDR_SIMPLE),
    RCWSCASPAL_ADDR_SIMPLE_Rs_Rt_PAIRREG(RCWSCASPAL_ADDR_SIMPLE_Rs_Rt_PAIRREG),
    RCWSCASPA_PAIRREG_ADDR_SIMPLE_Rs_Rt(RCWSCASPA_PAIRREG_ADDR_SIMPLE_Rs_Rt),
    RCWSCASPL_PAIRREG_ADDR_SIMPLE_Rs_Rt(RCWSCASPL_PAIRREG_ADDR_SIMPLE_Rs_Rt),
    RCWSCASP_PAIRREG_Rt_ADDR_SIMPLE_Rs(RCWSCASP_PAIRREG_Rt_ADDR_SIMPLE_Rs),
    RCWSCAS_ADDR_SIMPLE_Rt_Rs(RCWSCAS_ADDR_SIMPLE_Rt_Rs),
    RCWSCLRAL_Rt_ADDR_SIMPLE_Rs(RCWSCLRAL_Rt_ADDR_SIMPLE_Rs),
    RCWSCLRA_Rt_ADDR_SIMPLE_Rs(RCWSCLRA_Rt_ADDR_SIMPLE_Rs),
    RCWSCLRL_Rt_Rs_ADDR_SIMPLE(RCWSCLRL_Rt_Rs_ADDR_SIMPLE),
    RCWSCLRPAL_Rs_Rt_ADDR_SIMPLE(RCWSCLRPAL_Rs_Rt_ADDR_SIMPLE),
    RCWSCLRPA_ADDR_SIMPLE_Rt_Rs(RCWSCLRPA_ADDR_SIMPLE_Rt_Rs),
    RCWSCLRPL_Rs_Rt_ADDR_SIMPLE(RCWSCLRPL_Rs_Rt_ADDR_SIMPLE),
    RCWSCLRP_ADDR_SIMPLE_Rs_Rt(RCWSCLRP_ADDR_SIMPLE_Rs_Rt),
    RCWSCLR_ADDR_SIMPLE_Rs_Rt(RCWSCLR_ADDR_SIMPLE_Rs_Rt),
    RCWSETAL_ADDR_SIMPLE_Rs_Rt(RCWSETAL_ADDR_SIMPLE_Rs_Rt),
    RCWSETA_Rs_Rt_ADDR_SIMPLE(RCWSETA_Rs_Rt_ADDR_SIMPLE),
    RCWSETL_Rs_Rt_ADDR_SIMPLE(RCWSETL_Rs_Rt_ADDR_SIMPLE),
    RCWSETPAL_Rt_Rs_ADDR_SIMPLE(RCWSETPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSETPA_Rs_Rt_ADDR_SIMPLE(RCWSETPA_Rs_Rt_ADDR_SIMPLE),
    RCWSETPL_Rt_Rs_ADDR_SIMPLE(RCWSETPL_Rt_Rs_ADDR_SIMPLE),
    RCWSETP_Rt_Rs_ADDR_SIMPLE(RCWSETP_Rt_Rs_ADDR_SIMPLE),
    RCWSET_Rs_Rt_ADDR_SIMPLE(RCWSET_Rs_Rt_ADDR_SIMPLE),
    RCWSSETAL_Rs_ADDR_SIMPLE_Rt(RCWSSETAL_Rs_ADDR_SIMPLE_Rt),
    RCWSSETA_Rs_Rt_ADDR_SIMPLE(RCWSSETA_Rs_Rt_ADDR_SIMPLE),
    RCWSSETL_Rt_Rs_ADDR_SIMPLE(RCWSSETL_Rt_Rs_ADDR_SIMPLE),
    RCWSSETPAL_Rs_ADDR_SIMPLE_Rt(RCWSSETPAL_Rs_ADDR_SIMPLE_Rt),
    RCWSSETPA_Rt_Rs_ADDR_SIMPLE(RCWSSETPA_Rt_Rs_ADDR_SIMPLE),
    RCWSSETPL_ADDR_SIMPLE_Rt_Rs(RCWSSETPL_ADDR_SIMPLE_Rt_Rs),
    RCWSSETP_ADDR_SIMPLE_Rs_Rt(RCWSSETP_ADDR_SIMPLE_Rs_Rt),
    RCWSSET_ADDR_SIMPLE_Rt_Rs(RCWSSET_ADDR_SIMPLE_Rt_Rs),
    RCWSSWPAL_Rs_ADDR_SIMPLE_Rt(RCWSSWPAL_Rs_ADDR_SIMPLE_Rt),
    RCWSSWPA_Rs_Rt_ADDR_SIMPLE(RCWSSWPA_Rs_Rt_ADDR_SIMPLE),
    RCWSSWPL_ADDR_SIMPLE_Rs_Rt(RCWSSWPL_ADDR_SIMPLE_Rs_Rt),
    RCWSSWPPAL_ADDR_SIMPLE_Rs_Rt(RCWSSWPPAL_ADDR_SIMPLE_Rs_Rt),
    RCWSSWPPA_Rs_Rt_ADDR_SIMPLE(RCWSSWPPA_Rs_Rt_ADDR_SIMPLE),
    RCWSSWPPL_Rs_ADDR_SIMPLE_Rt(RCWSSWPPL_Rs_ADDR_SIMPLE_Rt),
    RCWSSWPP_ADDR_SIMPLE_Rs_Rt(RCWSSWPP_ADDR_SIMPLE_Rs_Rt),
    RCWSSWP_Rt_ADDR_SIMPLE_Rs(RCWSSWP_Rt_ADDR_SIMPLE_Rs),
    RCWSWPAL_Rt_Rs_ADDR_SIMPLE(RCWSWPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSWPA_Rt_ADDR_SIMPLE_Rs(RCWSWPA_Rt_ADDR_SIMPLE_Rs),
    RCWSWPL_Rt_Rs_ADDR_SIMPLE(RCWSWPL_Rt_Rs_ADDR_SIMPLE),
    RCWSWPPAL_Rs_ADDR_SIMPLE_Rt(RCWSWPPAL_Rs_ADDR_SIMPLE_Rt),
    RCWSWPPA_ADDR_SIMPLE_Rt_Rs(RCWSWPPA_ADDR_SIMPLE_Rt_Rs),
    RCWSWPPL_ADDR_SIMPLE_Rs_Rt(RCWSWPPL_ADDR_SIMPLE_Rs_Rt),
    RCWSWPP_Rt_ADDR_SIMPLE_Rs(RCWSWPP_Rt_ADDR_SIMPLE_Rs),
    RCWSWP_ADDR_SIMPLE_Rt_Rs(RCWSWP_ADDR_SIMPLE_Rt_Rs),
    RDFFRS_SVE_Pd_SVE_Pg4_5(RDFFRS_SVE_Pd_SVE_Pg4_5),
    RDFFR_SVE_Pd(RDFFR_SVE_Pd),
    RDFFR_SVE_Pd_SVE_Pg4_5(RDFFR_SVE_Pd_SVE_Pg4_5),
    RDSVL_Rd_SVE_SIMM6(RDSVL_Rd_SVE_SIMM6),
    RDVL_Rd_SVE_SIMM6(RDVL_Rd_SVE_SIMM6),
    RETAA(RETAA),
    RETAB(RETAB),
    RET_Rn(RET_Rn),
    REV16_Rn_Rd(REV16_Rn_Rd),
    REV16_Vd_Vn(REV16_Vd_Vn),
    REV32_Rn_Rd(REV32_Rn_Rd),
    REV32_Vn_Vd(REV32_Vn_Vd),
    REV64_Vn_Vd(REV64_Vn_Vd),
    REVB_SVE_Pg3_SVE_Zn_SVE_Zd(REVB_SVE_Pg3_SVE_Zn_SVE_Zd),
    REVD_SVE_Pg3_SVE_Zn_SVE_Zd(REVD_SVE_Pg3_SVE_Zn_SVE_Zd),
    REVH_SVE_Pg3_SVE_Zd_SVE_Zn(REVH_SVE_Pg3_SVE_Zd_SVE_Zn),
    REVW_SVE_Zn_SVE_Zd_SVE_Pg3(REVW_SVE_Zn_SVE_Zd_SVE_Pg3),
    REV_Rd_Rn(REV_Rd_Rn),
    REV_Rn_Rd(REV_Rn_Rd),
    REV_SVE_Pn_SVE_Pd(REV_SVE_Pn_SVE_Pd),
    REV_SVE_Zd_SVE_Zn(REV_SVE_Zd_SVE_Zn),
    RMIF_MASK_Rn_IMM_2(RMIF_MASK_Rn_IMM_2),
    RORV_Rd_Rn_Rm(RORV_Rd_Rn_Rm),
    RPRFM_Rm_SIMD_ADDR_SIMPLE_RPRFMOP(RPRFM_Rm_SIMD_ADDR_SIMPLE_RPRFMOP),
    RSHRN2_Vd_Vn_IMM_VLSR(RSHRN2_Vd_Vn_IMM_VLSR),
    RSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd(RSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd),
    RSHRNT_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn(RSHRNT_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn),
    RSHRN_Vd_IMM_VLSR_Vn(RSHRN_Vd_IMM_VLSR_Vn),
    RSUBHN2_Vn_Vd_Vm(RSUBHN2_Vn_Vd_Vm),
    RSUBHNB_SVE_Zn_SVE_Zm_16_SVE_Zd(RSUBHNB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    RSUBHNT_SVE_Zn_SVE_Zd_SVE_Zm_16(RSUBHNT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    RSUBHN_Vm_Vd_Vn(RSUBHN_Vm_Vd_Vn),
    SABAL2_Vn_Vm_Vd(SABAL2_Vn_Vm_Vd),
    SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16(SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABALT_SVE_Zm_16_SVE_Zn_SVE_Zd(SABALT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SABAL_Vd_Vn_Vm(SABAL_Vd_Vn_Vm),
    SABA_SVE_Zd_SVE_Zn_SVE_Zm_16(SABA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABA_Vd_Vm_Vn(SABA_Vd_Vm_Vn),
    SABDL2_Vn_Vm_Vd(SABDL2_Vn_Vm_Vd),
    SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABDLT_SVE_Zn_SVE_Zd_SVE_Zm_16(SABDLT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SABDL_Vd_Vm_Vn(SABDL_Vd_Vm_Vn),
    SABD_SVE_Zd_SVE_Zm_5_SVE_Pg3(SABD_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    SABD_Vm_Vd_Vn(SABD_Vm_Vd_Vn),
    SADALP_SVE_Zd_SVE_Pg3_SVE_Zn(SADALP_SVE_Zd_SVE_Pg3_SVE_Zn),
    SADALP_Vd_Vn(SADALP_Vd_Vn),
    SADDL2_Vd_Vm_Vn(SADDL2_Vd_Vm_Vn),
    SADDLBT_SVE_Zm_16_SVE_Zn_SVE_Zd(SADDLBT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SADDLB_SVE_Zm_16_SVE_Zn_SVE_Zd(SADDLB_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SADDLP_Vd_Vn(SADDLP_Vd_Vn),
    SADDLT_SVE_Zn_SVE_Zd_SVE_Zm_16(SADDLT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SADDLV_Fd_Vn(SADDLV_Fd_Vn),
    SADDL_Vd_Vn_Vm(SADDL_Vd_Vn_Vm),
    SADDV_SVE_Pg3_SVE_Zn_SVE_Vd(SADDV_SVE_Pg3_SVE_Zn_SVE_Vd),
    SADDW2_Vm_Vd_Vn(SADDW2_Vm_Vd_Vn),
    SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16(SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SADDWT_SVE_Zm_16_SVE_Zn_SVE_Zd(SADDWT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SADDW_Vn_Vm_Vd(SADDW_Vn_Vm_Vd),
    SB(SB),
    SBCLB_SVE_Zd_SVE_Zm_16_SVE_Zn(SBCLB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SBCLT_SVE_Zm_16_SVE_Zn_SVE_Zd(SBCLT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SBCS_Rn_Rd_Rm(SBCS_Rn_Rd_Rm),
    SBC_Rm_Rd_Rn(SBC_Rm_Rd_Rn),
    SBFM_Rd_Rn_IMMS_IMMR(SBFM_Rd_Rn_IMMS_IMMR),
    SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    SCLAMP_SVE_Zm_16_SVE_Zd_SVE_Zn(SCLAMP_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4(SCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4),
    SCVTF_Fd_Rn(SCVTF_Fd_Rn),
    SCVTF_Fd_Rn_FBITS(SCVTF_Fd_Rn_FBITS),
    SCVTF_IMM_VLSR_S_H_Sn_S_H_Sd_S_H(SCVTF_IMM_VLSR_S_H_Sn_S_H_Sd_S_H),
    SCVTF_IMM_VLSR_Sn_Sd(SCVTF_IMM_VLSR_Sn_Sd),
    SCVTF_IMM_VLSR_Vd_Vn(SCVTF_IMM_VLSR_Vd_Vn),
    SCVTF_Rn_Fd(SCVTF_Rn_Fd),
    SCVTF_Rn_Fd_FBITS(SCVTF_Rn_Fd_FBITS),
    SCVTF_SME_Zdnx4_SME_Znx4(SCVTF_SME_Zdnx4_SME_Znx4),
    SCVTF_SME_Znx2_SME_Zdnx2(SCVTF_SME_Znx2_SME_Zdnx2),
    SCVTF_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_D(SCVTF_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_D),
    SCVTF_SVE_Pg3_SVE_Zd_SVE_Zn(SCVTF_SVE_Pg3_SVE_Zd_SVE_Zn),
    SCVTF_SVE_Pg3_SVE_Zn_SVE_Zd(SCVTF_SVE_Pg3_SVE_Zn_SVE_Zd),
    SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn(SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn),
    SCVTF_SVE_Zn_SVE_Pg3_SVE_Zd(SCVTF_SVE_Zn_SVE_Pg3_SVE_Zd),
    SCVTF_SVE_Zn_SVE_Zd_SVE_Pg3(SCVTF_SVE_Zn_SVE_Zd_SVE_Pg3),
    SCVTF_SVE_Zn_S_H_SVE_Zd_S_H_SVE_Pg3_P_M(SCVTF_SVE_Zn_S_H_SVE_Zd_S_H_SVE_Pg3_P_M),
    SCVTF_Sn_S_H_Sd_S_H(SCVTF_Sn_S_H_Sd_S_H),
    SCVTF_Sn_Sd(SCVTF_Sn_Sd),
    SCVTF_Vd_Vn(SCVTF_Vd_Vn),
    SCVTF_Vd_Vn_IMM_VLSR(SCVTF_Vd_Vn_IMM_VLSR),
    SCVTF_Vn_Vd(SCVTF_Vn_Vd),
    SDIVR_SVE_Zd_SVE_Pg3_SVE_Zm_5(SDIVR_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    SDIV_Rn_Rd_Rm(SDIV_Rn_Rd_Rm),
    SDIV_SVE_Pg3_SVE_Zm_5_SVE_Zd(SDIV_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    SDOT_Em_Vd_Vn(SDOT_Em_Vd_Vn),
    SDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4(
        SDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4,
    ),
    SDOT_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN(SDOT_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN),
    SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    SDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0(
        SDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0,
    ),
    SDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(SDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    SDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H(
        SDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H,
    ),
    SDOT_SME_Zmx2_SME_ZA_array_off3_0_SME_Znx2(SDOT_SME_Zmx2_SME_ZA_array_off3_0_SME_Znx2),
    SDOT_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4(SDOT_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4),
    SDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2(SDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2),
    SDOT_SME_Znx2_SME_Zm_INDEX1_SME_ZA_array_off3_0(
        SDOT_SME_Znx2_SME_Zm_INDEX1_SME_ZA_array_off3_0,
    ),
    SDOT_SME_Znx4_SME_Zm_INDEX1_SME_ZA_array_off3_0(
        SDOT_SME_Znx4_SME_Zm_INDEX1_SME_ZA_array_off3_0,
    ),
    SDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        SDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    SDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn(SDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn),
    SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd(SDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd),
    SDOT_SVE_Zm_16_SVE_Zn_SVE_Zd(SDOT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SDOT_SVE_Zn_SVE_Zm_16_SVE_Zd(SDOT_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SDOT_Vd_Vn_Vm(SDOT_Vd_Vn_Vm),
    SEL_SME_Zdnx2_SME_Znx2_SME_PNg3_SME_Zmx2(SEL_SME_Zdnx2_SME_Znx2_SME_PNg3_SME_Zmx2),
    SEL_SME_Zdnx4_SME_Znx4_SME_PNg3_SME_Zmx4(SEL_SME_Zdnx4_SME_Znx4_SME_PNg3_SME_Zmx4),
    SEL_SVE_Pg4_10_SVE_Zn_SVE_Zm_16_SVE_Zd(SEL_SVE_Pg4_10_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SEL_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm(SEL_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm),
    SETEN_Rm_MOPS_WB_Rn_MOPS_ADDR_Rd(SETEN_Rm_MOPS_WB_Rn_MOPS_ADDR_Rd),
    SETETN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd(SETETN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd),
    SETET_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd(SETET_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd),
    SETE_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd(SETE_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd),
    SETF16_Rn(SETF16_Rn),
    SETF8_Rn(SETF8_Rn),
    SETFFR(SETFFR),
    SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGETN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETGETN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETGET_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETGET_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETGE_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn(SETGE_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn),
    SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGMT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETGMT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETGM_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETGM_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETGPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm(SETGPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm),
    SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGPT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETGPT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETGP_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETGP_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETMN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn(SETMN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn),
    SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETMT_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm(SETMT_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm),
    SETM_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn(SETM_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn),
    SETPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm(SETPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm),
    SETPTN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd(SETPTN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd),
    SETPT_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd(SETPT_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd),
    SETP_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm(SETP_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm),
    SHA1C_Vm_Fd_Fn(SHA1C_Vm_Fd_Fn),
    SHA1H_Fd_Fn(SHA1H_Fd_Fn),
    SHA1M_Vm_Fn_Fd(SHA1M_Vm_Fn_Fd),
    SHA1P_Fd_Fn_Vm(SHA1P_Fd_Fn_Vm),
    SHA1SU0_Vd_Vn_Vm(SHA1SU0_Vd_Vn_Vm),
    SHA1SU1_Vd_Vn(SHA1SU1_Vd_Vn),
    SHA256H2_Vm_Fd_Fn(SHA256H2_Vm_Fd_Fn),
    SHA256H_Fd_Vm_Fn(SHA256H_Fd_Vm_Fn),
    SHA256SU0_Vn_Vd(SHA256SU0_Vn_Vd),
    SHA256SU1_Vd_Vn_Vm(SHA256SU1_Vd_Vn_Vm),
    SHA512H2_Fn_Fd_Vm(SHA512H2_Fn_Fd_Vm),
    SHA512H_Fd_Fn_Vm(SHA512H_Fd_Fn_Vm),
    SHA512SU0_Vd_Vn(SHA512SU0_Vd_Vn),
    SHA512SU1_Vn_Vm_Vd(SHA512SU1_Vn_Vm_Vd),
    SHADD_SVE_Zn_SVE_Pg3_SVE_Zd(SHADD_SVE_Zn_SVE_Pg3_SVE_Zd),
    SHADD_Vd_Vn_Vm(SHADD_Vd_Vn_Vm),
    SHLL2_Vd_Vn_SHLL_IMM(SHLL2_Vd_Vn_SHLL_IMM),
    SHLL_Vn_Vd_SHLL_IMM(SHLL_Vn_Vd_SHLL_IMM),
    SHL_IMM_VLSL_Sd_Sn(SHL_IMM_VLSL_Sd_Sn),
    SHL_IMM_VLSL_Vn_Vd(SHL_IMM_VLSL_Vn_Vd),
    SHRN2_IMM_VLSR_Vd_Vn(SHRN2_IMM_VLSR_Vd_Vn),
    SHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn(SHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn),
    SHRNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn(SHRNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn),
    SHRN_Vd_Vn_IMM_VLSR(SHRN_Vd_Vn_IMM_VLSR),
    SHSUBR_SVE_Pg3_SVE_Zn_SVE_Zd(SHSUBR_SVE_Pg3_SVE_Zn_SVE_Zd),
    SHSUB_SVE_Zd_SVE_Zn_SVE_Pg3(SHSUB_SVE_Zd_SVE_Zn_SVE_Pg3),
    SHSUB_Vn_Vm_Vd(SHSUB_Vn_Vm_Vd),
    SLI_IMM_VLSL_Vd_Vn(SLI_IMM_VLSL_Vd_Vn),
    SLI_SVE_SHLIMM_UNPRED_SVE_Zd_SVE_Zn(SLI_SVE_SHLIMM_UNPRED_SVE_Zd_SVE_Zn),
    SLI_Sd_Sn_IMM_VLSL(SLI_Sd_Sn_IMM_VLSL),
    SM3PARTW1_Vm_Vd_Vn(SM3PARTW1_Vm_Vd_Vn),
    SM3PARTW2_Vn_Vd_Vm(SM3PARTW2_Vn_Vd_Vm),
    SM3SS1_Vd_Vn_Va_Vm(SM3SS1_Vd_Vn_Va_Vm),
    SM3TT1A_Vn_Vd_Em(SM3TT1A_Vn_Vd_Em),
    SM3TT1B_Vd_Vn_Em(SM3TT1B_Vd_Vn_Em),
    SM3TT2A_Vd_Vn_Em(SM3TT2A_Vd_Vn_Em),
    SM3TT2B_Vd_Vn_Em(SM3TT2B_Vd_Vn_Em),
    SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16(SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SM4EKEY_Vm_Vn_Vd(SM4EKEY_Vm_Vn_Vd),
    SM4E_SVE_Zn_SVE_Zd(SM4E_SVE_Zn_SVE_Zd),
    SM4E_Vd_Vn(SM4E_Vd_Vn),
    SMADDL_Rn_Ra_Rd_Rm(SMADDL_Rn_Ra_Rd_Rm),
    SMAXP_SVE_Pg3_SVE_Zd_SVE_Zn(SMAXP_SVE_Pg3_SVE_Zd_SVE_Zn),
    SMAXP_Vm_Vn_Vd(SMAXP_Vm_Vn_Vd),
    SMAXQV_Vd_SVE_Pg3_SVE_Zn(SMAXQV_Vd_SVE_Pg3_SVE_Zn),
    SMAXV_SVE_Pg3_SVE_Zn_SVE_Vd(SMAXV_SVE_Pg3_SVE_Zn_SVE_Vd),
    SMAXV_Vn_Fd(SMAXV_Vn_Fd),
    SMAX_CSSC_SIMM8_Rd_Rn(SMAX_CSSC_SIMM8_Rd_Rn),
    SMAX_Rd_Rn_Rm(SMAX_Rd_Rn_Rm),
    SMAX_SME_Zdnx2_SME_Zmx2(SMAX_SME_Zdnx2_SME_Zmx2),
    SMAX_SME_Zdnx4_SME_Zm(SMAX_SME_Zdnx4_SME_Zm),
    SMAX_SME_Zm_SME_Zdnx2(SMAX_SME_Zm_SME_Zdnx2),
    SMAX_SME_Zmx4_SME_Zdnx4(SMAX_SME_Zmx4_SME_Zdnx4),
    SMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5(SMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SMAX_SVE_Zd_SVE_SIMM8(SMAX_SVE_Zd_SVE_SIMM8),
    SMAX_Vn_Vm_Vd(SMAX_Vn_Vm_Vd),
    SMC_EXCEPTION(SMC_EXCEPTION),
    SMINP_SVE_Zn_SVE_Zd_SVE_Pg3(SMINP_SVE_Zn_SVE_Zd_SVE_Pg3),
    SMINP_Vn_Vm_Vd(SMINP_Vn_Vm_Vd),
    SMINQV_SVE_Zn_Vd_SVE_Pg3(SMINQV_SVE_Zn_Vd_SVE_Pg3),
    SMINV_Fd_Vn(SMINV_Fd_Vn),
    SMINV_SVE_Vd_SVE_Zn_SVE_Pg3(SMINV_SVE_Vd_SVE_Zn_SVE_Pg3),
    SMIN_CSSC_SIMM8_Rn_Rd(SMIN_CSSC_SIMM8_Rn_Rd),
    SMIN_Rd_Rn_Rm(SMIN_Rd_Rn_Rm),
    SMIN_SME_Zdnx2_SME_Zm(SMIN_SME_Zdnx2_SME_Zm),
    SMIN_SME_Zdnx4_SME_Zm(SMIN_SME_Zdnx4_SME_Zm),
    SMIN_SME_Zmx2_SME_Zdnx2(SMIN_SME_Zmx2_SME_Zdnx2),
    SMIN_SME_Zmx4_SME_Zdnx4(SMIN_SME_Zmx4_SME_Zdnx4),
    SMIN_SVE_Zd_SVE_Pg3_SVE_Zm_5(SMIN_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    SMIN_SVE_Zd_SVE_SIMM8(SMIN_SVE_Zd_SVE_SIMM8),
    SMIN_Vn_Vm_Vd(SMIN_Vn_Vm_Vd),
    SMLAL2_Vn_Em16_Vd(SMLAL2_Vn_Em16_Vd),
    SMLAL2_Vn_Vd_Vm(SMLAL2_Vn_Vd_Vm),
    SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(SMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    SMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn(SMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4(
        SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4,
    ),
    SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX4_1_SME_Znx4(
        SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX4_1_SME_Znx4,
    ),
    SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1(
        SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1,
    ),
    SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    SMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn(
        SMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn,
    ),
    SMLALL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2(
        SMLALL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2,
    ),
    SMLALL_SME_Zm_SVE_Zn_SME_ZA_array_off2x4(SMLALL_SME_Zm_SVE_Zn_SME_ZA_array_off2x4),
    SMLALL_SME_Zmx2_SME_Znx2_SME_ZA_array_off1x4(SMLALL_SME_Zmx2_SME_Znx2_SME_ZA_array_off1x4),
    SMLALL_SME_Zmx4_SME_Znx4_SME_ZA_array_off1x4(SMLALL_SME_Zmx4_SME_Znx4_SME_ZA_array_off1x4),
    SMLALL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4(
        SMLALL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4,
    ),
    SMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm(SMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm),
    SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    SMLAL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn(
        SMLAL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn,
    ),
    SMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2(
        SMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2,
    ),
    SMLAL_SME_Zm_SME_ZA_array_off2x2_SVE_ZnxN(SMLAL_SME_Zm_SME_ZA_array_off2x2_SVE_ZnxN),
    SMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2(SMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2),
    SMLAL_SME_Zm_S_H_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H(
        SMLAL_SME_Zm_S_H_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H,
    ),
    SMLAL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2(SMLAL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2),
    SMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2(
        SMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2,
    ),
    SMLAL_Vd_Vn_Em16(SMLAL_Vd_Vn_Em16),
    SMLAL_Vd_Vn_Vm(SMLAL_Vd_Vn_Vm),
    SMLSL2_Em16_Vd_Vn(SMLSL2_Em16_Vd_Vn),
    SMLSL2_Vd_Vn_Vm(SMLSL2_Vd_Vn_Vm),
    SMLSLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn(SMLSLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn),
    SMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn(SMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(SMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    SMLSLL_SME_ZA_array_off1x4_SME_Zmx4_SME_Znx4(SMLSLL_SME_ZA_array_off1x4_SME_Zmx4_SME_Znx4),
    SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    SMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn(
        SMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn,
    ),
    SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2(
        SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2,
    ),
    SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4(
        SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4,
    ),
    SMLSLL_SME_Zm_SVE_ZnxN_SME_ZA_array_off1x4(SMLSLL_SME_Zm_SVE_ZnxN_SME_ZA_array_off1x4),
    SMLSLL_SME_Znx2_SME_ZA_array_off1x4_SME_Zmx2(SMLSLL_SME_Znx2_SME_ZA_array_off1x4_SME_Zmx2),
    SMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4(
        SMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4,
    ),
    SMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX3_1(
        SMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX3_1,
    ),
    SMLSLL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm(SMLSLL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm),
    SMLSLL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4(
        SMLSLL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4,
    ),
    SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLSLT_SVE_Zm_16_SVE_Zn_SVE_Zd(SMLSLT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SMLSL_Em16_Vd_Vn(SMLSL_Em16_Vd_Vn),
    SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    SMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4(SMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4),
    SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2(
        SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2,
    ),
    SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2(SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2),
    SMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2(SMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2),
    SMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm(SMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm),
    SMLSL_Vd_Vn_Vm(SMLSL_Vd_Vn_Vm),
    SMMLA_SVE_Zd_SVE_Zm_16_SVE_Zn(SMMLA_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SMMLA_Vn_Vm_Vd(SMMLA_Vn_Vm_Vd),
    SMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16(
        SMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16,
    ),
    SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zm_16_SVE_Zn(
        SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zm_16_SVE_Zn,
    ),
    SMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_3b(
        SMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_3b,
    ),
    SMOPS_SVE_Pg3_SVE_Zn_SME_Pm_SVE_Zm_16_SME_ZAda_2b(
        SMOPS_SVE_Pg3_SVE_Zn_SME_Pm_SVE_Zm_16_SME_ZAda_2b,
    ),
    SMOPS_SVE_Zm_16_SME_Pm_SME_ZAda_3b_SVE_Pg3_SVE_Zn(
        SMOPS_SVE_Zm_16_SME_Pm_SME_ZAda_3b_SVE_Pg3_SVE_Zn,
    ),
    SMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_2b_SVE_Pg3_SME_Pm(
        SMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_2b_SVE_Pg3_SME_Pm,
    ),
    SMOV_Rd_En(SMOV_Rd_En),
    SMSTART(SMSTART),
    SMSTART_SME_SM_ZA(SMSTART_SME_SM_ZA),
    SMSTOP(SMSTOP),
    SMSTOP_SME_SM_ZA(SMSTOP_SME_SM_ZA),
    SMSUBL_Rn_Rd_Ra_Rm(SMSUBL_Rn_Rd_Ra_Rm),
    SMULH_Rm_Rd_Rn(SMULH_Rm_Rd_Rn),
    SMULH_SVE_Zd_SVE_Pg3_SVE_Zm_5(SMULH_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    SMULH_SVE_Zn_SVE_Zm_16_SVE_Zd(SMULH_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SMULL2_Vd_Vn_Em16(SMULL2_Vd_Vn_Em16),
    SMULL2_Vd_Vn_Vm(SMULL2_Vd_Vn_Vm),
    SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMULLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(SMULLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    SMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16(SMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SMULLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd(SMULLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd),
    SMULLT_SVE_Zm_16_SVE_Zn_SVE_Zd(SMULLT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(SMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    SMULL_Em16_Vd_Vn(SMULL_Em16_Vd_Vn),
    SMULL_Vn_Vd_Vm(SMULL_Vn_Vd_Vm),
    SPLICE_SVE_Zd_SVE_ZnxN_SVE_Pg3(SPLICE_SVE_Zd_SVE_ZnxN_SVE_Pg3),
    SPLICE_SVE_Zm_5_SVE_Zd_SVE_Pg3(SPLICE_SVE_Zm_5_SVE_Zd_SVE_Pg3),
    SQABS_SVE_Zn_SVE_Zd_SVE_Pg3(SQABS_SVE_Zn_SVE_Zd_SVE_Pg3),
    SQABS_Sd_Sn(SQABS_Sd_Sn),
    SQABS_Vn_Vd(SQABS_Vn_Vd),
    SQADD_SVE_AIMM_SVE_Zd(SQADD_SVE_AIMM_SVE_Zd),
    SQADD_SVE_Zd_SVE_Zm_16_SVE_Zn(SQADD_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SQADD_SVE_Zn_SVE_Zd_SVE_Pg3(SQADD_SVE_Zn_SVE_Zd_SVE_Pg3),
    SQADD_Sn_Sm_Sd(SQADD_Sn_Sm_Sd),
    SQADD_Vm_Vd_Vn(SQADD_Vm_Vd_Vn),
    SQCADD_SVE_Zn_SVE_Zd_SVE_IMM_ROT3(SQCADD_SVE_Zn_SVE_Zd_SVE_IMM_ROT3),
    SQCVTN_SME_Znx2_SVE_Zd(SQCVTN_SME_Znx2_SVE_Zd),
    SQCVTN_SME_Znx4_SVE_Zd(SQCVTN_SME_Znx4_SVE_Zd),
    SQCVTUN_SVE_Zd_SME_Znx2(SQCVTUN_SVE_Zd_SME_Znx2),
    SQCVTUN_SVE_Zd_SME_Znx4(SQCVTUN_SVE_Zd_SME_Znx4),
    SQCVTU_SME_Znx2_SVE_Zd(SQCVTU_SME_Znx2_SVE_Zd),
    SQCVTU_SVE_Zd_SME_Znx4(SQCVTU_SVE_Zd_SME_Znx4),
    SQCVT_SME_Znx4_SVE_Zd(SQCVT_SME_Znx4_SVE_Zd),
    SQCVT_SVE_Zd_SME_Znx2(SQCVT_SVE_Zd_SME_Znx2),
    SQDECB_Rd_SVE_PATTERN_SCALED(SQDECB_Rd_SVE_PATTERN_SCALED),
    SQDECB_SVE_PATTERN_SCALED_Rd(SQDECB_SVE_PATTERN_SCALED_Rd),
    SQDECD_Rd_SVE_PATTERN_SCALED(SQDECD_Rd_SVE_PATTERN_SCALED),
    SQDECD_Rd_X_SVE_PATTERN_SCALED(SQDECD_Rd_X_SVE_PATTERN_SCALED),
    SQDECD_SVE_Zd_SVE_PATTERN_SCALED(SQDECD_SVE_Zd_SVE_PATTERN_SCALED),
    SQDECH_Rd_SVE_PATTERN_SCALED(SQDECH_Rd_SVE_PATTERN_SCALED),
    SQDECH_SVE_PATTERN_SCALED_Rd(SQDECH_SVE_PATTERN_SCALED_Rd),
    SQDECH_SVE_PATTERN_SCALED_SVE_Zd(SQDECH_SVE_PATTERN_SCALED_SVE_Zd),
    SQDECP_Rd_SVE_Pg4_5(SQDECP_Rd_SVE_Pg4_5),
    SQDECP_SVE_Pg4_5_Rd(SQDECP_SVE_Pg4_5_Rd),
    SQDECP_SVE_Pg4_5_SVE_Zd(SQDECP_SVE_Pg4_5_SVE_Zd),
    SQDECW_Rd_SVE_PATTERN_SCALED(SQDECW_Rd_SVE_PATTERN_SCALED),
    SQDECW_Rd_X_SVE_PATTERN_SCALED(SQDECW_Rd_X_SVE_PATTERN_SCALED),
    SQDECW_SVE_Zd_SVE_PATTERN_SCALED(SQDECW_SVE_Zd_SVE_PATTERN_SCALED),
    SQDMLAL2_Vn_Em16_Vd(SQDMLAL2_Vn_Em16_Vd),
    SQDMLAL2_Vn_Vm_Vd(SQDMLAL2_Vn_Vm_Vd),
    SQDMLALBT_SVE_Zn_SVE_Zm_16_SVE_Zd(SQDMLALBT_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SQDMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(SQDMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    SQDMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn(SQDMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SQDMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(SQDMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn(SQDMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SQDMLALT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(SQDMLALT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    SQDMLAL_Sd_Sn_Em16(SQDMLAL_Sd_Sn_Em16),
    SQDMLAL_Sm_Sn_Sd(SQDMLAL_Sm_Sn_Sd),
    SQDMLAL_Vd_Vm_Vn(SQDMLAL_Vd_Vm_Vn),
    SQDMLAL_Vd_Vn_Em16(SQDMLAL_Vd_Vn_Em16),
    SQDMLSL2_Vn_Em16_Vd(SQDMLSL2_Vn_Em16_Vd),
    SQDMLSL2_Vn_Vd_Vm(SQDMLSL2_Vn_Vd_Vm),
    SQDMLSLBT_SVE_Zn_SVE_Zd_SVE_Zm_16(SQDMLSLBT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(SQDMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    SQDMLSLB_SVE_Zm_16_SVE_Zn_SVE_Zd(SQDMLSLB_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SQDMLSLT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn(SQDMLSLT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn),
    SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX(SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX),
    SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm_16(SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SQDMLSL_Em16_Sn_Sd(SQDMLSL_Em16_Sn_Sd),
    SQDMLSL_Em16_Vd_Vn(SQDMLSL_Em16_Vd_Vn),
    SQDMLSL_Sn_Sm_Sd(SQDMLSL_Sn_Sm_Sd),
    SQDMLSL_Vd_Vn_Vm(SQDMLSL_Vd_Vn_Vm),
    SQDMULH_SME_Zdnx4_SME_Zmx4(SQDMULH_SME_Zdnx4_SME_Zmx4),
    SQDMULH_SME_Zm_SME_Zdnx2(SQDMULH_SME_Zm_SME_Zdnx2),
    SQDMULH_SME_Zm_SME_Zdnx4(SQDMULH_SME_Zm_SME_Zdnx4),
    SQDMULH_SME_Zmx2_SME_Zdnx2(SQDMULH_SME_Zmx2_SME_Zdnx2),
    SQDMULH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn(SQDMULH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn),
    SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX(SQDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX),
    SQDMULH_Sd_Sm_Sn(SQDMULH_Sd_Sm_Sn),
    SQDMULH_Sn_Sd_Em16(SQDMULH_Sn_Sd_Em16),
    SQDMULH_Vn_Em16_Vd(SQDMULH_Vn_Em16_Vd),
    SQDMULH_Vn_Vm_Vd(SQDMULH_Vn_Vm_Vd),
    SQDMULL2_Vd_Vn_Em16(SQDMULL2_Vd_Vn_Em16),
    SQDMULL2_Vn_Vm_Vd(SQDMULL2_Vn_Vm_Vd),
    SQDMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn(SQDMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn),
    SQDMULLB_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn(SQDMULLB_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn),
    SQDMULLB_SVE_Zm_16_SVE_Zd_SVE_Zn(SQDMULLB_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMULLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX(SQDMULLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX),
    SQDMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(SQDMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    SQDMULL_Sd_Em16_Sn(SQDMULL_Sd_Em16_Sn),
    SQDMULL_Sd_Sn_Sm(SQDMULL_Sd_Sn_Sm),
    SQDMULL_Vn_Vd_Em16(SQDMULL_Vn_Vd_Em16),
    SQDMULL_Vn_Vm_Vd(SQDMULL_Vn_Vm_Vd),
    SQINCB_Rd_SVE_PATTERN_SCALED(SQINCB_Rd_SVE_PATTERN_SCALED),
    SQINCB_SVE_PATTERN_SCALED_Rd(SQINCB_SVE_PATTERN_SCALED_Rd),
    SQINCD_Rd_SVE_PATTERN_SCALED(SQINCD_Rd_SVE_PATTERN_SCALED),
    SQINCD_SVE_PATTERN_SCALED_Rd(SQINCD_SVE_PATTERN_SCALED_Rd),
    SQINCD_SVE_PATTERN_SCALED_SVE_Zd(SQINCD_SVE_PATTERN_SCALED_SVE_Zd),
    SQINCH_Rd_SVE_PATTERN_SCALED(SQINCH_Rd_SVE_PATTERN_SCALED),
    SQINCH_Rd_X_SVE_PATTERN_SCALED(SQINCH_Rd_X_SVE_PATTERN_SCALED),
    SQINCH_SVE_Zd_SVE_PATTERN_SCALED(SQINCH_SVE_Zd_SVE_PATTERN_SCALED),
    SQINCP_SVE_Pg4_5_Rd(SQINCP_SVE_Pg4_5_Rd),
    SQINCP_SVE_Pg4_5_SVE_Zd(SQINCP_SVE_Pg4_5_SVE_Zd),
    SQINCP_SVE_Pg4_5_S_B_Rd_X(SQINCP_SVE_Pg4_5_S_B_Rd_X),
    SQINCW_SVE_PATTERN_SCALED_Rd(SQINCW_SVE_PATTERN_SCALED_Rd),
    SQINCW_SVE_PATTERN_SCALED_Rd_X(SQINCW_SVE_PATTERN_SCALED_Rd_X),
    SQINCW_SVE_Zd_SVE_PATTERN_SCALED(SQINCW_SVE_Zd_SVE_PATTERN_SCALED),
    SQNEG_SVE_Zd_SVE_Zn_SVE_Pg3(SQNEG_SVE_Zd_SVE_Zn_SVE_Pg3),
    SQNEG_Sd_Sn(SQNEG_Sd_Sn),
    SQNEG_Vn_Vd(SQNEG_Vn_Vd),
    SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_IMM_ROT2_SVE_Zm3_INDEX(
        SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_IMM_ROT2_SVE_Zm3_INDEX,
    ),
    SQRDCMLAH_SVE_Zm4_INDEX_SVE_IMM_ROT2_SVE_Zd_SVE_Zn(
        SQRDCMLAH_SVE_Zm4_INDEX_SVE_IMM_ROT2_SVE_Zd_SVE_Zn,
    ),
    SQRDCMLAH_SVE_Zm_16_SVE_Zd_SVE_IMM_ROT2_SVE_Zn(SQRDCMLAH_SVE_Zm_16_SVE_Zd_SVE_IMM_ROT2_SVE_Zn),
    SQRDMLAH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn(SQRDMLAH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn),
    SQRDMLAH_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn(SQRDMLAH_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn),
    SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SQRDMLAH_SVE_Zm_16_SVE_Zd_SVE_Zn(SQRDMLAH_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SQRDMLAH_Sd_Sn_Em16(SQRDMLAH_Sd_Sn_Em16),
    SQRDMLAH_Sm_Sn_Sd(SQRDMLAH_Sm_Sn_Sd),
    SQRDMLAH_Vd_Vn_Em16(SQRDMLAH_Vd_Vn_Em16),
    SQRDMLAH_Vd_Vn_Vm(SQRDMLAH_Vd_Vn_Vm),
    SQRDMLSH_Em16_Sn_Sd(SQRDMLSH_Em16_Sn_Sd),
    SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQRDMLSH_SVE_Zm3_22_INDEX_SVE_Zd_SVE_Zn(SQRDMLSH_SVE_Zm3_22_INDEX_SVE_Zd_SVE_Zn),
    SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX(SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX),
    SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm_16(SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SQRDMLSH_Sd_Sm_Sn(SQRDMLSH_Sd_Sm_Sn),
    SQRDMLSH_Vd_Vn_Em16(SQRDMLSH_Vd_Vn_Em16),
    SQRDMLSH_Vn_Vm_Vd(SQRDMLSH_Vn_Vm_Vd),
    SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQRDMULH_SVE_Zm_16_SVE_Zd_SVE_Zn(SQRDMULH_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX(SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX),
    SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX(SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX),
    SQRDMULH_Sm_Sd_Sn(SQRDMULH_Sm_Sd_Sn),
    SQRDMULH_Sn_Em16_Sd(SQRDMULH_Sn_Em16_Sd),
    SQRDMULH_Vd_Vn_Em16(SQRDMULH_Vd_Vn_Em16),
    SQRDMULH_Vm_Vd_Vn(SQRDMULH_Vm_Vd_Vn),
    SQRSHLR_SVE_Zn_SVE_Pg3_SVE_Zd(SQRSHLR_SVE_Zn_SVE_Pg3_SVE_Zd),
    SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zn(SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zn),
    SQRSHL_Sd_Sm_Sn(SQRSHL_Sd_Sm_Sn),
    SQRSHL_Vd_Vn_Vm(SQRSHL_Vd_Vn_Vm),
    SQRSHRN2_Vd_Vn_IMM_VLSR(SQRSHRN2_Vd_Vn_IMM_VLSR),
    SQRSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn(SQRSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn),
    SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRN_IMM_VLSR_Vd_Vn(SQRSHRN_IMM_VLSR_Vd_Vn),
    SQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd(SQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd),
    SQRSHRN_SME_Znx4_SME_SHRIMM5_SVE_Zd(SQRSHRN_SME_Znx4_SME_SHRIMM5_SVE_Zd),
    SQRSHRN_Sn_IMM_VLSR_Sd(SQRSHRN_Sn_IMM_VLSR_Sd),
    SQRSHRUN2_IMM_VLSR_Vn_Vd(SQRSHRUN2_IMM_VLSR_Vn_Vd),
    SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRUN_IMM_VLSR_Vn_Vd(SQRSHRUN_IMM_VLSR_Vn_Vd),
    SQRSHRUN_SME_Znx2_SVE_Zd_SME_SHRIMM4(SQRSHRUN_SME_Znx2_SVE_Zd_SME_SHRIMM4),
    SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5(SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    SQRSHRUN_Sn_Sd_IMM_VLSR(SQRSHRUN_Sn_Sd_IMM_VLSR),
    SQRSHRU_SME_SHRIMM4_SVE_Zd_SME_Znx2(SQRSHRU_SME_SHRIMM4_SVE_Zd_SME_Znx2),
    SQRSHRU_SME_SHRIMM5_SVE_Zd_SME_Znx4(SQRSHRU_SME_SHRIMM5_SVE_Zd_SME_Znx4),
    SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4(SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5(SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    SQSHLR_SVE_Zd_SVE_Zn_SVE_Pg3(SQSHLR_SVE_Zd_SVE_Zn_SVE_Pg3),
    SQSHLU_IMM_VLSL_Vd_Vn(SQSHLU_IMM_VLSL_Vd_Vn),
    SQSHLU_SVE_Zd_SVE_SHLIMM_PRED_SVE_Pg3(SQSHLU_SVE_Zd_SVE_SHLIMM_PRED_SVE_Pg3),
    SQSHLU_Sn_Sd_IMM_VLSL(SQSHLU_Sn_Sd_IMM_VLSL),
    SQSHL_IMM_VLSL_Sn_Sd(SQSHL_IMM_VLSL_Sn_Sd),
    SQSHL_SVE_Zd_SVE_Pg3_SVE_SHLIMM_PRED(SQSHL_SVE_Zd_SVE_Pg3_SVE_SHLIMM_PRED),
    SQSHL_SVE_Zn_SVE_Zd_SVE_Pg3(SQSHL_SVE_Zn_SVE_Zd_SVE_Pg3),
    SQSHL_Sn_Sm_Sd(SQSHL_Sn_Sm_Sd),
    SQSHL_Vd_IMM_VLSL_Vn(SQSHL_Vd_IMM_VLSL_Vn),
    SQSHL_Vd_Vn_Vm(SQSHL_Vd_Vn_Vm),
    SQSHRN2_Vn_Vd_IMM_VLSR(SQSHRN2_Vn_Vd_IMM_VLSR),
    SQSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn(SQSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn),
    SQSHRNT_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd(SQSHRNT_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd),
    SQSHRN_IMM_VLSR_Sd_Sn(SQSHRN_IMM_VLSR_Sd_Sn),
    SQSHRN_Vn_Vd_IMM_VLSR(SQSHRN_Vn_Vd_IMM_VLSR),
    SQSHRUN2_Vd_IMM_VLSR_Vn(SQSHRUN2_Vd_IMM_VLSR_Vn),
    SQSHRUNB_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn(SQSHRUNB_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn),
    SQSHRUNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn(SQSHRUNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn),
    SQSHRUN_Sd_Sn_IMM_VLSR(SQSHRUN_Sd_Sn_IMM_VLSR),
    SQSHRUN_Vn_IMM_VLSR_Vd(SQSHRUN_Vn_IMM_VLSR_Vd),
    SQSUBR_SVE_Pg3_SVE_Zn_SVE_Zd(SQSUBR_SVE_Pg3_SVE_Zn_SVE_Zd),
    SQSUB_SVE_Zd_SVE_AIMM(SQSUB_SVE_Zd_SVE_AIMM),
    SQSUB_SVE_Zm_16_SVE_Zd_SVE_Zn(SQSUB_SVE_Zm_16_SVE_Zd_SVE_Zn),
    SQSUB_SVE_Zn_SVE_Pg3_SVE_Zd(SQSUB_SVE_Zn_SVE_Pg3_SVE_Zd),
    SQSUB_Sd_Sn_Sm(SQSUB_Sd_Sn_Sm),
    SQSUB_Vn_Vd_Vm(SQSUB_Vn_Vd_Vm),
    SQXTN2_Vn_Vd(SQXTN2_Vn_Vd),
    SQXTNB_SVE_Zn_SVE_Zd(SQXTNB_SVE_Zn_SVE_Zd),
    SQXTNT_SVE_Zd_SVE_Zn(SQXTNT_SVE_Zd_SVE_Zn),
    SQXTN_Sn_Sd(SQXTN_Sn_Sd),
    SQXTN_Vd_Vn(SQXTN_Vd_Vn),
    SQXTUN2_Vn_Vd(SQXTUN2_Vn_Vd),
    SQXTUNB_SVE_Zd_SVE_Zn(SQXTUNB_SVE_Zd_SVE_Zn),
    SQXTUNT_SVE_Zn_SVE_Zd(SQXTUNT_SVE_Zn_SVE_Zd),
    SQXTUN_Sd_Sn(SQXTUN_Sd_Sn),
    SQXTUN_Vd_Vn(SQXTUN_Vd_Vn),
    SRHADD_SVE_Pg3_SVE_Zn_SVE_Zd(SRHADD_SVE_Pg3_SVE_Zn_SVE_Zd),
    SRHADD_Vm_Vd_Vn(SRHADD_Vm_Vd_Vn),
    SRI_SVE_SHRIMM_UNPRED_SVE_Zn_SVE_Zd(SRI_SVE_SHRIMM_UNPRED_SVE_Zn_SVE_Zd),
    SRI_Sd_IMM_VLSR_Sn(SRI_Sd_IMM_VLSR_Sn),
    SRI_Vn_IMM_VLSR_Vd(SRI_Vn_IMM_VLSR_Vd),
    SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zn(SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zn),
    SRSHL_SME_Zdnx2_SME_Zmx2(SRSHL_SME_Zdnx2_SME_Zmx2),
    SRSHL_SME_Zdnx4_SME_Zm(SRSHL_SME_Zdnx4_SME_Zm),
    SRSHL_SME_Zm_SME_Zdnx2(SRSHL_SME_Zm_SME_Zdnx2),
    SRSHL_SME_Zmx4_SME_Zdnx4(SRSHL_SME_Zmx4_SME_Zdnx4),
    SRSHL_SVE_Pg3_SVE_Zd_SVE_Zn(SRSHL_SVE_Pg3_SVE_Zd_SVE_Zn),
    SRSHL_Sd_Sn_Sm(SRSHL_Sd_Sn_Sm),
    SRSHL_Vd_Vm_Vn(SRSHL_Vd_Vm_Vn),
    SRSHR_IMM_VLSR_Sn_Sd(SRSHR_IMM_VLSR_Sn_Sd),
    SRSHR_IMM_VLSR_Vd_Vn(SRSHR_IMM_VLSR_Vd_Vn),
    SRSHR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3(SRSHR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3),
    SRSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED(SRSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED),
    SRSRA_Sn_IMM_VLSR_Sd(SRSRA_Sn_IMM_VLSR_Sd),
    SRSRA_Vn_IMM_VLSR_Vd(SRSRA_Vn_IMM_VLSR_Vd),
    SSHLL2_Vd_Vn_IMM_VLSL(SSHLL2_Vd_Vn_IMM_VLSL),
    SSHLLB_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn(SSHLLB_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn),
    SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22(SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22),
    SSHLL_Vd_IMM_VLSL_Vn(SSHLL_Vd_IMM_VLSL_Vn),
    SSHL_Sn_Sm_Sd(SSHL_Sn_Sm_Sd),
    SSHL_Vn_Vm_Vd(SSHL_Vn_Vm_Vd),
    SSHR_IMM_VLSR_Sd_Sn(SSHR_IMM_VLSR_Sd_Sn),
    SSHR_IMM_VLSR_Vd_Vn(SSHR_IMM_VLSR_Vd_Vn),
    SSRA_SVE_Zn_SVE_SHRIMM_UNPRED_SVE_Zd(SSRA_SVE_Zn_SVE_SHRIMM_UNPRED_SVE_Zd),
    SSRA_Sd_Sn_IMM_VLSR(SSRA_Sd_Sn_IMM_VLSR),
    SSRA_Vn_Vd_IMM_VLSR(SSRA_Vn_Vd_IMM_VLSR),
    SSUBL2_Vm_Vd_Vn(SSUBL2_Vm_Vd_Vn),
    SSUBLBT_SVE_Zn_SVE_Zd_SVE_Zm_16(SSUBLBT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SSUBLB_SVE_Zn_SVE_Zm_16_SVE_Zd(SSUBLB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SSUBLTB_SVE_Zn_SVE_Zd_SVE_Zm_16(SSUBLTB_SVE_Zn_SVE_Zd_SVE_Zm_16),
    SSUBLT_SVE_Zn_SVE_Zm_16_SVE_Zd(SSUBLT_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SSUBL_Vd_Vm_Vn(SSUBL_Vd_Vm_Vn),
    SSUBW2_Vd_Vn_Vm(SSUBW2_Vd_Vn_Vm),
    SSUBWB_SVE_Zd_SVE_Zm_16_SVE_Zn(SSUBWB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SSUBWT_SVE_Zm_16_SVE_Zn_SVE_Zd(SSUBWT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    SSUBW_Vn_Vd_Vm(SSUBW_Vn_Vd_Vm),
    ST1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR(ST1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR),
    ST1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(ST1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR(ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR),
    ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL_SME_PNg3(
        ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL_SME_PNg3,
    ),
    ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3(ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3),
    ST1B_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED(
        ST1B_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED,
    ),
    ST1B_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3(ST1B_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3),
    ST1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3(ST1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3),
    ST1B_SVE_ADDR_RR_SME_Zdnx4_SME_PNg3(ST1B_SVE_ADDR_RR_SME_Zdnx4_SME_PNg3),
    ST1B_SVE_ADDR_RR_SVE_Pg3_SME_ZA_HV_idx_ldstr(ST1B_SVE_ADDR_RR_SVE_Pg3_SME_ZA_HV_idx_ldstr),
    ST1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3(ST1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3),
    ST1B_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3(ST1B_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3),
    ST1B_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN(ST1B_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN),
    ST1B_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3(ST1B_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3),
    ST1B_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN(ST1B_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN),
    ST1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(ST1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    ST1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3(ST1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    ST1B_SVE_ZtxN_S_D_SVE_ADDR_RX_SVE_Pg3(ST1B_SVE_ZtxN_S_D_SVE_ADDR_RX_SVE_Pg3),
    ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1D_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL(ST1D_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL),
    ST1D_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL(
        ST1D_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL,
    ),
    ST1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2(ST1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2),
    ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3(ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3),
    ST1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3(
        ST1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    ST1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED(
        ST1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED,
    ),
    ST1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3(ST1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3),
    ST1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3(
        ST1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    ST1D_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN(ST1D_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN),
    ST1D_SVE_ADDR_RZ_XTW3_14_SVE_ZtxN_SVE_Pg3(ST1D_SVE_ADDR_RZ_XTW3_14_SVE_ZtxN_SVE_Pg3),
    ST1D_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL3(
        ST1D_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_RR_LSL3,
    ),
    ST1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN(ST1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN),
    ST1D_SVE_Pg3_SVE_ADDR_RZ_XTW_14_SVE_ZtxN(ST1D_SVE_Pg3_SVE_ADDR_RZ_XTW_14_SVE_ZtxN),
    ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr(ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr),
    ST1D_SVE_Pg3_SVE_ADDR_ZI_U5x8_SVE_ZtxN(ST1D_SVE_Pg3_SVE_ADDR_ZI_U5x8_SVE_ZtxN),
    ST1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3(ST1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3),
    ST1D_SVE_ZtxN_SVE_ADDR_RZ_LSL3_SVE_Pg3(ST1D_SVE_ZtxN_SVE_ADDR_RZ_LSL3_SVE_Pg3),
    ST1H_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL(
        ST1H_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL,
    ),
    ST1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2(ST1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2),
    ST1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(ST1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3(ST1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3),
    ST1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3(
        ST1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3,
    ),
    ST1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3(
        ST1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    ST1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3(ST1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3),
    ST1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3(ST1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3),
    ST1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3(
        ST1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    ST1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3(ST1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3),
    ST1H_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN(ST1H_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN),
    ST1H_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3(ST1H_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3),
    ST1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN(ST1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN),
    ST1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SME_ZA_HV_idx_ldstr(
        ST1H_SVE_Pg3_SVE_ADDR_RR_LSL1_SME_ZA_HV_idx_ldstr,
    ),
    ST1H_SVE_Pg3_SVE_ADDR_RZ_XTW1_14_SVE_ZtxN(ST1H_SVE_Pg3_SVE_ADDR_RZ_XTW1_14_SVE_ZtxN),
    ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1(ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1),
    ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL1(ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL1),
    ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW1_14(ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW1_14),
    ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2(ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2),
    ST1H_SVE_Pg3_SVE_ZtxN_S_D_SVE_ADDR_RX_LSL1(ST1H_SVE_Pg3_SVE_ZtxN_S_D_SVE_ADDR_RX_LSL1),
    ST1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3(ST1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4(
        ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4,
    ),
    ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr(ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr),
    ST1Q_SVE_ADDR_ZX_SVE_Pg3_SVE_Zt(ST1Q_SVE_ADDR_ZX_SVE_Pg3_SVE_Zt),
    ST1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL(ST1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL),
    ST1W_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL2(
        ST1W_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL2,
    ),
    ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4(ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4),
    ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED(
        ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED,
    ),
    ST1W_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3(ST1W_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3),
    ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    ST1W_SVE_ADDR_RI_S4x4xVL_SME_PNg3_SME_Ztx4_STRIDED(
        ST1W_SVE_ADDR_RI_S4x4xVL_SME_PNg3_SME_Ztx4_STRIDED,
    ),
    ST1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(ST1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    ST1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2(ST1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2),
    ST1W_SVE_ADDR_RX_LSL2_SVE_Pg3_SVE_ZtxN(ST1W_SVE_ADDR_RX_LSL2_SVE_Pg3_SVE_ZtxN),
    ST1W_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3(ST1W_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3),
    ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN(ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN),
    ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN_S_S(ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN_S_S),
    ST1W_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3(ST1W_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3),
    ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R(ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R),
    ST1W_SVE_Pg3_SVE_ADDR_RR_LSL2_SME_ZA_HV_idx_ldstr(
        ST1W_SVE_Pg3_SVE_ADDR_RR_LSL2_SME_ZA_HV_idx_ldstr,
    ),
    ST1W_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN(ST1W_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN),
    ST1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_14(ST1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_14),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4(ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    ST1_LEt_SIMD_ADDR_POST(ST1_LEt_SIMD_ADDR_POST),
    ST1_LVt_SIMD_ADDR_POST(ST1_LVt_SIMD_ADDR_POST),
    ST1_SIMD_ADDR_SIMPLE_LEt(ST1_SIMD_ADDR_SIMPLE_LEt),
    ST1_SIMD_ADDR_SIMPLE_LVt(ST1_SIMD_ADDR_SIMPLE_LVt),
    ST2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3(ST2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3),
    ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST2D_SVE_ADDR_RX_LSL3_SVE_Pg3_SVE_ZtxN(ST2D_SVE_ADDR_RX_LSL3_SVE_Pg3_SVE_ZtxN),
    ST2D_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN(ST2D_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN),
    ST2G_ADDR_SIMM13_Rt_SP(ST2G_ADDR_SIMM13_Rt_SP),
    ST2G_Rt_SP_ADDR_SIMM13(ST2G_Rt_SP_ADDR_SIMM13),
    ST2H_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3(ST2H_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3),
    ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4(ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4),
    ST2W_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN(ST2W_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN),
    ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2_LEt_SIMD_ADDR_POST(ST2_LEt_SIMD_ADDR_POST),
    ST2_LEt_SIMD_ADDR_SIMPLE(ST2_LEt_SIMD_ADDR_SIMPLE),
    ST2_LVt_SIMD_ADDR_POST(ST2_LVt_SIMD_ADDR_POST),
    ST2_LVt_SIMD_ADDR_SIMPLE(ST2_LVt_SIMD_ADDR_SIMPLE),
    ST3B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL(ST3B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL),
    ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL(ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL),
    ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3(ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3),
    ST3H_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN_SVE_Pg3(ST3H_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN_SVE_Pg3),
    ST3H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3(ST3H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3),
    ST3Q_SVE_ADDR_RR_LSL4_SVE_Pg3_SME_Zt3(ST3Q_SVE_ADDR_RR_LSL4_SVE_Pg3_SME_Zt3),
    ST3Q_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SME_Zt3(ST3Q_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SME_Zt3),
    ST3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN(ST3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN),
    ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST3_LEt_SIMD_ADDR_POST(ST3_LEt_SIMD_ADDR_POST),
    ST3_LEt_SIMD_ADDR_SIMPLE(ST3_LEt_SIMD_ADDR_SIMPLE),
    ST3_SIMD_ADDR_POST_LVt(ST3_SIMD_ADDR_POST_LVt),
    ST3_SIMD_ADDR_SIMPLE_LVt(ST3_SIMD_ADDR_SIMPLE_LVt),
    ST4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3(ST4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3),
    ST4B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN(ST4B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN),
    ST4D_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3(ST4D_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3),
    ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    ST4H_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN(ST4H_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN),
    ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    ST4Q_SME_Zt4_SVE_ADDR_RI_S4x2xVL_SVE_Pg3(ST4Q_SME_Zt4_SVE_ADDR_RI_S4x2xVL_SVE_Pg3),
    ST4Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt4(ST4Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt4),
    ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x4xVL(ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x4xVL),
    ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2(ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2),
    ST4_LEt_SIMD_ADDR_POST(ST4_LEt_SIMD_ADDR_POST),
    ST4_LEt_SIMD_ADDR_SIMPLE(ST4_LEt_SIMD_ADDR_SIMPLE),
    ST4_LVt_SIMD_ADDR_POST(ST4_LVt_SIMD_ADDR_POST),
    ST4_LVt_SIMD_ADDR_SIMPLE(ST4_LVt_SIMD_ADDR_SIMPLE),
    ST64BV0_ADDR_SIMPLE_Rs_Rt_LS64(ST64BV0_ADDR_SIMPLE_Rs_Rt_LS64),
    ST64BV_Rs_Rt_LS64_ADDR_SIMPLE(ST64BV_Rs_Rt_LS64_ADDR_SIMPLE),
    ST64B_Rt_LS64_ADDR_SIMPLE(ST64B_Rt_LS64_ADDR_SIMPLE),
    STGM_ADDR_SIMPLE_Rt(STGM_ADDR_SIMPLE_Rt),
    STGP_Rt2_Rt_ADDR_SIMM11(STGP_Rt2_Rt_ADDR_SIMM11),
    STGP_Rt_Rt2_ADDR_SIMM11(STGP_Rt_Rt2_ADDR_SIMM11),
    STG_Rt_SP_ADDR_SIMM13(STG_Rt_SP_ADDR_SIMM13),
    STG_Rt_SP_X_ADDR_SIMM13_imm_tag(STG_Rt_SP_X_ADDR_SIMM13_imm_tag),
    STILP_Rs_Rt_RCPC3_ADDR_OPT_PREIND_WB(STILP_Rs_Rt_RCPC3_ADDR_OPT_PREIND_WB),
    STL1_LEt_SIMD_ADDR_SIMPLE(STL1_LEt_SIMD_ADDR_SIMPLE),
    STLLRB_ADDR_SIMPLE_Rt(STLLRB_ADDR_SIMPLE_Rt),
    STLLRH_ADDR_SIMPLE_Rt(STLLRH_ADDR_SIMPLE_Rt),
    STLLR_Rt_ADDR_SIMPLE(STLLR_Rt_ADDR_SIMPLE),
    STLRB_ADDR_SIMPLE_Rt(STLRB_ADDR_SIMPLE_Rt),
    STLRH_ADDR_SIMPLE_Rt(STLRH_ADDR_SIMPLE_Rt),
    STLR_RCPC3_ADDR_PREIND_WB_Rt(STLR_RCPC3_ADDR_PREIND_WB_Rt),
    STLR_Rt_ADDR_SIMPLE(STLR_Rt_ADDR_SIMPLE),
    STLURB_ADDR_OFFSET_Rt(STLURB_ADDR_OFFSET_Rt),
    STLURH_ADDR_OFFSET_Rt(STLURH_ADDR_OFFSET_Rt),
    STLUR_ADDR_OFFSET_Rt(STLUR_ADDR_OFFSET_Rt),
    STLUR_RCPC3_ADDR_OFFSET_Ft(STLUR_RCPC3_ADDR_OFFSET_Ft),
    STLUR_Rt_ADDR_OFFSET(STLUR_Rt_ADDR_OFFSET),
    STLXP_Rt_ADDR_SIMPLE_Rt2_Rs(STLXP_Rt_ADDR_SIMPLE_Rt2_Rs),
    STLXRB_Rt_ADDR_SIMPLE_Rs(STLXRB_Rt_ADDR_SIMPLE_Rs),
    STLXRH_Rs_ADDR_SIMPLE_Rt(STLXRH_Rs_ADDR_SIMPLE_Rt),
    STLXR_ADDR_SIMPLE_Rs_Rt(STLXR_ADDR_SIMPLE_Rs_Rt),
    STNP_ADDR_SIMM7_Ft_Ft2(STNP_ADDR_SIMM7_Ft_Ft2),
    STNP_ADDR_SIMM7_Rt2_Rt(STNP_ADDR_SIMM7_Rt2_Rt),
    STNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED(
        STNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED,
    ),
    STNT1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED(
        STNT1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED,
    ),
    STNT1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2(STNT1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2),
    STNT1B_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3(STNT1B_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3),
    STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3(STNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3),
    STNT1B_SVE_ADDR_RR_SME_PNg3_SME_Ztx4_STRIDED(STNT1B_SVE_ADDR_RR_SME_PNg3_SME_Ztx4_STRIDED),
    STNT1B_SVE_ADDR_RR_SME_Ztx2_STRIDED_SME_PNg3(STNT1B_SVE_ADDR_RR_SME_Ztx2_STRIDED_SME_PNg3),
    STNT1B_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN(STNT1B_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN),
    STNT1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3(STNT1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3),
    STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2(STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2),
    STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED(
        STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED,
    ),
    STNT1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Ztx4_STRIDED(
        STNT1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Ztx4_STRIDED,
    ),
    STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3(
        STNT1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    STNT1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Zdnx2(STNT1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Zdnx2),
    STNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3(STNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3),
    STNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3(
        STNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    STNT1D_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN(STNT1D_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN),
    STNT1D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN(STNT1D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN),
    STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    STNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4(STNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4),
    STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1(STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1),
    STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1(STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1),
    STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3(STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3),
    STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3(
        STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    STNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3(
        STNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    STNT1H_SVE_ADDR_RR_LSL1_SME_PNg3_SME_Ztx2_STRIDED(
        STNT1H_SVE_ADDR_RR_LSL1_SME_PNg3_SME_Ztx2_STRIDED,
    ),
    STNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3(
        STNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    STNT1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3(STNT1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3),
    STNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN(STNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN),
    STNT1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL(STNT1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL),
    STNT1H_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3(STNT1H_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3),
    STNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED(
        STNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED,
    ),
    STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2(STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2),
    STNT1W_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3(STNT1W_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3),
    STNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3(
        STNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3,
    ),
    STNT1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN(STNT1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN),
    STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2(STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2),
    STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Ztx4_STRIDED(
        STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Ztx4_STRIDED,
    ),
    STNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3(
        STNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3,
    ),
    STNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2(STNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2),
    STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX(STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX),
    STP_Ft_Ft2_ADDR_SIMM7(STP_Ft_Ft2_ADDR_SIMM7),
    STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S(STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S),
    STP_Rt2_Rt_ADDR_SIMM7(STP_Rt2_Rt_ADDR_SIMM7),
    STP_Rt_ADDR_SIMM7_Rt2(STP_Rt_ADDR_SIMM7_Rt2),
    STRB_Rt_ADDR_REGOFF(STRB_Rt_ADDR_REGOFF),
    STRB_Rt_ADDR_SIMM9(STRB_Rt_ADDR_SIMM9),
    STRB_Rt_ADDR_UIMM12(STRB_Rt_ADDR_UIMM12),
    STRH_Rt_ADDR_REGOFF(STRH_Rt_ADDR_REGOFF),
    STRH_Rt_ADDR_SIMM9(STRH_Rt_ADDR_SIMM9),
    STRH_Rt_ADDR_UIMM12(STRH_Rt_ADDR_UIMM12),
    STR_ADDR_REGOFF_Ft(STR_ADDR_REGOFF_Ft),
    STR_ADDR_REGOFF_Rt(STR_ADDR_REGOFF_Rt),
    STR_ADDR_SIMM9_Ft(STR_ADDR_SIMM9_Ft),
    STR_ADDR_SIMM9_Rt(STR_ADDR_SIMM9_Rt),
    STR_ADDR_UIMM12_Rt(STR_ADDR_UIMM12_Rt),
    STR_Ft_ADDR_UIMM12(STR_Ft_ADDR_UIMM12),
    STR_SIMD_ADDR_SIMPLE_SME_ZT0(STR_SIMD_ADDR_SIMPLE_SME_ZT0),
    STR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4(STR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4),
    STR_SVE_ADDR_RI_S9xVL_SVE_PNt(STR_SVE_ADDR_RI_S9xVL_SVE_PNt),
    STR_SVE_Pt_SVE_ADDR_RI_S9xVL(STR_SVE_Pt_SVE_ADDR_RI_S9xVL),
    STR_SVE_Zt_SVE_ADDR_RI_S9xVL(STR_SVE_Zt_SVE_ADDR_RI_S9xVL),
    STTRB_ADDR_SIMM9_Rt(STTRB_ADDR_SIMM9_Rt),
    STTRH_ADDR_SIMM9_Rt(STTRH_ADDR_SIMM9_Rt),
    STTR_Rt_ADDR_SIMM9(STTR_Rt_ADDR_SIMM9),
    STURB_ADDR_SIMM9_Rt(STURB_ADDR_SIMM9_Rt),
    STURH_Rt_ADDR_SIMM9(STURH_Rt_ADDR_SIMM9),
    STUR_ADDR_SIMM9_Ft(STUR_ADDR_SIMM9_Ft),
    STUR_ADDR_SIMM9_Rt(STUR_ADDR_SIMM9_Rt),
    STXP_ADDR_SIMPLE_Rt2_Rt_Rs(STXP_ADDR_SIMPLE_Rt2_Rt_Rs),
    STXRB_ADDR_SIMPLE_Rs_Rt(STXRB_ADDR_SIMPLE_Rs_Rt),
    STXRH_Rt_Rs_ADDR_SIMPLE(STXRH_Rt_Rs_ADDR_SIMPLE),
    STXR_Rt_ADDR_SIMPLE_Rs(STXR_Rt_ADDR_SIMPLE_Rs),
    STZ2G_ADDR_SIMM13_Rt_SP(STZ2G_ADDR_SIMM13_Rt_SP),
    STZ2G_Rt_SP_ADDR_SIMM13(STZ2G_Rt_SP_ADDR_SIMM13),
    STZGM_Rt_ADDR_SIMPLE(STZGM_Rt_ADDR_SIMPLE),
    STZG_ADDR_SIMM13_Rt_SP(STZG_ADDR_SIMM13_Rt_SP),
    STZG_Rt_SP_ADDR_SIMM13(STZG_Rt_SP_ADDR_SIMM13),
    SUBG_UIMM4_ADDG_Rn_SP_UIMM10_Rd_SP(SUBG_UIMM4_ADDG_Rn_SP_UIMM10_Rd_SP),
    SUBHN2_Vm_Vn_Vd(SUBHN2_Vm_Vn_Vd),
    SUBHNB_SVE_Zd_SVE_Zm_16_SVE_Zn(SUBHNB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SUBHNT_SVE_Zn_SVE_Zm_16_SVE_Zd(SUBHNT_SVE_Zn_SVE_Zm_16_SVE_Zd),
    SUBHN_Vn_Vd_Vm(SUBHN_Vn_Vd_Vm),
    SUBPS_Rm_SP_Rd_Rn_SP(SUBPS_Rm_SP_Rd_Rn_SP),
    SUBP_Rm_SP_Rd_Rn_SP(SUBP_Rm_SP_Rd_Rn_SP),
    SUBR_SVE_AIMM_SVE_Zd(SUBR_SVE_AIMM_SVE_Zd),
    SUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5(SUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    SUBS_Rd_AIMM_Rn_SP(SUBS_Rd_AIMM_Rn_SP),
    SUBS_Rm_SFT_Rd_Rn(SUBS_Rm_SFT_Rd_Rn),
    SUBS_Rn_SP_Rd_Rm_EXT(SUBS_Rn_SP_Rd_Rm_EXT),
    SUB_AIMM_Rn_SP_Rd_SP(SUB_AIMM_Rn_SP_Rd_SP),
    SUB_Rd_SP_Rn_SP_Rm_EXT(SUB_Rd_SP_Rn_SP_Rm_EXT),
    SUB_Rn_Rm_SFT_Rd(SUB_Rn_Rm_SFT_Rd),
    SUB_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN(SUB_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN),
    SUB_SME_ZA_array_off3_0_SME_Znx2(SUB_SME_ZA_array_off3_0_SME_Znx2),
    SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    SUB_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0(SUB_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0),
    SUB_SME_Znx4_SME_ZA_array_off3_0(SUB_SME_Znx4_SME_ZA_array_off3_0),
    SUB_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0(SUB_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0),
    SUB_SVE_Pg3_SVE_Zm_5_SVE_Zd(SUB_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    SUB_SVE_Zd_SVE_AIMM(SUB_SVE_Zd_SVE_AIMM),
    SUB_SVE_Zd_SVE_Zm_16_SVE_Zn(SUB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    SUB_Sd_Sm_Sn(SUB_Sd_Sm_Sn),
    SUB_Vm_Vd_Vn(SUB_Vm_Vd_Vn),
    SUDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(SUDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    SUDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        SUDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    SUDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        SUDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SUDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm(SUDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm),
    SUDOT_Vd_Vn_Em(SUDOT_Vd_Vn_Em),
    SUMLALL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN(SUMLALL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN),
    SUMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn(
        SUMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn,
    ),
    SUMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4(
        SUMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4,
    ),
    SUMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1(
        SUMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1,
    ),
    SUMLALL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4(SUMLALL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4),
    SUMOPA_SME_ZAda_3b_SVE_Pg3_SVE_Zn_SVE_Zm_16_SME_Pm(
        SUMOPA_SME_ZAda_3b_SVE_Pg3_SVE_Zn_SVE_Zm_16_SME_Pm,
    ),
    SUMOPA_SVE_Zn_SVE_Zm_16_SME_Pm_SVE_Pg3_SME_ZAda_2b(
        SUMOPA_SVE_Zn_SVE_Zm_16_SME_Pm_SVE_Pg3_SME_ZAda_2b,
    ),
    SUMOPS_SME_ZAda_2b_SVE_Zm_16_SME_Pm_SVE_Pg3_SVE_Zn(
        SUMOPS_SME_ZAda_2b_SVE_Zm_16_SME_Pm_SVE_Pg3_SVE_Zn,
    ),
    SUMOPS_SME_ZAda_3b_SVE_Zm_16_SVE_Pg3_SME_Pm_SVE_Zn(
        SUMOPS_SME_ZAda_3b_SVE_Zm_16_SVE_Pg3_SME_Pm_SVE_Zn,
    ),
    SUNPKHI_SVE_Zd_SVE_Zn(SUNPKHI_SVE_Zd_SVE_Zn),
    SUNPKLO_SVE_Zd_SVE_Zn(SUNPKLO_SVE_Zd_SVE_Zn),
    SUNPK_SME_Zdnx2_SVE_Zn(SUNPK_SME_Zdnx2_SVE_Zn),
    SUNPK_SME_Zdnx4_SME_Znx2(SUNPK_SME_Zdnx4_SME_Znx2),
    SUQADD_SVE_Zd_SVE_Pg3_SVE_Zn(SUQADD_SVE_Zd_SVE_Pg3_SVE_Zn),
    SUQADD_Sd_Sn(SUQADD_Sd_Sn),
    SUQADD_Vd_Vn(SUQADD_Vd_Vn),
    SUVDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4(
        SUVDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4,
    ),
    SVC_EXCEPTION(SVC_EXCEPTION),
    SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    SVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        SVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    SVDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1(
        SVDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1,
    ),
    SWPAB_ADDR_SIMPLE_Rs_Rt(SWPAB_ADDR_SIMPLE_Rs_Rt),
    SWPAH_ADDR_SIMPLE_Rs_Rt(SWPAH_ADDR_SIMPLE_Rs_Rt),
    SWPALB_Rt_ADDR_SIMPLE_Rs(SWPALB_Rt_ADDR_SIMPLE_Rs),
    SWPALH_Rs_Rt_ADDR_SIMPLE(SWPALH_Rs_Rt_ADDR_SIMPLE),
    SWPAL_ADDR_SIMPLE_Rs_Rt(SWPAL_ADDR_SIMPLE_Rs_Rt),
    SWPA_ADDR_SIMPLE_Rs_Rt(SWPA_ADDR_SIMPLE_Rs_Rt),
    SWPB_ADDR_SIMPLE_Rt_Rs(SWPB_ADDR_SIMPLE_Rt_Rs),
    SWPH_ADDR_SIMPLE_Rt_Rs(SWPH_ADDR_SIMPLE_Rt_Rs),
    SWPLB_ADDR_SIMPLE_Rs_Rt(SWPLB_ADDR_SIMPLE_Rs_Rt),
    SWPLH_ADDR_SIMPLE_Rs_Rt(SWPLH_ADDR_SIMPLE_Rs_Rt),
    SWPL_ADDR_SIMPLE_Rs_Rt(SWPL_ADDR_SIMPLE_Rs_Rt),
    SWPPAL_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt(SWPPAL_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt),
    SWPPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2(SWPPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2),
    SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    SWPP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt(SWPP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt),
    SWP_Rt_ADDR_SIMPLE_Rs(SWP_Rt_ADDR_SIMPLE_Rs),
    SXTB_SVE_Zd_SVE_Zn_SVE_Pg3(SXTB_SVE_Zd_SVE_Zn_SVE_Pg3),
    SXTH_SVE_Zd_SVE_Zn_SVE_Pg3(SXTH_SVE_Zd_SVE_Zn_SVE_Pg3),
    SXTW_SVE_Zn_SVE_Zd_SVE_Pg3(SXTW_SVE_Zn_SVE_Zd_SVE_Pg3),
    SYSL_CRn_Rt_UIMM3_OP1_CRm_UIMM3_OP2(SYSL_CRn_Rt_UIMM3_OP1_CRm_UIMM3_OP2),
    SYSP_PAIRREG_OR_XZR_Rt_UIMM3_OP2_CRn_UIMM3_OP1_CRm(
        SYSP_PAIRREG_OR_XZR_Rt_UIMM3_OP2_CRn_UIMM3_OP1_CRm,
    ),
    SYS_UIMM3_OP2_CRn_CRm_Rt_UIMM3_OP1(SYS_UIMM3_OP2_CRn_CRm_Rt_UIMM3_OP1),
    TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16(TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16),
    TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B(TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B),
    TBL_Vd_LVn_Vm(TBL_Vd_LVn_Vm),
    TBNZ_Rt_BIT_NUM_ADDR_PCREL14(TBNZ_Rt_BIT_NUM_ADDR_PCREL14),
    TBX_SVE_Zm_16_SVE_Zd_SVE_Zn(TBX_SVE_Zm_16_SVE_Zd_SVE_Zn),
    TBX_Vm_LVn_Vd(TBX_Vm_LVn_Vd),
    TBZ_Rt_ADDR_PCREL14_BIT_NUM(TBZ_Rt_ADDR_PCREL14_BIT_NUM),
    TCANCEL_TME_UIMM16(TCANCEL_TME_UIMM16),
    TCOMMIT(TCOMMIT),
    TRN1_SVE_Pm_SVE_Pd_SVE_Pn(TRN1_SVE_Pm_SVE_Pd_SVE_Pn),
    TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16(TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16),
    TRN1_SVE_Zm_16_SVE_Zd_SVE_Zn(TRN1_SVE_Zm_16_SVE_Zd_SVE_Zn),
    TRN1_Vm_Vd_Vn(TRN1_Vm_Vd_Vn),
    TRN2_SVE_Pm_SVE_Pd_SVE_Pn(TRN2_SVE_Pm_SVE_Pd_SVE_Pn),
    TRN2_SVE_Zd_SVE_Zm_16_SVE_Zn(TRN2_SVE_Zd_SVE_Zm_16_SVE_Zn),
    TRN2_SVE_Zn_SVE_Zd_SVE_Zm_16(TRN2_SVE_Zn_SVE_Zd_SVE_Zm_16),
    TRN2_Vn_Vd_Vm(TRN2_Vn_Vd_Vm),
    TSTART_Rd(TSTART_Rd),
    TTEST_Rd(TTEST_Rd),
    UABAL2_Vd_Vn_Vm(UABAL2_Vd_Vn_Vm),
    UABALB_SVE_Zn_SVE_Zm_16_SVE_Zd(UABALB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    UABALT_SVE_Zm_16_SVE_Zd_SVE_Zn(UABALT_SVE_Zm_16_SVE_Zd_SVE_Zn),
    UABAL_Vd_Vn_Vm(UABAL_Vd_Vn_Vm),
    UABA_SVE_Zn_SVE_Zd_SVE_Zm_16(UABA_SVE_Zn_SVE_Zd_SVE_Zm_16),
    UABA_Vn_Vd_Vm(UABA_Vn_Vd_Vm),
    UABDL2_Vm_Vd_Vn(UABDL2_Vm_Vd_Vn),
    UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16(UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UABDLT_SVE_Zd_SVE_Zm_16_SVE_Zn(UABDLT_SVE_Zd_SVE_Zm_16_SVE_Zn),
    UABDL_Vm_Vd_Vn(UABDL_Vm_Vd_Vn),
    UABD_SVE_Zd_SVE_Pg3_SVE_Zm_5(UABD_SVE_Zd_SVE_Pg3_SVE_Zm_5),
    UABD_Vm_Vd_Vn(UABD_Vm_Vd_Vn),
    UADALP_SVE_Pg3_SVE_Zn_SVE_Zd(UADALP_SVE_Pg3_SVE_Zn_SVE_Zd),
    UADALP_Vd_Vn(UADALP_Vd_Vn),
    UADDL2_Vn_Vm_Vd(UADDL2_Vn_Vm_Vd),
    UADDLB_SVE_Zn_SVE_Zd_SVE_Zm_16(UADDLB_SVE_Zn_SVE_Zd_SVE_Zm_16),
    UADDLP_Vd_Vn(UADDLP_Vd_Vn),
    UADDLT_SVE_Zm_16_SVE_Zn_SVE_Zd(UADDLT_SVE_Zm_16_SVE_Zn_SVE_Zd),
    UADDLV_Fd_Vn(UADDLV_Fd_Vn),
    UADDL_Vn_Vd_Vm(UADDL_Vn_Vd_Vm),
    UADDV_SVE_Pg3_SVE_Zn_SVE_Vd(UADDV_SVE_Pg3_SVE_Zn_SVE_Vd),
    UADDW2_Vm_Vd_Vn(UADDW2_Vm_Vd_Vn),
    UADDWB_SVE_Zn_SVE_Zm_16_SVE_Zd(UADDWB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    UADDWT_SVE_Zn_SVE_Zd_SVE_Zm_16(UADDWT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    UADDW_Vm_Vn_Vd(UADDW_Vm_Vn_Vd),
    UBFM_Rd_IMMS_Rn_IMMR(UBFM_Rd_IMMS_Rn_IMMR),
    UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16(UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx2(UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx2),
    UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4(UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4),
    UCVTF_FBITS_Fd_Rn(UCVTF_FBITS_Fd_Rn),
    UCVTF_Fd_Rn(UCVTF_Fd_Rn),
    UCVTF_Fd_S_H_Rn_W(UCVTF_Fd_S_H_Rn_W),
    UCVTF_IMM_VLSR_Vn_Vd(UCVTF_IMM_VLSR_Vn_Vd),
    UCVTF_Rn_Fd_FBITS(UCVTF_Rn_Fd_FBITS),
    UCVTF_SME_Zdnx2_SME_Znx2(UCVTF_SME_Zdnx2_SME_Znx2),
    UCVTF_SME_Zdnx4_SME_Znx4(UCVTF_SME_Zdnx4_SME_Znx4),
    UCVTF_SVE_Pg3_P_M_SVE_Zd_S_H_SVE_Zn_S_D(UCVTF_SVE_Pg3_P_M_SVE_Zd_S_H_SVE_Zn_S_D),
    UCVTF_SVE_Pg3_SVE_Zd_SVE_Zn(UCVTF_SVE_Pg3_SVE_Zd_SVE_Zn),
    UCVTF_SVE_Pg3_SVE_Zn_SVE_Zd(UCVTF_SVE_Pg3_SVE_Zn_SVE_Zd),
    UCVTF_SVE_Zd_SVE_Zn_SVE_Pg3(UCVTF_SVE_Zd_SVE_Zn_SVE_Pg3),
    UCVTF_SVE_Zd_S_H_SVE_Zn_S_H_SVE_Pg3_P_M(UCVTF_SVE_Zd_S_H_SVE_Zn_S_H_SVE_Pg3_P_M),
    UCVTF_SVE_Zn_SVE_Pg3_SVE_Zd(UCVTF_SVE_Zn_SVE_Pg3_SVE_Zd),
    UCVTF_SVE_Zn_SVE_Zd_SVE_Pg3(UCVTF_SVE_Zn_SVE_Zd_SVE_Pg3),
    UCVTF_Sd_IMM_VLSR_Sn(UCVTF_Sd_IMM_VLSR_Sn),
    UCVTF_Sd_S_H_IMM_VLSR_S_H_Sn_S_H(UCVTF_Sd_S_H_IMM_VLSR_S_H_Sn_S_H),
    UCVTF_Sd_Sn(UCVTF_Sd_Sn),
    UCVTF_Sn_Sd(UCVTF_Sn_Sd),
    UCVTF_Vd_IMM_VLSR_Vn(UCVTF_Vd_IMM_VLSR_Vn),
    UCVTF_Vn_V_4H_Vd_V_4H(UCVTF_Vn_V_4H_Vd_V_4H),
    UCVTF_Vn_Vd(UCVTF_Vn_Vd),
    UDF_UNDEFINED(UDF_UNDEFINED),
    UDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd(UDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    UDIV_Rn_Rm_Rd(UDIV_Rn_Rm_Rd),
    UDIV_SVE_Zd_SVE_Zm_5_SVE_Pg3(UDIV_SVE_Zd_SVE_Zm_5_SVE_Pg3),
    UDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2(UDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2),
    UDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4(UDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4),
    UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1(
        UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1,
    ),
    UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    UDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0(
        UDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0,
    ),
    UDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN(UDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN),
    UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H(
        UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H,
    ),
    UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_c1701418(
        UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_c1701418,
    ),
    UDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0(UDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0),
    UDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        UDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    UDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1(
        UDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1,
    ),
    UDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        UDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    UDOT_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0(UDOT_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX(UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UDOT_SVE_Zm_16_SVE_Zd_SVE_Zn(UDOT_SVE_Zm_16_SVE_Zd_SVE_Zn),
    UDOT_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd(UDOT_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd),
    UDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0(UDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0),
    UDOT_Vd_Vm_Vn(UDOT_Vd_Vm_Vn),
    UDOT_Vn_Vd_Em(UDOT_Vn_Vd_Em),
    UHADD_SVE_Zn_SVE_Pg3_SVE_Zd(UHADD_SVE_Zn_SVE_Pg3_SVE_Zd),
    UHADD_Vd_Vm_Vn(UHADD_Vd_Vm_Vn),
    UHSUBR_SVE_Pg3_SVE_Zd_SVE_Zn(UHSUBR_SVE_Pg3_SVE_Zd_SVE_Zn),
    UHSUB_SVE_Pg3_SVE_Zn_SVE_Zd(UHSUB_SVE_Pg3_SVE_Zn_SVE_Zd),
    UHSUB_Vn_Vd_Vm(UHSUB_Vn_Vd_Vm),
    UMADDL_Rm_Ra_Rd_Rn(UMADDL_Rm_Ra_Rd_Rn),
    UMAXP_SVE_Pg3_SVE_Zd_SVE_Zn(UMAXP_SVE_Pg3_SVE_Zd_SVE_Zn),
    UMAXP_Vd_Vn_Vm(UMAXP_Vd_Vn_Vm),
    UMAXQV_Vd_SVE_Zn_SVE_Pg3(UMAXQV_Vd_SVE_Zn_SVE_Pg3),
    UMAXV_Fd_Vn(UMAXV_Fd_Vn),
    UMAXV_SVE_Zn_SVE_Pg3_SVE_Vd(UMAXV_SVE_Zn_SVE_Pg3_SVE_Vd),
    UMAX_Rd_Rn_Rm(UMAX_Rd_Rn_Rm),
    UMAX_Rn_CSSC_UIMM8_Rd(UMAX_Rn_CSSC_UIMM8_Rd),
    UMAX_SME_Zdnx2_SME_Zm(UMAX_SME_Zdnx2_SME_Zm),
    UMAX_SME_Zdnx2_SME_Zmx2(UMAX_SME_Zdnx2_SME_Zmx2),
    UMAX_SME_Zdnx4_SME_Zm(UMAX_SME_Zdnx4_SME_Zm),
    UMAX_SME_Zmx4_SME_Zdnx4(UMAX_SME_Zmx4_SME_Zdnx4),
    UMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5(UMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UMAX_SVE_Zd_SVE_UIMM8(UMAX_SVE_Zd_SVE_UIMM8),
    UMAX_Vd_Vm_Vn(UMAX_Vd_Vm_Vn),
    UMINP_SVE_Zn_SVE_Zd_SVE_Pg3(UMINP_SVE_Zn_SVE_Zd_SVE_Pg3),
    UMINP_Vd_Vn_Vm(UMINP_Vd_Vn_Vm),
    UMINQV_SVE_Pg3_SVE_Zn_Vd(UMINQV_SVE_Pg3_SVE_Zn_Vd),
    UMINV_Fd_Vn(UMINV_Fd_Vn),
    UMINV_SVE_Zn_SVE_Vd_SVE_Pg3(UMINV_SVE_Zn_SVE_Vd_SVE_Pg3),
    UMIN_Rm_Rd_Rn(UMIN_Rm_Rd_Rn),
    UMIN_Rn_CSSC_UIMM8_Rd(UMIN_Rn_CSSC_UIMM8_Rd),
    UMIN_SME_Zdnx4_SME_Zmx4(UMIN_SME_Zdnx4_SME_Zmx4),
    UMIN_SME_Zm_SME_Zdnx2(UMIN_SME_Zm_SME_Zdnx2),
    UMIN_SME_Zm_SME_Zdnx4(UMIN_SME_Zm_SME_Zdnx4),
    UMIN_SME_Zmx2_SME_Zdnx2(UMIN_SME_Zmx2_SME_Zdnx2),
    UMIN_SVE_Pg3_SVE_Zd_SVE_Zm_5(UMIN_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UMIN_SVE_Zd_SVE_UIMM8(UMIN_SVE_Zd_SVE_UIMM8),
    UMIN_Vn_Vm_Vd(UMIN_Vn_Vm_Vd),
    UMLAL2_Vd_Vn_Vm(UMLAL2_Vd_Vn_Vm),
    UMLAL2_Vn_Em16_Vd(UMLAL2_Vn_Em16_Vd),
    UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16(UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn(UMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn),
    UMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(UMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    UMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx2(
        UMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx2,
    ),
    UMLALL_SME_ZA_array_off1x4_SME_Zmx2_SME_Znx2(UMLALL_SME_ZA_array_off1x4_SME_Zmx2_SME_Znx2),
    UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4(UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4),
    UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    UMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn(
        UMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn,
    ),
    UMLALL_SME_Zm_INDEX3_1_SME_Znx4_SME_ZA_array_off1x4(
        UMLALL_SME_Zm_INDEX3_1_SME_Znx4_SME_ZA_array_off1x4,
    ),
    UMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN(UMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN),
    UMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4(
        UMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4,
    ),
    UMLALL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm_INDEX4_10(
        UMLALL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm_INDEX4_10,
    ),
    UMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4(UMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4),
    UMLALT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn(UMLALT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn),
    UMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn(UMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn),
    UMLALT_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd(UMLALT_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd),
    UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    UMLAL_SME_ZA_array_off3x2_SME_Zm_SVE_Zn(UMLAL_SME_ZA_array_off3x2_SME_Zm_SVE_Zn),
    UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    UMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2(UMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2),
    UMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2(
        UMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2,
    ),
    UMLAL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm(UMLAL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm),
    UMLAL_Vd_Vn_Vm(UMLAL_Vd_Vn_Vm),
    UMLAL_Vn_Vd_Em16(UMLAL_Vn_Vd_Em16),
    UMLSL2_Vd_Em16_Vn(UMLSL2_Vd_Em16_Vn),
    UMLSL2_Vm_Vd_Vn(UMLSL2_Vm_Vd_Vn),
    UMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn(UMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(UMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    UMLSLL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4(
        UMLSLL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4,
    ),
    UMLSLL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN(UMLSLL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2(UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2),
    UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm(UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm),
    UMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn(
        UMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn,
    ),
    UMLSLL_SME_Zm_INDEX4_10_SME_ZA_array_off2x4_SVE_Zn(
        UMLSLL_SME_Zm_INDEX4_10_SME_ZA_array_off2x4_SVE_Zn,
    ),
    UMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4(
        UMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4,
    ),
    UMLSLL_SME_Zm_INDEX4_1_SME_Znx2_SME_ZA_array_off1x4(
        UMLSLL_SME_Zm_INDEX4_1_SME_Znx2_SME_ZA_array_off1x4,
    ),
    UMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4(
        UMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4,
    ),
    UMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4(UMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4),
    UMLSLL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4(UMLSLL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4),
    UMLSLT_SVE_Zd_SVE_Zm4_11_INDEX_SVE_Zn(UMLSLT_SVE_Zd_SVE_Zm4_11_INDEX_SVE_Zn),
    UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16(UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    UMLSL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2(UMLSL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2),
    UMLSL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2(UMLSL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2),
    UMLSL_SME_Znx2_SME_Zm_INDEX3_2_SME_ZA_array_off2x2(
        UMLSL_SME_Znx2_SME_Zm_INDEX3_2_SME_ZA_array_off2x2,
    ),
    UMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4(UMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4),
    UMLSL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2(
        UMLSL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2,
    ),
    UMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2(UMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2),
    UMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2(UMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2),
    UMLSL_Vd_Vn_Em16(UMLSL_Vd_Vn_Em16),
    UMLSL_Vm_Vd_Vn(UMLSL_Vm_Vd_Vn),
    UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMMLA_Vn_Vm_Vd(UMMLA_Vn_Vm_Vd),
    UMOPA_SME_ZAda_3b_SME_Pm_SVE_Zn_SVE_Zm_16_SVE_Pg3(
        UMOPA_SME_ZAda_3b_SME_Pm_SVE_Zn_SVE_Zm_16_SVE_Pg3,
    ),
    UMOPA_SVE_Pg3_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Zn(
        UMOPA_SVE_Pg3_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Zn,
    ),
    UMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_2b(
        UMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_2b,
    ),
    UMOPS_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SVE_Zm_16(
        UMOPS_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SVE_Zm_16,
    ),
    UMOPS_SME_Pm_SVE_Zn_SVE_Pg3_SME_ZAda_3b_SVE_Zm_16(
        UMOPS_SME_Pm_SVE_Zn_SVE_Pg3_SME_ZAda_3b_SVE_Zm_16,
    ),
    UMOPS_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16(
        UMOPS_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16,
    ),
    UMOV_En_Rd(UMOV_En_Rd),
    UMSUBL_Rn_Rd_Rm_Ra(UMSUBL_Rn_Rd_Rm_Ra),
    UMULH_Rn_Rm_Rd(UMULH_Rn_Rm_Rd),
    UMULH_SVE_Pg3_SVE_Zm_5_SVE_Zd(UMULH_SVE_Pg3_SVE_Zm_5_SVE_Zd),
    UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16(UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMULL2_Vd_Vm_Vn(UMULL2_Vd_Vm_Vn),
    UMULL2_Vd_Vn_Em16(UMULL2_Vd_Vn_Em16),
    UMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn(UMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn),
    UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd(UMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd),
    UMULLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn(UMULLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn),
    UMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd(UMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd),
    UMULLT_SVE_Zn_SVE_Zm_16_SVE_Zd(UMULLT_SVE_Zn_SVE_Zm_16_SVE_Zd),
    UMULL_Vd_Vn_Em16(UMULL_Vd_Vn_Em16),
    UMULL_Vn_Vm_Vd(UMULL_Vn_Vm_Vd),
    UQADD_SVE_Zd_SVE_AIMM(UQADD_SVE_Zd_SVE_AIMM),
    UQADD_SVE_Zd_SVE_Zn_SVE_Pg3(UQADD_SVE_Zd_SVE_Zn_SVE_Pg3),
    UQADD_SVE_Zn_SVE_Zd_SVE_Zm_16(UQADD_SVE_Zn_SVE_Zd_SVE_Zm_16),
    UQADD_Sn_Sm_Sd(UQADD_Sn_Sm_Sd),
    UQADD_Vm_Vd_Vn(UQADD_Vm_Vd_Vn),
    UQCVTN_SME_Znx4_SVE_Zd(UQCVTN_SME_Znx4_SVE_Zd),
    UQCVTN_SVE_Zd_SME_Znx2(UQCVTN_SVE_Zd_SME_Znx2),
    UQCVT_SVE_Zd_SME_Znx2(UQCVT_SVE_Zd_SME_Znx2),
    UQCVT_SVE_Zd_SME_Znx4(UQCVT_SVE_Zd_SME_Znx4),
    UQDECB_Rd_SVE_PATTERN_SCALED(UQDECB_Rd_SVE_PATTERN_SCALED),
    UQDECB_SVE_PATTERN_SCALED_Rd(UQDECB_SVE_PATTERN_SCALED_Rd),
    UQDECD_Rd_SVE_PATTERN_SCALED(UQDECD_Rd_SVE_PATTERN_SCALED),
    UQDECD_Rd_X_SVE_PATTERN_SCALED(UQDECD_Rd_X_SVE_PATTERN_SCALED),
    UQDECD_SVE_Zd_SVE_PATTERN_SCALED(UQDECD_SVE_Zd_SVE_PATTERN_SCALED),
    UQDECH_Rd_SVE_PATTERN_SCALED(UQDECH_Rd_SVE_PATTERN_SCALED),
    UQDECH_SVE_PATTERN_SCALED_Rd(UQDECH_SVE_PATTERN_SCALED_Rd),
    UQDECH_SVE_Zd_SVE_PATTERN_SCALED(UQDECH_SVE_Zd_SVE_PATTERN_SCALED),
    UQDECP_Rd_SVE_Pg4_5(UQDECP_Rd_SVE_Pg4_5),
    UQDECP_Rd_X_SVE_Pg4_5_S_B(UQDECP_Rd_X_SVE_Pg4_5_S_B),
    UQDECP_SVE_Zd_SVE_Pg4_5(UQDECP_SVE_Zd_SVE_Pg4_5),
    UQDECW_Rd_SVE_PATTERN_SCALED(UQDECW_Rd_SVE_PATTERN_SCALED),
    UQDECW_SVE_PATTERN_SCALED_Rd(UQDECW_SVE_PATTERN_SCALED_Rd),
    UQDECW_SVE_PATTERN_SCALED_SVE_Zd(UQDECW_SVE_PATTERN_SCALED_SVE_Zd),
    UQINCB_SVE_PATTERN_SCALED_Rd(UQINCB_SVE_PATTERN_SCALED_Rd),
    UQINCB_SVE_PATTERN_SCALED_Rd_X(UQINCB_SVE_PATTERN_SCALED_Rd_X),
    UQINCD_SVE_PATTERN_SCALED_Rd(UQINCD_SVE_PATTERN_SCALED_Rd),
    UQINCD_SVE_PATTERN_SCALED_Rd_X(UQINCD_SVE_PATTERN_SCALED_Rd_X),
    UQINCD_SVE_PATTERN_SCALED_SVE_Zd(UQINCD_SVE_PATTERN_SCALED_SVE_Zd),
    UQINCH_Rd_SVE_PATTERN_SCALED(UQINCH_Rd_SVE_PATTERN_SCALED),
    UQINCH_SVE_PATTERN_SCALED_Rd(UQINCH_SVE_PATTERN_SCALED_Rd),
    UQINCH_SVE_PATTERN_SCALED_SVE_Zd(UQINCH_SVE_PATTERN_SCALED_SVE_Zd),
    UQINCP_Rd_SVE_Pg4_5(UQINCP_Rd_SVE_Pg4_5),
    UQINCP_SVE_Pg4_5_Rd(UQINCP_SVE_Pg4_5_Rd),
    UQINCP_SVE_Zd_SVE_Pg4_5(UQINCP_SVE_Zd_SVE_Pg4_5),
    UQINCW_Rd_SVE_PATTERN_SCALED(UQINCW_Rd_SVE_PATTERN_SCALED),
    UQINCW_SVE_PATTERN_SCALED_Rd(UQINCW_SVE_PATTERN_SCALED_Rd),
    UQINCW_SVE_PATTERN_SCALED_SVE_Zd(UQINCW_SVE_PATTERN_SCALED_SVE_Zd),
    UQRSHLR_SVE_Pg3_SVE_Zn_SVE_Zd(UQRSHLR_SVE_Pg3_SVE_Zn_SVE_Zd),
    UQRSHL_SVE_Pg3_SVE_Zn_SVE_Zd(UQRSHL_SVE_Pg3_SVE_Zn_SVE_Zd),
    UQRSHL_Sn_Sm_Sd(UQRSHL_Sn_Sm_Sd),
    UQRSHL_Vd_Vn_Vm(UQRSHL_Vd_Vn_Vm),
    UQRSHRN2_Vd_Vn_IMM_VLSR(UQRSHRN2_Vd_Vn_IMM_VLSR),
    UQRSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd(UQRSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd),
    UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    UQRSHRN_IMM_VLSR_Sd_Sn(UQRSHRN_IMM_VLSR_Sd_Sn),
    UQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd(UQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd),
    UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5(UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    UQRSHRN_Vd_Vn_IMM_VLSR(UQRSHRN_Vd_Vn_IMM_VLSR),
    UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4(UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5(UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    UQSHLR_SVE_Pg3_SVE_Zd_SVE_Zn(UQSHLR_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSHL_SVE_Pg3_SVE_Zd_SVE_Zn(UQSHL_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSHL_SVE_SHLIMM_PRED_SVE_Pg3_SVE_Zd(UQSHL_SVE_SHLIMM_PRED_SVE_Pg3_SVE_Zd),
    UQSHL_Sd_Sm_Sn(UQSHL_Sd_Sm_Sn),
    UQSHL_Sn_Sd_IMM_VLSL(UQSHL_Sn_Sd_IMM_VLSL),
    UQSHL_Vd_Vn_IMM_VLSL(UQSHL_Vd_Vn_IMM_VLSL),
    UQSHL_Vm_Vd_Vn(UQSHL_Vm_Vd_Vn),
    UQSHRN2_Vn_Vd_IMM_VLSR(UQSHRN2_Vn_Vd_IMM_VLSR),
    UQSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd(UQSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd),
    UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    UQSHRN_Sd_Sn_IMM_VLSR(UQSHRN_Sd_Sn_IMM_VLSR),
    UQSHRN_Vn_IMM_VLSR_Vd(UQSHRN_Vn_IMM_VLSR_Vd),
    UQSUBR_SVE_Pg3_SVE_Zd_SVE_Zn(UQSUBR_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSUB_SVE_Zd_SVE_AIMM(UQSUB_SVE_Zd_SVE_AIMM),
    UQSUB_SVE_Zd_SVE_Zm_16_SVE_Zn(UQSUB_SVE_Zd_SVE_Zm_16_SVE_Zn),
    UQSUB_SVE_Zn_SVE_Zd_SVE_Pg3(UQSUB_SVE_Zn_SVE_Zd_SVE_Pg3),
    UQSUB_Sd_Sm_Sn(UQSUB_Sd_Sm_Sn),
    UQSUB_Vd_Vn_Vm(UQSUB_Vd_Vn_Vm),
    UQXTN2_Vd_Vn(UQXTN2_Vd_Vn),
    UQXTNB_SVE_Zd_SVE_Zn(UQXTNB_SVE_Zd_SVE_Zn),
    UQXTNT_SVE_Zn_SVE_Zd(UQXTNT_SVE_Zn_SVE_Zd),
    UQXTN_Sn_Sd(UQXTN_Sn_Sd),
    UQXTN_Vd_Vn(UQXTN_Vd_Vn),
    URECPE_SVE_Pg3_SVE_Zd_SVE_Zn(URECPE_SVE_Pg3_SVE_Zd_SVE_Zn),
    URECPE_Vd_Vn(URECPE_Vd_Vn),
    URHADD_SVE_Zn_SVE_Pg3_SVE_Zd(URHADD_SVE_Zn_SVE_Pg3_SVE_Zd),
    URHADD_Vn_Vm_Vd(URHADD_Vn_Vm_Vd),
    URSHLR_SVE_Zd_SVE_Pg3_SVE_Zn(URSHLR_SVE_Zd_SVE_Pg3_SVE_Zn),
    URSHL_SME_Zdnx4_SME_Zm(URSHL_SME_Zdnx4_SME_Zm),
    URSHL_SME_Zdnx4_SME_Zmx4(URSHL_SME_Zdnx4_SME_Zmx4),
    URSHL_SME_Zm_SME_Zdnx2(URSHL_SME_Zm_SME_Zdnx2),
    URSHL_SME_Zmx2_SME_Zdnx2(URSHL_SME_Zmx2_SME_Zdnx2),
    URSHL_SVE_Zd_SVE_Pg3_SVE_Zn(URSHL_SVE_Zd_SVE_Pg3_SVE_Zn),
    URSHL_Sn_Sm_Sd(URSHL_Sn_Sm_Sd),
    URSHL_Vn_Vm_Vd(URSHL_Vn_Vm_Vd),
    URSHR_IMM_VLSR_Vn_Vd(URSHR_IMM_VLSR_Vn_Vd),
    URSHR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3(URSHR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3),
    URSHR_Sd_IMM_VLSR_Sn(URSHR_Sd_IMM_VLSR_Sn),
    URSQRTE_SVE_Zd_SVE_Zn_SVE_Pg3(URSQRTE_SVE_Zd_SVE_Zn_SVE_Pg3),
    URSQRTE_Vd_Vn(URSQRTE_Vd_Vn),
    URSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED(URSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED),
    URSRA_Sd_Sn_IMM_VLSR(URSRA_Sd_Sn_IMM_VLSR),
    URSRA_Vn_Vd_IMM_VLSR(URSRA_Vn_Vd_IMM_VLSR),
    USDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4(USDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4),
    USDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2(
        USDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2,
    ),
    USDOT_SME_Zm_INDEX2_SME_Znx4_SME_ZA_array_off3_0(
        USDOT_SME_Zm_INDEX2_SME_Znx4_SME_ZA_array_off3_0,
    ),
    USDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0(USDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0),
    USDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0(USDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0),
    USDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn(USDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn),
    USDOT_SVE_Zn_SVE_Zd_SVE_Zm_16(USDOT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    USDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0(USDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0),
    USDOT_Vd_Em_Vn(USDOT_Vd_Em_Vn),
    USDOT_Vd_Vn_Vm(USDOT_Vd_Vn_Vm),
    USHLL2_Vd_Vn_IMM_VLSL(USHLL2_Vd_Vn_IMM_VLSL),
    USHLLB_SVE_SHLIMM_UNPRED_22_SVE_Zn_SVE_Zd(USHLLB_SVE_SHLIMM_UNPRED_22_SVE_Zn_SVE_Zd),
    USHLLT_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn(USHLLT_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn),
    USHLL_Vn_IMM_VLSL_Vd(USHLL_Vn_IMM_VLSL_Vd),
    USHL_Sd_Sn_Sm(USHL_Sd_Sn_Sm),
    USHL_Vm_Vn_Vd(USHL_Vm_Vn_Vd),
    USHR_IMM_VLSR_Vd_Vn(USHR_IMM_VLSR_Vd_Vn),
    USHR_Sd_Sn_IMM_VLSR(USHR_Sd_Sn_IMM_VLSR),
    USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    USMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn(
        USMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn,
    ),
    USMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN(USMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN),
    USMLALL_SME_Znx2_SME_Zmx2_SME_ZA_array_off1x4(USMLALL_SME_Znx2_SME_Zmx2_SME_ZA_array_off1x4),
    USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1(
        USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1,
    ),
    USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4(USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4),
    USMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4(USMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4),
    USMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm(USMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm),
    USMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd(USMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd),
    USMMLA_Vd_Vm_Vn(USMMLA_Vd_Vm_Vn),
    USMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16(
        USMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16,
    ),
    USMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm(
        USMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm,
    ),
    USMOPS_SME_ZAda_3b_SVE_Zn_SME_Pm_SVE_Zm_16_SVE_Pg3(
        USMOPS_SME_ZAda_3b_SVE_Zn_SME_Pm_SVE_Zm_16_SVE_Pg3,
    ),
    USMOPS_SVE_Zn_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3(
        USMOPS_SVE_Zn_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3,
    ),
    USQADD_SVE_Zd_SVE_Pg3_SVE_Zn(USQADD_SVE_Zd_SVE_Pg3_SVE_Zn),
    USQADD_Sn_Sd(USQADD_Sn_Sd),
    USQADD_Vd_Vn(USQADD_Vd_Vn),
    USRA_IMM_VLSR_Vn_Vd(USRA_IMM_VLSR_Vn_Vd),
    USRA_SVE_SHRIMM_UNPRED_SVE_Zd_SVE_Zn(USRA_SVE_SHRIMM_UNPRED_SVE_Zd_SVE_Zn),
    USRA_Sd_Sn_IMM_VLSR(USRA_Sd_Sn_IMM_VLSR),
    USUBL2_Vd_Vn_Vm(USUBL2_Vd_Vn_Vm),
    USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16(USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USUBLT_SVE_Zn_SVE_Zd_SVE_Zm_16(USUBLT_SVE_Zn_SVE_Zd_SVE_Zm_16),
    USUBL_Vd_Vn_Vm(USUBL_Vd_Vn_Vm),
    USUBW2_Vn_Vm_Vd(USUBW2_Vn_Vm_Vd),
    USUBWB_SVE_Zm_16_SVE_Zn_SVE_Zd(USUBWB_SVE_Zm_16_SVE_Zn_SVE_Zd),
    USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16(USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USUBW_Vd_Vn_Vm(USUBW_Vd_Vn_Vm),
    USVDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx4(
        USVDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx4,
    ),
    UUNPKHI_SVE_Zn_SVE_Zd(UUNPKHI_SVE_Zn_SVE_Zd),
    UUNPKLO_SVE_Zd_SVE_Zn(UUNPKLO_SVE_Zd_SVE_Zn),
    UUNPK_SME_Zdnx2_SVE_Zn(UUNPK_SME_Zdnx2_SVE_Zn),
    UUNPK_SME_Znx2_SME_Zdnx4(UUNPK_SME_Znx2_SME_Zdnx4),
    UVDOT_SME_Zm_INDEX1_SME_ZA_array_off3_0_SME_Znx4(
        UVDOT_SME_Zm_INDEX1_SME_ZA_array_off3_0_SME_Znx4,
    ),
    UVDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX2(
        UVDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX2,
    ),
    UVDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0(
        UVDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0,
    ),
    UXTB_SVE_Zd_SVE_Pg3_SVE_Zn(UXTB_SVE_Zd_SVE_Pg3_SVE_Zn),
    UXTH_SVE_Zn_SVE_Pg3_SVE_Zd(UXTH_SVE_Zn_SVE_Pg3_SVE_Zd),
    UXTW_SVE_Pg3_SVE_Zn_SVE_Zd(UXTW_SVE_Pg3_SVE_Zn_SVE_Zd),
    UZP1_SVE_Pn_SVE_Pm_SVE_Pd(UZP1_SVE_Pn_SVE_Pm_SVE_Pd),
    UZP1_SVE_Zd_SVE_Zm_16_SVE_Zn(UZP1_SVE_Zd_SVE_Zm_16_SVE_Zn),
    UZP1_SVE_Zn_SVE_Zd_SVE_Zm_16(UZP1_SVE_Zn_SVE_Zd_SVE_Zm_16),
    UZP1_Vm_Vn_Vd(UZP1_Vm_Vn_Vd),
    UZP2_SVE_Pd_SVE_Pn_SVE_Pm(UZP2_SVE_Pd_SVE_Pn_SVE_Pm),
    UZP2_SVE_Zm_16_SVE_Zd_SVE_Zn(UZP2_SVE_Zm_16_SVE_Zd_SVE_Zn),
    UZP2_SVE_Zn_SVE_Zm_16_SVE_Zd(UZP2_SVE_Zn_SVE_Zm_16_SVE_Zd),
    UZP2_Vm_Vn_Vd(UZP2_Vm_Vn_Vd),
    UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    UZP_SME_Znx4_SME_Zdnx4(UZP_SME_Znx4_SME_Zdnx4),
    UZP_SME_Znx4_S_Q_SME_Zdnx4_S_Q(UZP_SME_Znx4_S_Q_SME_Zdnx4_S_Q),
    UZP_SVE_Zm_16_SME_Zdnx2_SVE_Zn(UZP_SVE_Zm_16_SME_Zdnx2_SVE_Zn),
    WFET_Rd(WFET_Rd),
    WFIT_Rd(WFIT_Rd),
    WHILEGE_Rm_Rn_SME_Pdx2(WHILEGE_Rm_Rn_SME_Pdx2),
    WHILEGE_Rn_Rm_SME_VLxN_13_SME_PNd3(WHILEGE_Rn_Rm_SME_VLxN_13_SME_PNd3),
    WHILEGE_Rn_SVE_Pd_Rm(WHILEGE_Rn_SVE_Pd_Rm),
    WHILEGE_SVE_Pd_Rn_Rm(WHILEGE_SVE_Pd_Rn_Rm),
    WHILEGT_Rm_Rn_SME_PNd3_SME_VLxN_13(WHILEGT_Rm_Rn_SME_PNd3_SME_VLxN_13),
    WHILEGT_Rn_Rm_SVE_Pd(WHILEGT_Rn_Rm_SVE_Pd),
    WHILEGT_SME_Pdx2_Rn_Rm(WHILEGT_SME_Pdx2_Rn_Rm),
    WHILEGT_SVE_Pd_Rn_Rm(WHILEGT_SVE_Pd_Rn_Rm),
    WHILEHI_Rm_Rn_SVE_Pd(WHILEHI_Rm_Rn_SVE_Pd),
    WHILEHI_Rn_SME_Pdx2_Rm(WHILEHI_Rn_SME_Pdx2_Rm),
    WHILEHI_Rn_SVE_Pd_Rm(WHILEHI_Rn_SVE_Pd_Rm),
    WHILEHI_SME_VLxN_13_Rn_SME_PNd3_Rm(WHILEHI_SME_VLxN_13_Rn_SME_PNd3_Rm),
    WHILEHS_Rn_Rm_SME_Pdx2(WHILEHS_Rn_Rm_SME_Pdx2),
    WHILEHS_Rn_SME_PNd3_Rm_SME_VLxN_13(WHILEHS_Rn_SME_PNd3_Rm_SME_VLxN_13),
    WHILEHS_SVE_Pd_Rn_Rm(WHILEHS_SVE_Pd_Rn_Rm),
    WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X(WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILELE_Rm_SVE_Pd_Rn(WHILELE_Rm_SVE_Pd_Rn),
    WHILELE_Rm_X_SVE_Pd_S_B_Rn_X(WHILELE_Rm_X_SVE_Pd_S_B_Rn_X),
    WHILELE_SME_PNd3_SME_VLxN_13_Rn_Rm(WHILELE_SME_PNd3_SME_VLxN_13_Rn_Rm),
    WHILELE_SME_Pdx2_Rn_Rm(WHILELE_SME_Pdx2_Rn_Rm),
    WHILELO_Rn_SME_VLxN_13_Rm_SME_PNd3(WHILELO_Rn_SME_VLxN_13_Rm_SME_PNd3),
    WHILELO_SME_Pdx2_Rn_Rm(WHILELO_SME_Pdx2_Rn_Rm),
    WHILELO_SVE_Pd_Rn_Rm(WHILELO_SVE_Pd_Rn_Rm),
    WHILELO_SVE_Pd_S_B_Rn_X_Rm_X(WHILELO_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILELS_Rm_SVE_Pd_Rn(WHILELS_Rm_SVE_Pd_Rn),
    WHILELS_Rn_Rm_SME_Pdx2(WHILELS_Rn_Rm_SME_Pdx2),
    WHILELS_SME_VLxN_13_SME_PNd3_Rm_Rn(WHILELS_SME_VLxN_13_SME_PNd3_Rm_Rn),
    WHILELS_SVE_Pd_Rn_Rm(WHILELS_SVE_Pd_Rn_Rm),
    WHILELT_Rm_Rn_SME_Pdx2(WHILELT_Rm_Rn_SME_Pdx2),
    WHILELT_Rm_SME_VLxN_13_Rn_SME_PNd3(WHILELT_Rm_SME_VLxN_13_Rn_SME_PNd3),
    WHILELT_Rm_SVE_Pd_Rn(WHILELT_Rm_SVE_Pd_Rn),
    WHILELT_SVE_Pd_Rn_Rm(WHILELT_SVE_Pd_Rn_Rm),
    WHILERW_Rm_Rn_SVE_Pd(WHILERW_Rm_Rn_SVE_Pd),
    WHILEWR_SVE_Pd_Rn_Rm(WHILEWR_SVE_Pd_Rn_Rm),
    WRFFR_SVE_Pn(WRFFR_SVE_Pn),
    XAFLAG(XAFLAG),
    XAR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(XAR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    XAR_Vd_Vn_Vm_IMM(XAR_Vd_Vn_Vm_IMM),
    XPACD_Rd(XPACD_Rd),
    XPACI_Rd(XPACI_Rd),
    XTN2_Vd_Vn(XTN2_Vd_Vn),
    XTN_Vd_Vn(XTN_Vd_Vn),
    ZERO_SME_ZT0_LIST(ZERO_SME_ZT0_LIST),
    ZERO_SME_list_of_64bit_tiles(ZERO_SME_list_of_64bit_tiles),
    ZIP1_SVE_Pn_SVE_Pd_SVE_Pm(ZIP1_SVE_Pn_SVE_Pd_SVE_Pm),
    ZIP1_SVE_Zm_16_SVE_Zd_SVE_Zn(ZIP1_SVE_Zm_16_SVE_Zd_SVE_Zn),
    ZIP1_SVE_Zm_16_S_B_SVE_Zd_S_B_SVE_Zn_S_B(ZIP1_SVE_Zm_16_S_B_SVE_Zd_S_B_SVE_Zn_S_B),
    ZIP1_Vd_Vn_Vm(ZIP1_Vd_Vn_Vm),
    ZIP2_SVE_Pm_SVE_Pn_SVE_Pd(ZIP2_SVE_Pm_SVE_Pn_SVE_Pd),
    ZIP2_SVE_Zm_16_SVE_Zd_SVE_Zn(ZIP2_SVE_Zm_16_SVE_Zd_SVE_Zn),
    ZIP2_SVE_Zm_16_SVE_Zn_SVE_Zd(ZIP2_SVE_Zm_16_SVE_Zn_SVE_Zd),
    ZIP2_Vn_Vd_Vm(ZIP2_Vn_Vd_Vm),
    ZIP_SME_Zdnx2_SVE_Zm_16_SVE_Zn(ZIP_SME_Zdnx2_SVE_Zm_16_SVE_Zn),
    ZIP_SME_Zdnx4_SME_Znx4(ZIP_SME_Zdnx4_SME_Znx4),
    ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q(ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q),
    ZIP_SVE_Zm_16_SME_Zdnx2_SVE_Zn(ZIP_SVE_Zm_16_SME_Zdnx2_SVE_Zn),
}
pub fn decode(insn: u32) -> Option<Opcode> {
    if insn >> 26 & 1 == 0 {
        if insn >> 25 & 1 == 0 {
            if insn >> 27 & 1 == 0 {
                if insn >> 24 & 1 == 0 {
                    if insn >> 28 & 1 == 0 {
                        if insn >> 21 & 1 == 0 {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 22 & 1 == 0 {
                                        if insn >> 23 & 1 == 0 {
                                            if insn & 0xffff0000 == 0x000000 {
                                                return Some(Opcode::UDF_UNDEFINED(
                                                    UDF_UNDEFINED::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 3 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xffe0001c == 0x80800000 {
                                                        return Some (Opcode :: FMOPA_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 (FMOPA_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0001c == 0x80800010 {
                                                        return Some (Opcode :: FMOPS_SME_Pm_SVE_Pg3_SVE_Zn_SME_ZAda_2b_SVE_Zm_16 (FMOPS_SME_Pm_SVE_Pg3_SVE_Zn_SME_ZAda_2b_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xffe0001c == 0x80800008 {
                                                        return Some (Opcode :: BMOPA_SME_Pm_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SVE_Zm_16 (BMOPA_SME_Pm_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0001c == 0x80800018 {
                                                        return Some (Opcode :: BMOPS_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SME_Pm (BMOPS_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SME_Pm :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 4 & 1 == 0 {
                                            if insn & 0xffe00018 == 0x80c00000 {
                                                return Some (Opcode :: FMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm (FMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe00018 == 0x80c00010 {
                                                return Some (Opcode :: FMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_3b_SVE_Pg3_SME_Pm (FMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_3b_SVE_Pg3_SME_Pm :: from (insn))) ;
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 18 & 1 == 0 {
                                        if insn >> 17 & 1 == 0 {
                                            if insn >> 19 & 1 == 0 {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn & 0xff3e0010 == 0xc0000000 {
                                                        return Some (Opcode :: MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3 (MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                    if insn & 0xff3e0010 == 0xc0000000 {
                                                        return Some (Opcode :: MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3 (MOVA_SVE_Zn_SME_ZA_HV_idx_dest_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffff001c == 0xc0900000 {
                                                                return Some (Opcode :: ADDHA_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SME_Pm (ADDHA_SVE_Pg3_SME_ZAda_2b_SVE_Zn_SME_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffff0018 == 0xc0d00000 {
                                                                return Some (Opcode :: ADDHA_SVE_Pg3_SME_ZAda_3b_SVE_Zn_SME_Pm (ADDHA_SVE_Pg3_SME_ZAda_3b_SVE_Zn_SME_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffff001c == 0xc0910000 {
                                                                return Some (Opcode :: ADDVA_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Pg3 (ADDVA_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffff0018 == 0xc0d10000 {
                                                                return Some (Opcode :: ADDVA_SME_Pm_SVE_Pg3_SME_ZAda_3b_SVE_Zn (ADDVA_SME_Pm_SVE_Pg3_SME_ZAda_3b_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffffff00 == 0xc0080000 {
                                                        return Some(
                                                            Opcode::ZERO_SME_list_of_64bit_tiles(
                                                                ZERO_SME_list_of_64bit_tiles::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn == 0xc0480001 {
                                                        return Some(Opcode::ZERO_SME_ZT0_LIST(
                                                            ZERO_SME_ZT0_LIST::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 19 & 1 == 0 {
                                                if insn & 0xff3e0200 == 0xc0020000 {
                                                    return Some (Opcode :: MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src (MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src :: from (insn))) ;
                                                }
                                                if insn & 0xff3e0200 == 0xc0020000 {
                                                    return Some (Opcode :: MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src (MOVA_SVE_Pg3_SVE_Zd_SME_ZA_HV_idx_src :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfffecc03 == 0xc08a8000 {
                                                            return Some (Opcode :: LUTI4_SME_Zdnx4_SME_Zn_INDEX1_16_SME_ZT0 (LUTI4_SME_Zdnx4_SME_Zn_INDEX1_16_SME_ZT0 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfffe4c01 == 0xc08a4000 {
                                                            return Some (Opcode :: LUTI4_SME_ZT0_SME_Zdnx2_SME_Zn_INDEX2_15 (LUTI4_SME_ZT0_SME_Zdnx2_SME_Zn_INDEX2_15 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xfffe0c00 == 0xc0ca0000 {
                                                        return Some (Opcode :: LUTI4_SVE_Zd_SME_Zn_INDEX3_14_SME_ZT0 (LUTI4_SVE_Zd_SME_Zn_INDEX3_14_SME_ZT0 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 10 & 1 == 0 {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 19 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn & 0xff3f1c38 == 0xc0040000 {
                                                            return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 :: from (insn))) ;
                                                        }
                                                        if insn & 0xff3f1c38 == 0xc0040000 {
                                                            return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 9 & 1 == 0 {
                                                            if insn & 0xff3f1f01 == 0xc0060000 {
                                                                return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN (MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN :: from (insn))) ;
                                                            }
                                                            if insn & 0xff3f1f01 == 0xc0060000 {
                                                                return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN (MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0060200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_ZA_array_vrsb_1_SME_Zdnx2 (MOVAZ_SME_ZA_array_vrsb_1_SME_Zdnx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0860200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_ZA_array_vrss_1_SME_Zdnx2 (MOVAZ_SME_ZA_array_vrss_1_SME_Zdnx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0460200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 (MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0c60200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_ZA_array_vrsd_1_SME_Zdnx2 (MOVAZ_SME_ZA_array_vrsd_1_SME_Zdnx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xfffccc03 == 0xc08c8000 {
                                                                return Some (Opcode :: LUTI2_SME_Zn_INDEX2_16_SME_Zdnx4_SME_ZT0 (LUTI2_SME_Zn_INDEX2_16_SME_Zdnx4_SME_ZT0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffc4c01 == 0xc08c4000 {
                                                                return Some (Opcode :: LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 (LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 17 & 1 == 0 {
                                                                if insn & 0xffff8fe0 == 0xc04c03e0 {
                                                                    return Some (Opcode :: MOVT_SME_ZT0_INDEX_Rt (MOVT_SME_ZT0_INDEX_Rt :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffff8fe0 == 0xc04e03e0 {
                                                                    return Some (Opcode :: MOVT_Rt_SME_ZT0_INDEX (MOVT_Rt_SME_ZT0_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xfffc0c00 == 0xc0cc0000 {
                                                                return Some (Opcode :: LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 (LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn & 0xffff9c38 == 0xc0040800 {
                                                        return Some (Opcode :: MOVA_SME_Znx2_SME_ZA_array_off3_0 (MOVA_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9c38 == 0xc0040800 {
                                                        return Some (Opcode :: MOVA_SME_Znx2_SME_ZA_array_off3_0 (MOVA_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffff9f01 == 0xc0060800 {
                                                        return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_array_off3_5 (MOVA_SME_Zdnx2_SME_ZA_array_off3_5 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9f01 == 0xc0060800 {
                                                        return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_array_off3_5 (MOVA_SME_Zdnx2_SME_ZA_array_off3_5 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn & 0xff3f1c78 == 0xc0040400 {
                                                        return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 :: from (insn))) ;
                                                    }
                                                    if insn & 0xff3f1c78 == 0xc0040400 {
                                                        return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 9 & 1 == 0 {
                                                        if insn & 0xff3f1f03 == 0xc0060400 {
                                                            return Some (Opcode :: MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4 (MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4 :: from (insn))) ;
                                                        }
                                                        if insn & 0xff3f1f03 == 0xc0060400 {
                                                            return Some (Opcode :: MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4 (MOVA_SME_ZA_HV_idx_srcxN_SME_Zdnx4 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffff1f83 == 0xc0060600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffff1f83 == 0xc0860600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffff1f83 == 0xc0460600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffff1f03 == 0xc0c60600 {
                                                                    return Some (Opcode :: MOVAZ_SME_ZA_array_vrsd_2_SME_Zdnx4 (MOVAZ_SME_ZA_array_vrsd_2_SME_Zdnx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn & 0xffff9c78 == 0xc0040c00 {
                                                        return Some (Opcode :: MOVA_SME_Znx4_SME_ZA_array_off3_0 (MOVA_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9c78 == 0xc0040c00 {
                                                        return Some (Opcode :: MOVA_SME_Znx4_SME_ZA_array_off3_0 (MOVA_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffff9f03 == 0xc0060c00 {
                                                        return Some (Opcode :: MOVA_SME_ZA_array_off3_5_SME_Zdnx4 (MOVA_SME_ZA_array_off3_5_SME_Zdnx4 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9f03 == 0xc0060c00 {
                                                        return Some (Opcode :: MOVA_SME_ZA_array_off3_5_SME_Zdnx4 (MOVA_SME_ZA_array_off3_5_SME_Zdnx4 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 22 & 1 == 0 {
                                    if insn >> 23 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0000000 {
                                                                return Some (Opcode :: LD1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 (LD1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa0008000 {
                                                                return Some (Opcode :: LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR (LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0004000 {
                                                                return Some (Opcode :: LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000c000 {
                                                                return Some (Opcode :: LD1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RR_LSL2 (LD1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0002000 {
                                                                return Some (Opcode :: LD1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 (LD1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000a000 {
                                                                return Some (Opcode :: LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 (LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0006000 {
                                                                return Some (Opcode :: LD1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Zdnx2 (LD1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Zdnx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000e000 {
                                                                return Some (Opcode :: LD1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 (LD1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0000001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR (LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa0008001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 (LDNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0004001 {
                                                                return Some (Opcode :: LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 (LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000c001 {
                                                                return Some (Opcode :: LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 (LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0002001 {
                                                                return Some (Opcode :: LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx2_SME_PNg3 (LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx2_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000a001 {
                                                                return Some (Opcode :: LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 (LDNT1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0006001 {
                                                                return Some (Opcode :: LDNT1D_SME_PNg3_SME_Zdnx2_SVE_ADDR_RR_LSL3 (LDNT1D_SME_PNg3_SME_Zdnx2_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000e001 {
                                                                return Some (Opcode :: LDNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 (LDNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0000000 {
                                                return Some (Opcode :: LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3 (LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3 :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0000000 {
                                                return Some (Opcode :: LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3 (LD1B_SVE_ADDR_R_SME_ZA_HV_idx_ldstr_SVE_Pg3 :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn >> 4 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn >> 3 & 1 == 0 {
                                                    if insn & 0xffe0001c == 0xa0800000 {
                                                        return Some (Opcode :: SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zm_16_SVE_Zn (SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0001c == 0xa0800008 {
                                                        return Some (Opcode :: SMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 (SMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe0800000 {
                                                    return Some (Opcode :: LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe0800000 {
                                                    return Some (Opcode :: LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 3 & 1 == 0 {
                                                if insn & 0xffe0001c == 0xa0800010 {
                                                    return Some (Opcode :: SMOPS_SVE_Pg3_SVE_Zn_SME_Pm_SVE_Zm_16_SME_ZAda_2b (SMOPS_SVE_Pg3_SVE_Zn_SME_Pm_SVE_Zm_16_SME_ZAda_2b :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa0800018 {
                                                    return Some (Opcode :: SMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_2b_SVE_Pg3_SME_Pm (SMOPS_SVE_Zm_16_SVE_Zn_SME_ZAda_2b_SVE_Pg3_SME_Pm :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 23 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0400000 {
                                                                return Some (Opcode :: LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa0408000 {
                                                                return Some (Opcode :: LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0404000 {
                                                                return Some (Opcode :: LD1W_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL (LD1W_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040c000 {
                                                                return Some (Opcode :: LD1W_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 (LD1W_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0402000 {
                                                                return Some (Opcode :: LD1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 (LD1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040a000 {
                                                                return Some (Opcode :: LD1H_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 (LD1H_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0406000 {
                                                                return Some (Opcode :: LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040e000 {
                                                                return Some (Opcode :: LD1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (LD1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0400001 {
                                                                return Some (Opcode :: LDNT1B_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL (LDNT1B_SME_PNg3_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa0408001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0404001 {
                                                                return Some (Opcode :: LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 (LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040c001 {
                                                                return Some (Opcode :: LDNT1W_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL_SME_PNg3 (LDNT1W_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0402001 {
                                                                return Some (Opcode :: LDNT1H_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 (LDNT1H_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040a001 {
                                                                return Some (Opcode :: LDNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (LDNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0406001 {
                                                                return Some (Opcode :: LDNT1D_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 (LDNT1D_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040e001 {
                                                                return Some (Opcode :: LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0400000 {
                                                return Some (Opcode :: LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0400000 {
                                                return Some (Opcode :: LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn >> 4 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe00018 == 0xa0c00000 {
                                                    return Some (Opcode :: SMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_3b (SMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_3b :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe0c00000 {
                                                    return Some (Opcode :: LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 (LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe0c00000 {
                                                    return Some (Opcode :: LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 (LD1D_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00018 == 0xa0c00010 {
                                                return Some (Opcode :: SMOPS_SVE_Zm_16_SME_Pm_SME_ZAda_3b_SVE_Pg3_SVE_Zn (SMOPS_SVE_Zm_16_SME_Pm_SME_ZAda_3b_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 22 & 1 == 0 {
                                if insn >> 23 & 1 == 0 {
                                    if insn >> 30 & 1 == 0 {
                                        if insn & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0200000 {
                                                            return Some (Opcode :: ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR (ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa0208000 {
                                                            return Some (Opcode :: ST1B_SVE_ADDR_RR_SME_Zdnx4_SME_PNg3 (ST1B_SVE_ADDR_RR_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0204000 {
                                                            return Some (Opcode :: ST1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 (ST1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020c000 {
                                                            return Some (Opcode :: ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 (ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Zdnx4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0202000 {
                                                            return Some (Opcode :: ST1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 (ST1H_SME_Zdnx2_SVE_ADDR_RR_LSL1_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020a000 {
                                                            return Some (Opcode :: ST1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 (ST1H_SVE_ADDR_RR_LSL1_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0206000 {
                                                            return Some (Opcode :: ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 (ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020e000 {
                                                            return Some (Opcode :: ST1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 (ST1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0200001 {
                                                            return Some (Opcode :: STNT1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 (STNT1B_SME_PNg3_SVE_ADDR_RR_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa0208001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 (STNT1B_SME_Zdnx4_SVE_ADDR_RR_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0204001 {
                                                            return Some (Opcode :: STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 (STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020c001 {
                                                            return Some (Opcode :: STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 (STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0202001 {
                                                            return Some (Opcode :: STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 (STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020a001 {
                                                            return Some (Opcode :: STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 (STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0206001 {
                                                            return Some (Opcode :: STNT1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Zdnx2 (STNT1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020e001 {
                                                            return Some (Opcode :: STNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 (STNT1D_SVE_ADDR_RR_LSL3_SME_Zdnx4_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe00010 == 0xe0200000 {
                                            return Some (Opcode :: ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                        if insn & 0xffe00010 == 0xe0200000 {
                                            return Some (Opcode :: ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                    }
                                } else {
                                    if insn >> 4 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 0xffe0001c == 0xa0a00000 {
                                                return Some (Opcode :: SUMOPA_SVE_Zn_SVE_Zm_16_SME_Pm_SVE_Pg3_SME_ZAda_2b (SUMOPA_SVE_Zn_SVE_Zm_16_SME_Pm_SVE_Pg3_SME_ZAda_2b :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0a00000 {
                                                return Some (Opcode :: ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R (ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0a00000 {
                                                return Some (Opcode :: ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R (ST1W_SVE_Pg3_SME_ZA_HV_idx_ldstr_SVE_ADDR_R :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe0001c == 0xa0a00010 {
                                            return Some (Opcode :: SUMOPS_SME_ZAda_2b_SVE_Zm_16_SME_Pm_SVE_Pg3_SVE_Zn (SUMOPS_SME_ZAda_2b_SVE_Zm_16_SME_Pm_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                        }
                                    }
                                }
                            } else {
                                if insn >> 23 & 1 == 0 {
                                    if insn >> 30 & 1 == 0 {
                                        if insn & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0600000 {
                                                            return Some (Opcode :: ST1B_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 (ST1B_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa0608000 {
                                                            return Some (Opcode :: ST1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (ST1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0604000 {
                                                            return Some (Opcode :: ST1W_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 (ST1W_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060c000 {
                                                            return Some (Opcode :: ST1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL (ST1W_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0602000 {
                                                            return Some (Opcode :: ST1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 (ST1H_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060a000 {
                                                            return Some (Opcode :: ST1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (ST1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0606000 {
                                                            return Some (Opcode :: ST1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 (ST1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060e000 {
                                                            return Some (Opcode :: ST1D_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL (ST1D_SME_PNg3_SME_Zdnx4_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0600001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 (STNT1B_SME_Zdnx2_SVE_ADDR_RI_S4x2xVL_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa0608001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0604001 {
                                                            return Some (Opcode :: STNT1W_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 (STNT1W_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060c001 {
                                                            return Some (Opcode :: STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0602001 {
                                                            return Some (Opcode :: STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 (STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060a001 {
                                                            return Some (Opcode :: STNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 (STNT1H_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Zdnx4 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0606001 {
                                                            return Some (Opcode :: STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 (STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060e001 {
                                                            return Some (Opcode :: STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe00010 == 0xe0600000 {
                                            return Some (Opcode :: ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                        if insn & 0xffe00010 == 0xe0600000 {
                                            return Some (Opcode :: ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                    }
                                } else {
                                    if insn >> 4 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 0xffe00018 == 0xa0e00000 {
                                                return Some (Opcode :: SUMOPA_SME_ZAda_3b_SVE_Pg3_SVE_Zn_SVE_Zm_16_SME_Pm (SUMOPA_SME_ZAda_3b_SVE_Pg3_SVE_Zn_SVE_Zm_16_SME_Pm :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0e00000 {
                                                return Some (Opcode :: ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr (ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0e00000 {
                                                return Some (Opcode :: ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr (ST1D_SVE_Pg3_SVE_ADDR_R_SME_ZA_HV_idx_ldstr :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe00018 == 0xa0e00010 {
                                            return Some (Opcode :: SUMOPS_SME_ZAda_3b_SVE_Zm_16_SVE_Pg3_SME_Pm_SVE_Zn (SUMOPS_SME_ZAda_3b_SVE_Zm_16_SVE_Pg3_SME_Pm_SVE_Zn :: from (insn))) ;
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 31 & 1 == 0 {
                            if insn & 0x9f000000 == 0x10000000 {
                                return Some(Opcode::ADR_Rd_ADDR_PCREL21(
                                    ADR_Rd_ADDR_PCREL21::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x9f000000 == 0x90000000 {
                                return Some(Opcode::ADRP_Rd_ADDR_ADRP(ADRP_Rd_ADDR_ADRP::from(
                                    insn,
                                )));
                            }
                        }
                    }
                } else {
                    if insn >> 28 & 1 == 0 {
                        if insn >> 21 & 1 == 0 {
                            if insn >> 22 & 1 == 0 {
                                if insn >> 23 & 1 == 0 {
                                    if insn >> 29 & 1 == 0 {
                                        if insn >> 3 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 2 & 1 == 0 {
                                                        if insn & 0xfff0001c == 0xc1000000 {
                                                            return Some (Opcode :: SMLALL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 (SMLALL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0001c == 0xc1000004 {
                                                            return Some (Opcode :: USMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn (USMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100000 {
                                                                return Some (Opcode :: SMLALL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 (SMLALL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108000 {
                                                                return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX4_1_SME_Znx4 (SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX4_1_SME_Znx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100020 {
                                                                return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108020 {
                                                                return Some (Opcode :: USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 (USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 2 & 1 == 0 {
                                                        if insn & 0xfff0001c == 0xc1000010 {
                                                            return Some (Opcode :: UMLALL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm_INDEX4_10 (UMLALL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0001c == 0xc1000014 {
                                                            return Some (Opcode :: SUMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn (SUMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX4_10_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100010 {
                                                                return Some (Opcode :: UMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 (UMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108010 {
                                                                return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100030 {
                                                                return Some (Opcode :: SUMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 (SUMLALL_SME_Znx2_SME_Zm_INDEX4_1_SME_ZA_array_off1x4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108030 {
                                                                return Some (Opcode :: SUMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 (SUMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 4 & 1 == 0 {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn & 0xfff0001c == 0xc1000008 {
                                                        return Some (Opcode :: SMLSLL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 (SMLSLL_SVE_Zn_SME_Zm_INDEX4_10_SME_ZA_array_off2x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff09038 == 0xc1100008 {
                                                            return Some (Opcode :: SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 (SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09078 == 0xc1108008 {
                                                            return Some (Opcode :: SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 (SMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn & 0xfff0001c == 0xc1000018 {
                                                        return Some (Opcode :: UMLSLL_SME_Zm_INDEX4_10_SME_ZA_array_off2x4_SVE_Zn (UMLSLL_SME_Zm_INDEX4_10_SME_ZA_array_off2x4_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff09038 == 0xc1100018 {
                                                            return Some (Opcode :: UMLSLL_SME_Zm_INDEX4_1_SME_Znx2_SME_ZA_array_off1x4 (UMLSLL_SME_Zm_INDEX4_1_SME_Znx2_SME_ZA_array_off1x4 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09078 == 0xc1108018 {
                                                            return Some (Opcode :: UMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 (UMLSLL_SME_Zm_INDEX4_1_SME_ZA_array_off1x4_SME_Znx4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn >> 3 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1000000 {
                                                                return Some (Opcode :: LD1B_SME_Ztx2_STRIDED_SVE_ADDR_RR_SME_PNg3 (LD1B_SME_Ztx2_STRIDED_SVE_ADDR_RR_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1004000 {
                                                                return Some (Opcode :: LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1002000 {
                                                                return Some (Opcode :: LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 (LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1006000 {
                                                                return Some (Opcode :: LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1000008 {
                                                                return Some (Opcode :: LDNT1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR (LDNT1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1004008 {
                                                                return Some (Opcode :: LDNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 (LDNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1002008 {
                                                                return Some (Opcode :: LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1006008 {
                                                                return Some (Opcode :: LDNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 (LDNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffff9c10 == 0xe1000000 {
                                                    return Some (Opcode :: LDR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 (LDR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 3 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0e00c == 0xa1008000 {
                                                                return Some (Opcode :: LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR (LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc1f == 0xe11f8000 {
                                                                return Some (Opcode :: LDR_SIMD_ADDR_SIMPLE_SME_ZT0 (LDR_SIMD_ADDR_SIMPLE_SME_ZT0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100c000 {
                                                            return Some (Opcode :: LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0e00c == 0xa100a000 {
                                                            return Some (Opcode :: LD1H_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 (LD1H_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100e000 {
                                                            return Some (Opcode :: LD1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED (LD1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0e00c == 0xa1008008 {
                                                            return Some (Opcode :: LDNT1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 (LDNT1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100c008 {
                                                            return Some (Opcode :: LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx4_STRIDED (LDNT1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0e00c == 0xa100a008 {
                                                            return Some (Opcode :: LDNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 (LDNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100e008 {
                                                            return Some (Opcode :: LDNT1D_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL3 (LDNT1D_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 3 & 1 == 0 {
                                        if insn >> 4 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0001c == 0x81800000 {
                                                        return Some (Opcode :: BFMOPA_SVE_Zn_SME_ZAda_2b_SME_Pm_SVE_Zm_16_SVE_Pg3 (BFMOPA_SVE_Zn_SME_ZAda_2b_SME_Pm_SVE_Zm_16_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff0101c == 0xc1800000 {
                                                                return Some (Opcode :: SMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn (SMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xfff09838 == 0xc1900000 {
                                                                    return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 (SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09878 == 0xc1908000 {
                                                                    return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 (SMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff01018 == 0xc1801000 {
                                                                return Some (Opcode :: FMLAL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 (FMLAL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xfff09038 == 0xc1901000 {
                                                                    return Some (Opcode :: FMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 (FMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09078 == 0xc1909000 {
                                                                    return Some (Opcode :: FMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 (FMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800000 {
                                                    return Some (Opcode :: USMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 (USMOPA_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0001c == 0x81800010 {
                                                        return Some (Opcode :: BFMOPS_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Zm_16_SVE_Pg3 (BFMOPS_SME_Pm_SME_ZAda_2b_SVE_Zn_SVE_Zm_16_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff0101c == 0xc1800010 {
                                                                return Some (Opcode :: UMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn (UMLALL_SME_ZA_array_off2x4_SME_Zm_INDEX3_10_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xfff09838 == 0xc1900010 {
                                                                    return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx2 (UMLALL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09878 == 0xc1908010 {
                                                                    return Some (Opcode :: UMLALL_SME_Zm_INDEX3_1_SME_Znx4_SME_ZA_array_off1x4 (UMLALL_SME_Zm_INDEX3_1_SME_Znx4_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff01018 == 0xc1801010 {
                                                                return Some (Opcode :: BFMLAL_SVE_Zn_SME_Zm_INDEX3_10_SME_ZA_array_off3x2 (BFMLAL_SVE_Zn_SME_Zm_INDEX3_10_SME_ZA_array_off3x2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xfff09038 == 0xc1901010 {
                                                                    return Some (Opcode :: BFMLAL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 (BFMLAL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09078 == 0xc1909010 {
                                                                    return Some (Opcode :: BFMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx4 (BFMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800010 {
                                                    return Some (Opcode :: USMOPS_SVE_Zn_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3 (USMOPS_SVE_Zn_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 4 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff0101c == 0xc1800008 {
                                                            return Some (Opcode :: SMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn (SMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09838 == 0xc1900008 {
                                                                return Some (Opcode :: SMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 (SMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09878 == 0xc1908008 {
                                                                return Some (Opcode :: SMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX3_1 (SMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff01018 == 0xc1801008 {
                                                            return Some (Opcode :: FMLSL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 (FMLSL_SVE_Zn_SME_ZA_array_off3x2_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1901008 {
                                                                return Some (Opcode :: FMLSL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 (FMLSL_SME_Zm_INDEX3_2_SME_Znx2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1909008 {
                                                                return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800008 {
                                                    return Some (Opcode :: UMOPA_SVE_Pg3_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Zn (UMOPA_SVE_Pg3_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Zn :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff0101c == 0xc1800018 {
                                                            return Some (Opcode :: UMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn (UMLSLL_SME_Zm_INDEX3_10_SME_ZA_array_off2x4_SVE_Zn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09838 == 0xc1900018 {
                                                                return Some (Opcode :: UMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 (UMLSLL_SME_Znx2_SME_Zm_INDEX3_1_SME_ZA_array_off1x4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09878 == 0xc1908018 {
                                                                return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 (UMLSLL_SME_ZA_array_off1x4_SME_Zm_INDEX3_1_SME_Znx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff01018 == 0xc1801018 {
                                                            return Some (Opcode :: BFMLSL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn (BFMLSL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1901018 {
                                                                return Some (Opcode :: BFMLSL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 (BFMLSL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1909018 {
                                                                return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SME_Zm_INDEX3_2_SME_Znx4 (BFMLSL_SME_ZA_array_off2x2_SME_Zm_INDEX3_2_SME_Znx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800018 {
                                                    return Some (Opcode :: UMOPS_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SVE_Zm_16 (UMOPS_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 23 & 1 == 0 {
                                    if insn >> 3 & 1 == 0 {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 20 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1400000 {
                                                            return Some (Opcode :: LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1404000 {
                                                            return Some (Opcode :: LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1402000 {
                                                            return Some (Opcode :: LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL_SME_PNg3 (LD1H_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1406000 {
                                                            return Some (Opcode :: LD1D_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED (LD1D_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500000 {
                                                                return Some (Opcode :: FMLA_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 (FMLA_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501000 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500020 {
                                                                return Some (Opcode :: SVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 (SVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501020 {
                                                                return Some (Opcode :: SDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 (SDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500010 {
                                                                return Some (Opcode :: FMLS_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 (FMLS_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501010 {
                                                                return Some (Opcode :: UDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 (UDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500030 {
                                                                return Some (Opcode :: UVDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX2 (UVDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501030 {
                                                                return Some (Opcode :: UDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 (UDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 20 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e00c == 0xa1408000 {
                                                            return Some (Opcode :: LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED (LD1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140c000 {
                                                            return Some (Opcode :: LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e00c == 0xa140a000 {
                                                            return Some (Opcode :: LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140e000 {
                                                            return Some (Opcode :: LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508000 {
                                                                return Some (Opcode :: FMLA_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 (FMLA_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509000 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 (SDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508020 {
                                                                return Some (Opcode :: SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509020 {
                                                                return Some (Opcode :: SDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 (SDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508010 {
                                                                return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509010 {
                                                                return Some (Opcode :: UDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 (UDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508030 {
                                                                return Some (Opcode :: UVDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 (UVDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509030 {
                                                                return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 20 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1400008 {
                                                            return Some (Opcode :: LDNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED (LDNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1404008 {
                                                            return Some (Opcode :: LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED (LDNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1402008 {
                                                            return Some (Opcode :: LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1406008 {
                                                            return Some (Opcode :: LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500008 {
                                                                return Some (Opcode :: FVDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 (FVDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501008 {
                                                                return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff09038 == 0xc1501028 {
                                                            return Some (Opcode :: USDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 (USDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500018 {
                                                                return Some (Opcode :: BFVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 (BFVDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501018 {
                                                                return Some (Opcode :: BFDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 (BFDOT_SME_Zm_INDEX2_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff09038 == 0xc1501038 {
                                                            return Some (Opcode :: SUDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 (SUDOT_SME_Znx2_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 20 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e00c == 0xa1408008 {
                                                            return Some (Opcode :: LDNT1B_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL (LDNT1B_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140c008 {
                                                            return Some (Opcode :: LDNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 (LDNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xfff0e00c == 0xa140a008 {
                                                            return Some (Opcode :: LDNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 (LDNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140e008 {
                                                            return Some (Opcode :: LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED (LDNT1D_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn & 0xfff09078 == 0xc1509008 {
                                                            return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508028 {
                                                                return Some (Opcode :: USVDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx4 (USVDOT_SME_Zm_INDEX2_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509028 {
                                                                return Some (Opcode :: USDOT_SME_Zm_INDEX2_SME_Znx4_SME_ZA_array_off3_0 (USDOT_SME_Zm_INDEX2_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 5 & 1 == 0 {
                                                        if insn & 0xfff09078 == 0xc1509018 {
                                                            return Some (Opcode :: BFDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 (BFDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508038 {
                                                                return Some (Opcode :: SUVDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 (SUVDOT_SME_ZA_array_off3_0_SME_Zm_INDEX2_SME_Znx4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509038 {
                                                                return Some (Opcode :: SUDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 (SUDOT_SME_Znx4_SME_Zm_INDEX2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 4 & 1 == 0 {
                                        if insn >> 29 & 1 == 0 {
                                            if insn >> 3 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff09838 == 0xc1d00000 {
                                                            return Some (Opcode :: FMLA_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX1 (FMLA_SME_Znx2_SME_ZA_array_off3_0_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08000 {
                                                            return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff01018 == 0xc1c01000 {
                                                            return Some (Opcode :: SMLAL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn (SMLAL_SME_Zm_INDEX3_10_SME_ZA_array_off3x2_SVE_Zn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1d01000 {
                                                                return Some (Opcode :: SMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 (SMLAL_SME_Zm_INDEX3_2_SME_ZA_array_off2x2_SME_Znx2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1d09000 {
                                                                return Some (Opcode :: SMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 (SMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09838 == 0xc1d00008 {
                                                                return Some (Opcode :: SDOT_SME_Znx2_SME_Zm_INDEX1_SME_ZA_array_off3_0 (SDOT_SME_Znx2_SME_Zm_INDEX1_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09878 == 0xc1d08008 {
                                                                return Some (Opcode :: SDOT_SME_Znx4_SME_Zm_INDEX1_SME_ZA_array_off3_0 (SDOT_SME_Znx4_SME_Zm_INDEX1_SME_ZA_array_off3_0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08808 {
                                                            return Some (Opcode :: SVDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 (SVDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff01018 == 0xc1c01008 {
                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1d01008 {
                                                                return Some (Opcode :: SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 (SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1d09008 {
                                                                return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe00018 == 0xa1c00000 {
                                                    return Some (Opcode :: USMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm (USMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_ZAda_3b_SME_Pm :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe1c00000 {
                                                    return Some (Opcode :: LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 (LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe1c00000 {
                                                    return Some (Opcode :: LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 (LD1Q_SME_ZA_HV_idx_ldstr_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 3 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff09838 == 0xc1d00010 {
                                                            return Some (Opcode :: FMLS_SME_Zm_INDEX1_SME_Znx2_SME_ZA_array_off3_0 (FMLS_SME_Zm_INDEX1_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08010 {
                                                            return Some (Opcode :: FMLS_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 (FMLS_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff01018 == 0xc1c01010 {
                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfff09038 == 0xc1d01010 {
                                                                return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1d09010 {
                                                                return Some (Opcode :: UMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 (UMLAL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe00018 == 0xa1c00010 {
                                                    return Some (Opcode :: USMOPS_SME_ZAda_3b_SVE_Zn_SME_Pm_SVE_Zm_16_SVE_Pg3 (USMOPS_SME_ZAda_3b_SVE_Zn_SME_Pm_SVE_Zm_16_SVE_Pg3 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff09838 == 0xc1d00018 {
                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 (UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08018 {
                                                            return Some (Opcode :: UDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 (UDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xfff09878 == 0xc1d08818 {
                                                        return Some (Opcode :: UVDOT_SME_Zm_INDEX1_SME_ZA_array_off3_0_SME_Znx4 (UVDOT_SME_Zm_INDEX1_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn & 0xfff01018 == 0xc1c01018 {
                                                        return Some (Opcode :: UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff09038 == 0xc1d01018 {
                                                            return Some (Opcode :: UMLSL_SME_Znx2_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 (UMLSL_SME_Znx2_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09078 == 0xc1d09018 {
                                                            return Some (Opcode :: UMLSL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 (UMLSL_SME_Znx4_SME_Zm_INDEX3_2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 4 & 1 == 0 {
                                        if insn & 0xffe0001c == 0x81a00000 {
                                            return Some (Opcode :: FMOPA_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn (FMOPA_SVE_Zm_16_SME_ZAda_2b_SME_Pm_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                        }
                                    } else {
                                        if insn & 0xffe0001c == 0x81a00010 {
                                            return Some (Opcode :: FMOPS_SME_Pm_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn (FMOPS_SME_Pm_SVE_Zm_16_SME_ZAda_2b_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                        }
                                    }
                                } else {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 3 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 2 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1200000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1300000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm (SMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffa19c3e
                                                                            == 0xc1a00000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_Zmx2_SME_Znx2_SME_ZA_array_off1x4 (SMLALL_SME_Zmx2_SME_Znx2_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffa39c7e
                                                                            == 0xc1a10000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_Zmx4_SME_Znx4_SME_ZA_array_off1x4 (SMLALL_SME_Zmx4_SME_Znx4_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1e
                                                                            == 0xc1200004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN (USMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1e
                                                                            == 0xc1300004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm (USMLALL_SVE_ZnxN_SME_ZA_array_off1x4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3e
                                                                            == 0xc1a00004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_Znx2_SME_Zmx2_SME_ZA_array_off1x4 (USMLALL_SME_Znx2_SME_Zmx2_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7e
                                                                            == 0xc1a10004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 (USMLALL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1201000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (FDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1301000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 (FDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffe19c38
                                                                        == 0xc1a01000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 (FDOT_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe39c78
                                                                        == 0xc1a11000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zmx4 (FDOT_SME_Znx4_SME_ZA_array_off3_0_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 (FMLAL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 (FMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 (FMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_Zm_SME_ZA_array_off2x2_SVE_ZnxN (SMLAL_SME_Zm_SME_ZA_array_off2x2_SVE_ZnxN :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_Zm_S_H_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H (SMLAL_SME_Zm_S_H_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 (SMLAL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (FMLA_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_Zm_S_S_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S (FMLA_SME_Zm_S_S_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 (FMLA_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 (FMLA_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 2 & 1 == 0 {
                                                                if insn & 0xffb09c1c == 0xc1200400 {
                                                                    return Some (Opcode :: SMLALL_SME_Zm_SVE_Zn_SME_ZA_array_off2x4 (SMLALL_SME_Zm_SVE_Zn_SME_ZA_array_off2x4 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c1c == 0xc1200404 {
                                                                    return Some (Opcode :: USMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 (USMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (SDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_Zmx2_SME_ZA_array_off3_0_SME_Znx2 (SDOT_SME_Zmx2_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 (SDOT_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c00 {
                                                                    return Some (Opcode :: FMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 (FMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c00 {
                                                                    return Some (Opcode :: SMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 (SMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c00 {
                                                                    return Some (Opcode :: FADD_SME_ZA_array_off3_0_SME_Znx2 (FADD_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c00 {
                                                                    return Some (Opcode :: FADD_SME_Znx4_SME_ZA_array_off3_0 (FADD_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 2 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1200010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN (UMLALL_SME_Zm_SME_ZA_array_off1x4_SVE_ZnxN :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1300010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffa19c3e
                                                                            == 0xc1a00010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Zmx2_SME_Znx2 (UMLALL_SME_ZA_array_off1x4_SME_Zmx2_SME_Znx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffa39c7e
                                                                            == 0xc1a10010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 (UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xfff09c1e
                                                                        == 0xc1200014
                                                                    {
                                                                        return Some (Opcode :: SUMLALL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN (SUMLALL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c1e
                                                                        == 0xc1300014
                                                                    {
                                                                        return Some (Opcode :: SUMLALL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 (SUMLALL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1201010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 (BFDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1301010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm (BFDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffe19c38
                                                                        == 0xc1a01010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 (BFDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe39c78
                                                                        == 0xc1a11010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 (BFMLAL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SME_Zmx2_SME_Znx2 (BFMLAL_SME_ZA_array_off2x2_SME_Zmx2_SME_Znx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 (BFMLAL_SME_ZA_array_off2x2_SME_Zmx4_SME_Znx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm (UMLAL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 (UMLAL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201810
                                                                    {
                                                                        return Some (Opcode :: ADD_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 (ADD_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (ADD_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 (ADD_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 (ADD_SME_Zmx4_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffb09c1c == 0xc1200410 {
                                                                return Some (Opcode :: UMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 (UMLALL_SVE_Zn_SME_Zm_SME_ZA_array_off2x4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (UDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 (UDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 (UDOT_SME_ZA_array_off3_0_SME_Zmx2_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 (UDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c10 {
                                                                    return Some (Opcode :: BFMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 (BFMLAL_SME_Zm_SVE_Zn_SME_ZA_array_off3x2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c10 {
                                                                    return Some (Opcode :: UMLAL_SME_ZA_array_off3x2_SME_Zm_SVE_Zn (UMLAL_SME_ZA_array_off3x2_SME_Zm_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c10 {
                                                                    return Some (Opcode :: ADD_SME_Znx2_SME_ZA_array_off3_0 (ADD_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c10 {
                                                                    return Some (Opcode :: ADD_SME_Znx4_SME_ZA_array_off3_0 (ADD_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 4 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xffb09c1e == 0xc1200008 {
                                                                    return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffb09c1e == 0xc1300008 {
                                                                    return Some (Opcode :: SMLSLL_SME_Zm_SVE_ZnxN_SME_ZA_array_off1x4 (SMLSLL_SME_Zm_SVE_ZnxN_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffa19c3e == 0xc1a00008 {
                                                                    return Some (Opcode :: SMLSLL_SME_Znx2_SME_ZA_array_off1x4_SME_Zmx2 (SMLSLL_SME_Znx2_SME_ZA_array_off1x4_SME_Zmx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa39c7e == 0xc1a10008 {
                                                                    return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Zmx4_SME_Znx4 (SMLSLL_SME_ZA_array_off1x4_SME_Zmx4_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 (FMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 (FMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 (FMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm (SMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 (SMLSL_SME_Znx2_SME_ZA_array_off2x2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 (SMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (FMLS_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 (FMLS_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 (FMLS_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffb09c1c == 0xc1200408 {
                                                                return Some (Opcode :: SMLSLL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm (SMLSLL_SVE_Zn_SME_ZA_array_off2x4_SME_Zm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1201408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 (USDOT_SVE_ZnxN_SME_Zm_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1301408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 (USDOT_SME_Zm_SVE_ZnxN_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c38
                                                                            == 0xc1a01408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 (USDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c78
                                                                            == 0xc1a11408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 (USDOT_SME_ZA_array_off3_0_SME_Zmx4_SME_Znx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1601408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H (SDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1701408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN (SDOT_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c38
                                                                            == 0xc1e01408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 (SDOT_SME_Znx2_SME_ZA_array_off3_0_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c78
                                                                            == 0xc1e11408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c08 {
                                                                    return Some (Opcode :: FMLSL_SME_Zm_SME_ZA_array_off3x2_SVE_Zn (FMLSL_SME_Zm_SME_ZA_array_off3x2_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c08 {
                                                                    return Some (Opcode :: SMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 (SMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c08 {
                                                                    return Some (Opcode :: FSUB_SME_ZA_array_off3_0_SME_Znx2 (FSUB_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c08 {
                                                                    return Some (Opcode :: FSUB_SME_Znx4_SME_ZA_array_off3_0 (FSUB_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xffb09c1e == 0xc1200018 {
                                                                    return Some (Opcode :: UMLSLL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 (UMLSLL_SVE_ZnxN_SME_Zm_SME_ZA_array_off1x4 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffb09c1e == 0xc1300018 {
                                                                    return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN (UMLSLL_SME_ZA_array_off1x4_SME_Zm_SVE_ZnxN :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffa19c3e == 0xc1a00018 {
                                                                    return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 (UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa39c7e == 0xc1a10018 {
                                                                    return Some (Opcode :: UMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 (UMLSLL_SME_Znx4_SME_ZA_array_off1x4_SME_Zmx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm (BFMLSL_SVE_ZnxN_SME_ZA_array_off2x2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 (BFMLSL_SME_Znx2_SME_Zmx2_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 (BFMLSL_SME_Zmx4_SME_ZA_array_off2x2_SME_Znx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 (UMLSL_SME_Zm_SVE_ZnxN_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 (UMLSL_SVE_ZnxN_SME_Zm_SME_ZA_array_off2x2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 (UMLSL_SME_Zmx2_SME_ZA_array_off2x2_SME_Znx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 (UMLSL_SME_Znx4_SME_ZA_array_off2x2_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN (SUB_SME_ZA_array_off3_0_SME_Zm_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 (SUB_SME_Znx2_SME_Zmx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 (SUB_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffb09c1c == 0xc1200418 {
                                                                return Some (Opcode :: UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm (UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1201418
                                                                    {
                                                                        return Some (Opcode :: SUDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm (SUDOT_SVE_ZnxN_SME_ZA_array_off3_0_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1301418
                                                                    {
                                                                        return Some (Opcode :: SUDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN (SUDOT_SME_Zm_SME_ZA_array_off3_0_SVE_ZnxN :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1601418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H (UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1701418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_c1701418 (UDOT_SME_Zm_S_H_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_c1701418 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 16 & 1 == 0 {
                                                                        if insn & 0xffe19c38
                                                                            == 0xc1e01418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 (UDOT_SME_Zmx2_SME_Znx2_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c78
                                                                            == 0xc1e11418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 (UDOT_SME_Znx4_SME_Zmx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c18 {
                                                                    return Some (Opcode :: BFMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 (BFMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c18 {
                                                                    return Some (Opcode :: UMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 (UMLSL_SVE_Zn_SME_Zm_SME_ZA_array_off3x2 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c18 {
                                                                    return Some (Opcode :: SUB_SME_ZA_array_off3_0_SME_Znx2 (SUB_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c18 {
                                                                    return Some (Opcode :: SUB_SME_Znx4_SME_ZA_array_off3_0 (SUB_SME_Znx4_SME_ZA_array_off3_0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn & 0xff21e021 == 0xc1208000 {
                                                        return Some (Opcode :: SEL_SME_Zdnx2_SME_Znx2_SME_PNg3_SME_Zmx2 (SEL_SME_Zdnx2_SME_Znx2_SME_PNg3_SME_Zmx2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff23e063 == 0xc1218000 {
                                                        return Some (Opcode :: SEL_SME_Zdnx4_SME_Znx4_SME_PNg3_SME_Zmx4 (SEL_SME_Zdnx4_SME_Znx4_SME_PNg3_SME_Zmx4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc01 == 0xc120c000 {
                                                                    return Some (Opcode :: FCLAMP_SVE_Zm_16_SME_Zdnx2_SVE_Zn (FCLAMP_SVE_Zm_16_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc01 == 0xc120d000 {
                                                                    return Some (Opcode :: ZIP_SME_Zdnx2_SVE_Zm_16_SVE_Zn (ZIP_SME_Zdnx2_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc01 == 0xc120d001 {
                                                                return Some (Opcode :: UZP_SVE_Zm_16_SME_Zdnx2_SVE_Zn (UZP_SVE_Zm_16_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc03 == 0xc120c800 {
                                                                return Some (Opcode :: FCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 (FCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 5 & 1 == 0 {
                                                                if insn >> 6 & 1 == 0 {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120d800
                                                                    {
                                                                        return Some (Opcode :: SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 (SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120d840
                                                                    {
                                                                        return Some (Opcode :: SQRSHRU_SME_SHRIMM5_SVE_Zd_SME_Znx4 (SQRSHRU_SME_SHRIMM5_SVE_Zd_SME_Znx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc60 == 0xc120d820 {
                                                                    return Some (Opcode :: UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 (UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 1 == 0 {
                                                                if insn & 0xff20fc01 == 0xc120c400 {
                                                                    return Some (Opcode :: SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc01 == 0xc120c401 {
                                                                    return Some (Opcode :: UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx2 (UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx2 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 1 == 0 {
                                                                    if insn & 0xffe0fc01
                                                                        == 0xc120d400
                                                                    {
                                                                        return Some (Opcode :: ZIP_SVE_Zm_16_SME_Zdnx2_SVE_Zn (ZIP_SVE_Zm_16_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc01
                                                                        == 0xc120d401
                                                                    {
                                                                        return Some (Opcode :: UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 5 & 1 == 0 {
                                                                    if insn >> 20 & 1 == 0 {
                                                                        if insn & 0xfff0fc20
                                                                            == 0xc1e0d400
                                                                        {
                                                                            return Some (Opcode :: SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 (SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc20
                                                                            == 0xc1f0d400
                                                                        {
                                                                            return Some (Opcode :: SQRSHRU_SME_SHRIMM4_SVE_Zd_SME_Znx2 (SQRSHRU_SME_SHRIMM4_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc20
                                                                        == 0xc1e0d420
                                                                    {
                                                                        return Some (Opcode :: UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 (UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 1 == 0 {
                                                                if insn & 0xff20fc03 == 0xc120cc00 {
                                                                    return Some (Opcode :: SCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 (SCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc03 == 0xc120cc01 {
                                                                    return Some (Opcode :: UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 (UCLAMP_SVE_Zm_16_SVE_Zn_SME_Zdnx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 5 & 1 == 0 {
                                                                if insn >> 6 & 1 == 0 {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120dc00
                                                                    {
                                                                        return Some (Opcode :: SQRSHRN_SME_Znx4_SME_SHRIMM5_SVE_Zd (SQRSHRN_SME_Znx4_SME_SHRIMM5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120dc40
                                                                    {
                                                                        return Some (Opcode :: SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 (SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc60 == 0xc120dc20 {
                                                                    return Some (Opcode :: UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 (UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 10 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 1 == 0 {
                                                                if insn >> 5 & 1 == 0 {
                                                                    if insn >> 8 & 1 == 0 {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a000
                                                                        {
                                                                            return Some (Opcode :: SMAX_SME_Zm_SME_Zdnx2 (SMAX_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn >> 9 & 1 == 0 {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a100
                                                                            {
                                                                                return Some (Opcode :: FMAX_SME_Zdnx2_SME_Zm (FMAX_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a300
                                                                            {
                                                                                return Some (Opcode :: ADD_SME_Zm_SME_Zdnx2 (ADD_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 8 & 1 == 0 {
                                                                        if insn >> 9 & 1 == 0 {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a020
                                                                            {
                                                                                return Some (Opcode :: SMIN_SME_Zdnx2_SME_Zm (SMIN_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a220
                                                                            {
                                                                                return Some (Opcode :: SRSHL_SME_Zm_SME_Zdnx2 (SRSHL_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a120
                                                                        {
                                                                            return Some (Opcode :: FMAXNM_SME_Zm_SME_Zdnx2 (FMAXNM_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 5 & 1 == 0 {
                                                                    if insn >> 8 & 1 == 0 {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a001
                                                                        {
                                                                            return Some (Opcode :: UMAX_SME_Zdnx2_SME_Zm (UMAX_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a101
                                                                        {
                                                                            return Some (Opcode :: FMIN_SME_Zdnx2_SME_Zm (FMIN_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 8 & 1 == 0 {
                                                                        if insn >> 9 & 1 == 0 {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a021
                                                                            {
                                                                                return Some (Opcode :: UMIN_SME_Zm_SME_Zdnx2 (UMIN_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a221
                                                                            {
                                                                                return Some (Opcode :: URSHL_SME_Zm_SME_Zdnx2 (URSHL_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a121
                                                                        {
                                                                            return Some (Opcode :: FMINNM_SME_Zm_SME_Zdnx2 (FMINNM_SME_Zm_SME_Zdnx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 5 & 1 == 0 {
                                                                    if insn >> 17 & 1 == 0 {
                                                                        if insn >> 18 & 1 == 0 {
                                                                            if insn >> 19 & 1 == 0 {
                                                                                if insn >> 22 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc20 == 0xc120e000 { return Some (Opcode :: FCVT_SME_Znx2_SVE_Zd (FCVT_SME_Znx2_SVE_Zd :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc20 == 0xc160e000 { return Some (Opcode :: BFCVT_SVE_Zd_SME_Znx2 (BFCVT_SVE_Zd_SME_Znx2 :: from (insn))) ; }
                                                                                }
                                                                            } else {
                                                                                if insn >> 20 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc1a8e000 { return Some (Opcode :: FRINTN_SME_Zdnx2_SME_Znx2 (FRINTN_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc1b8e000 { return Some (Opcode :: FRINTN_SME_Zdnx4_SME_Znx4 (FRINTN_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn >> 20 & 1 == 0 {
                                                                                if insn & 0xfffffc21
                                                                                    == 0xc1ace000
                                                                                {
                                                                                    return Some (Opcode :: FRINTA_SME_Znx2_SME_Zdnx2 (FRINTA_SME_Znx2_SME_Zdnx2 :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xfffffc63
                                                                                    == 0xc1bce000
                                                                                {
                                                                                    return Some (Opcode :: FRINTA_SME_Znx4_SME_Zdnx4 (FRINTA_SME_Znx4_SME_Zdnx4 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn >> 18 & 1 == 0 {
                                                                            if insn >> 19 & 1 == 0 {
                                                                                if insn >> 20 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc122e000 { return Some (Opcode :: SCVTF_SME_Znx2_SME_Zdnx2 (SCVTF_SME_Znx2_SME_Zdnx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc132e000 { return Some (Opcode :: SCVTF_SME_Zdnx4_SME_Znx4 (SCVTF_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            } else {
                                                                                if insn >> 20 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc1aae000 { return Some (Opcode :: FRINTM_SME_Znx2_SME_Zdnx2 (FRINTM_SME_Znx2_SME_Zdnx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc1bae000 { return Some (Opcode :: FRINTM_SME_Zdnx4_SME_Znx4 (FRINTM_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn >> 1 & 1 == 0 {
                                                                                if insn & 0xff3ffc63
                                                                                    == 0xc136e000
                                                                                {
                                                                                    return Some (Opcode :: ZIP_SME_Zdnx4_SME_Znx4 (ZIP_SME_Zdnx4_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff3ffc63
                                                                                    == 0xc136e002
                                                                                {
                                                                                    return Some (Opcode :: UZP_SME_Znx4_SME_Zdnx4 (UZP_SME_Znx4_SME_Zdnx4 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 17 & 1 == 0 {
                                                                        if insn >> 22 & 1 == 0 {
                                                                            if insn & 0xfffffc20
                                                                                == 0xc120e020
                                                                            {
                                                                                return Some (Opcode :: FCVTN_SVE_Zd_SME_Znx2 (FCVTN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xfffffc20
                                                                                == 0xc160e020
                                                                            {
                                                                                return Some (Opcode :: BFCVTN_SME_Znx2_SVE_Zd (BFCVTN_SME_Znx2_SVE_Zd :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn >> 20 & 1 == 0 {
                                                                            if insn & 0xfffffc21
                                                                                == 0xc122e020
                                                                            {
                                                                                return Some (Opcode :: UCVTF_SME_Zdnx2_SME_Znx2 (UCVTF_SME_Zdnx2_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xfffffc63
                                                                                == 0xc132e020
                                                                            {
                                                                                return Some (Opcode :: UCVTF_SME_Zdnx4_SME_Znx4 (UCVTF_SME_Zdnx4_SME_Znx4 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 17 & 1 == 0 {
                                                                    if insn & 1 == 0 {
                                                                        if insn >> 18 & 1 == 0 {
                                                                            if insn >> 5 & 1 == 0 {
                                                                                if insn >> 19 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn >> 20
                                                                                        & 1
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xfffffc21 == 0xc121e000 { return Some (Opcode :: FCVTZS_SME_Zdnx2_SME_Znx2 (FCVTZS_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xfffffc63 == 0xc131e000 { return Some (Opcode :: FCVTZS_SME_Zdnx4_SME_Znx4 (FCVTZS_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                } else {
                                                                                    if insn >> 20
                                                                                        & 1
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xfffffc21 == 0xc1a9e000 { return Some (Opcode :: FRINTP_SME_Znx2_SME_Zdnx2 (FRINTP_SME_Znx2_SME_Zdnx2 :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xfffffc63 == 0xc1b9e000 { return Some (Opcode :: FRINTP_SME_Znx4_SME_Zdnx4 (FRINTP_SME_Znx4_SME_Zdnx4 :: from (insn))) ; }
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if insn >> 20 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc121e020 { return Some (Opcode :: FCVTZU_SME_Znx2_SME_Zdnx2 (FCVTZU_SME_Znx2_SME_Zdnx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc131e020 { return Some (Opcode :: FCVTZU_SME_Znx4_SME_Zdnx4 (FCVTZU_SME_Znx4_SME_Zdnx4 :: from (insn))) ; }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn >> 20 & 1 == 0 {
                                                                                if insn & 0xff3ffc01
                                                                                    == 0xc125e000
                                                                                {
                                                                                    return Some (Opcode :: SUNPK_SME_Zdnx2_SVE_Zn (SUNPK_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff3ffc23
                                                                                    == 0xc135e000
                                                                                {
                                                                                    return Some (Opcode :: SUNPK_SME_Zdnx4_SME_Znx2 (SUNPK_SME_Zdnx4_SME_Znx2 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn >> 20 & 1 == 0 {
                                                                            if insn & 0xff3ffc01
                                                                                == 0xc125e001
                                                                            {
                                                                                return Some (Opcode :: UUNPK_SME_Zdnx2_SVE_Zn (UUNPK_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff3ffc23
                                                                                == 0xc135e001
                                                                            {
                                                                                return Some (Opcode :: UUNPK_SME_Znx2_SME_Zdnx4 (UUNPK_SME_Znx2_SME_Zdnx4 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 5 & 1 == 0 {
                                                                        if insn >> 18 & 1 == 0 {
                                                                            if insn >> 20 & 1 == 0 {
                                                                                if insn >> 22 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc20 == 0xc123e000 { return Some (Opcode :: SQCVT_SVE_Zd_SME_Znx2 (SQCVT_SVE_Zd_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc20 == 0xc163e000 { return Some (Opcode :: SQCVTU_SME_Znx2_SVE_Zd (SQCVTU_SME_Znx2_SVE_Zd :: from (insn))) ; }
                                                                                }
                                                                            } else {
                                                                                if insn >> 6 & 1
                                                                                    == 0
                                                                                {
                                                                                    if insn >> 22
                                                                                        & 1
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xff7ffc60 == 0xc133e000 { return Some (Opcode :: SQCVT_SME_Znx4_SVE_Zd (SQCVT_SME_Znx4_SVE_Zd :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xff7ffc60 == 0xc173e000 { return Some (Opcode :: SQCVTU_SVE_Zd_SME_Znx4 (SQCVTU_SVE_Zd_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                } else {
                                                                                    if insn >> 22
                                                                                        & 1
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xff7ffc60 == 0xc133e040 { return Some (Opcode :: SQCVTN_SME_Znx4_SVE_Zd (SQCVTN_SME_Znx4_SVE_Zd :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xff7ffc60 == 0xc173e040 { return Some (Opcode :: SQCVTUN_SVE_Zd_SME_Znx4 (SQCVTUN_SVE_Zd_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn >> 1 & 1 == 0 {
                                                                                if insn & 0xfffffc63
                                                                                    == 0xc137e000
                                                                                {
                                                                                    return Some (Opcode :: ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q (ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xfffffc63
                                                                                    == 0xc137e002
                                                                                {
                                                                                    return Some (Opcode :: UZP_SME_Znx4_S_Q_SME_Zdnx4_S_Q (UZP_SME_Znx4_S_Q_SME_Zdnx4_S_Q :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn >> 20 & 1 == 0 {
                                                                            if insn & 0xfffffc20
                                                                                == 0xc123e020
                                                                            {
                                                                                return Some (Opcode :: UQCVT_SVE_Zd_SME_Znx2 (UQCVT_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn >> 6 & 1 == 0 {
                                                                                if insn & 0xff7ffc60
                                                                                    == 0xc133e020
                                                                                {
                                                                                    return Some (Opcode :: UQCVT_SVE_Zd_SME_Znx4 (UQCVT_SVE_Zd_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff7ffc60
                                                                                    == 0xc133e060
                                                                                {
                                                                                    return Some (Opcode :: UQCVTN_SME_Znx4_SVE_Zd (UQCVTN_SME_Znx4_SVE_Zd :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 1 == 0 {
                                                            if insn >> 5 & 1 == 0 {
                                                                if insn >> 8 & 1 == 0 {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b000
                                                                    {
                                                                        return Some (Opcode :: SMAX_SME_Zdnx2_SME_Zmx2 (SMAX_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b100
                                                                    {
                                                                        return Some (Opcode :: FMAX_SME_Zdnx2_SME_Zmx2 (FMAX_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 8 & 1 == 0 {
                                                                    if insn >> 9 & 1 == 0 {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b020
                                                                        {
                                                                            return Some (Opcode :: SMIN_SME_Zmx2_SME_Zdnx2 (SMIN_SME_Zmx2_SME_Zdnx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b220
                                                                        {
                                                                            return Some (Opcode :: SRSHL_SME_Zdnx2_SME_Zmx2 (SRSHL_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b120
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SME_Zdnx2_SME_Zmx2 (FMAXNM_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 5 & 1 == 0 {
                                                                if insn >> 8 & 1 == 0 {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b001
                                                                    {
                                                                        return Some (Opcode :: UMAX_SME_Zdnx2_SME_Zmx2 (UMAX_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b101
                                                                    {
                                                                        return Some (Opcode :: FMIN_SME_Zdnx2_SME_Zmx2 (FMIN_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 8 & 1 == 0 {
                                                                    if insn >> 9 & 1 == 0 {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b021
                                                                        {
                                                                            return Some (Opcode :: UMIN_SME_Zmx2_SME_Zdnx2 (UMIN_SME_Zmx2_SME_Zdnx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b221
                                                                        {
                                                                            return Some (Opcode :: URSHL_SME_Zmx2_SME_Zdnx2 (URSHL_SME_Zmx2_SME_Zdnx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b121
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SME_Zdnx2_SME_Zmx2 (FMINNM_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 1 == 0 {
                                                        if insn >> 5 & 1 == 0 {
                                                            if insn >> 8 & 1 == 0 {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a800
                                                                    {
                                                                        return Some (Opcode :: SMAX_SME_Zdnx4_SME_Zm (SMAX_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b800
                                                                    {
                                                                        return Some (Opcode :: SMAX_SME_Zmx4_SME_Zdnx4 (SMAX_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 9 & 1 == 0 {
                                                                    if insn >> 12 & 1 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120a900
                                                                        {
                                                                            return Some (Opcode :: FMAX_SME_Zm_SME_Zdnx4 (FMAX_SME_Zm_SME_Zdnx4 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120b900
                                                                        {
                                                                            return Some (Opcode :: FMAX_SME_Zmx4_SME_Zdnx4 (FMAX_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120ab00
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_Zdnx4_SME_Zm (ADD_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 8 & 1 == 0 {
                                                                if insn >> 9 & 1 == 0 {
                                                                    if insn >> 12 & 1 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120a820
                                                                        {
                                                                            return Some (Opcode :: SMIN_SME_Zdnx4_SME_Zm (SMIN_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120b820
                                                                        {
                                                                            return Some (Opcode :: SMIN_SME_Zmx4_SME_Zdnx4 (SMIN_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 12 & 1 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120aa20
                                                                        {
                                                                            return Some (Opcode :: SRSHL_SME_Zdnx4_SME_Zm (SRSHL_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120ba20
                                                                        {
                                                                            return Some (Opcode :: SRSHL_SME_Zmx4_SME_Zdnx4 (SRSHL_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a920
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SME_Zdnx4_SME_Zm (FMAXNM_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b920
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SME_Zmx4_SME_Zdnx4 (FMAXNM_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 5 & 1 == 0 {
                                                            if insn >> 8 & 1 == 0 {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a801
                                                                    {
                                                                        return Some (Opcode :: UMAX_SME_Zdnx4_SME_Zm (UMAX_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b801
                                                                    {
                                                                        return Some (Opcode :: UMAX_SME_Zmx4_SME_Zdnx4 (UMAX_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a901
                                                                    {
                                                                        return Some (Opcode :: FMIN_SME_Zdnx4_SME_Zm (FMIN_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b901
                                                                    {
                                                                        return Some (Opcode :: FMIN_SME_Zdnx4_SME_Zmx4 (FMIN_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 8 & 1 == 0 {
                                                                if insn >> 9 & 1 == 0 {
                                                                    if insn >> 12 & 1 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120a821
                                                                        {
                                                                            return Some (Opcode :: UMIN_SME_Zm_SME_Zdnx4 (UMIN_SME_Zm_SME_Zdnx4 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120b821
                                                                        {
                                                                            return Some (Opcode :: UMIN_SME_Zdnx4_SME_Zmx4 (UMIN_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 12 & 1 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120aa21
                                                                        {
                                                                            return Some (Opcode :: URSHL_SME_Zdnx4_SME_Zm (URSHL_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120ba21
                                                                        {
                                                                            return Some (Opcode :: URSHL_SME_Zdnx4_SME_Zmx4 (URSHL_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a921
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SME_Zdnx4_SME_Zm (FMINNM_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b921
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SME_Zmx4_SME_Zdnx4 (FMINNM_SME_Zmx4_SME_Zdnx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn & 0xff30ffe1 == 0xc120a400 {
                                                            return Some(
                                                                Opcode::SQDMULH_SME_Zm_SME_Zdnx2(
                                                                    SQDMULH_SME_Zm_SME_Zdnx2::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff21ffe1 == 0xc120b400 {
                                                            return Some (Opcode :: SQDMULH_SME_Zmx2_SME_Zdnx2 (SQDMULH_SME_Zmx2_SME_Zdnx2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn & 0xff30ffe3 == 0xc120ac00 {
                                                            return Some(
                                                                Opcode::SQDMULH_SME_Zm_SME_Zdnx4(
                                                                    SQDMULH_SME_Zm_SME_Zdnx4::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff23ffe3 == 0xc120bc00 {
                                                            return Some (Opcode :: SQDMULH_SME_Zdnx4_SME_Zmx4 (SQDMULH_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 22 & 1 == 0 {
                                    if insn >> 23 & 1 == 0 {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn >> 3 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1200000 {
                                                                return Some (Opcode :: ST1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR (ST1B_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1204000 {
                                                                return Some (Opcode :: ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED (ST1W_SME_PNg3_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1202000 {
                                                                return Some (Opcode :: ST1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 (ST1H_SME_Ztx2_STRIDED_SVE_ADDR_RR_LSL1_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1206000 {
                                                                return Some (Opcode :: ST1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 (ST1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1200008 {
                                                                return Some (Opcode :: STNT1B_SVE_ADDR_RR_SME_Ztx2_STRIDED_SME_PNg3 (STNT1B_SVE_ADDR_RR_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1204008 {
                                                                return Some (Opcode :: STNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 (STNT1W_SVE_ADDR_RR_LSL2_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1202008 {
                                                                return Some (Opcode :: STNT1H_SVE_ADDR_RR_LSL1_SME_PNg3_SME_Ztx2_STRIDED (STNT1H_SVE_ADDR_RR_LSL1_SME_PNg3_SME_Ztx2_STRIDED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1206008 {
                                                                return Some (Opcode :: STNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 (STNT1D_SVE_ADDR_RR_LSL3_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffff9c10 == 0xe1200000 {
                                                    return Some (Opcode :: STR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 (STR_SME_ADDR_RI_U4xVL_SME_ZA_array_off4 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 3 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0e00c == 0xa1208000 {
                                                                return Some (Opcode :: ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 (ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RR_SME_PNg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc1f == 0xe13f8000 {
                                                                return Some (Opcode :: STR_SIMD_ADDR_SIMPLE_SME_ZT0 (STR_SIMD_ADDR_SIMPLE_SME_ZT0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120c000 {
                                                            return Some (Opcode :: ST1W_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL2 (ST1W_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0e00c == 0xa120a000 {
                                                            return Some (Opcode :: ST1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 (ST1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120e000 {
                                                            return Some (Opcode :: ST1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED (ST1D_SVE_ADDR_RR_LSL3_SME_PNg3_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0e00c == 0xa1208008 {
                                                            return Some (Opcode :: STNT1B_SVE_ADDR_RR_SME_PNg3_SME_Ztx4_STRIDED (STNT1B_SVE_ADDR_RR_SME_PNg3_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120c008 {
                                                            return Some (Opcode :: STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Ztx4_STRIDED (STNT1W_SVE_ADDR_RR_LSL2_SME_PNg3_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0e00c == 0xa120a008 {
                                                            return Some (Opcode :: STNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 (STNT1H_SVE_ADDR_RR_LSL1_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120e008 {
                                                            return Some (Opcode :: STNT1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Ztx4_STRIDED (STNT1D_SME_PNg3_SVE_ADDR_RR_LSL3_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 4 & 1 == 0 {
                                            if insn & 0xffe0001c == 0xa1a00000 {
                                                return Some (Opcode :: UMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_2b (UMOPA_SVE_Zn_SVE_Zm_16_SVE_Pg3_SME_Pm_SME_ZAda_2b :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe0001c == 0xa1a00010 {
                                                return Some (Opcode :: UMOPS_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 (UMOPS_SVE_Zn_SME_Pm_SME_ZAda_2b_SVE_Pg3_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 23 & 1 == 0 {
                                        if insn >> 3 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1600000 {
                                                            return Some (Opcode :: ST1B_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED (ST1B_SVE_ADDR_RI_S4x2xVL_SME_PNg3_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa1608000 {
                                                            return Some (Opcode :: ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL_SME_PNg3 (ST1B_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1604000 {
                                                            return Some (Opcode :: ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160c000 {
                                                            return Some (Opcode :: ST1W_SVE_ADDR_RI_S4x4xVL_SME_PNg3_SME_Ztx4_STRIDED (ST1W_SVE_ADDR_RI_S4x4xVL_SME_PNg3_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1602000 {
                                                            return Some (Opcode :: ST1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 (ST1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160a000 {
                                                            return Some (Opcode :: ST1H_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL (ST1H_SME_PNg3_SME_Ztx4_STRIDED_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1606000 {
                                                            return Some (Opcode :: ST1D_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL (ST1D_SME_PNg3_SME_Ztx2_STRIDED_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160e000 {
                                                            return Some (Opcode :: ST1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 (ST1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1600008 {
                                                            return Some (Opcode :: STNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED (STNT1B_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa1608008 {
                                                            return Some (Opcode :: STNT1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED (STNT1B_SME_PNg3_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1604008 {
                                                            return Some (Opcode :: STNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED (STNT1W_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160c008 {
                                                            return Some (Opcode :: STNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 (STNT1W_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1602008 {
                                                            return Some (Opcode :: STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 (STNT1H_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160a008 {
                                                            return Some (Opcode :: STNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 (STNT1H_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1606008 {
                                                            return Some (Opcode :: STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED (STNT1D_SME_PNg3_SVE_ADDR_RI_S4x2xVL_SME_Ztx2_STRIDED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160e008 {
                                                            return Some (Opcode :: STNT1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 (STNT1D_SVE_ADDR_RI_S4x4xVL_SME_Ztx4_STRIDED_SME_PNg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 4 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe00018 == 0xa1e00000 {
                                                    return Some (Opcode :: UMOPA_SME_ZAda_3b_SME_Pm_SVE_Zn_SVE_Zm_16_SVE_Pg3 (UMOPA_SME_ZAda_3b_SME_Pm_SVE_Zn_SVE_Zm_16_SVE_Pg3 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe1e00000 {
                                                    return Some (Opcode :: ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr (ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe1e00000 {
                                                    return Some (Opcode :: ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr (ST1Q_SVE_ADDR_R_SVE_Pg3_SME_ZA_HV_idx_ldstr :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00018 == 0xa1e00010 {
                                                return Some (Opcode :: UMOPS_SME_Pm_SVE_Zn_SVE_Pg3_SME_ZAda_3b_SVE_Zm_16 (UMOPS_SME_Pm_SVE_Zn_SVE_Pg3_SME_ZAda_3b_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 29 & 1 == 0 {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f000000 == 0x11000000 {
                                    return Some(Opcode::ADD_Rd_SP_Rn_SP_AIMM(
                                        ADD_Rd_SP_Rn_SP_AIMM::from(insn),
                                    ));
                                }
                                if insn & 0xffc0c000 == 0x91800000 {
                                    return Some(Opcode::ADDG_Rn_SP_UIMM4_ADDG_Rd_SP_UIMM10(
                                        ADDG_Rn_SP_UIMM4_ADDG_Rd_SP_UIMM10::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11c00000 {
                                    return Some(Opcode::SMAX_CSSC_SIMM8_Rd_Rn(
                                        SMAX_CSSC_SIMM8_Rd_Rn::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11c40000 {
                                    return Some(Opcode::UMAX_Rn_CSSC_UIMM8_Rd(
                                        UMAX_Rn_CSSC_UIMM8_Rd::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11c80000 {
                                    return Some(Opcode::SMIN_CSSC_SIMM8_Rn_Rd(
                                        SMIN_CSSC_SIMM8_Rn_Rd::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11cc0000 {
                                    return Some(Opcode::UMIN_Rn_CSSC_UIMM8_Rd(
                                        UMIN_Rn_CSSC_UIMM8_Rd::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f000000 == 0x51000000 {
                                    return Some(Opcode::SUB_AIMM_Rn_SP_Rd_SP(
                                        SUB_AIMM_Rn_SP_Rd_SP::from(insn),
                                    ));
                                }
                                if insn & 0xffc0c000 == 0xd1800000 {
                                    return Some(Opcode::SUBG_UIMM4_ADDG_Rn_SP_UIMM10_Rd_SP(
                                        SUBG_UIMM4_ADDG_Rn_SP_UIMM10_Rd_SP::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f000000 == 0x31000000 {
                                    return Some(Opcode::ADDS_Rn_SP_Rd_AIMM(
                                        ADDS_Rn_SP_Rd_AIMM::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f000000 == 0x71000000 {
                                    return Some(Opcode::SUBS_Rd_AIMM_Rn_SP(
                                        SUBS_Rd_AIMM_Rn_SP::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            } else {
                if insn >> 28 & 1 == 0 {
                    if insn >> 22 & 1 == 0 {
                        if insn >> 23 & 1 == 0 {
                            if insn >> 24 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x8007c00 {
                                                        return Some(
                                                            Opcode::STXRB_ADDR_SIMPLE_Rs_Rt(
                                                                STXRB_ADDR_SIMPLE_Rs_Rt::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x48007c00 {
                                                        return Some(
                                                            Opcode::STXRH_Rt_Rs_ADDR_SIMPLE(
                                                                STXRH_Rt_Rs_ADDR_SIMPLE::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe0fc00 == 0x88007c00 {
                                                    return Some(Opcode::STXR_Rt_ADDR_SIMPLE_Rs(
                                                        STXR_Rt_ADDR_SIMPLE_Rs::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xbfe0fc00 == 0x8207c00 {
                                                    return Some(
                                                        Opcode::CASP_ADDR_SIMPLE_Rt_PAIRREG_Rs(
                                                            CASP_ADDR_SIMPLE_Rt_PAIRREG_Rs::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbfe08000 == 0x88200000 {
                                                    return Some(
                                                        Opcode::STXP_ADDR_SIMPLE_Rt2_Rt_Rs(
                                                            STXP_ADDR_SIMPLE_Rt2_Rt_Rs::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x800fc00 {
                                                        return Some(
                                                            Opcode::STLXRB_Rt_ADDR_SIMPLE_Rs(
                                                                STLXRB_Rt_ADDR_SIMPLE_Rs::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x4800fc00 {
                                                        return Some(
                                                            Opcode::STLXRH_Rs_ADDR_SIMPLE_Rt(
                                                                STLXRH_Rs_ADDR_SIMPLE_Rt::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe0fc00 == 0x8800fc00 {
                                                    return Some(Opcode::STLXR_ADDR_SIMPLE_Rs_Rt(
                                                        STLXR_ADDR_SIMPLE_Rs_Rt::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xbfe0fc00 == 0x820fc00 {
                                                    return Some(
                                                        Opcode::CASPL_PAIRREG_Rs_Rt_ADDR_SIMPLE(
                                                            CASPL_PAIRREG_Rs_Rt_ADDR_SIMPLE::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbfe08000 == 0x88208000 {
                                                    return Some(
                                                        Opcode::STLXP_Rt_ADDR_SIMPLE_Rt2_Rs(
                                                            STLXP_Rt_ADDR_SIMPLE_Rt2_Rs::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x7fc00000 == 0x28000000 {
                                        return Some(Opcode::STNP_ADDR_SIMM7_Rt2_Rt(
                                            STNP_ADDR_SIMM7_Rt2_Rt::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7fc00000 == 0x29000000 {
                                        return Some(Opcode::STP_Rt_ADDR_SIMM7_Rt2(
                                            STP_Rt_ADDR_SIMM7_Rt2::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xffc00000 == 0x69000000 {
                                        return Some(Opcode::STGP_Rt2_Rt_ADDR_SIMM11(
                                            STGP_Rt2_Rt_ADDR_SIMM11::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 15 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xfffffc00 == 0x89f7c00 {
                                                    return Some(Opcode::STLLRB_ADDR_SIMPLE_Rt(
                                                        STLLRB_ADDR_SIMPLE_Rt::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x489f7c00 {
                                                    return Some(Opcode::STLLRH_ADDR_SIMPLE_Rt(
                                                        STLLRH_ADDR_SIMPLE_Rt::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x889f7c00 {
                                                return Some(Opcode::STLLR_Rt_ADDR_SIMPLE(
                                                    STLLR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x8a07c00 {
                                                    return Some(Opcode::CASB_Rs_Rt_ADDR_SIMPLE(
                                                        CASB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48a07c00 {
                                                    return Some(Opcode::CASH_ADDR_SIMPLE_Rs_Rt(
                                                        CASH_ADDR_SIMPLE_Rs_Rt::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88a07c00 {
                                                return Some(Opcode::CAS_ADDR_SIMPLE_Rs_Rt(
                                                    CAS_ADDR_SIMPLE_Rs_Rt::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xfffffc00 == 0x89ffc00 {
                                                    return Some(Opcode::STLRB_ADDR_SIMPLE_Rt(
                                                        STLRB_ADDR_SIMPLE_Rt::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x489ffc00 {
                                                    return Some(Opcode::STLRH_ADDR_SIMPLE_Rt(
                                                        STLRH_ADDR_SIMPLE_Rt::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x889ffc00 {
                                                return Some(Opcode::STLR_Rt_ADDR_SIMPLE(
                                                    STLR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x8a0fc00 {
                                                    return Some(Opcode::CASLB_Rs_Rt_ADDR_SIMPLE(
                                                        CASLB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48a0fc00 {
                                                    return Some(Opcode::CASLH_ADDR_SIMPLE_Rt_Rs(
                                                        CASLH_ADDR_SIMPLE_Rt_Rs::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88a0fc00 {
                                                return Some(Opcode::CASL_Rs_ADDR_SIMPLE_Rt(
                                                    CASL_Rs_ADDR_SIMPLE_Rt::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7ec00000 == 0x28800000 {
                                        return Some(Opcode::STP_Rt2_Rt_ADDR_SIMM7(
                                            STP_Rt2_Rt_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xfec00000 == 0x68800000 {
                                        return Some(Opcode::STGP_Rt_Rt2_ADDR_SIMM11(
                                            STGP_Rt_Rt2_ADDR_SIMM11::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 23 & 1 == 0 {
                            if insn >> 24 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xfffffc00 == 0x85f7c00 {
                                                        return Some(Opcode::LDXRB_Rt_ADDR_SIMPLE(
                                                            LDXRB_Rt_ADDR_SIMPLE::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0x485f7c00 {
                                                        return Some(Opcode::LDXRH_ADDR_SIMPLE_Rt(
                                                            LDXRH_ADDR_SIMPLE_Rt::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbffffc00 == 0x885f7c00 {
                                                    return Some(Opcode::LDXR_Rt_ADDR_SIMPLE(
                                                        LDXR_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xbfe0fc00 == 0x8607c00 {
                                                    return Some(
                                                        Opcode::CASPA_ADDR_SIMPLE_Rt_Rs_PAIRREG(
                                                            CASPA_ADDR_SIMPLE_Rt_Rs_PAIRREG::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbfff8000 == 0x887f0000 {
                                                    return Some(Opcode::LDXP_Rt_Rt2_ADDR_SIMPLE(
                                                        LDXP_Rt_Rt2_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xfffffc00 == 0x85ffc00 {
                                                        return Some(
                                                            Opcode::LDAXRB_ADDR_SIMPLE_Rt(
                                                                LDAXRB_ADDR_SIMPLE_Rt::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0x485ffc00 {
                                                        return Some(
                                                            Opcode::LDAXRH_ADDR_SIMPLE_Rt(
                                                                LDAXRH_ADDR_SIMPLE_Rt::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbffffc00 == 0x885ffc00 {
                                                    return Some(Opcode::LDAXR_Rt_ADDR_SIMPLE(
                                                        LDAXR_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xbfe0fc00 == 0x860fc00 {
                                                    return Some(
                                                        Opcode::CASPAL_Rt_PAIRREG_ADDR_SIMPLE_Rs(
                                                            CASPAL_Rt_PAIRREG_ADDR_SIMPLE_Rs::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbfff8000 == 0x887f8000 {
                                                    return Some(Opcode::LDAXP_ADDR_SIMPLE_Rt_Rt2(
                                                        LDAXP_ADDR_SIMPLE_Rt_Rt2::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x7fc00000 == 0x28400000 {
                                        return Some(Opcode::LDNP_Rt_Rt2_ADDR_SIMM7(
                                            LDNP_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7fc00000 == 0x29400000 {
                                        return Some(Opcode::LDP_ADDR_SIMM7_Rt_Rt2(
                                            LDP_ADDR_SIMM7_Rt_Rt2::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xffc00000 == 0x69400000 {
                                        return Some(Opcode::LDPSW_Rt_Rt2_ADDR_SIMM7(
                                            LDPSW_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 15 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xfffffc00 == 0x8df7c00 {
                                                    return Some(Opcode::LDLARB_Rt_ADDR_SIMPLE(
                                                        LDLARB_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x48df7c00 {
                                                    return Some(Opcode::LDLARH_ADDR_SIMPLE_Rt(
                                                        LDLARH_ADDR_SIMPLE_Rt::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x88df7c00 {
                                                return Some(Opcode::LDLAR_Rt_ADDR_SIMPLE(
                                                    LDLAR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x8e07c00 {
                                                    return Some(Opcode::CASAB_Rs_Rt_ADDR_SIMPLE(
                                                        CASAB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48e07c00 {
                                                    return Some(Opcode::CASAH_Rt_Rs_ADDR_SIMPLE(
                                                        CASAH_Rt_Rs_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88e07c00 {
                                                return Some(Opcode::CASA_Rs_ADDR_SIMPLE_Rt(
                                                    CASA_Rs_ADDR_SIMPLE_Rt::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xfffffc00 == 0x8dffc00 {
                                                    return Some(Opcode::LDARB_Rt_ADDR_SIMPLE(
                                                        LDARB_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x48dffc00 {
                                                    return Some(Opcode::LDARH_Rt_ADDR_SIMPLE(
                                                        LDARH_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x88dffc00 {
                                                return Some(Opcode::LDAR_Rt_ADDR_SIMPLE(
                                                    LDAR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x8e0fc00 {
                                                    return Some(Opcode::CASALB_ADDR_SIMPLE_Rs_Rt(
                                                        CASALB_ADDR_SIMPLE_Rs_Rt::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48e0fc00 {
                                                    return Some(Opcode::CASALH_Rt_Rs_ADDR_SIMPLE(
                                                        CASALH_Rt_Rs_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88e0fc00 {
                                                return Some(Opcode::CASAL_Rt_ADDR_SIMPLE_Rs(
                                                    CASAL_Rt_ADDR_SIMPLE_Rs::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7ec00000 == 0x28c00000 {
                                        return Some(Opcode::LDP_Rt2_Rt_ADDR_SIMM7(
                                            LDP_Rt2_Rt_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xfec00000 == 0x68c00000 {
                                        return Some(Opcode::LDPSW_ADDR_SIMM7_Rt2_Rt(
                                            LDPSW_ADDR_SIMM7_Rt2_Rt::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn >> 24 & 1 == 0 {
                        if insn >> 29 & 1 == 0 {
                            if insn >> 31 & 1 == 0 {
                                if insn & 0xbf000000 == 0x18000000 {
                                    return Some(Opcode::LDR_Rt_ADDR_PCREL19(
                                        LDR_Rt_ADDR_PCREL19::from(insn),
                                    ));
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0xff000000 == 0x98000000 {
                                        return Some(Opcode::LDRSW_Rt_ADDR_PCREL19(
                                            LDRSW_Rt_ADDR_PCREL19::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xff000000 == 0xd8000000 {
                                        return Some(Opcode::PRFM_PRFOP_ADDR_PCREL19(
                                            PRFM_PRFOP_ADDR_PCREL19::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 10 & 1 == 0 {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 23 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x38000000 {
                                                            return Some(
                                                                Opcode::STURB_ADDR_SIMM9_Rt(
                                                                    STURB_ADDR_SIMM9_Rt::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78000000 {
                                                            return Some(
                                                                Opcode::STURH_Rt_ADDR_SIMM9(
                                                                    STURH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8000000 {
                                                        return Some(Opcode::STUR_ADDR_SIMM9_Rt(
                                                            STUR_ADDR_SIMM9_Rt::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x38400000 {
                                                            return Some(
                                                                Opcode::LDURB_Rt_ADDR_SIMM9(
                                                                    LDURB_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78400000 {
                                                            return Some(
                                                                Opcode::LDURH_Rt_ADDR_SIMM9(
                                                                    LDURH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8400000 {
                                                        return Some(Opcode::LDUR_Rt_ADDR_SIMM9(
                                                            LDUR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffa00c00 == 0x38800000 {
                                                        return Some(Opcode::LDURSB_ADDR_SIMM9_Rt(
                                                            LDURSB_ADDR_SIMM9_Rt::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xb8800000 {
                                                        return Some(Opcode::LDURSW_Rt_ADDR_SIMM9(
                                                            LDURSW_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffa00c00 == 0x78800000 {
                                                        return Some(Opcode::LDURSH_Rt_ADDR_SIMM9(
                                                            LDURSH_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xf8800000 {
                                                        return Some(
                                                            Opcode::PRFUM_PRFOP_ADDR_SIMM9(
                                                                PRFUM_PRFOP_ADDR_SIMM9::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38200000
                                                                        {
                                                                            return Some (Opcode :: LDADDB_Rt_ADDR_SIMPLE_Rs (LDADDB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78200000
                                                                        {
                                                                            return Some (Opcode :: LDADDH_Rt_Rs_ADDR_SIMPLE (LDADDH_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8200000
                                                                    {
                                                                        return Some (Opcode :: LDADD_Rs_Rt_ADDR_SIMPLE (LDADD_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a00000
                                                                        {
                                                                            return Some (Opcode :: LDADDAB_Rs_Rt_ADDR_SIMPLE (LDADDAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a00000
                                                                        {
                                                                            return Some (Opcode :: LDADDAH_Rs_ADDR_SIMPLE_Rt (LDADDAH_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a00000
                                                                    {
                                                                        return Some (Opcode :: LDADDA_ADDR_SIMPLE_Rs_Rt (LDADDA_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38600000
                                                                        {
                                                                            return Some (Opcode :: LDADDLB_ADDR_SIMPLE_Rs_Rt (LDADDLB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78600000
                                                                        {
                                                                            return Some (Opcode :: LDADDLH_ADDR_SIMPLE_Rs_Rt (LDADDLH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8600000
                                                                    {
                                                                        return Some (Opcode :: LDADDL_ADDR_SIMPLE_Rt_Rs (LDADDL_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e00000
                                                                        {
                                                                            return Some (Opcode :: LDADDALB_Rs_ADDR_SIMPLE_Rt (LDADDALB_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e00000
                                                                        {
                                                                            return Some (Opcode :: LDADDALH_Rs_Rt_ADDR_SIMPLE (LDADDALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e00000
                                                                    {
                                                                        return Some (Opcode :: LDADDAL_ADDR_SIMPLE_Rt_Rs (LDADDAL_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38208000
                                                                        {
                                                                            return Some (Opcode :: SWPB_ADDR_SIMPLE_Rt_Rs (SWPB_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78208000
                                                                        {
                                                                            return Some (Opcode :: SWPH_ADDR_SIMPLE_Rt_Rs (SWPH_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8208000
                                                                    {
                                                                        return Some (Opcode :: SWP_Rt_ADDR_SIMPLE_Rs (SWP_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a08000
                                                                        {
                                                                            return Some (Opcode :: SWPAB_ADDR_SIMPLE_Rs_Rt (SWPAB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a08000
                                                                        {
                                                                            return Some (Opcode :: SWPAH_ADDR_SIMPLE_Rs_Rt (SWPAH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a08000
                                                                    {
                                                                        return Some (Opcode :: SWPA_ADDR_SIMPLE_Rs_Rt (SWPA_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38608000
                                                                        {
                                                                            return Some (Opcode :: SWPLB_ADDR_SIMPLE_Rs_Rt (SWPLB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78608000
                                                                        {
                                                                            return Some (Opcode :: SWPLH_ADDR_SIMPLE_Rs_Rt (SWPLH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8608000
                                                                    {
                                                                        return Some (Opcode :: SWPL_ADDR_SIMPLE_Rs_Rt (SWPL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e08000
                                                                        {
                                                                            return Some (Opcode :: SWPALB_Rt_ADDR_SIMPLE_Rs (SWPALB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e08000
                                                                        {
                                                                            return Some (Opcode :: SWPALH_Rs_Rt_ADDR_SIMPLE (SWPALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e08000
                                                                    {
                                                                        return Some (Opcode :: SWPAL_ADDR_SIMPLE_Rs_Rt (SWPAL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38204000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXB_Rs_Rt_ADDR_SIMPLE (LDSMAXB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78204000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXH_Rs_Rt_ADDR_SIMPLE (LDSMAXH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8204000
                                                                    {
                                                                        return Some (Opcode :: LDSMAX_Rs_ADDR_SIMPLE_Rt (LDSMAX_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXAB_Rs_ADDR_SIMPLE_Rt (LDSMAXAB_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXAH_Rs_ADDR_SIMPLE_Rt (LDSMAXAH_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a04000
                                                                    {
                                                                        return Some (Opcode :: LDSMAXA_ADDR_SIMPLE_Rt_Rs (LDSMAXA_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38604000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXLB_Rs_Rt_ADDR_SIMPLE (LDSMAXLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78604000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXLH_Rt_ADDR_SIMPLE_Rs (LDSMAXLH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8604000
                                                                    {
                                                                        return Some (Opcode :: LDSMAXL_Rs_Rt_ADDR_SIMPLE (LDSMAXL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXALB_ADDR_SIMPLE_Rs_Rt (LDSMAXALB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXALH_Rt_Rs_ADDR_SIMPLE (LDSMAXALH_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e04000
                                                                    {
                                                                        return Some (Opcode :: LDSMAXAL_Rt_ADDR_SIMPLE_Rs (LDSMAXAL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 31 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x38bfc000 {
                                                                    return Some (Opcode :: LDAPRB_Rt_ADDR_SIMPLE (LDAPRB_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x78bfc000 {
                                                                    return Some (Opcode :: LDAPRH_ADDR_SIMPLE_Rt (LDAPRH_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbffffc00 == 0xb8bfc000 {
                                                                return Some(
                                                                    Opcode::LDAPR_Rt_ADDR_SIMPLE(
                                                                        LDAPR_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38202000
                                                                        {
                                                                            return Some (Opcode :: LDEORB_Rt_ADDR_SIMPLE_Rs (LDEORB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78202000
                                                                        {
                                                                            return Some (Opcode :: LDEORH_ADDR_SIMPLE_Rs_Rt (LDEORH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8202000
                                                                    {
                                                                        return Some (Opcode :: LDEOR_Rs_ADDR_SIMPLE_Rt (LDEOR_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a02000
                                                                        {
                                                                            return Some (Opcode :: LDEORAB_Rs_Rt_ADDR_SIMPLE (LDEORAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a02000
                                                                        {
                                                                            return Some (Opcode :: LDEORAH_Rt_ADDR_SIMPLE_Rs (LDEORAH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a02000
                                                                    {
                                                                        return Some (Opcode :: LDEORA_ADDR_SIMPLE_Rs_Rt (LDEORA_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38602000
                                                                        {
                                                                            return Some (Opcode :: LDEORLB_ADDR_SIMPLE_Rt_Rs (LDEORLB_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78602000
                                                                        {
                                                                            return Some (Opcode :: LDEORLH_Rs_Rt_ADDR_SIMPLE (LDEORLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8602000
                                                                    {
                                                                        return Some (Opcode :: LDEORL_Rs_Rt_ADDR_SIMPLE (LDEORL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e02000
                                                                        {
                                                                            return Some (Opcode :: LDEORALB_Rt_ADDR_SIMPLE_Rs (LDEORALB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e02000
                                                                        {
                                                                            return Some (Opcode :: LDEORALH_ADDR_SIMPLE_Rs_Rt (LDEORALH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e02000
                                                                    {
                                                                        return Some (Opcode :: LDEORAL_Rt_ADDR_SIMPLE_Rs (LDEORAL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3820a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWP_ADDR_SIMPLE_Rt_Rs (RCWSWP_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 31 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x7820a000
                                                                        {
                                                                            return Some (Opcode :: RCWSSWP_Rt_ADDR_SIMPLE_Rs (RCWSSWP_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0xf820a000
                                                                        {
                                                                            return Some (Opcode :: ST64BV0_ADDR_SIMPLE_Rs_Rt_LS64 (ST64BV0_ADDR_SIMPLE_Rs_Rt_LS64 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWPA_Rt_ADDR_SIMPLE_Rs (RCWSWPA_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSSWPA_Rs_Rt_ADDR_SIMPLE (RCWSSWPA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3860a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWPL_Rt_Rs_ADDR_SIMPLE (RCWSWPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x7860a000
                                                                    {
                                                                        return Some (Opcode :: RCWSSWPL_ADDR_SIMPLE_Rs_Rt (RCWSSWPL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWPAL_Rt_Rs_ADDR_SIMPLE (RCWSWPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSSWPAL_Rs_ADDR_SIMPLE_Rt (RCWSSWPAL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38206000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXB_ADDR_SIMPLE_Rt_Rs (LDUMAXB_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78206000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXH_Rs_ADDR_SIMPLE_Rt (LDUMAXH_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8206000 {
                                                                    return Some (Opcode :: LDUMAX_Rs_ADDR_SIMPLE_Rt (LDUMAX_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXAB_ADDR_SIMPLE_Rs_Rt (LDUMAXAB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXAH_ADDR_SIMPLE_Rt_Rs (LDUMAXAH_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8a06000 {
                                                                    return Some (Opcode :: LDUMAXA_Rs_ADDR_SIMPLE_Rt (LDUMAXA_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38606000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXLB_Rs_ADDR_SIMPLE_Rt (LDUMAXLB_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78606000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXLH_Rt_ADDR_SIMPLE_Rs (LDUMAXLH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8606000 {
                                                                    return Some (Opcode :: LDUMAXL_ADDR_SIMPLE_Rs_Rt (LDUMAXL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXALB_ADDR_SIMPLE_Rt_Rs (LDUMAXALB_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXALH_Rs_ADDR_SIMPLE_Rt (LDUMAXALH_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8e06000 {
                                                                    return Some (Opcode :: LDUMAXAL_ADDR_SIMPLE_Rs_Rt (LDUMAXAL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38201000
                                                                        {
                                                                            return Some (Opcode :: LDCLRB_Rt_ADDR_SIMPLE_Rs (LDCLRB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78201000
                                                                        {
                                                                            return Some (Opcode :: LDCLRH_ADDR_SIMPLE_Rs_Rt (LDCLRH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8201000
                                                                    {
                                                                        return Some (Opcode :: LDCLR_ADDR_SIMPLE_Rt_Rs (LDCLR_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRAB_Rt_Rs_ADDR_SIMPLE (LDCLRAB_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRAH_ADDR_SIMPLE_Rt_Rs (LDCLRAH_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a01000
                                                                    {
                                                                        return Some (Opcode :: LDCLRA_Rs_Rt_ADDR_SIMPLE (LDCLRA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38601000
                                                                        {
                                                                            return Some (Opcode :: LDCLRLB_Rs_Rt_ADDR_SIMPLE (LDCLRLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78601000
                                                                        {
                                                                            return Some (Opcode :: LDCLRLH_Rt_ADDR_SIMPLE_Rs (LDCLRLH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8601000
                                                                    {
                                                                        return Some (Opcode :: LDCLRL_Rt_ADDR_SIMPLE_Rs (LDCLRL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRALB_Rt_Rs_ADDR_SIMPLE (LDCLRALB_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRALH_Rs_Rt_ADDR_SIMPLE (LDCLRALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e01000
                                                                    {
                                                                        return Some (Opcode :: LDCLRAL_ADDR_SIMPLE_Rs_Rt (LDCLRAL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38209000
                                                                    {
                                                                        return Some (Opcode :: RCWCLR_Rs_Rt_ADDR_SIMPLE (RCWCLR_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 31 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78209000
                                                                        {
                                                                            return Some (Opcode :: RCWSCLR_ADDR_SIMPLE_Rs_Rt (RCWSCLR_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffc00
                                                                            == 0xf83f9000
                                                                        {
                                                                            return Some (Opcode :: ST64B_Rt_LS64_ADDR_SIMPLE (ST64B_Rt_LS64_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a09000
                                                                    {
                                                                        return Some (Opcode :: RCWCLRA_Rt_ADDR_SIMPLE_Rs (RCWCLRA_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a09000
                                                                    {
                                                                        return Some (Opcode :: RCWSCLRA_Rt_ADDR_SIMPLE_Rs (RCWSCLRA_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38609000
                                                                    {
                                                                        return Some (Opcode :: RCWCLRL_ADDR_SIMPLE_Rs_Rt (RCWCLRL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78609000
                                                                    {
                                                                        return Some (Opcode :: RCWSCLRL_Rt_Rs_ADDR_SIMPLE (RCWSCLRL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e09000
                                                                    {
                                                                        return Some (Opcode :: RCWCLRAL_Rs_ADDR_SIMPLE_Rt (RCWCLRAL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e09000
                                                                    {
                                                                        return Some (Opcode :: RCWSCLRAL_Rt_ADDR_SIMPLE_Rs (RCWSCLRAL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38205000
                                                                        {
                                                                            return Some (Opcode :: LDSMINB_ADDR_SIMPLE_Rs_Rt (LDSMINB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78205000
                                                                        {
                                                                            return Some (Opcode :: LDSMINH_Rs_Rt_ADDR_SIMPLE (LDSMINH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8205000
                                                                    {
                                                                        return Some (Opcode :: LDSMIN_ADDR_SIMPLE_Rs_Rt (LDSMIN_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINAB_Rt_Rs_ADDR_SIMPLE (LDSMINAB_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINAH_ADDR_SIMPLE_Rs_Rt (LDSMINAH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a05000
                                                                    {
                                                                        return Some (Opcode :: LDSMINA_ADDR_SIMPLE_Rs_Rt (LDSMINA_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38605000
                                                                        {
                                                                            return Some (Opcode :: LDSMINLB_Rs_Rt_ADDR_SIMPLE (LDSMINLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78605000
                                                                        {
                                                                            return Some (Opcode :: LDSMINLH_ADDR_SIMPLE_Rs_Rt (LDSMINLH_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8605000
                                                                    {
                                                                        return Some (Opcode :: LDSMINL_Rt_ADDR_SIMPLE_Rs (LDSMINL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINALB_Rt_ADDR_SIMPLE_Rs (LDSMINALB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINALH_Rs_ADDR_SIMPLE_Rt (LDSMINALH_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e05000
                                                                    {
                                                                        return Some (Opcode :: LDSMINAL_ADDR_SIMPLE_Rt_Rs (LDSMINAL_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xf83fd000 {
                                                            return Some(
                                                                Opcode::LD64B_ADDR_SIMPLE_Rt_LS64(
                                                                    LD64B_ADDR_SIMPLE_Rt_LS64::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38203000
                                                                        {
                                                                            return Some (Opcode :: LDSETB_ADDR_SIMPLE_Rs_Rt (LDSETB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78203000
                                                                        {
                                                                            return Some (Opcode :: LDSETH_Rt_Rs_ADDR_SIMPLE (LDSETH_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8203000
                                                                    {
                                                                        return Some (Opcode :: LDSET_Rt_ADDR_SIMPLE_Rs (LDSET_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a03000
                                                                        {
                                                                            return Some (Opcode :: LDSETAB_Rs_Rt_ADDR_SIMPLE (LDSETAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a03000
                                                                        {
                                                                            return Some (Opcode :: LDSETAH_Rs_Rt_ADDR_SIMPLE (LDSETAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a03000
                                                                    {
                                                                        return Some (Opcode :: LDSETA_Rs_ADDR_SIMPLE_Rt (LDSETA_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38603000
                                                                        {
                                                                            return Some (Opcode :: LDSETLB_ADDR_SIMPLE_Rt_Rs (LDSETLB_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78603000
                                                                        {
                                                                            return Some (Opcode :: LDSETLH_Rs_Rt_ADDR_SIMPLE (LDSETLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8603000
                                                                    {
                                                                        return Some (Opcode :: LDSETL_Rt_ADDR_SIMPLE_Rs (LDSETL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e03000
                                                                        {
                                                                            return Some (Opcode :: LDSETALB_Rs_ADDR_SIMPLE_Rt (LDSETALB_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e03000
                                                                        {
                                                                            return Some (Opcode :: LDSETALH_Rt_Rs_ADDR_SIMPLE (LDSETALH_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e03000
                                                                    {
                                                                        return Some (Opcode :: LDSETAL_Rt_Rs_ADDR_SIMPLE (LDSETAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3820b000
                                                                    {
                                                                        return Some (Opcode :: RCWSET_Rs_Rt_ADDR_SIMPLE (RCWSET_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 31 & 1 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x7820b000
                                                                        {
                                                                            return Some (Opcode :: RCWSSET_ADDR_SIMPLE_Rt_Rs (RCWSSET_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0xf820b000
                                                                        {
                                                                            return Some (Opcode :: ST64BV_Rs_Rt_LS64_ADDR_SIMPLE (ST64BV_Rs_Rt_LS64_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSETA_Rs_Rt_ADDR_SIMPLE (RCWSETA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSSETA_Rs_Rt_ADDR_SIMPLE (RCWSSETA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3860b000
                                                                    {
                                                                        return Some (Opcode :: RCWSETL_Rs_Rt_ADDR_SIMPLE (RCWSETL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x7860b000
                                                                    {
                                                                        return Some (Opcode :: RCWSSETL_Rt_Rs_ADDR_SIMPLE (RCWSSETL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSETAL_ADDR_SIMPLE_Rs_Rt (RCWSETAL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSSETAL_Rs_ADDR_SIMPLE_Rt (RCWSSETAL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38207000
                                                                    {
                                                                        return Some (Opcode :: LDUMINB_Rs_Rt_ADDR_SIMPLE (LDUMINB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78207000
                                                                    {
                                                                        return Some (Opcode :: LDUMINH_Rt_ADDR_SIMPLE_Rs (LDUMINH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8207000 {
                                                                    return Some (Opcode :: LDUMIN_ADDR_SIMPLE_Rs_Rt (LDUMIN_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINAB_ADDR_SIMPLE_Rs_Rt (LDUMINAB_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINAH_Rt_ADDR_SIMPLE_Rs (LDUMINAH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8a07000 {
                                                                    return Some (Opcode :: LDUMINA_Rt_ADDR_SIMPLE_Rs (LDUMINA_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38607000
                                                                    {
                                                                        return Some (Opcode :: LDUMINLB_Rt_ADDR_SIMPLE_Rs (LDUMINLB_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78607000
                                                                    {
                                                                        return Some (Opcode :: LDUMINLH_Rs_Rt_ADDR_SIMPLE (LDUMINLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8607000 {
                                                                    return Some (Opcode :: LDUMINL_Rt_ADDR_SIMPLE_Rs (LDUMINL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINALB_Rs_Rt_ADDR_SIMPLE (LDUMINALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINALH_Rt_ADDR_SIMPLE_Rs (LDUMINALH_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8e07000 {
                                                                    return Some (Opcode :: LDUMINAL_Rs_Rt_ADDR_SIMPLE (LDUMINAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 23 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x38000800 {
                                                            return Some(
                                                                Opcode::STTRB_ADDR_SIMM9_Rt(
                                                                    STTRB_ADDR_SIMM9_Rt::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78000800 {
                                                            return Some(
                                                                Opcode::STTRH_ADDR_SIMM9_Rt(
                                                                    STTRH_ADDR_SIMM9_Rt::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8000800 {
                                                        return Some(Opcode::STTR_Rt_ADDR_SIMM9(
                                                            STTR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x38400800 {
                                                            return Some(
                                                                Opcode::LDTRB_Rt_ADDR_SIMM9(
                                                                    LDTRB_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78400800 {
                                                            return Some(
                                                                Opcode::LDTRH_Rt_ADDR_SIMM9(
                                                                    LDTRH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8400800 {
                                                        return Some(Opcode::LDTR_Rt_ADDR_SIMM9(
                                                            LDTR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffa00c00 == 0x38800800 {
                                                        return Some(Opcode::LDTRSB_Rt_ADDR_SIMM9(
                                                            LDTRSB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xb8800800 {
                                                        return Some(Opcode::LDTRSW_ADDR_SIMM9_Rt(
                                                            LDTRSW_ADDR_SIMM9_Rt::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa00c00 == 0x78800800 {
                                                    return Some(Opcode::LDTRSH_Rt_ADDR_SIMM9(
                                                        LDTRSH_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 23 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x38200800 {
                                                            return Some(
                                                                Opcode::STRB_Rt_ADDR_REGOFF(
                                                                    STRB_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78200800 {
                                                            return Some(
                                                                Opcode::STRH_Rt_ADDR_REGOFF(
                                                                    STRH_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8200800 {
                                                        return Some(Opcode::STR_ADDR_REGOFF_Rt(
                                                            STR_ADDR_REGOFF_Rt::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x38600800 {
                                                            return Some(
                                                                Opcode::LDRB_Rt_ADDR_REGOFF(
                                                                    LDRB_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78600800 {
                                                            return Some(
                                                                Opcode::LDRH_Rt_ADDR_REGOFF(
                                                                    LDRH_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8600800 {
                                                        return Some(Opcode::LDR_ADDR_REGOFF_Rt(
                                                            LDR_ADDR_REGOFF_Rt::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffa00c00 == 0x38a00800 {
                                                        return Some(Opcode::LDRSB_ADDR_REGOFF_Rt(
                                                            LDRSB_ADDR_REGOFF_Rt::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xb8a00800 {
                                                        return Some(Opcode::LDRSW_Rt_ADDR_REGOFF(
                                                            LDRSW_Rt_ADDR_REGOFF::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffa00c00 == 0x78a00800 {
                                                        return Some(Opcode::LDRSH_ADDR_REGOFF_Rt(
                                                            LDRSH_ADDR_REGOFF_Rt::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xf8a00800 {
                                                        return Some(
                                                            Opcode::PRFM_PRFOP_ADDR_REGOFF(
                                                                PRFM_PRFOP_ADDR_REGOFF::from(insn),
                                                            ),
                                                        );
                                                    }
                                                    if insn & 0xffe04c18 == 0xf8a04818 {
                                                        return Some (Opcode :: RPRFM_Rm_SIMD_ADDR_SIMPLE_RPRFMOP (RPRFM_Rm_SIMD_ADDR_SIMPLE_RPRFMOP :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 21 & 1 == 0 {
                                    if insn >> 23 & 1 == 0 {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe00400 == 0x38000400 {
                                                        return Some(Opcode::STRB_Rt_ADDR_SIMM9(
                                                            STRB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0x78000400 {
                                                        return Some(Opcode::STRH_Rt_ADDR_SIMM9(
                                                            STRH_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe00400 == 0xb8000400 {
                                                    return Some(Opcode::STR_ADDR_SIMM9_Rt(
                                                        STR_ADDR_SIMM9_Rt::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe00400 == 0x38400400 {
                                                        return Some(Opcode::LDRB_Rt_ADDR_SIMM9(
                                                            LDRB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0x78400400 {
                                                        return Some(Opcode::LDRH_Rt_ADDR_SIMM9(
                                                            LDRH_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe00400 == 0xb8400400 {
                                                    return Some(Opcode::LDR_Rt_ADDR_SIMM9(
                                                        LDR_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xffa00400 == 0x38800400 {
                                                    return Some(Opcode::LDRSB_Rt_ADDR_SIMM9(
                                                        LDRSB_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe00400 == 0xb8800400 {
                                                    return Some(Opcode::LDRSW_Rt_ADDR_SIMM9(
                                                        LDRSW_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xffa00400 == 0x78800400 {
                                                return Some(Opcode::LDRSH_ADDR_SIMM9_Rt(
                                                    LDRSH_ADDR_SIMM9_Rt::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 23 & 1 == 0 {
                                        if insn & 0xffa00400 == 0xf8200400 {
                                            return Some(Opcode::LDRAA_ADDR_SIMM10_Rt(
                                                LDRAA_ADDR_SIMM10_Rt::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffa00400 == 0xf8a00400 {
                                            return Some(Opcode::LDRAB_ADDR_SIMM10_Rt(
                                                LDRAB_ADDR_SIMM10_Rt::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 23 & 1 == 0 {
                            if insn >> 22 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x19000000 {
                                                            return Some(
                                                                Opcode::STLURB_ADDR_OFFSET_Rt(
                                                                    STLURB_ADDR_OFFSET_Rt::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x99000000 {
                                                            return Some(
                                                                Opcode::STLUR_Rt_ADDR_OFFSET(
                                                                    STLUR_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x59000000 {
                                                            return Some(
                                                                Opcode::STLURH_ADDR_OFFSET_Rt(
                                                                    STLURH_ADDR_OFFSET_Rt::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9000000 {
                                                            return Some(
                                                                Opcode::STLUR_ADDR_OFFSET_Rt(
                                                                    STLUR_ADDR_OFFSET_Rt::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xfffffc00 == 0xd9200000 {
                                                                return Some(
                                                                    Opcode::STZGM_Rt_ADDR_SIMPLE(
                                                                        STZGM_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19208000 {
                                                                return Some (Opcode :: SWPP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt (SWPP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1920a000 {
                                                                return Some (Opcode :: RCWSWPP_Rt_ADDR_SIMPLE_Rs (RCWSWPP_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x5920a000 {
                                                                return Some (Opcode :: RCWSSWPP_ADDR_SIMPLE_Rs_Rt (RCWSSWPP_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19201000 {
                                                                return Some (Opcode :: LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19209000 {
                                                                    return Some (Opcode :: RCWCLRP_ADDR_SIMPLE_Rs_Rt (RCWCLRP_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59209000 {
                                                                    return Some (Opcode :: RCWSCLRP_ADDR_SIMPLE_Rs_Rt (RCWSCLRP_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19203000 {
                                                                return Some (Opcode :: LDSETP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt (LDSETP_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x1920b000 {
                                                                    return Some (Opcode :: RCWSETP_Rt_Rs_ADDR_SIMPLE (RCWSETP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x5920b000 {
                                                                    return Some (Opcode :: RCWSSETP_ADDR_SIMPLE_Rs_Rt (RCWSSETP_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 21 & 1 == 0 {
                                                if insn & 0x3fe0ec00 == 0x19000800 {
                                                    return Some (Opcode :: STILP_Rs_Rt_RCPC3_ADDR_OPT_PREIND_WB (STILP_Rs_Rt_RCPC3_ADDR_OPT_PREIND_WB :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19200800 {
                                                        return Some(
                                                            Opcode::RCWCAS_Rt_Rs_ADDR_SIMPLE(
                                                                RCWCAS_Rt_Rs_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59200800 {
                                                            return Some(
                                                                Opcode::RCWSCAS_ADDR_SIMPLE_Rt_Rs(
                                                                    RCWSCAS_ADDR_SIMPLE_Rt_Rs::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9200800 {
                                                            return Some(
                                                                Opcode::STG_Rt_SP_ADDR_SIMM13(
                                                                    STG_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19000400 {
                                                                    return Some (Opcode :: CPYFP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x19008400 {
                                                                    return Some (Opcode :: CPYFPRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYFPRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19004400 {
                                                                    return Some (Opcode :: CPYFPWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFPWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900c400 {
                                                                    return Some (Opcode :: CPYFPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19002400 {
                                                                    return Some (Opcode :: CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900a400 {
                                                                    return Some (Opcode :: CPYFPRTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYFPRTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19006400 {
                                                                    return Some (Opcode :: CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900e400 {
                                                                    return Some (Opcode :: CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19001400 {
                                                                    return Some (Opcode :: CPYFPWT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFPWT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x19009400 {
                                                                    return Some (Opcode :: CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19005400 {
                                                                    return Some (Opcode :: CPYFPWTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFPWTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900d400 {
                                                                    return Some (Opcode :: CPYFPWTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFPWTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19003400 {
                                                                    return Some (Opcode :: CPYFPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900b400 {
                                                                    return Some (Opcode :: CPYFPTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFPTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19007400 {
                                                                    return Some (Opcode :: CPYFPTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFPTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900f400 {
                                                                    return Some (Opcode :: CPYFPTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFPTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn & 0xfffffc00 == 0xd91f0c00 {
                                                        return Some(Opcode::GCSSTR_Rt_Rn_SP(
                                                            GCSSTR_Rt_Rn_SP::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0xd91f1c00 {
                                                        return Some(Opcode::GCSSTTR_Rt_Rn_SP(
                                                            GCSSTTR_Rt_Rn_SP::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x19200c00 {
                                                    return Some(
                                                        Opcode::RCWCASP_Rs_ADDR_SIMPLE_Rt_PAIRREG(
                                                            RCWCASP_Rs_ADDR_SIMPLE_Rt_PAIRREG::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59200c00 {
                                                        return Some (Opcode :: RCWSCASP_PAIRREG_Rt_ADDR_SIMPLE_Rs (RCWSCASP_PAIRREG_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9200400 {
                                                        return Some (Opcode :: STG_Rt_SP_X_ADDR_SIMM13_imm_tag (STG_Rt_SP_X_ADDR_SIMM13_imm_tag :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 31 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 0xffc00000 == 0x39000000 {
                                                return Some(Opcode::STRB_Rt_ADDR_UIMM12(
                                                    STRB_Rt_ADDR_UIMM12::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffc00000 == 0x79000000 {
                                                return Some(Opcode::STRH_Rt_ADDR_UIMM12(
                                                    STRH_Rt_ADDR_UIMM12::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0xbfc00000 == 0xb9000000 {
                                            return Some(Opcode::STR_ADDR_UIMM12_Rt(
                                                STR_ADDR_UIMM12_Rt::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x19400000 {
                                                            return Some(
                                                                Opcode::LDAPURB_Rt_ADDR_OFFSET(
                                                                    LDAPURB_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x99400000 {
                                                            return Some(
                                                                Opcode::LDAPUR_Rt_ADDR_OFFSET(
                                                                    LDAPUR_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x59400000 {
                                                            return Some(
                                                                Opcode::LDAPURH_Rt_ADDR_OFFSET(
                                                                    LDAPURH_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9400000 {
                                                            return Some(
                                                                Opcode::LDAPUR_Rt_X_ADDR_OFFSET(
                                                                    LDAPUR_Rt_X_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 13 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19608000 {
                                                                return Some (Opcode :: SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1960a000 {
                                                                return Some (Opcode :: RCWSWPPL_ADDR_SIMPLE_Rs_Rt (RCWSWPPL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 13 & 1 == 0 {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19601000 {
                                                                    return Some (Opcode :: LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x19609000 {
                                                                    return Some (Opcode :: RCWCLRPL_Rt_ADDR_SIMPLE_Rs (RCWCLRPL_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 15 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19603000 {
                                                                    return Some (Opcode :: LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1960b000 {
                                                                    return Some (Opcode :: RCWSETPL_Rt_Rs_ADDR_SIMPLE (RCWSETPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x5960a000 {
                                                                return Some (Opcode :: RCWSSWPPL_Rs_ADDR_SIMPLE_Rt (RCWSSWPPL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 13 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x59609000 {
                                                                    return Some (Opcode :: RCWSCLRPL_Rs_Rt_ADDR_SIMPLE (RCWSCLRPL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x5960b000 {
                                                                    return Some (Opcode :: RCWSSETPL_ADDR_SIMPLE_Rt_Rs (RCWSSETPL_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9600000 {
                                                            return Some(
                                                                Opcode::LDG_ADDR_SIMM13_Rt(
                                                                    LDG_ADDR_SIMM13_Rt::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 21 & 1 == 0 {
                                                if insn & 0x3fe0ec00 == 0x19400800 {
                                                    return Some (Opcode :: LDIAPP_Rt_RCPC3_ADDR_OPT_POSTIND_Rs (LDIAPP_Rt_RCPC3_ADDR_OPT_POSTIND_Rs :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19600800 {
                                                        return Some(
                                                            Opcode::RCWCASL_Rs_Rt_ADDR_SIMPLE(
                                                                RCWCASL_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59600800 {
                                                            return Some (Opcode :: RCWSCASL_Rs_Rt_ADDR_SIMPLE (RCWSCASL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9600800 {
                                                            return Some(
                                                                Opcode::STZG_ADDR_SIMM13_Rt_SP(
                                                                    STZG_ADDR_SIMM13_Rt_SP::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19400400 {
                                                                return Some (Opcode :: CPYFM_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYFM_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19408400 {
                                                                return Some (Opcode :: CPYFMRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYFMRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19404400 {
                                                                return Some (Opcode :: CPYFMWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFMWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940c400 {
                                                                return Some (Opcode :: CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19402400 {
                                                                return Some (Opcode :: CPYFMRT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFMRT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940a400 {
                                                                return Some (Opcode :: CPYFMRTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFMRTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19406400 {
                                                                return Some (Opcode :: CPYFMRTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFMRTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940e400 {
                                                                return Some (Opcode :: CPYFMRTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFMRTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19401400 {
                                                                return Some (Opcode :: CPYFMWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFMWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19409400 {
                                                                return Some (Opcode :: CPYFMWTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFMWTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19405400 {
                                                                return Some (Opcode :: CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940d400 {
                                                                return Some (Opcode :: CPYFMWTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFMWTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19403400 {
                                                                return Some (Opcode :: CPYFMT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFMT_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940b400 {
                                                                return Some (Opcode :: CPYFMTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFMTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19407400 {
                                                                return Some (Opcode :: CPYFMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940f400 {
                                                                return Some (Opcode :: CPYFMTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFMTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x19600c00 {
                                                    return Some (Opcode :: RCWCASPL_Rt_ADDR_SIMPLE_Rs_PAIRREG (RCWCASPL_Rt_ADDR_SIMPLE_Rs_PAIRREG :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59600c00 {
                                                        return Some (Opcode :: RCWSCASPL_PAIRREG_ADDR_SIMPLE_Rs_Rt (RCWSCASPL_PAIRREG_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9600400 {
                                                        return Some(
                                                            Opcode::STZG_Rt_SP_ADDR_SIMM13(
                                                                STZG_Rt_SP_ADDR_SIMM13::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 31 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 0xffc00000 == 0x39400000 {
                                                return Some(Opcode::LDRB_ADDR_UIMM12_Rt(
                                                    LDRB_ADDR_UIMM12_Rt::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffc00000 == 0x79400000 {
                                                return Some(Opcode::LDRH_ADDR_UIMM12_Rt(
                                                    LDRH_ADDR_UIMM12_Rt::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0xbfc00000 == 0xb9400000 {
                                            return Some(Opcode::LDR_ADDR_UIMM12_Rt(
                                                LDR_ADDR_UIMM12_Rt::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 10 & 1 == 0 {
                                    if insn >> 11 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe00c00 == 0x19800000 {
                                                            return Some(
                                                                Opcode::LDAPURSB_ADDR_OFFSET_Rt(
                                                                    LDAPURSB_ADDR_OFFSET_Rt::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x99800000 {
                                                            return Some(
                                                                Opcode::LDAPURSW_ADDR_OFFSET_Rt(
                                                                    LDAPURSW_ADDR_OFFSET_Rt::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0x59800000 {
                                                        return Some(
                                                            Opcode::LDAPURSH_ADDR_OFFSET_Rt(
                                                                LDAPURSH_ADDR_OFFSET_Rt::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe00c00 == 0x19c00000 {
                                                        return Some(
                                                            Opcode::LDAPURSB_Rt_ADDR_OFFSET(
                                                                LDAPURSB_Rt_ADDR_OFFSET::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0x59c00000 {
                                                        return Some(
                                                            Opcode::LDAPURSH_Rt_ADDR_OFFSET(
                                                                LDAPURSH_Rt_ADDR_OFFSET::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xfffffc00 == 0xd9a00000 {
                                                                return Some(
                                                                    Opcode::STGM_ADDR_SIMPLE_Rt(
                                                                        STGM_ADDR_SIMPLE_Rt::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0xd9e00000 {
                                                                return Some(
                                                                    Opcode::LDGM_Rt_ADDR_SIMPLE(
                                                                        LDGM_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a08000 {
                                                                return Some (Opcode :: SWPPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 (SWPPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19e08000 {
                                                                return Some (Opcode :: SWPPAL_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt (SWPPAL_LSE128_Rt2_ADDR_SIMPLE_LSE128_Rt :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a0a000 {
                                                                return Some (Opcode :: RCWSWPPA_ADDR_SIMPLE_Rt_Rs (RCWSWPPA_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x59a0a000 {
                                                                return Some (Opcode :: RCWSSWPPA_Rs_Rt_ADDR_SIMPLE (RCWSSWPPA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19e0a000 {
                                                                return Some (Opcode :: RCWSWPPAL_Rs_ADDR_SIMPLE_Rt (RCWSWPPAL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x59e0a000 {
                                                                return Some (Opcode :: RCWSSWPPAL_ADDR_SIMPLE_Rs_Rt (RCWSSWPPAL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a01000 {
                                                                return Some (Opcode :: LDCLRPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 (LDCLRPA_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19e01000 {
                                                                return Some (Opcode :: LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19a09000 {
                                                                    return Some (Opcode :: RCWCLRPA_ADDR_SIMPLE_Rs_Rt (RCWCLRPA_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59a09000 {
                                                                    return Some (Opcode :: RCWSCLRPA_ADDR_SIMPLE_Rt_Rs (RCWSCLRPA_ADDR_SIMPLE_Rt_Rs :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19e09000 {
                                                                    return Some (Opcode :: RCWCLRPAL_Rs_ADDR_SIMPLE_Rt (RCWCLRPAL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59e09000 {
                                                                    return Some (Opcode :: RCWSCLRPAL_Rs_Rt_ADDR_SIMPLE (RCWSCLRPAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a03000 {
                                                                return Some (Opcode :: LDSETPA_ADDR_SIMPLE_LSE128_Rt_LSE128_Rt2 (LDSETPA_ADDR_SIMPLE_LSE128_Rt_LSE128_Rt2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19e03000 {
                                                                return Some (Opcode :: LDSETPAL_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 (LDSETPAL_LSE128_Rt_ADDR_SIMPLE_LSE128_Rt2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19a0b000 {
                                                                    return Some (Opcode :: RCWSETPA_Rs_Rt_ADDR_SIMPLE (RCWSETPA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59a0b000 {
                                                                    return Some (Opcode :: RCWSSETPA_Rt_Rs_ADDR_SIMPLE (RCWSSETPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19e0b000 {
                                                                    return Some (Opcode :: RCWSETPAL_Rt_Rs_ADDR_SIMPLE (RCWSETPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59e0b000 {
                                                                    return Some (Opcode :: RCWSSETPAL_Rs_ADDR_SIMPLE_Rt (RCWSSETPAL_Rs_ADDR_SIMPLE_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn & 0x3ffffc00 == 0x19800800 {
                                                    return Some(
                                                        Opcode::STLR_RCPC3_ADDR_PREIND_WB_Rt(
                                                            STLR_RCPC3_ADDR_PREIND_WB_Rt::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x3ffffc00 == 0x19c00800 {
                                                    return Some(
                                                        Opcode::LDAPR_RCPC3_ADDR_POSTIND_Rt(
                                                            LDAPR_RCPC3_ADDR_POSTIND_Rt::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19a00800 {
                                                        return Some(
                                                            Opcode::RCWCASA_ADDR_SIMPLE_Rs_Rt(
                                                                RCWCASA_ADDR_SIMPLE_Rs_Rt::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59a00800 {
                                                            return Some (Opcode :: RCWSCASA_Rt_ADDR_SIMPLE_Rs (RCWSCASA_Rt_ADDR_SIMPLE_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9a00800 {
                                                            return Some(
                                                                Opcode::ST2G_Rt_SP_ADDR_SIMM13(
                                                                    ST2G_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19e00800 {
                                                        return Some(
                                                            Opcode::RCWCASAL_Rt_ADDR_SIMPLE_Rs(
                                                                RCWCASAL_Rt_ADDR_SIMPLE_Rs::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59e00800 {
                                                            return Some (Opcode :: RCWSCASAL_ADDR_SIMPLE_Rs_Rt (RCWSCASAL_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9e00800 {
                                                            return Some(
                                                                Opcode::STZ2G_Rt_SP_ADDR_SIMM13(
                                                                    STZ2G_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19800400 {
                                                                return Some (Opcode :: CPYFE_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFE_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c00400 {
                                                                return Some (Opcode :: SETP_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm (SETP_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19808400 {
                                                                return Some (Opcode :: CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c08400 {
                                                                return Some (Opcode :: SETE_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd (SETE_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19804400 {
                                                                return Some (Opcode :: CPYFEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c04400 {
                                                                return Some (Opcode :: SETM_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn (SETM_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980c400 {
                                                            return Some (Opcode :: CPYFEN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFEN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19802400 {
                                                                return Some (Opcode :: CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c02400 {
                                                                return Some (Opcode :: SETPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm (SETPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1980a400 {
                                                                return Some (Opcode :: CPYFERTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFERTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c0a400 {
                                                                return Some (Opcode :: SETEN_Rm_MOPS_WB_Rn_MOPS_ADDR_Rd (SETEN_Rm_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19806400 {
                                                                return Some (Opcode :: CPYFERTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYFERTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c06400 {
                                                                return Some (Opcode :: SETMN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETMN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980e400 {
                                                            return Some (Opcode :: CPYFERTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYFERTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19801400 {
                                                                return Some (Opcode :: CPYFEWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYFEWT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c01400 {
                                                                return Some (Opcode :: SETPT_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd (SETPT_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19809400 {
                                                                return Some (Opcode :: CPYFEWTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFEWTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c09400 {
                                                                return Some (Opcode :: SETET_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd (SETET_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19805400 {
                                                                return Some (Opcode :: CPYFEWTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFEWTWN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c05400 {
                                                                return Some (Opcode :: SETMT_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm (SETMT_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980d400 {
                                                            return Some (Opcode :: CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19803400 {
                                                                return Some (Opcode :: CPYFET_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYFET_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c03400 {
                                                                return Some (Opcode :: SETPTN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd (SETPTN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1980b400 {
                                                                return Some (Opcode :: CPYFETRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYFETRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c0b400 {
                                                                return Some (Opcode :: SETETN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd (SETETN_MOPS_WB_Rn_Rm_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19807400 {
                                                                return Some (Opcode :: CPYFETWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYFETWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c07400 {
                                                                return Some (Opcode :: SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980f400 {
                                                            return Some (Opcode :: CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x19a00c00 {
                                                    return Some (Opcode :: RCWCASPA_Rt_Rs_ADDR_SIMPLE_PAIRREG (RCWCASPA_Rt_Rs_ADDR_SIMPLE_PAIRREG :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59a00c00 {
                                                        return Some (Opcode :: RCWSCASPA_PAIRREG_ADDR_SIMPLE_Rs_Rt (RCWSCASPA_PAIRREG_ADDR_SIMPLE_Rs_Rt :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9a00400 {
                                                        return Some(
                                                            Opcode::ST2G_ADDR_SIMM13_Rt_SP(
                                                                ST2G_ADDR_SIMM13_Rt_SP::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x19e00c00 {
                                                    return Some (Opcode :: RCWCASPAL_Rt_PAIRREG_Rs_ADDR_SIMPLE (RCWCASPAL_Rt_PAIRREG_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59e00c00 {
                                                        return Some (Opcode :: RCWSCASPAL_ADDR_SIMPLE_Rs_Rt_PAIRREG (RCWSCASPAL_ADDR_SIMPLE_Rs_Rt_PAIRREG :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9e00400 {
                                                        return Some(
                                                            Opcode::STZ2G_ADDR_SIMM13_Rt_SP(
                                                                STZ2G_ADDR_SIMM13_Rt_SP::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 31 & 1 == 0 {
                                        if insn & 0xff800000 == 0x39800000 {
                                            return Some(Opcode::LDRSB_ADDR_UIMM12_Rt(
                                                LDRSB_ADDR_UIMM12_Rt::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffc00000 == 0xb9800000 {
                                            return Some(Opcode::LDRSW_Rt_ADDR_UIMM12(
                                                LDRSW_Rt_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 31 & 1 == 0 {
                                        if insn & 0xff800000 == 0x79800000 {
                                            return Some(Opcode::LDRSH_ADDR_UIMM12_Rt(
                                                LDRSH_ADDR_UIMM12_Rt::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffc00000 == 0xf9800000 {
                                            return Some(Opcode::PRFM_PRFOP_ADDR_UIMM12(
                                                PRFM_PRFOP_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if insn >> 24 & 1 == 0 {
                if insn >> 27 & 1 == 0 {
                    if insn >> 23 & 1 == 0 {
                        if insn >> 29 & 1 == 0 {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f800000 == 0x12000000 {
                                    return Some(Opcode::AND_LIMM_Rn_Rd_SP(
                                        AND_LIMM_Rn_Rd_SP::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x52000000 {
                                    return Some(Opcode::EOR_LIMM_Rd_SP_Rn(
                                        EOR_LIMM_Rd_SP_Rn::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f800000 == 0x32000000 {
                                    return Some(Opcode::ORR_Rd_SP_Rn_LIMM(
                                        ORR_Rd_SP_Rn_LIMM::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x72000000 {
                                    return Some(Opcode::ANDS_Rd_Rn_LIMM(ANDS_Rd_Rn_LIMM::from(
                                        insn,
                                    )));
                                }
                            }
                        }
                    } else {
                        if insn >> 29 & 1 == 0 {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f800000 == 0x12800000 {
                                    return Some(Opcode::MOVN_HALF_Rd(MOVN_HALF_Rd::from(insn)));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x52800000 {
                                    return Some(Opcode::MOVZ_HALF_Rd(MOVZ_HALF_Rd::from(insn)));
                                }
                            }
                        } else {
                            if insn & 0x7f800000 == 0x72800000 {
                                return Some(Opcode::MOVK_Rd_HALF(MOVK_Rd_HALF::from(insn)));
                            }
                        }
                    }
                } else {
                    if insn >> 21 & 1 == 0 {
                        if insn >> 28 & 1 == 0 {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7f200000 == 0xa000000 {
                                        return Some(Opcode::AND_Rd_Rm_SFT_Rn(
                                            AND_Rd_Rm_SFT_Rn::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x4a000000 {
                                        return Some(Opcode::EOR_Rm_SFT_Rn_Rd(
                                            EOR_Rm_SFT_Rn_Rd::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7f200000 == 0x2a000000 {
                                        return Some(Opcode::ORR_Rm_SFT_Rn_Rd(
                                            ORR_Rm_SFT_Rn_Rd::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x6a000000 {
                                        return Some(Opcode::ANDS_Rn_Rm_SFT_Rd(
                                            ANDS_Rn_Rm_SFT_Rd::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 10 & 1 == 0 {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 22 & 1 == 0 {
                                        if insn >> 23 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x1a000000 {
                                                        return Some(Opcode::ADC_Rm_Rd_Rn(
                                                            ADC_Rm_Rd_Rn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x7fe0fc00 == 0x5a000000 {
                                                        return Some(Opcode::SBC_Rm_Rd_Rn(
                                                            SBC_Rm_Rd_Rn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x3a000000 {
                                                        return Some(Opcode::ADCS_Rm_Rn_Rd(
                                                            ADCS_Rm_Rn_Rd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x7fe0fc00 == 0x7a000000 {
                                                        return Some(Opcode::SBCS_Rn_Rd_Rm(
                                                            SBCS_Rn_Rd_Rm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0x7fe00c00 == 0x1a800000 {
                                                    return Some(Opcode::CSEL_COND_Rn_Rd_Rm(
                                                        CSEL_COND_Rn_Rd_Rm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x7fe00c00 == 0x5a800000 {
                                                    return Some(Opcode::CSINV_Rd_COND_Rn_Rm(
                                                        CSINV_Rd_COND_Rn_Rm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 23 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0x7fe00c10 == 0x3a400000 {
                                                    return Some(Opcode::CCMN_Rn_COND_NZCV_Rm(
                                                        CCMN_Rn_COND_NZCV_Rm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x7fe00c10 == 0x7a400000 {
                                                    return Some(Opcode::CCMP_Rn_NZCV_Rm_COND(
                                                        CCMP_Rn_NZCV_Rm_COND::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x9ac00000 {
                                                                    return Some (Opcode :: SUBP_Rm_SP_Rd_Rn_SP (SUBP_Rm_SP_Rd_Rn_SP :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0x7ffffc00
                                                                        == 0x5ac00000
                                                                    {
                                                                        return Some(
                                                                            Opcode::RBIT_Rd_Rn(
                                                                                RBIT_Rd_Rn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0xdac10000
                                                                    {
                                                                        return Some (Opcode :: PACIA_Rn_SP_Rd (PACIA_Rn_SP_Rd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xbac00000 {
                                                                return Some(
                                                                    Opcode::SUBPS_Rm_SP_Rd_Rn_SP(
                                                                        SUBPS_Rm_SP_Rd_Rn_SP::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1ac04000 {
                                                                return Some(
                                                                    Opcode::CRC32B_Rd_Rn_Rm(
                                                                        CRC32B_Rd_Rn_Rm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffffffe0 == 0xdac143e0 {
                                                                return Some(Opcode::XPACI_Rd(
                                                                    XPACI_Rd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0x7fe0fc00 == 0x1ac02000 {
                                                                return Some(
                                                                    Opcode::LSLV_Rn_Rm_Rd(
                                                                        LSLV_Rn_Rm_Rd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0x7ffffc00 == 0x5ac02000 {
                                                                    return Some(
                                                                        Opcode::ABS_Rd_Rn(
                                                                            ABS_Rd_Rn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffffffe0 == 0xdac123e0 {
                                                                    return Some(
                                                                        Opcode::PACIZA_Rd(
                                                                            PACIZA_Rd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x7fe0fc00 == 0x1ac06000 {
                                                            return Some(Opcode::SMAX_Rd_Rn_Rm(
                                                                SMAX_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x9ac01000 {
                                                                return Some(
                                                                    Opcode::IRG_Rd_SP_Rn_SP_Rm(
                                                                        IRG_Rd_SP_Rn_SP_Rm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0x7ffffc00 == 0x5ac01000 {
                                                                    return Some(
                                                                        Opcode::CLZ_Rd_Rn(
                                                                            CLZ_Rd_Rn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0xdac11000 {
                                                                    return Some(
                                                                        Opcode::AUTIA_Rd_Rn_SP(
                                                                            AUTIA_Rd_Rn_SP::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1ac05000 {
                                                            return Some(Opcode::CRC32CB_Rn_Rd_Rm(
                                                                CRC32CB_Rn_Rd_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x9ac03000 {
                                                            return Some(
                                                                Opcode::PACGA_Rm_SP_Rn_Rd(
                                                                    PACGA_Rm_SP_Rn_Rd::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffffffe0 == 0xdac133e0 {
                                                            return Some(Opcode::AUTIZA_Rd(
                                                                AUTIZA_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 22 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn & 0xfffffc1f == 0x3a00080d {
                                                return Some(Opcode::SETF8_Rn(SETF8_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0x3a00480d {
                                                return Some(Opcode::SETF16_Rn(SETF16_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    } else {
                                        if insn >> 23 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0x7fe00c10 == 0x3a400800 {
                                                    return Some(
                                                        Opcode::CCMN_Rn_CCMP_IMM_COND_NZCV(
                                                            CCMN_Rn_CCMP_IMM_COND_NZCV::from(insn),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x7fe00c10 == 0x7a400800 {
                                                    return Some(
                                                        Opcode::CCMP_Rn_NZCV_COND_CCMP_IMM(
                                                            CCMP_Rn_NZCV_COND_CCMP_IMM::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0x7fe0fc00 == 0x1ac00800 {
                                                                return Some(
                                                                    Opcode::UDIV_Rn_Rm_Rd(
                                                                        UDIV_Rn_Rm_Rd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 31 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ac00800
                                                                    {
                                                                        return Some(
                                                                            Opcode::REV_Rd_Rn(
                                                                                REV_Rd_Rn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0xdac00800
                                                                    {
                                                                        return Some(
                                                                            Opcode::REV32_Rn_Rd(
                                                                                REV32_Rn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0xdac10800 {
                                                                    return Some(
                                                                        Opcode::PACDA_Rn_SP_Rd(
                                                                            PACDA_Rn_SP_Rd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1ac04800 {
                                                            return Some(Opcode::CRC32W_Rn_Rm_Rd(
                                                                CRC32W_Rn_Rm_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0x7fe0fc00 == 0x1ac02800 {
                                                                return Some(
                                                                    Opcode::ASRV_Rd_Rn_Rm(
                                                                        ASRV_Rd_Rn_Rm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffffffe0 == 0xdac12be0 {
                                                                return Some(Opcode::PACDZA_Rd(
                                                                    PACDZA_Rd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x7fe0fc00 == 0x1ac06800 {
                                                            return Some(Opcode::SMIN_Rd_Rn_Rm(
                                                                SMIN_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0x7ffffc00 == 0x5ac01800 {
                                                                return Some(Opcode::CTZ_Rd_Rn(
                                                                    CTZ_Rd_Rn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0xdac11800 {
                                                                return Some(
                                                                    Opcode::AUTDA_Rn_SP_Rd(
                                                                        AUTDA_Rn_SP_Rd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1ac05800 {
                                                            return Some(Opcode::CRC32CW_Rn_Rd_Rm(
                                                                CRC32CW_Rn_Rd_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffffffe0 == 0xdac13be0 {
                                                        return Some(Opcode::AUTDZA_Rd(
                                                            AUTDZA_Rd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 22 & 1 == 0 {
                                        if insn >> 23 & 1 == 0 {
                                            if insn & 0xffe07c10 == 0xba000400 {
                                                return Some(Opcode::RMIF_MASK_Rn_IMM_2(
                                                    RMIF_MASK_Rn_IMM_2::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0x7fe00c00 == 0x1a800400 {
                                                    return Some(Opcode::CSINC_Rd_Rn_COND_Rm(
                                                        CSINC_Rd_Rn_COND_Rm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x7fe00c00 == 0x5a800400 {
                                                    return Some(Opcode::CSNEG_COND_Rm_Rd_Rn(
                                                        CSNEG_COND_Rm_Rd_Rn::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn & 0x7ffffc00 == 0x5ac00400 {
                                                            return Some(Opcode::REV16_Rn_Rd(
                                                                REV16_Rn_Rd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xdac10400 {
                                                            return Some(Opcode::PACIB_Rn_SP_Rd(
                                                                PACIB_Rn_SP_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1ac04400 {
                                                            return Some(Opcode::CRC32H_Rm_Rd_Rn(
                                                                CRC32H_Rm_Rd_Rn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffffffe0 == 0xdac147e0 {
                                                            return Some(Opcode::XPACD_Rd(
                                                                XPACD_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0x7fe0fc00 == 0x1ac02400 {
                                                            return Some(Opcode::LSRV_Rd_Rn_Rm(
                                                                LSRV_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffffffe0 == 0xdac127e0 {
                                                            return Some(Opcode::PACIZB_Rd(
                                                                PACIZB_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x7fe0fc00 == 0x1ac06400 {
                                                        return Some(Opcode::UMAX_Rd_Rn_Rm(
                                                            UMAX_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x9ac01400 {
                                                            return Some(Opcode::GMI_Rn_SP_Rm_Rd(
                                                                GMI_Rn_SP_Rm_Rd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0x7ffffc00 == 0x5ac01400 {
                                                                return Some(Opcode::CLS_Rd_Rn(
                                                                    CLS_Rd_Rn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0xdac11400 {
                                                                return Some(
                                                                    Opcode::AUTIB_Rn_SP_Rd(
                                                                        AUTIB_Rn_SP_Rd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1ac05400 {
                                                        return Some(Opcode::CRC32CH_Rn_Rm_Rd(
                                                            CRC32CH_Rn_Rm_Rd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffffffe0 == 0xdac137e0 {
                                                    return Some(Opcode::AUTIZB_Rd(
                                                        AUTIZB_Rd::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x1ac00c00 {
                                                        return Some(Opcode::SDIV_Rn_Rd_Rm(
                                                            SDIV_Rn_Rd_Rm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn & 0xfffffc00 == 0xdac00c00 {
                                                            return Some(Opcode::REV_Rn_Rd(
                                                                REV_Rn_Rd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xdac10c00 {
                                                            return Some(Opcode::PACDB_Rn_SP_Rd(
                                                                PACDB_Rn_SP_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x9ac04c00 {
                                                    return Some(Opcode::CRC32X_Rm_Rd_Rn(
                                                        CRC32X_Rm_Rd_Rn::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x1ac02c00 {
                                                        return Some(Opcode::RORV_Rd_Rn_Rm(
                                                            RORV_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffffffe0 == 0xdac12fe0 {
                                                        return Some(Opcode::PACDZB_Rd(
                                                            PACDZB_Rd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x7fe0fc00 == 0x1ac06c00 {
                                                    return Some(Opcode::UMIN_Rm_Rd_Rn(
                                                        UMIN_Rm_Rd_Rn::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn & 0x7ffffc00 == 0x5ac01c00 {
                                                        return Some(Opcode::CNT_Rn_Rd(
                                                            CNT_Rn_Rd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0xdac11c00 {
                                                        return Some(Opcode::AUTDB_Rd_Rn_SP(
                                                            AUTDB_Rd_Rn_SP::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x9ac05c00 {
                                                    return Some(Opcode::CRC32CX_Rn_Rm_Rd(
                                                        CRC32CX_Rn_Rm_Rd::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xffffffe0 == 0xdac13fe0 {
                                                return Some(Opcode::AUTDZB_Rd(AUTDZB_Rd::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 29 & 1 == 0 {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f200000 == 0xa200000 {
                                    return Some(Opcode::BIC_Rd_Rn_Rm_SFT(BIC_Rd_Rn_Rm_SFT::from(
                                        insn,
                                    )));
                                }
                            } else {
                                if insn & 0x7f200000 == 0x4a200000 {
                                    return Some(Opcode::EON_Rn_Rd_Rm_SFT(EON_Rn_Rd_Rm_SFT::from(
                                        insn,
                                    )));
                                }
                            }
                        } else {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f200000 == 0x2a200000 {
                                    return Some(Opcode::ORN_Rd_Rm_SFT_Rn(ORN_Rd_Rm_SFT_Rn::from(
                                        insn,
                                    )));
                                }
                            } else {
                                if insn & 0x7f200000 == 0x6a200000 {
                                    return Some(Opcode::BICS_Rd_Rm_SFT_Rn(
                                        BICS_Rd_Rm_SFT_Rn::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            } else {
                if insn >> 27 & 1 == 0 {
                    if insn >> 23 & 1 == 0 {
                        if insn >> 29 & 1 == 0 {
                            if insn >> 30 & 1 == 0 {
                                if insn & 0x7f800000 == 0x13000000 {
                                    return Some(Opcode::SBFM_Rd_Rn_IMMS_IMMR(
                                        SBFM_Rd_Rn_IMMS_IMMR::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x53000000 {
                                    return Some(Opcode::UBFM_Rd_IMMS_Rn_IMMR(
                                        UBFM_Rd_IMMS_Rn_IMMR::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn & 0x7f800000 == 0x33000000 {
                                return Some(Opcode::BFM_IMMR_Rd_Rn_IMMS(
                                    BFM_IMMR_Rd_Rn_IMMS::from(insn),
                                ));
                            }
                        }
                    } else {
                        if insn & 0x7fa00000 == 0x13800000 {
                            return Some(Opcode::EXTR_Rm_Rn_Rd_IMMS(EXTR_Rm_Rn_Rd_IMMS::from(
                                insn,
                            )));
                        }
                    }
                } else {
                    if insn >> 21 & 1 == 0 {
                        if insn >> 28 & 1 == 0 {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7f200000 == 0xb000000 {
                                        return Some(Opcode::ADD_Rm_SFT_Rd_Rn(
                                            ADD_Rm_SFT_Rd_Rn::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x4b000000 {
                                        return Some(Opcode::SUB_Rn_Rm_SFT_Rd(
                                            SUB_Rn_Rm_SFT_Rd::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn & 0x7f200000 == 0x2b000000 {
                                        return Some(Opcode::ADDS_Rd_Rm_SFT_Rn(
                                            ADDS_Rd_Rm_SFT_Rn::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x6b000000 {
                                        return Some(Opcode::SUBS_Rm_SFT_Rd_Rn(
                                            SUBS_Rm_SFT_Rd_Rn::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 15 & 1 == 0 {
                                if insn >> 22 & 1 == 0 {
                                    if insn & 0x7fe08000 == 0x1b000000 {
                                        return Some(Opcode::MADD_Rn_Rd_Rm_Ra(
                                            MADD_Rn_Rd_Rm_Ra::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn >> 23 & 1 == 0 {
                                        if insn & 0xffe0fc00 == 0x9b407c00 {
                                            return Some(Opcode::SMULH_Rm_Rd_Rn(
                                                SMULH_Rm_Rd_Rn::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffe0fc00 == 0x9bc07c00 {
                                            return Some(Opcode::UMULH_Rn_Rm_Rd(
                                                UMULH_Rn_Rm_Rd::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x7fe08000 == 0x1b008000 {
                                    return Some(Opcode::MSUB_Rn_Rm_Rd_Ra(MSUB_Rn_Rm_Rd_Ra::from(
                                        insn,
                                    )));
                                }
                            }
                        }
                    } else {
                        if insn >> 23 & 1 == 0 {
                            if insn >> 28 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 30 & 1 == 0 {
                                        if insn & 0x7fe00000 == 0xb200000 {
                                            return Some(Opcode::ADD_Rd_SP_Rm_EXT_Rn_SP(
                                                ADD_Rd_SP_Rm_EXT_Rn_SP::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x7fe00000 == 0x4b200000 {
                                            return Some(Opcode::SUB_Rd_SP_Rn_SP_Rm_EXT(
                                                SUB_Rd_SP_Rn_SP_Rm_EXT::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 30 & 1 == 0 {
                                        if insn & 0x7fe00000 == 0x2b200000 {
                                            return Some(Opcode::ADDS_Rd_Rn_SP_Rm_EXT(
                                                ADDS_Rd_Rn_SP_Rm_EXT::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x7fe00000 == 0x6b200000 {
                                            return Some(Opcode::SUBS_Rn_SP_Rd_Rm_EXT(
                                                SUBS_Rn_SP_Rd_Rm_EXT::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn >> 15 & 1 == 0 {
                                    if insn & 0xffe08000 == 0x9b200000 {
                                        return Some(Opcode::SMADDL_Rn_Ra_Rd_Rm(
                                            SMADDL_Rn_Ra_Rd_Rm::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xffe08000 == 0x9b208000 {
                                        return Some(Opcode::SMSUBL_Rn_Rd_Ra_Rm(
                                            SMSUBL_Rn_Rd_Ra_Rm::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 15 & 1 == 0 {
                                if insn & 0xffe08000 == 0x9ba00000 {
                                    return Some(Opcode::UMADDL_Rm_Ra_Rd_Rn(
                                        UMADDL_Rm_Ra_Rd_Rn::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0xffe08000 == 0x9ba08000 {
                                    return Some(Opcode::UMSUBL_Rn_Rd_Rm_Ra(
                                        UMSUBL_Rn_Rd_Rm_Ra::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
        if insn >> 27 & 1 == 0 {
            if insn >> 28 & 1 == 0 {
                if insn >> 24 & 1 == 0 {
                    if insn >> 29 & 1 == 0 {
                        if insn >> 13 & 1 == 0 {
                            if insn >> 14 & 1 == 0 {
                                if insn >> 15 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4000000
                                                                    {
                                                                        return Some (Opcode :: ADD_SVE_Pg3_SVE_Zm_5_SVE_Zd (ADD_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4100000
                                                                    {
                                                                        return Some (Opcode :: MUL_SVE_Zd_SVE_Pg3_SVE_Zm_5 (MUL_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4080000
                                                                    {
                                                                        return Some (Opcode :: SMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4180000
                                                                    {
                                                                        return Some (Opcode :: ORR_SVE_Zm_5_SVE_Pg3_SVE_Zd (ORR_SVE_Zm_5_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffbfe000 == 0x4940000 {
                                                                    return Some (Opcode :: SDIV_SVE_Pg3_SVE_Zm_5_SVE_Zd (SDIV_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x40c0000 {
                                                                    return Some (Opcode :: SABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 (SABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4120000 {
                                                                    return Some (Opcode :: SMULH_SVE_Zd_SVE_Pg3_SVE_Zm_5 (SMULH_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40a0000
                                                                    {
                                                                        return Some (Opcode :: SMIN_SVE_Zd_SVE_Pg3_SVE_Zm_5 (SMIN_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41a0000
                                                                    {
                                                                        return Some (Opcode :: AND_SVE_Zd_SVE_Pg3_SVE_Zm_5 (AND_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffbfe000 == 0x4960000 {
                                                                return Some (Opcode :: SDIVR_SVE_Zd_SVE_Pg3_SVE_Zm_5 (SDIVR_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4010000 {
                                                                    return Some (Opcode :: SUB_SVE_Pg3_SVE_Zm_5_SVE_Zd (SUB_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4090000
                                                                    {
                                                                        return Some (Opcode :: UMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UMAX_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4190000
                                                                    {
                                                                        return Some (Opcode :: EOR_SVE_Zm_5_SVE_Zd_SVE_Pg3 (EOR_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffbfe000 == 0x4950000 {
                                                                    return Some (Opcode :: UDIV_SVE_Zd_SVE_Zm_5_SVE_Pg3 (UDIV_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x40d0000 {
                                                                    return Some (Opcode :: UABD_SVE_Zd_SVE_Pg3_SVE_Zm_5 (UABD_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4030000
                                                                    {
                                                                        return Some (Opcode :: SUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 (SUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4130000
                                                                    {
                                                                        return Some (Opcode :: UMULH_SVE_Pg3_SVE_Zm_5_SVE_Zd (UMULH_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40b0000
                                                                    {
                                                                        return Some (Opcode :: UMIN_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UMIN_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41b0000
                                                                    {
                                                                        return Some (Opcode :: BIC_SVE_Zd_SVE_Pg3_SVE_Zm_5 (BIC_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffbfe000 == 0x4970000 {
                                                                return Some (Opcode :: UDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd (UDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x84000000 {
                                                        return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84800000 {
                                                        return Some (Opcode :: LD1SH_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN (LD1SH_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44800000 {
                                                                return Some (Opcode :: SDOT_SVE_Zn_SVE_Zm_16_SVE_Zd (SDOT_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44000800 {
                                                                return Some (Opcode :: SQDMLALBT_SVE_Zn_SVE_Zm_16_SVE_Zd (SQDMLALBT_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44800400 {
                                                                return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44000c00 {
                                                                return Some (Opcode :: SQDMLSLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 (SQDMLSLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0f000 == 0x44801000 {
                                                        return Some (Opcode :: CDOT_SVE_Zn_SVE_Zd_SVE_IMM_ROT2_SVE_Zm_16 (CDOT_SVE_Zn_SVE_Zd_SVE_IMM_ROT2_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4000000 {
                                                        return Some (Opcode :: LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4800000 {
                                                        return Some (Opcode :: LD1SH_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 (LD1SH_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4200000 {
                                                                return Some (Opcode :: ADD_SVE_Zm_16_SVE_Zn_SVE_Zd (ADD_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4201000 {
                                                                return Some (Opcode :: SQADD_SVE_Zd_SVE_Zm_16_SVE_Zn (SQADD_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4201800 {
                                                            return Some (Opcode :: SQSUB_SVE_Zm_16_SVE_Zd_SVE_Zn (SQSUB_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4200400 {
                                                                return Some (Opcode :: SUB_SVE_Zd_SVE_Zm_16_SVE_Zn (SUB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4201400 {
                                                                return Some (Opcode :: UQADD_SVE_Zn_SVE_Zd_SVE_Zm_16 (UQADD_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4201c00 {
                                                            return Some (Opcode :: UQSUB_SVE_Zd_SVE_Zm_16_SVE_Zn (UQSUB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e010 == 0x84200000 {
                                                        return Some (Opcode :: PRFB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_PRFOP (PRFB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_PRFOP :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a00000 {
                                                        return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 (LD1SH_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44201000 {
                                                                return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn (SQRDMLAH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x44200800 {
                                                                return Some (Opcode :: MLA_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn (MLA_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44201400 {
                                                                return Some (Opcode :: SQRDMLSH_SVE_Zm3_22_INDEX_SVE_Zd_SVE_Zn (SQRDMLSH_SVE_Zm3_22_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x44200c00 {
                                                                return Some (Opcode :: MLS_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX (MLS_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e010 == 0xc4200000 {
                                                        return Some (Opcode :: PRFB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_PRFOP (PRFB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_PRFOP :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00000
                                                                    {
                                                                        return Some (Opcode :: SDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn (SDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00000
                                                                    {
                                                                        return Some (Opcode :: SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a01000
                                                                    {
                                                                        return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn (SQRDMLAH_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e01000
                                                                    {
                                                                        return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00800
                                                                    {
                                                                        return Some (Opcode :: MLA_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX (MLA_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00800
                                                                    {
                                                                        return Some (Opcode :: MLA_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn (MLA_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44a01800 {
                                                                    return Some (Opcode :: USDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn (USDOT_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00400
                                                                    {
                                                                        return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00400
                                                                    {
                                                                        return Some (Opcode :: UDOT_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd (UDOT_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a01400
                                                                    {
                                                                        return Some (Opcode :: SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e01400
                                                                    {
                                                                        return Some (Opcode :: SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX (SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00c00
                                                                    {
                                                                        return Some (Opcode :: MLS_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn (MLS_SVE_Zd_SVE_Zm3_INDEX_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00c00
                                                                    {
                                                                        return Some (Opcode :: MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44a01c00 {
                                                                    return Some (Opcode :: SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a00000 {
                                                        return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 31 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 16 & 1 == 0 {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4008000 {
                                                                    return Some (Opcode :: ASR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 (ASR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4108000
                                                                    {
                                                                        return Some (Opcode :: ASR_SVE_Pg3_SVE_Zd_SVE_Zm_5 (ASR_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44108000
                                                                    {
                                                                        return Some (Opcode :: SHADD_SVE_Zn_SVE_Pg3_SVE_Zd (SHADD_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x44088000 {
                                                                    return Some (Opcode :: SQSHL_SVE_Zn_SVE_Zd_SVE_Pg3 (SQSHL_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4188000
                                                                    {
                                                                        return Some (Opcode :: ASR_SVE_Zd_SVE_Pg3_SVE_Zm_5 (ASR_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44188000
                                                                    {
                                                                        return Some (Opcode :: SQADD_SVE_Zn_SVE_Zd_SVE_Pg3 (SQADD_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4048000 {
                                                                    return Some (Opcode :: ASRD_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED (ASRD_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4148000
                                                                    {
                                                                        return Some (Opcode :: ASRR_SVE_Zm_5_SVE_Pg3_SVE_Zd (ASRR_SVE_Zm_5_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44148000
                                                                    {
                                                                        return Some (Opcode :: SRHADD_SVE_Pg3_SVE_Zn_SVE_Zd (SRHADD_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40c8000
                                                                    {
                                                                        return Some (Opcode :: SRSHR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 (SRSHR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x440c8000
                                                                    {
                                                                        return Some (Opcode :: SQSHLR_SVE_Zd_SVE_Zn_SVE_Pg3 (SQSHLR_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441c8000 {
                                                                    return Some (Opcode :: SUQADD_SVE_Zd_SVE_Pg3_SVE_Zn (SUQADD_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x44028000 {
                                                                    return Some (Opcode :: SRSHL_SVE_Pg3_SVE_Zd_SVE_Zn (SRSHL_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x44128000 {
                                                                    return Some (Opcode :: SHSUB_SVE_Zd_SVE_Zn_SVE_Pg3 (SHSUB_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x440a8000 {
                                                                    return Some (Opcode :: SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zn (SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441a8000 {
                                                                    return Some (Opcode :: SQSUB_SVE_Zn_SVE_Pg3_SVE_Zd (SQSUB_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4068000
                                                                    {
                                                                        return Some (Opcode :: SQSHL_SVE_Zd_SVE_Pg3_SVE_SHLIMM_PRED (SQSHL_SVE_Zd_SVE_Pg3_SVE_SHLIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44068000
                                                                    {
                                                                        return Some (Opcode :: SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zn (SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x44168000 {
                                                                    return Some (Opcode :: SHSUBR_SVE_Pg3_SVE_Zn_SVE_Zd (SHSUBR_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x440e8000 {
                                                                    return Some (Opcode :: SQRSHLR_SVE_Zn_SVE_Pg3_SVE_Zd (SQRSHLR_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441e8000 {
                                                                    return Some (Opcode :: SQSUBR_SVE_Pg3_SVE_Zn_SVE_Zd (SQSUBR_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4018000 {
                                                                    return Some (Opcode :: LSR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 (LSR_SVE_Zd_SVE_SHRIMM_PRED_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4118000
                                                                    {
                                                                        return Some (Opcode :: LSR_SVE_Zm_5_SVE_Zd_SVE_Pg3 (LSR_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44118000
                                                                    {
                                                                        return Some (Opcode :: UHADD_SVE_Zn_SVE_Pg3_SVE_Zd (UHADD_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x44098000 {
                                                                    return Some (Opcode :: UQSHL_SVE_Pg3_SVE_Zd_SVE_Zn (UQSHL_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4198000
                                                                    {
                                                                        return Some (Opcode :: LSR_SVE_Zd_SVE_Pg3_SVE_Zm_5 (LSR_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44198000
                                                                    {
                                                                        return Some (Opcode :: UQADD_SVE_Zd_SVE_Zn_SVE_Pg3 (UQADD_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4158000 {
                                                                    return Some (Opcode :: LSRR_SVE_Zd_SVE_Pg3_SVE_Zm_5 (LSRR_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x44158000 {
                                                                    return Some (Opcode :: URHADD_SVE_Zn_SVE_Pg3_SVE_Zd (URHADD_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40d8000
                                                                    {
                                                                        return Some (Opcode :: URSHR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 (URSHR_SVE_SHRIMM_PRED_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x440d8000
                                                                    {
                                                                        return Some (Opcode :: UQSHLR_SVE_Pg3_SVE_Zd_SVE_Zn (UQSHLR_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441d8000 {
                                                                    return Some (Opcode :: USQADD_SVE_Zd_SVE_Pg3_SVE_Zn (USQADD_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4038000
                                                                    {
                                                                        return Some (Opcode :: LSL_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED (LSL_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44038000
                                                                    {
                                                                        return Some (Opcode :: URSHL_SVE_Zd_SVE_Pg3_SVE_Zn (URSHL_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4138000
                                                                    {
                                                                        return Some (Opcode :: LSL_SVE_Pg3_SVE_Zd_SVE_Zm_5 (LSL_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44138000
                                                                    {
                                                                        return Some (Opcode :: UHSUB_SVE_Pg3_SVE_Zn_SVE_Zd (UHSUB_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x440b8000 {
                                                                    return Some (Opcode :: UQRSHL_SVE_Pg3_SVE_Zn_SVE_Zd (UQRSHL_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41b8000
                                                                    {
                                                                        return Some (Opcode :: LSL_SVE_Zd_SVE_Zm_5_SVE_Pg3 (LSL_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x441b8000
                                                                    {
                                                                        return Some (Opcode :: UQSUB_SVE_Zn_SVE_Zd_SVE_Pg3 (UQSUB_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4078000
                                                                    {
                                                                        return Some (Opcode :: UQSHL_SVE_SHLIMM_PRED_SVE_Pg3_SVE_Zd (UQSHL_SVE_SHLIMM_PRED_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44078000
                                                                    {
                                                                        return Some (Opcode :: URSHLR_SVE_Zd_SVE_Pg3_SVE_Zn (URSHLR_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4178000
                                                                    {
                                                                        return Some (Opcode :: LSLR_SVE_Zd_SVE_Zm_5_SVE_Pg3 (LSLR_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44178000
                                                                    {
                                                                        return Some (Opcode :: UHSUBR_SVE_Pg3_SVE_Zd_SVE_Zn (UHSUBR_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40f8000
                                                                    {
                                                                        return Some (Opcode :: SQSHLU_SVE_Zd_SVE_SHLIMM_PRED_SVE_Pg3 (SQSHLU_SVE_Zd_SVE_SHLIMM_PRED_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x440f8000
                                                                    {
                                                                        return Some (Opcode :: UQRSHLR_SVE_Pg3_SVE_Zn_SVE_Zd (UQRSHLR_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441f8000 {
                                                                    return Some (Opcode :: UQSUBR_SVE_Pg3_SVE_Zd_SVE_Zn (UQSUBR_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 10 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x4208000 {
                                                            return Some (Opcode :: ASR_SVE_Zn_SVE_Zm_16_SVE_Zd (ASR_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a08000 {
                                                                return Some (Opcode :: SMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (SMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e08000 {
                                                                return Some (Opcode :: SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x4209000 {
                                                            return Some (Opcode :: ASR_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED (ASR_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a09000 {
                                                                return Some (Opcode :: UMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (UMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e09000 {
                                                                return Some (Opcode :: UMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (UMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4208400 {
                                                                return Some (Opcode :: LSR_SVE_Zd_SVE_Zm_16_SVE_Zn (LSR_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4208c00 {
                                                                return Some (Opcode :: LSL_SVE_Zn_SVE_Zd_SVE_Zm_16 (LSL_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a08400 {
                                                                return Some (Opcode :: SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e08400 {
                                                                return Some (Opcode :: SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4209400 {
                                                                return Some (Opcode :: LSR_SVE_Zd_SVE_SHRIMM_UNPRED_SVE_Zn (LSR_SVE_Zd_SVE_SHRIMM_UNPRED_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4209c00 {
                                                                return Some (Opcode :: LSL_SVE_SHLIMM_UNPRED_SVE_Zn_SVE_Zd (LSL_SVE_SHLIMM_UNPRED_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a09400 {
                                                                return Some (Opcode :: UMLALT_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd (UMLALT_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e09400 {
                                                                return Some (Opcode :: UMLALT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn (UMLALT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xbfe0e000 == 0x84008000 {
                                                        return Some (Opcode :: LDNT1SB_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 (LDNT1SB_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xbfe0e000 == 0x84808000 {
                                                        return Some (Opcode :: LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x84208000 {
                                                            return Some (Opcode :: LD1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN (LD1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4208000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 (LD1SB_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x84a08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ADDR_ZI_U5x2_SVE_Pg3_SVE_ZtxN (LD1SH_SVE_ADDR_ZI_U5x2_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a08000 {
                                                            return Some (Opcode :: LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 (LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x84408000 {
                                                        return Some (Opcode :: LD1RB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN (LD1RB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 21 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc4408000 {
                                                            return Some (Opcode :: LD1SB_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN (LD1SB_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0xc4608000 {
                                                            return Some (Opcode :: PRFB_SVE_ADDR_RZ_SVE_Pg3_SVE_PRFOP (PRFB_SVE_ADDR_RZ_SVE_Pg3_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x84c08000 {
                                                        return Some (Opcode :: LD1RSW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6x4 (LD1RSW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 21 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc4c08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 (LD1SH_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 (LD1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 15 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x4004000 {
                                                    return Some (Opcode :: MLA_SVE_Zm_16_SVE_Zd_SVE_Zn_SVE_Pg3 (MLA_SVE_Zm_16_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x84004000 {
                                                        return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84804000 {
                                                        return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004000 {
                                                                return Some (Opcode :: SMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn (SMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005000 {
                                                                return Some (Opcode :: SMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn (SMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004800 {
                                                                return Some (Opcode :: UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005800 {
                                                                return Some (Opcode :: UMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn (UMLSLB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004400 {
                                                                return Some (Opcode :: SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005400 {
                                                                return Some (Opcode :: SMLSLT_SVE_Zm_16_SVE_Zn_SVE_Zd (SMLSLT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004c00 {
                                                                return Some (Opcode :: UMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn (UMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005c00 {
                                                                return Some (Opcode :: UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4004000 {
                                                        return Some (Opcode :: LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4804000 {
                                                        return Some (Opcode :: LD1H_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN (LD1H_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4204000 {
                                                                return Some (Opcode :: INDEX_SVE_SIMM5_SVE_SIMM5B_SVE_Zd (INDEX_SVE_SIMM5_SVE_SIMM5B_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4204400 {
                                                                return Some(
                                                                    Opcode::INDEX_Rn_SVE_Zd_SIMM5(
                                                                        INDEX_Rn_SVE_Zd_SIMM5::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffe0f800 == 0x4205000 {
                                                                    return Some (Opcode :: ADDVL_SVE_SIMM6_Rd_SP_SVE_Rn_SP (ADDVL_SVE_SIMM6_Rd_SP_SVE_Rn_SP :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffff800 == 0x4bf5000 {
                                                                    return Some(
                                                                        Opcode::RDVL_Rd_SVE_SIMM6(
                                                                            RDVL_Rd_SVE_SIMM6::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f800 == 0x4605000 {
                                                                return Some (Opcode :: ADDPL_Rd_SP_SVE_SIMM6_SVE_Rn_SP (ADDPL_Rd_SP_SVE_SIMM6_SVE_Rn_SP :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4204800 {
                                                                return Some (Opcode :: INDEX_SVE_Zd_SVE_SIMM5_Rm (INDEX_SVE_Zd_SVE_SIMM5_Rm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4204c00 {
                                                                return Some(
                                                                    Opcode::INDEX_Rn_Rm_SVE_Zd(
                                                                        INDEX_Rn_Rm_SVE_Zd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffe0f800 == 0x4205800 {
                                                                    return Some (Opcode :: ADDSVL_Rd_SP_SVE_SIMM6_SVE_Rn_SP (ADDSVL_Rd_SP_SVE_SIMM6_SVE_Rn_SP :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffff800 == 0x4bf5800 {
                                                                    return Some (Opcode :: RDSVL_Rd_SVE_SIMM6 (RDSVL_Rd_SVE_SIMM6 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f800 == 0x4605800 {
                                                                return Some (Opcode :: ADDSPL_SVE_Rn_SP_SVE_SIMM6_Rd_SP (ADDSPL_SVE_Rn_SP_SVE_SIMM6_Rd_SP :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e010 == 0x84204000 {
                                                        return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a04000 {
                                                        return Some (Opcode :: LD1H_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN_SVE_Pg3 (LD1H_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffa0e010 == 0xc4204000 {
                                                    return Some (Opcode :: PRFW_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_PRFOP (PRFW_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_PRFOP :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xffe0f000 == 0x44a04000 {
                                                            return Some (Opcode :: CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 (CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0f000 == 0x44e04000 {
                                                            return Some (Opcode :: CDOT_SVE_IMM_ROT2_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX (CDOT_SVE_IMM_ROT2_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a04000 {
                                                        return Some (Opcode :: LD1H_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 (LD1H_SVE_ZtxN_SVE_ADDR_RZ_XTW1_22_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 30 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x400c000 {
                                                    return Some (Opcode :: MAD_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Za_5 (MAD_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Za_5 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4a0c000 {
                                                                    return Some (Opcode :: SQINCW_SVE_Zd_SVE_PATTERN_SCALED (SQINCW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460c000
                                                                    {
                                                                        return Some (Opcode :: SQINCH_SVE_Zd_SVE_PATTERN_SCALED (SQINCH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0c000
                                                                    {
                                                                        return Some (Opcode :: SQINCD_SVE_PATTERN_SCALED_SVE_Zd (SQINCD_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4b0c000 {
                                                                    return Some (Opcode :: INCW_SVE_Zd_SVE_PATTERN_SCALED (INCW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470c000
                                                                    {
                                                                        return Some (Opcode :: INCH_SVE_PATTERN_SCALED_SVE_Zd (INCH_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0c000
                                                                    {
                                                                        return Some (Opcode :: INCD_SVE_Zd_SVE_PATTERN_SCALED (INCD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xfff0fc00 == 0x4a0c800 {
                                                                return Some (Opcode :: SQDECW_SVE_Zd_SVE_PATTERN_SCALED (SQDECW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xfff0fc00 == 0x460c800 {
                                                                    return Some (Opcode :: SQDECH_SVE_PATTERN_SCALED_SVE_Zd (SQDECH_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0fc00 == 0x4e0c800 {
                                                                    return Some (Opcode :: SQDECD_SVE_Zd_SVE_PATTERN_SCALED (SQDECD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4a0c400 {
                                                                    return Some (Opcode :: UQINCW_SVE_PATTERN_SCALED_SVE_Zd (UQINCW_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460c400
                                                                    {
                                                                        return Some (Opcode :: UQINCH_SVE_PATTERN_SCALED_SVE_Zd (UQINCH_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0c400
                                                                    {
                                                                        return Some (Opcode :: UQINCD_SVE_PATTERN_SCALED_SVE_Zd (UQINCD_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4b0c400 {
                                                                    return Some (Opcode :: DECW_SVE_PATTERN_SCALED_SVE_Zd (DECW_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470c400
                                                                    {
                                                                        return Some (Opcode :: DECH_SVE_PATTERN_SCALED_SVE_Zd (DECH_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0c400
                                                                    {
                                                                        return Some (Opcode :: DECD_SVE_PATTERN_SCALED_SVE_Zd (DECD_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xfff0fc00 == 0x4a0cc00 {
                                                                return Some (Opcode :: UQDECW_SVE_PATTERN_SCALED_SVE_Zd (UQDECW_SVE_PATTERN_SCALED_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xfff0fc00 == 0x460cc00 {
                                                                    return Some (Opcode :: UQDECH_SVE_Zd_SVE_PATTERN_SCALED (UQDECH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0fc00 == 0x4e0cc00 {
                                                                    return Some (Opcode :: UQDECD_SVE_Zd_SVE_PATTERN_SCALED (UQDECD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e010 == 0x8400c000 {
                                                            return Some (Opcode :: PRFB_SVE_ADDR_RX_SVE_PRFOP_SVE_Pg3 (PRFB_SVE_ADDR_RX_SVE_PRFOP_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8480c000 {
                                                            return Some (Opcode :: PRFH_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_PRFOP (PRFH_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x8420c000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x84a0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_ADDR_ZI_U5x2_SVE_Pg3 (LD1H_SVE_ZtxN_SVE_ADDR_ZI_U5x2_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x8440c000 {
                                                        return Some (Opcode :: LD1RB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S (LD1RB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x84c0c000 {
                                                        return Some (Opcode :: LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 (LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x4400c000 {
                                                            return Some (Opcode :: SCLAMP_SVE_Zm_16_SVE_Zd_SVE_Zn (SCLAMP_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4400c800 {
                                                                return Some (Opcode :: SDOT_SVE_Zm_16_SVE_Zn_SVE_Zd (SDOT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4480c800 {
                                                                return Some (Opcode :: SDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd (SDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x4400c400 {
                                                            return Some (Opcode :: UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 (UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4400cc00 {
                                                                return Some (Opcode :: UDOT_SVE_Zm_16_SVE_Zd_SVE_Zn (UDOT_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4480cc00 {
                                                                return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX (UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc400c000 {
                                                            return Some (Opcode :: LDNT1B_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN (LDNT1B_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc480c000 {
                                                            return Some (Opcode :: LDNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN (LDNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc440c000 {
                                                            return Some (Opcode :: LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ (LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4c0c000 {
                                                            return Some (Opcode :: LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ (LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc420c000 {
                                                        return Some (Opcode :: LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5 (LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0c000 {
                                                                    return Some (Opcode :: SMULLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (SMULLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0d000 {
                                                                    return Some (Opcode :: UMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn (UMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0c400 {
                                                                    return Some (Opcode :: SMULLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd (SMULLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0d400 {
                                                                    return Some (Opcode :: UMULLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn (UMULLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e010 == 0xc460c000 {
                                                        return Some (Opcode :: PRFW_SVE_ADDR_RZ_LSL2_SVE_PRFOP_SVE_Pg3 (PRFW_SVE_ADDR_RZ_LSL2_SVE_PRFOP_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0c000 {
                                                                    return Some (Opcode :: SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0d000 {
                                                                    return Some (Opcode :: UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0c400 {
                                                                    return Some (Opcode :: SMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (SMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0d400 {
                                                                    return Some (Opcode :: UMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (UMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 14 & 1 == 0 {
                                if insn >> 15 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4002000
                                                                    {
                                                                        return Some (Opcode :: SADDV_SVE_Pg3_SVE_Zn_SVE_Vd (SADDV_SVE_Pg3_SVE_Zn_SVE_Vd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4012000
                                                                    {
                                                                        return Some (Opcode :: UADDV_SVE_Pg3_SVE_Zn_SVE_Vd (UADDV_SVE_Pg3_SVE_Zn_SVE_Vd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ee000 == 0x4102000 {
                                                                    return Some (Opcode :: MOVPRFX_SVE_Pg3_SVE_Zd_SVE_Zn (MOVPRFX_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4082000
                                                                    {
                                                                        return Some (Opcode :: SMAXV_SVE_Pg3_SVE_Zn_SVE_Vd (SMAXV_SVE_Pg3_SVE_Zn_SVE_Vd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4182000
                                                                    {
                                                                        return Some (Opcode :: ORV_SVE_Vd_SVE_Pg3_SVE_Zn (ORV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4092000
                                                                    {
                                                                        return Some (Opcode :: UMAXV_SVE_Zn_SVE_Pg3_SVE_Vd (UMAXV_SVE_Zn_SVE_Pg3_SVE_Vd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4192000
                                                                    {
                                                                        return Some (Opcode :: EORV_SVE_Zn_SVE_Vd_SVE_Pg3 (EORV_SVE_Zn_SVE_Vd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0xff3fe000 == 0x40c2000 {
                                                                return Some (Opcode :: SMAXQV_Vd_SVE_Pg3_SVE_Zn (SMAXQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4052000 {
                                                                    return Some (Opcode :: ADDQV_SVE_Zn_Vd_SVE_Pg3 (ADDQV_SVE_Zn_Vd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40d2000
                                                                    {
                                                                        return Some (Opcode :: UMAXQV_Vd_SVE_Zn_SVE_Pg3 (UMAXQV_Vd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41d2000
                                                                    {
                                                                        return Some (Opcode :: EORQV_SVE_Pg3_Vd_SVE_Zn (EORQV_SVE_Pg3_Vd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x40a2000 {
                                                                    return Some (Opcode :: SMINV_SVE_Vd_SVE_Zn_SVE_Pg3 (SMINV_SVE_Vd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41a2000 {
                                                                    return Some (Opcode :: ANDV_SVE_Zn_SVE_Vd_SVE_Pg3 (ANDV_SVE_Zn_SVE_Vd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x40e2000 {
                                                                    return Some (Opcode :: SMINQV_SVE_Zn_Vd_SVE_Pg3 (SMINQV_SVE_Zn_Vd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41e2000 {
                                                                    return Some (Opcode :: ANDQV_Vd_SVE_Pg3_SVE_Zn (ANDQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0xff3fe000 == 0x40b2000 {
                                                                return Some (Opcode :: UMINV_SVE_Zn_SVE_Vd_SVE_Pg3 (UMINV_SVE_Zn_SVE_Vd_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x40f2000 {
                                                                return Some (Opcode :: UMINQV_SVE_Pg3_SVE_Zn_Vd (UMINQV_SVE_Pg3_SVE_Zn_Vd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x84002000 {
                                                        return Some (Opcode :: LDFF1SB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN (LDFF1SB_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84802000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn & 0xff20f000 == 0x44002000 {
                                                        return Some (Opcode :: CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 (CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20f000 == 0x44003000 {
                                                        return Some (Opcode :: SQRDCMLAH_SVE_Zm_16_SVE_Zd_SVE_IMM_ROT2_SVE_Zn (SQRDCMLAH_SVE_Zm_16_SVE_Zd_SVE_IMM_ROT2_SVE_Zn :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4002000 {
                                                        return Some (Opcode :: LDFF1SB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN (LDFF1SB_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4802000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN (LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4203000 {
                                                                    return Some (Opcode :: AND_SVE_Zn_SVE_Zd_SVE_Zm_16 (AND_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4a03000 {
                                                                    return Some (Opcode :: EOR_SVE_Zn_SVE_Zm_16_SVE_Zd (EOR_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4603000 {
                                                                    return Some (Opcode :: ORR_SVE_Zd_SVE_Zm_16_SVE_Zn (ORR_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4e03000 {
                                                                    return Some (Opcode :: BIC_SVE_Zm_16_SVE_Zd_SVE_Zn (BIC_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4203800 {
                                                                return Some (Opcode :: EOR3_SVE_Zm_16_SVE_Zd_SVE_Zn (EOR3_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4603800 {
                                                                return Some (Opcode :: BCAX_SVE_Zd_SVE_Zm_16_SVE_Zn (BCAX_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x4203400 {
                                                            return Some (Opcode :: XAR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (XAR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4203c00 {
                                                                    return Some (Opcode :: BSL_SVE_Zn_SVE_Zd_SVE_Zm_16 (BSL_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4a03c00 {
                                                                    return Some (Opcode :: BSL2N_SVE_Zn_SVE_Zm_16_SVE_Zd (BSL2N_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4603c00 {
                                                                    return Some (Opcode :: BSL1N_SVE_Zn_SVE_Zm_16_SVE_Zd (BSL1N_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4e03c00 {
                                                                    return Some (Opcode :: NBSL_SVE_Zd_SVE_Zn_SVE_Zm_16 (NBSL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e010 == 0x84202000 {
                                                        return Some (Opcode :: PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW1_22 (PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a02000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN (LDFF1SH_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffa0e010 == 0xc4202000 {
                                                    return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a02000 {
                                                                    return Some (Opcode :: SQDMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (SQDMLALB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e02000 {
                                                                    return Some (Opcode :: SQDMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (SQDMLALB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a03000 {
                                                                    return Some (Opcode :: SQDMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (SQDMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e03000 {
                                                                    return Some (Opcode :: SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a02400 {
                                                                    return Some (Opcode :: SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e02400 {
                                                                    return Some (Opcode :: SQDMLALT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (SQDMLALT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a03400 {
                                                                    return Some (Opcode :: SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX (SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e03400 {
                                                                    return Some (Opcode :: SQDMLSLT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn (SQDMLSLT_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a02000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 30 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x410a000 {
                                                                    return Some (Opcode :: SXTB_SVE_Zd_SVE_Zn_SVE_Pg3 (SXTB_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x418a000 {
                                                                    return Some (Opcode :: CLS_SVE_Pg3_SVE_Zd_SVE_Zn (CLS_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffffe000 == 0x4d4a000 {
                                                                    return Some (Opcode :: SXTW_SVE_Zn_SVE_Zd_SVE_Pg3 (SXTW_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41ca000 {
                                                                    return Some (Opcode :: FABS_SVE_Pg3_SVE_Zn_SVE_Zd (FABS_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffbfe000 == 0x492a000 {
                                                                    return Some (Opcode :: SXTH_SVE_Zd_SVE_Zn_SVE_Pg3 (SXTH_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41aa000 {
                                                                    return Some (Opcode :: CNT_SVE_Zn_SVE_Zd_SVE_Pg3 (CNT_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x416a000 {
                                                                    return Some (Opcode :: ABS_SVE_Pg3_SVE_Zd_SVE_Zn (ABS_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41ea000 {
                                                                    return Some (Opcode :: NOT_SVE_Zd_SVE_Pg3_SVE_Zn (NOT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x411a000 {
                                                                    return Some (Opcode :: UXTB_SVE_Zd_SVE_Pg3_SVE_Zn (UXTB_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x419a000 {
                                                                    return Some (Opcode :: CLZ_SVE_Zd_SVE_Zn_SVE_Pg3 (CLZ_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffffe000 == 0x4d5a000 {
                                                                    return Some (Opcode :: UXTW_SVE_Pg3_SVE_Zn_SVE_Zd (UXTW_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41da000 {
                                                                    return Some (Opcode :: FNEG_SVE_Zn_SVE_Pg3_SVE_Zd (FNEG_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffbfe000 == 0x493a000 {
                                                                    return Some (Opcode :: UXTH_SVE_Zn_SVE_Pg3_SVE_Zd (UXTH_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41ba000 {
                                                                    return Some (Opcode :: CNOT_SVE_Zn_SVE_Zd_SVE_Pg3 (CNOT_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x417a000 {
                                                                return Some (Opcode :: NEG_SVE_Zd_SVE_Zn_SVE_Pg3 (NEG_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f000 == 0x420a000 {
                                                                return Some (Opcode :: ADR_SVE_ADDR_ZZ_SXTW_SVE_Zd (ADR_SVE_ADDR_ZZ_SXTW_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x460a000 {
                                                                return Some (Opcode :: ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW (ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0f000 == 0x4a0a000 {
                                                            return Some (Opcode :: ADR_SVE_ADDR_ZZ_LSL_SVE_Zd (ADR_SVE_ADDR_ZZ_LSL_SVE_Zd :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x420b000 {
                                                                return Some (Opcode :: FTSSEL_SVE_Zm_16_SVE_Zn_SVE_Zd (FTSSEL_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x420b800 {
                                                                return Some(
                                                                    Opcode::FEXPA_SVE_Zn_SVE_Zd(
                                                                        FEXPA_SVE_Zn_SVE_Zd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x420bc00 {
                                                            return Some(
                                                                Opcode::MOVPRFX_SVE_Zn_SVE_Zd(
                                                                    MOVPRFX_SVE_Zn_SVE_Zd::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x8400a000 {
                                                            return Some (Opcode :: LDNT1B_SVE_ADDR_ZX_SVE_ZtxN_SVE_Pg3 (LDNT1B_SVE_ADDR_ZX_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x8480a000 {
                                                            return Some (Opcode :: LDNT1H_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN (LDNT1H_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x8420a000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x84a0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_ZtxN (LDFF1SH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x8440a000 {
                                                        return Some (Opcode :: LD1RB_SVE_ADDR_RI_U6_SVE_ZtxN_SVE_Pg3 (LD1RB_SVE_ADDR_RI_U6_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x84c0a000 {
                                                        return Some (Opcode :: LD1RH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN (LD1RH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffffe000 == 0x4480a000 {
                                                                    return Some (Opcode :: URECPE_SVE_Pg3_SVE_Zd_SVE_Zn (URECPE_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4408a000 {
                                                                    return Some (Opcode :: SQABS_SVE_Zn_SVE_Zd_SVE_Pg3 (SQABS_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4404a000 {
                                                                    return Some (Opcode :: SADALP_SVE_Zd_SVE_Pg3_SVE_Zn (SADALP_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4414a000 {
                                                                    return Some (Opcode :: SMAXP_SVE_Pg3_SVE_Zd_SVE_Zn (SMAXP_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x4416a000 {
                                                            return Some (Opcode :: SMINP_SVE_Zn_SVE_Zd_SVE_Pg3 (SMINP_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x4481a000
                                                                    {
                                                                        return Some (Opcode :: URSQRTE_SVE_Zd_SVE_Zn_SVE_Pg3 (URSQRTE_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4411a000
                                                                    {
                                                                        return Some (Opcode :: ADDP_SVE_Zd_SVE_Pg3_SVE_Zn (ADDP_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4409a000 {
                                                                    return Some (Opcode :: SQNEG_SVE_Zd_SVE_Zn_SVE_Pg3 (SQNEG_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x4405a000 {
                                                                    return Some (Opcode :: UADALP_SVE_Pg3_SVE_Zn_SVE_Zd (UADALP_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4415a000 {
                                                                    return Some (Opcode :: UMAXP_SVE_Pg3_SVE_Zd_SVE_Zn (UMAXP_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x4417a000 {
                                                            return Some (Opcode :: UMINP_SVE_Zn_SVE_Zd_SVE_Pg3 (UMINP_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc400a000 {
                                                        return Some (Opcode :: LD1Q_SVE_Pg3_SVE_ADDR_ZX_SVE_Zt (LD1Q_SVE_Pg3_SVE_ADDR_ZX_SVE_Zt :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc440a000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4c0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN (LDFF1SH_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc420a000 {
                                                        return Some (Opcode :: LDFF1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN (LDFF1SB_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0a000 {
                                                                    return Some (Opcode :: SMLSLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn (SMLSLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0b000 {
                                                                    return Some (Opcode :: UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0a400 {
                                                                    return Some (Opcode :: SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0b400 {
                                                                    return Some (Opcode :: UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 (LDFF1SH_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e010 == 0xc460a000 {
                                                        return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0a000 {
                                                                    return Some (Opcode :: SMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (SMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0b000 {
                                                                    return Some (Opcode :: UMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (UMLSLB_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0a400 {
                                                                    return Some (Opcode :: SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0b400 {
                                                                    return Some (Opcode :: UMLSLT_SVE_Zd_SVE_Zm4_11_INDEX_SVE_Zn (UMLSLT_SVE_Zd_SVE_Zm4_11_INDEX_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 (LDFF1SH_SVE_ZtxN_SVE_ADDR_RZ_LSL1_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 15 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x4006000 {
                                                    return Some (Opcode :: MLS_SVE_Zm_16_SVE_Zn_SVE_Zd_SVE_Pg3 (MLS_SVE_Zm_16_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x84006000 {
                                                        return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_ADDR_RZ_XTW_22_SVE_Pg3 (LDFF1B_SVE_ZtxN_SVE_ADDR_RZ_XTW_22_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84806000 {
                                                        return Some (Opcode :: LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 (LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44006000 {
                                                                return Some (Opcode :: SQDMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn (SQDMLALB_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44007000 {
                                                                return Some (Opcode :: SQRDMLAH_SVE_Zm_16_SVE_Zd_SVE_Zn (SQRDMLAH_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44006800 {
                                                                return Some (Opcode :: SQDMLSLB_SVE_Zm_16_SVE_Zn_SVE_Zd (SQDMLSLB_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x44807800 {
                                                                return Some (Opcode :: USDOT_SVE_Zn_SVE_Zd_SVE_Zm_16 (USDOT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x44006400 {
                                                                return Some (Opcode :: SQDMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn (SQDMLALT_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44007400 {
                                                                return Some (Opcode :: SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm_16 (SQRDMLSH_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x44006c00 {
                                                            return Some (Opcode :: SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm_16 (SQDMLSLT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4006000 {
                                                        return Some (Opcode :: LDFF1B_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 (LDFF1B_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4806000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4206000 {
                                                                return Some (Opcode :: MUL_SVE_Zm_16_SVE_Zd_SVE_Zn (MUL_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4207000 {
                                                                return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4206800 {
                                                            return Some (Opcode :: SMULH_SVE_Zn_SVE_Zm_16_SVE_Zd (SMULH_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4206400 {
                                                                return Some (Opcode :: PMUL_SVE_Zd_SVE_Zm_16_SVE_Zn (PMUL_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4207400 {
                                                                return Some (Opcode :: SQRDMULH_SVE_Zm_16_SVE_Zd_SVE_Zn (SQRDMULH_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4206c00 {
                                                            return Some (Opcode :: UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e010 == 0x84206000 {
                                                        return Some (Opcode :: PRFD_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_SVE_PRFOP (PRFD_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_SVE_PRFOP :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a06000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffa0e010 == 0xc4206000 {
                                                    return Some (Opcode :: PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW3_22 (PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RZ_XTW3_22 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f000 == 0x44a06000 {
                                                                return Some (Opcode :: CMLA_SVE_Zd_SVE_Zm3_INDEX_SVE_IMM_ROT2_SVE_Zn (CMLA_SVE_Zd_SVE_Zm3_INDEX_SVE_IMM_ROT2_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x44e06000 {
                                                                return Some (Opcode :: CMLA_SVE_IMM_ROT2_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (CMLA_SVE_IMM_ROT2_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0f000 == 0x44a07000 {
                                                                return Some (Opcode :: SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_IMM_ROT2_SVE_Zm3_INDEX (SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_IMM_ROT2_SVE_Zm3_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x44e07000 {
                                                                return Some (Opcode :: SQRDCMLAH_SVE_Zm4_INDEX_SVE_IMM_ROT2_SVE_Zd_SVE_Zn (SQRDCMLAH_SVE_Zm4_INDEX_SVE_IMM_ROT2_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a06000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ADDR_RZ_XTW1_22_SVE_Pg3_SVE_ZtxN (LDFF1H_SVE_ADDR_RZ_XTW1_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 30 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x400e000 {
                                                    return Some (Opcode :: MSB_SVE_Za_5_SVE_Pg3_SVE_Zm_16_SVE_Zd (MSB_SVE_Za_5_SVE_Pg3_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x420e000
                                                                        {
                                                                            return Some (Opcode :: CNTB_SVE_PATTERN_SCALED_Rd (CNTB_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4a0e000
                                                                        {
                                                                            return Some (Opcode :: CNTW_SVE_PATTERN_SCALED_Rd (CNTW_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x460e000
                                                                        {
                                                                            return Some (Opcode :: CNTH_Rd_SVE_PATTERN_SCALED (CNTH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4e0e000
                                                                        {
                                                                            return Some (Opcode :: CNTD_Rd_SVE_PATTERN_SCALED (CNTD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x430e000
                                                                        {
                                                                            return Some (Opcode :: INCB_Rd_SVE_PATTERN_SCALED (INCB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4b0e000
                                                                        {
                                                                            return Some (Opcode :: INCW_SVE_PATTERN_SCALED_Rd (INCW_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x470e000
                                                                        {
                                                                            return Some (Opcode :: INCH_SVE_PATTERN_SCALED_Rd (INCH_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4f0e000
                                                                        {
                                                                            return Some (Opcode :: INCD_Rd_SVE_PATTERN_SCALED (INCD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x420f000
                                                                        {
                                                                            return Some (Opcode :: SQINCB_SVE_PATTERN_SCALED_Rd (SQINCB_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4a0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCW_SVE_PATTERN_SCALED_Rd (SQINCW_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x460f000
                                                                        {
                                                                            return Some (Opcode :: SQINCH_Rd_SVE_PATTERN_SCALED (SQINCH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4e0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCD_Rd_SVE_PATTERN_SCALED (SQINCD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x430f000
                                                                        {
                                                                            return Some (Opcode :: SQINCB_Rd_SVE_PATTERN_SCALED (SQINCB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4b0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCW_SVE_PATTERN_SCALED_Rd_X (SQINCW_SVE_PATTERN_SCALED_Rd_X :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x470f000
                                                                        {
                                                                            return Some (Opcode :: SQINCH_Rd_X_SVE_PATTERN_SCALED (SQINCH_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4f0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCD_SVE_PATTERN_SCALED_Rd (SQINCD_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x420f800
                                                                    {
                                                                        return Some (Opcode :: SQDECB_Rd_SVE_PATTERN_SCALED (SQDECB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4a0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECW_Rd_SVE_PATTERN_SCALED (SQDECW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460f800
                                                                    {
                                                                        return Some (Opcode :: SQDECH_Rd_SVE_PATTERN_SCALED (SQDECH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECD_Rd_SVE_PATTERN_SCALED (SQDECD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x430f800
                                                                    {
                                                                        return Some (Opcode :: SQDECB_SVE_PATTERN_SCALED_Rd (SQDECB_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4b0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECW_Rd_X_SVE_PATTERN_SCALED (SQDECW_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470f800
                                                                    {
                                                                        return Some (Opcode :: SQDECH_SVE_PATTERN_SCALED_Rd (SQDECH_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECD_Rd_X_SVE_PATTERN_SCALED (SQDECD_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x430e400
                                                                    {
                                                                        return Some (Opcode :: DECB_SVE_PATTERN_SCALED_Rd (DECB_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4b0e400
                                                                    {
                                                                        return Some (Opcode :: DECW_Rd_SVE_PATTERN_SCALED (DECW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470e400
                                                                    {
                                                                        return Some (Opcode :: DECH_Rd_SVE_PATTERN_SCALED (DECH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0e400
                                                                    {
                                                                        return Some (Opcode :: DECD_SVE_PATTERN_SCALED_Rd (DECD_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x420f400
                                                                        {
                                                                            return Some (Opcode :: UQINCB_SVE_PATTERN_SCALED_Rd (UQINCB_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4a0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCW_SVE_PATTERN_SCALED_Rd (UQINCW_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x460f400
                                                                        {
                                                                            return Some (Opcode :: UQINCH_SVE_PATTERN_SCALED_Rd (UQINCH_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4e0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCD_SVE_PATTERN_SCALED_Rd (UQINCD_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x430f400
                                                                        {
                                                                            return Some (Opcode :: UQINCB_SVE_PATTERN_SCALED_Rd_X (UQINCB_SVE_PATTERN_SCALED_Rd_X :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4b0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCW_Rd_SVE_PATTERN_SCALED (UQINCW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x470f400
                                                                        {
                                                                            return Some (Opcode :: UQINCH_Rd_SVE_PATTERN_SCALED (UQINCH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4f0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCD_SVE_PATTERN_SCALED_Rd_X (UQINCD_SVE_PATTERN_SCALED_Rd_X :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x420fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECB_Rd_SVE_PATTERN_SCALED (UQDECB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4a0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECW_SVE_PATTERN_SCALED_Rd (UQDECW_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECH_Rd_SVE_PATTERN_SCALED (UQDECH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECD_Rd_SVE_PATTERN_SCALED (UQDECD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x430fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECB_SVE_PATTERN_SCALED_Rd (UQDECB_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4b0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECW_Rd_SVE_PATTERN_SCALED (UQDECW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECH_SVE_PATTERN_SCALED_Rd (UQDECH_SVE_PATTERN_SCALED_Rd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECD_Rd_X_SVE_PATTERN_SCALED (UQDECD_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e010 == 0x8400e000 {
                                                            return Some (Opcode :: PRFB_SVE_ADDR_ZI_U5_SVE_Pg3_SVE_PRFOP (PRFB_SVE_ADDR_ZI_U5_SVE_Pg3_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8480e000 {
                                                            return Some (Opcode :: PRFH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_PRFOP (PRFH_SVE_Pg3_SVE_ADDR_ZI_U5x2_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x8420e000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 (LDFF1B_SVE_ZtxN_SVE_ADDR_ZI_U5_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x84a0e000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 (LDFF1H_SVE_ADDR_ZI_U5x2_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x8440e000 {
                                                        return Some (Opcode :: LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 (LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x84c0e000 {
                                                        return Some (Opcode :: LD1RH_SVE_ZtxN_SVE_ADDR_RI_U6x2_SVE_Pg3 (LD1RH_SVE_ZtxN_SVE_ADDR_RI_U6x2_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e010 == 0xc400e000 {
                                                        return Some (Opcode :: PRFB_SVE_ADDR_ZI_U5_SVE_PRFOP_SVE_Pg3 (PRFB_SVE_ADDR_ZI_U5_SVE_PRFOP_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e010 == 0xc480e000 {
                                                        return Some (Opcode :: PRFH_SVE_PRFOP_SVE_ADDR_ZI_U5x2_SVE_Pg3 (PRFH_SVE_PRFOP_SVE_ADDR_ZI_U5x2_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc440e000 {
                                                        return Some (Opcode :: LDFF1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ (LDFF1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc4c0e000 {
                                                        return Some (Opcode :: LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ (LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4420f000 {
                                                                return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn (SQDMULH_SVE_Zd_SVE_Zm3_22_INDEX_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x4420f800 {
                                                                return Some (Opcode :: MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x4420f400 {
                                                            return Some (Opcode :: SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX (SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc420e000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0xc460e000 {
                                                            return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0e000 {
                                                                    return Some (Opcode :: SQDMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn (SQDMULLB_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 11 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a0f000
                                                                    {
                                                                        return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a0f800
                                                                    {
                                                                        return Some (Opcode :: MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0e400 {
                                                                    return Some (Opcode :: SQDMULLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX (SQDMULLT_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44a0f400 {
                                                                    return Some (Opcode :: SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a0e000 {
                                                            return Some (Opcode :: LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 (LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0e000 {
                                                                    return Some (Opcode :: SQDMULLB_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn (SQDMULLB_SVE_Zm4_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 11 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e0f000
                                                                    {
                                                                        return Some (Opcode :: SQDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX (SQDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e0f800
                                                                    {
                                                                        return Some (Opcode :: MUL_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn (MUL_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0e400 {
                                                                    return Some (Opcode :: SQDMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd (SQDMULLT_SVE_Zn_SVE_Zm4_11_INDEX_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44e0f400 {
                                                                    return Some (Opcode :: SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX (SQRDMULH_SVE_Zn_SVE_Zd_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e0e000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ADDR_RZ_LSL1_SVE_Pg3_SVE_ZtxN (LDFF1H_SVE_ADDR_RZ_LSL1_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 21 & 1 == 0 {
                            if insn >> 15 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x24000000 {
                                                        return Some (Opcode :: CMPHS_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 (CMPHS_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24000010 {
                                                        return Some (Opcode :: CMPHI_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 (CMPHI_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xa4000000 {
                                                        return Some (Opcode :: LD1RQB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN (LD1RQB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa4800000 {
                                                        return Some (Opcode :: LD1RQH_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 (LD1RQH_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x24004000 {
                                                        return Some (Opcode :: CMPGE_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_Zm_16 (CMPGE_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24004010 {
                                                        return Some (Opcode :: CMPGT_SVE_Pd_SVE_Zm_16_SVE_Pg3_SVE_Zn (CMPGT_SVE_Pd_SVE_Zm_16_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4004000 {
                                                            return Some (Opcode :: LD1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 (LD1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4804000 {
                                                            return Some (Opcode :: LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 (LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4404000 {
                                                            return Some (Opcode :: LD1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN (LD1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4c04000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 (LD1H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x24002000 {
                                                        return Some (Opcode :: CMPEQ_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 (CMPEQ_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24002010 {
                                                        return Some (Opcode :: CMPNE_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 (CMPNE_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xa4002000 {
                                                        return Some (Opcode :: LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 (LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa4802000 {
                                                        return Some (Opcode :: LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 (LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x24006000 {
                                                        return Some (Opcode :: CMPLT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd (CMPLT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24006010 {
                                                        return Some (Opcode :: CMPLE_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 (CMPLE_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4006000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4006000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4806000 {
                                                            return Some (Opcode :: LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN (LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4806000 {
                                                            return Some (Opcode :: LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN (LDFF1SW_SVE_ADDR_R_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4406000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 (LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4406000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 (LDFF1B_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4c06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R (LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4c06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R (LDFF1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 31 & 1 == 0 {
                                        if insn & 0xff208000 == 0x64000000 {
                                            return Some (Opcode :: FCMLA_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2_SVE_Zd (FCMLA_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2_SVE_Zd :: from (insn))) ;
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xe4800000 {
                                                        return Some (Opcode :: ST3Q_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SME_Zt3 (ST3Q_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SME_Zt3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xe4400000 {
                                                            return Some (Opcode :: ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe4c00000 {
                                                            return Some (Opcode :: ST4Q_SME_Zt4_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 (ST4Q_SME_Zt4_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xe4004000 {
                                                        return Some (Opcode :: ST1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 (ST1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4404000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c04000 {
                                                            return Some (Opcode :: ST1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 (ST1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4002000 {
                                                            return Some (Opcode :: STNT1B_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN (STNT1B_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4802000 {
                                                            return Some (Opcode :: STNT1H_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 (STNT1H_SVE_ZtxN_SVE_ADDR_ZX_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4402000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c02000 {
                                                            return Some (Opcode :: STNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN (STNT1H_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4006000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 (STNT1B_SVE_ZtxN_SVE_ADDR_RX_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4806000 {
                                                            return Some (Opcode :: STNT1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 (STNT1H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4406000 {
                                                            return Some (Opcode :: ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c06000 {
                                                            return Some (Opcode :: ST3H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 (ST3H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 13 & 1 == 0 {
                                    if insn >> 30 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn & 0xff20e010 == 0x24008000 {
                                                    return Some (Opcode :: CMPGE_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 (CMPGE_SVE_Zm_16_SVE_Pd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xff20e010 == 0x24008010 {
                                                    return Some (Opcode :: CMPGT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd (CMPGT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x2400c000 {
                                                        return Some (Opcode :: CMPHS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 (CMPHS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x2400c010 {
                                                        return Some (Opcode :: CMPHI_SVE_Pd_SVE_Zn_SVE_Pg3_SVE_Zm_16 (CMPHI_SVE_Pd_SVE_Zn_SVE_Pg3_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa400c000 {
                                                            return Some (Opcode :: LDNT1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN (LDNT1B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa480c000 {
                                                            return Some (Opcode :: LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa440c000 {
                                                            return Some (Opcode :: LD3B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN (LD3B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4c0c000 {
                                                            return Some (Opcode :: LD3H_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_ZtxN (LD3H_SVE_Pg3_SVE_ADDR_RX_LSL1_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 17 & 1 == 0 {
                                                if insn >> 18 & 1 == 0 {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xff3ee000 == 0x64008000 {
                                                            return Some (Opcode :: FCADD_SVE_Zm_5_SVE_IMM_ROT1_SVE_Zd_SVE_Pg3 (FCADD_SVE_Zm_5_SVE_IMM_ROT1_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x64108000 {
                                                            return Some (Opcode :: FADDP_SVE_Pg3_SVE_Zd_SVE_Zn (FADDP_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn & 0xff3fe000 == 0x64148000 {
                                                            return Some (Opcode :: FMAXNMP_SVE_Zn_SVE_Zd_SVE_Pg3 (FMAXNMP_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x64158000 {
                                                            return Some (Opcode :: FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zn (FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn & 0xff3fe000 == 0x64168000 {
                                                        return Some(
                                                            Opcode::FMAXP_SVE_Pg3_SVE_Zn_SVE_Zd(
                                                                FMAXP_SVE_Pg3_SVE_Zn_SVE_Zd::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff3fe000 == 0x64178000 {
                                                        return Some(
                                                            Opcode::FMINP_SVE_Zn_SVE_Pg3_SVE_Zd(
                                                                FMINP_SVE_Zn_SVE_Pg3_SVE_Zd::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0a000 == 0xe4008000 {
                                                        return Some (Opcode :: ST1B_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN (ST1B_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4808000 {
                                                        return Some (Opcode :: ST1H_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN (ST1H_SVE_ADDR_RZ_XTW_14_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0a000 == 0xe4408000 {
                                                        return Some (Opcode :: ST1B_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 (ST1B_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4c08000 {
                                                        return Some (Opcode :: ST1H_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 (ST1H_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x2400a000 {
                                                        return Some (Opcode :: CMPEQ_SVE_Zn_SVE_Zm_16_SVE_Pd_SVE_Pg3 (CMPEQ_SVE_Zn_SVE_Zm_16_SVE_Pd_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x2400a010 {
                                                        return Some (Opcode :: CMPNE_SVE_Pd_SVE_Pg3_SVE_Zm_16_SVE_Zn (CMPNE_SVE_Pd_SVE_Pg3_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa400a000 {
                                                                return Some (Opcode :: LD1B_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN (LD1B_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa480a000 {
                                                                return Some (Opcode :: LD1SW_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (LD1SW_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa440a000 {
                                                                return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4c0a000 {
                                                                return Some (Opcode :: LD1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 (LD1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa410a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (LDNF1B_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa490a000 {
                                                                return Some (Opcode :: LDNF1SW_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 (LDNF1SW_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa450a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 (LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4d0a000 {
                                                                return Some (Opcode :: LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x6410a000 {
                                                                    return Some (Opcode :: FADDQV_Vd_SVE_Zn_SVE_Pg3 (FADDQV_Vd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffe000 == 0x6488a000 {
                                                                    return Some (Opcode :: FCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd (FCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6414a000 {
                                                                return Some (Opcode :: FMAXNMQV_SVE_Zn_SVE_Pg3_Vd (FMAXNMQV_SVE_Zn_SVE_Pg3_Vd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x640aa000
                                                                    {
                                                                        return Some (Opcode :: FCVTXNT_SVE_Pg3_SVE_Zd_SVE_Zn (FCVTXNT_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x648aa000
                                                                    {
                                                                        return Some (Opcode :: BFCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd (BFCVTNT_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffffe000 == 0x64caa000 {
                                                                    return Some (Opcode :: FCVTNT_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_S (FCVTNT_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_S :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6416a000 {
                                                                return Some (Opcode :: FMAXQV_Vd_SVE_Pg3_SVE_Zn (FMAXQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0xffffe000 == 0x6489a000 {
                                                                return Some (Opcode :: FCVTLT_SVE_Pg3_SVE_Zn_SVE_Zd (FCVTLT_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6415a000 {
                                                                return Some (Opcode :: FMINNMQV_Vd_SVE_Zn_SVE_Pg3 (FMINNMQV_Vd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0xffffe000 == 0x64cba000 {
                                                                return Some (Opcode :: FCVTLT_SVE_Pg3_P_M_SVE_Zn_S_S_SVE_Zd_S_D (FCVTLT_SVE_Pg3_P_M_SVE_Zn_S_S_SVE_Zd_S_D :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6417a000 {
                                                                return Some (Opcode :: FMINQV_Vd_SVE_Pg3_SVE_Zn (FMINQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe400a000 {
                                                            return Some (Opcode :: ST1B_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 (ST1B_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe480a000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe440a000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c0a000 {
                                                            return Some (Opcode :: ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 (ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x2400e000 {
                                                        return Some (Opcode :: CMPLO_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 (CMPLO_SVE_Pd_SVE_Zm_16_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x2400e010 {
                                                        return Some (Opcode :: CMPLS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 (CMPLS_SVE_Pg3_SVE_Pd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa400e000 {
                                                                return Some (Opcode :: LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa480e000 {
                                                                return Some (Opcode :: LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa440e000 {
                                                                return Some (Opcode :: LD3B_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN (LD3B_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4c0e000 {
                                                                return Some (Opcode :: LD3H_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN (LD3H_SVE_Pg3_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa490e000 {
                                                        return Some (Opcode :: LD2Q_SME_Zt2_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 (LD2Q_SME_Zt2_SVE_ADDR_RI_S4x2xVL_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 20 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xe400e000 {
                                                        return Some (Opcode :: ST1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 (ST1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xe440e000 {
                                                            return Some (Opcode :: ST1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (ST1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe4c0e000 {
                                                            return Some (Opcode :: ST1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN (ST1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xe410e000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe490e000 {
                                                            return Some (Opcode :: STNT1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (STNT1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xe450e000 {
                                                            return Some (Opcode :: ST3B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL (ST3B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe4d0e000 {
                                                            return Some (Opcode :: ST3H_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN_SVE_Pg3 (ST3H_SVE_ADDR_RI_S4x3xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 13 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 31 & 1 == 0 {
                                        if insn >> 4 & 1 == 0 {
                                            if insn & 0xff202010 == 0x24200000 {
                                                return Some(
                                                    Opcode::CMPHS_SVE_Pd_SVE_Pg3_SVE_UIMM7_SVE_Zn(
                                                        CMPHS_SVE_Pd_SVE_Pg3_SVE_UIMM7_SVE_Zn::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0xff202010 == 0x24200010 {
                                                return Some(
                                                    Opcode::CMPHI_SVE_UIMM7_SVE_Pd_SVE_Pg3_SVE_Zn(
                                                        CMPHI_SVE_UIMM7_SVE_Pd_SVE_Pg3_SVE_Zn::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffe0e000 == 0xa4200000 {
                                                    return Some (Opcode :: LD1ROB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX (LD1ROB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xa4a00000 {
                                                    return Some (Opcode :: LD1ROH_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 (LD1ROH_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 15 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4204000 {
                                                            return Some (Opcode :: LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX (LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4a04000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_S_H_SVE_ADDR_RX_LSL1_SVE_Pg3_P_Z (LD1H_SVE_ZtxN_S_H_SVE_ADDR_RX_LSL1_SVE_Pg3_P_Z :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4604000 {
                                                            return Some (Opcode :: LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RX (LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4e04000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa420c000 {
                                                            return Some (Opcode :: LD2B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN (LD2B_SVE_ADDR_RX_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4a0c000 {
                                                            return Some (Opcode :: LD2H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 (LD2H_SVE_ZtxN_SVE_ADDR_RX_LSL1_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa460c000 {
                                                            return Some (Opcode :: LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4e0c000 {
                                                            return Some (Opcode :: LD4H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 (LD4H_SVE_ADDR_RX_LSL1_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x64200000 {
                                                                return Some (Opcode :: FMLA_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd (FMLA_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x64200800 {
                                                                return Some (Opcode :: BFMLA_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (BFMLA_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x64200400 {
                                                                return Some (Opcode :: FMLS_SVE_Zm3_22_INDEX_SVE_Zn_SVE_Zd (FMLS_SVE_Zm3_22_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x64200c00 {
                                                                return Some (Opcode :: BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe4600000 {
                                                        return Some (Opcode :: ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 (ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 10 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x64a00000 {
                                                                    return Some (Opcode :: FMLA_SVE_Zm3_INDEX_SVE_Zd_SVE_Zn (FMLA_SVE_Zm3_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x64a00400 {
                                                                    return Some (Opcode :: FMLS_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX (FMLS_SVE_Zn_SVE_Zd_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x64a01000 {
                                                                return Some (Opcode :: FCMLA_SVE_Zn_SVE_IMM_ROT2_SVE_Zd_SVE_Zm3_INDEX (FCMLA_SVE_Zn_SVE_IMM_ROT2_SVE_Zd_SVE_Zm3_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4a00000 {
                                                            return Some (Opcode :: ST3Q_SVE_ADDR_RR_LSL4_SVE_Pg3_SME_Zt3 (ST3Q_SVE_ADDR_RR_LSL4_SVE_Pg3_SME_Zt3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 10 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x64e00000 {
                                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x64e00400 {
                                                                    return Some (Opcode :: FMLS_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn (FMLS_SVE_Zm4_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x64e01000 {
                                                                return Some (Opcode :: FCMLA_SVE_IMM_ROT2_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd (FCMLA_SVE_IMM_ROT2_SVE_Zn_SVE_Zm4_INDEX_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e00000 {
                                                            return Some (Opcode :: ST4Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt4 (ST4Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64204000 {
                                                            return Some (Opcode :: FDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd (FDOT_SVE_Zm3_19_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4204000 {
                                                            return Some (Opcode :: ST1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 (ST1B_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x64a04000 {
                                                                return Some (Opcode :: FMLALB_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd (FMLALB_SVE_Zn_SVE_Zm3_11_INDEX_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64a04400 {
                                                                return Some (Opcode :: FMLALT_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (FMLALT_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4a04000 {
                                                            return Some (Opcode :: ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 (ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64604000 {
                                                            return Some (Opcode :: BFDOT_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd (BFDOT_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4604000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_S_D_SVE_ADDR_RX_SVE_Pg3 (ST1B_SVE_ZtxN_S_D_SVE_ADDR_RX_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x64e04000 {
                                                                return Some (Opcode :: BFMLALB_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd (BFMLALB_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64e04400 {
                                                                return Some (Opcode :: BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e04000 {
                                                            return Some (Opcode :: ST1H_SVE_Pg3_SVE_ZtxN_S_D_SVE_ADDR_RX_LSL1 (ST1H_SVE_Pg3_SVE_ZtxN_S_D_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x64208000 {
                                                    return Some(
                                                        Opcode::FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(
                                                            FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64a08000 {
                                                            return Some (Opcode :: FMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd (FMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x64a08400 {
                                                            return Some (Opcode :: FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4a08000 {
                                                        return Some (Opcode :: ST1H_SVE_Pg3_SVE_ADDR_RZ_XTW1_14_SVE_ZtxN (ST1H_SVE_Pg3_SVE_ADDR_RZ_XTW1_14_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x64608000 {
                                                    return Some(
                                                        Opcode::BFDOT_SVE_Zm_16_SVE_Zn_SVE_Zd(
                                                            BFDOT_SVE_Zm_16_SVE_Zn_SVE_Zd::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64e08000 {
                                                            return Some (Opcode :: BFMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd (BFMLALB_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x64e08400 {
                                                            return Some (Opcode :: BFMLALT_SVE_Zm_16_SVE_Zn_SVE_Zd (BFMLALT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4e08000 {
                                                        return Some (Opcode :: ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW1_14 (ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW1_14 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 31 & 1 == 0 {
                                        if insn >> 4 & 1 == 0 {
                                            if insn & 0xff202010 == 0x24202000 {
                                                return Some(
                                                    Opcode::CMPLO_SVE_Pd_SVE_UIMM7_SVE_Pg3_SVE_Zn(
                                                        CMPLO_SVE_Pd_SVE_UIMM7_SVE_Pg3_SVE_Zn::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0xff202010 == 0x24202010 {
                                                return Some(
                                                    Opcode::CMPLS_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_UIMM7(
                                                        CMPLS_SVE_Zn_SVE_Pg3_SVE_Pd_SVE_UIMM7::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 15 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xa4202000 {
                                                        return Some (Opcode :: LD1ROB_SVE_ADDR_RI_S4x32_SVE_Pg3_SVE_ZtxN (LD1ROB_SVE_ADDR_RI_S4x32_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa4a02000 {
                                                        return Some (Opcode :: LD1ROH_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN (LD1ROH_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa420a000 {
                                                                return Some (Opcode :: LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (LD1B_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4a0a000 {
                                                                return Some (Opcode :: LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (LD1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa460a000 {
                                                                return Some (Opcode :: LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RI_S4xVL (LD1B_SVE_Pg3_P_Z_SVE_ZtxN_S_D_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4e0a000 {
                                                                return Some (Opcode :: LD1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN (LD1H_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa430a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_H_SVE_Pg3_P_Z (LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_H_SVE_Pg3_P_Z :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4b0a000 {
                                                                return Some (Opcode :: LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 (LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa470a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z (LDNF1B_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4f0a000 {
                                                                return Some (Opcode :: LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z (LDNF1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_S_D_SVE_Pg3_P_Z :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 15 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4206000 {
                                                            return Some (Opcode :: LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN (LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4206000 {
                                                            return Some (Opcode :: LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN (LDFF1B_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4a06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 (LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4a06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 (LDFF1H_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4606000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z (LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4606000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z (LDFF1B_SVE_ADDR_R_SVE_ZtxN_S_D_SVE_Pg3_P_Z :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4e06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z (LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4e06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z (LDFF1H_SVE_ZtxN_S_D_SVE_ADDR_R_SVE_Pg3_P_Z :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa420e000 {
                                                            return Some (Opcode :: LD2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 (LD2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa4a0e000 {
                                                            return Some (Opcode :: LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2 (LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4a0e000 {
                                                            return Some (Opcode :: LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2 (LD2Q_SVE_Pg3_SVE_ADDR_RR_LSL4_SME_Zt2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa460e000 {
                                                            return Some (Opcode :: LD4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 (LD4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa4e0e000 {
                                                            return Some (Opcode :: LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x64202000 {
                                                                return Some (Opcode :: FMUL_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd (FMUL_SVE_Zn_SVE_Zm3_22_INDEX_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x64a02000 {
                                                                    return Some (Opcode :: FMUL_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd (FMUL_SVE_Zm3_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x64e02000 {
                                                                    return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x64202800 {
                                                            return Some (Opcode :: BFMUL_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn (BFMUL_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x64202400 {
                                                        return Some (Opcode :: FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16 (FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffe0fc00 == 0x64202400 {
                                                        return Some (Opcode :: FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16 (FCLAMP_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xe4202000 {
                                                    return Some(
                                                        Opcode::ST1Q_SVE_ADDR_ZX_SVE_Pg3_SVE_Zt(
                                                            ST1Q_SVE_ADDR_ZX_SVE_Pg3_SVE_Zt::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64a0a000 {
                                                            return Some (Opcode :: FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm_16 (FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x64a0a400 {
                                                            return Some (Opcode :: FMLSLT_SVE_Zd_SVE_Zm_16_SVE_Zn (FMLSLT_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe4a0a000 {
                                                        return Some (Opcode :: ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL1 (ST1H_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xe460a000 {
                                                        return Some (Opcode :: ST1B_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN (ST1B_SVE_Pg3_SVE_ADDR_ZI_U5_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x64e0a000 {
                                                                return Some (Opcode :: BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x64e0a400 {
                                                                return Some (Opcode :: BFMLSLT_SVE_Zm_16_SVE_Zd_SVE_Zn (BFMLSLT_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e0a000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xe4206000 {
                                                        return Some (Opcode :: ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x64a06000 {
                                                                return Some (Opcode :: FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX (FMLSLB_SVE_Zn_SVE_Zd_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64a06400 {
                                                                return Some (Opcode :: FMLSLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd (FMLSLT_SVE_Zm3_11_INDEX_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4a06000 {
                                                            return Some (Opcode :: ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xe4606000 {
                                                        return Some (Opcode :: ST4B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN (ST4B_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xffe0f400 == 0x64e06000 {
                                                                return Some (Opcode :: BFMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn (BFMLSLB_SVE_Zm3_11_INDEX_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64e06400 {
                                                                return Some (Opcode :: BFMLSLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn (BFMLSLT_SVE_Zd_SVE_Zm3_11_INDEX_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e06000 {
                                                            return Some (Opcode :: ST4H_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN (ST4H_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xe420e000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe430e000 {
                                                            return Some (Opcode :: ST2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 (ST2B_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64a0e400 {
                                                            return Some (Opcode :: FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe4a0e000 {
                                                                return Some (Opcode :: ST1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 (ST1H_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe4b0e000 {
                                                                return Some (Opcode :: ST2H_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 (ST2H_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x6460e400 {
                                                            return Some (Opcode :: BFMMLA_SVE_Zn_SVE_Zm_16_SVE_Zd (BFMMLA_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe460e000 {
                                                                return Some (Opcode :: ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe470e000 {
                                                                return Some (Opcode :: ST4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 (ST4B_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64e0e400 {
                                                            return Some (Opcode :: FMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd (FMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe4e0e000 {
                                                                return Some (Opcode :: ST1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 (ST1H_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe4f0e000 {
                                                                return Some (Opcode :: ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn >> 29 & 1 == 0 {
                        if insn >> 30 & 1 == 0 {
                            if insn >> 31 & 1 == 0 {
                                if insn >> 21 & 1 == 0 {
                                    if insn >> 20 & 1 == 0 {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xfffc0000 == 0x5000000 {
                                                    return Some(Opcode::ORR_SVE_Zd_SVE_LIMM(
                                                        ORR_SVE_Zd_SVE_LIMM::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffc0000 == 0x5800000 {
                                                    return Some(Opcode::AND_SVE_LIMM_SVE_Zd(
                                                        AND_SVE_LIMM_SVE_Zd::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xfffc0000 == 0x5400000 {
                                                    return Some(Opcode::EOR_SVE_Zd_SVE_LIMM(
                                                        EOR_SVE_Zd_SVE_LIMM::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffc0000 == 0x5c00000 {
                                                    return Some(Opcode::DUPM_SVE_Zd_SVE_LIMM(
                                                        DUPM_SVE_Zd_SVE_LIMM::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn & 0xff308000 == 0x5100000 {
                                                return Some(
                                                    Opcode::CPY_SVE_ASIMM_SVE_Pg4_16_SVE_Zd(
                                                        CPY_SVE_ASIMM_SVE_Pg4_16_SVE_Zd::from(insn),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0xff30e000 == 0x510c000 {
                                                return Some(
                                                    Opcode::FCPY_SVE_Zd_SVE_FPIMM8_SVE_Pg4_16(
                                                        FCPY_SVE_Zd_SVE_FPIMM8_SVE_Pg4_16::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 15 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0x5200000 {
                                                            return Some (Opcode :: EXT_SVE_Zd_SVE_UIMM8_53_SVE_Zm_5 (EXT_SVE_Zd_SVE_UIMM8_53_SVE_Zm_5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 11 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x5a00000 {
                                                                    return Some (Opcode :: ZIP1_SVE_Zm_16_SVE_Zd_SVE_Zn (ZIP1_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a00800
                                                                    {
                                                                        return Some (Opcode :: UZP1_SVE_Zd_SVE_Zm_16_SVE_Zn (UZP1_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a01800
                                                                    {
                                                                        return Some (Opcode :: TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 (TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 11 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x5a00400 {
                                                                    return Some (Opcode :: ZIP2_SVE_Zm_16_SVE_Zn_SVE_Zd (ZIP2_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a00c00
                                                                    {
                                                                        return Some (Opcode :: UZP2_SVE_Zm_16_SVE_Zd_SVE_Zn (UZP2_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a01c00
                                                                    {
                                                                        return Some (Opcode :: TRN2_SVE_Zn_SVE_Zd_SVE_Zm_16 (TRN2_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0x5600000 {
                                                        return Some (Opcode :: EXT_SVE_UIMM8_53_SVE_Zd_SVE_ZnxN (EXT_SVE_UIMM8_53_SVE_Zd_SVE_ZnxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x5208000 {
                                                                    return Some (Opcode :: CPY_SVE_Pg3_SVE_Vn_SVE_Zd (CPY_SVE_Pg3_SVE_Vn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x5288000 {
                                                                    return Some (Opcode :: CLASTA_SVE_Pg3_SVE_Zm_5_SVE_Zd (CLASTA_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x5248000 {
                                                                    return Some (Opcode :: REVB_SVE_Pg3_SVE_Zn_SVE_Zd (REVB_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52c8000 {
                                                                    return Some (Opcode :: SPLICE_SVE_Zm_5_SVE_Zd_SVE_Pg3 (SPLICE_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x5228000 {
                                                                    return Some (Opcode :: LASTA_SVE_Zn_SVE_Pg3_SVE_Vd (LASTA_SVE_Zn_SVE_Pg3_SVE_Vd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52a8000 {
                                                                    return Some (Opcode :: CLASTA_SVE_Zm_5_SVE_Vd_SVE_Pg3 (CLASTA_SVE_Zm_5_SVE_Vd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffffe000 == 0x5e68000 {
                                                                    return Some (Opcode :: REVW_SVE_Zn_SVE_Zd_SVE_Pg3 (REVW_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffe000 == 0x52e8000 {
                                                                    return Some (Opcode :: REVD_SVE_Pg3_SVE_Zn_SVE_Zd (REVD_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffbfe000 == 0x5a18000 {
                                                                    return Some (Opcode :: COMPACT_SVE_Pg3_SVE_Zd_SVE_Zn (COMPACT_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x5298000 {
                                                                    return Some (Opcode :: CLASTB_SVE_Zm_5_SVE_Pg3_SVE_Zd (CLASTB_SVE_Zm_5_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffbfe000 == 0x5a58000 {
                                                                    return Some (Opcode :: REVH_SVE_Pg3_SVE_Zd_SVE_Zn (REVH_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52d8000 {
                                                                    return Some (Opcode :: SPLICE_SVE_Zd_SVE_ZnxN_SVE_Pg3 (SPLICE_SVE_Zd_SVE_ZnxN_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x5238000 {
                                                                    return Some (Opcode :: LASTB_SVE_Vd_SVE_Pg3_SVE_Zn (LASTB_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52b8000 {
                                                                    return Some (Opcode :: CLASTB_SVE_Vd_SVE_Pg3_SVE_Zm_5 (CLASTB_SVE_Vd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x5278000 {
                                                                return Some (Opcode :: RBIT_SVE_Zd_SVE_Zn_SVE_Pg3 (RBIT_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 15 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x5202000 {
                                                                return Some (Opcode :: DUP_SVE_Zd_SVE_Zn_INDEX (DUP_SVE_Zd_SVE_Zn_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5203000 {
                                                                return Some (Opcode :: TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 (TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x5202800 {
                                                                return Some (Opcode :: TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B (TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 17 & 1 == 0 {
                                                                    if insn >> 18 & 1 == 0 {
                                                                        if insn >> 19 & 1 == 0 {
                                                                            if insn >> 20 & 1 == 0 {
                                                                                if insn & 0xff3ffc00
                                                                                    == 0x5203800
                                                                                {
                                                                                    return Some (Opcode :: DUP_Rn_SP_SVE_Zd (DUP_Rn_SP_SVE_Zd :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff3ffc00
                                                                                    == 0x5303800
                                                                                {
                                                                                    return Some (Opcode :: SUNPKLO_SVE_Zd_SVE_Zn (SUNPKLO_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff3ffc00
                                                                                == 0x5383800
                                                                            {
                                                                                return Some (Opcode :: REV_SVE_Zd_SVE_Zn (REV_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn >> 20 & 1 == 0 {
                                                                            if insn & 0xff3ffc00
                                                                                == 0x5243800
                                                                            {
                                                                                return Some (Opcode :: INSR_SVE_Rm_SVE_Zd (INSR_SVE_Rm_SVE_Zd :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff3ffc00
                                                                                == 0x5343800
                                                                            {
                                                                                return Some (Opcode :: INSR_SVE_Zd_SVE_Vm (INSR_SVE_Zd_SVE_Vm :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x5323800
                                                                    {
                                                                        return Some (Opcode :: UUNPKLO_SVE_Zd_SVE_Zn (UUNPKLO_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 17 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x5313800
                                                                    {
                                                                        return Some (Opcode :: SUNPKHI_SVE_Zd_SVE_Zn (SUNPKHI_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x5333800
                                                                    {
                                                                        return Some (Opcode :: UUNPKHI_SVE_Zn_SVE_Zd (UUNPKHI_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x5202400 {
                                                                return Some (Opcode :: DUPQ_SVE_Zd_SVE_Zn_5_INDEX (DUPQ_SVE_Zd_SVE_Zn_5_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0fc00 == 0x5602400 {
                                                                return Some (Opcode :: EXTQ_SVE_Zd_SVE_Zm_imm4 (EXTQ_SVE_Zd_SVE_Zm_imm4 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5202c00 {
                                                            return Some (Opcode :: TBX_SVE_Zm_16_SVE_Zd_SVE_Zn (TBX_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 19 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xff3fe000 == 0x520a000 {
                                                                return Some (Opcode :: LASTA_SVE_Zn_Rd_SVE_Pg3 (LASTA_SVE_Zn_Rd_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x530a000 {
                                                                return Some (Opcode :: CLASTA_SVE_Pg3_Rd_SVE_Zm_5 (CLASTA_SVE_Pg3_Rd_SVE_Zm_5 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x528a000 {
                                                            return Some(
                                                                Opcode::CPY_SVE_Pg3_Rn_SP_SVE_Zd(
                                                                    CPY_SVE_Pg3_Rn_SP_SVE_Zd::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn & 0xff3fe000 == 0x521a000 {
                                                            return Some(
                                                                Opcode::LASTB_SVE_Pg3_Rd_SVE_Zn(
                                                                    LASTB_SVE_Pg3_Rd_SVE_Zn::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x531a000 {
                                                            return Some (Opcode :: CLASTB_Rd_SVE_Pg3_SVE_Zm_5 (CLASTB_Rd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 10 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 13 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff30fe10 == 0x5204000 {
                                                                    return Some (Opcode :: ZIP1_SVE_Pn_SVE_Pd_SVE_Pm (ZIP1_SVE_Pn_SVE_Pd_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn >> 18 & 1 == 0 {
                                                                        if insn & 0xfffffe10
                                                                            == 0x5304000
                                                                        {
                                                                            return Some (Opcode :: PUNPKLO_SVE_Pd_SVE_Pn (PUNPKLO_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3ffe10
                                                                            == 0x5344000
                                                                        {
                                                                            return Some (Opcode :: REV_SVE_Pn_SVE_Pd (REV_SVE_Pn_SVE_Pd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffe10
                                                                        == 0x5314000
                                                                    {
                                                                        return Some (Opcode :: PUNPKHI_SVE_Pn_SVE_Pd (PUNPKHI_SVE_Pn_SVE_Pd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5206000 {
                                                                return Some (Opcode :: ZIP1_SVE_Zm_16_S_B_SVE_Zd_S_B_SVE_Zn_S_B (ZIP1_SVE_Zm_16_S_B_SVE_Zd_S_B_SVE_Zn_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 13 & 1 == 0 {
                                                            if insn & 0xff30fe10 == 0x5205000 {
                                                                return Some (Opcode :: TRN1_SVE_Pm_SVE_Pd_SVE_Pn (TRN1_SVE_Pm_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5207000 {
                                                                return Some (Opcode :: TRN1_SVE_Zm_16_SVE_Zd_SVE_Zn (TRN1_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xff30fe10 == 0x5204800 {
                                                            return Some(
                                                                Opcode::UZP1_SVE_Pn_SVE_Pm_SVE_Pd(
                                                                    UZP1_SVE_Pn_SVE_Pm_SVE_Pd::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5206800 {
                                                            return Some (Opcode :: UZP1_SVE_Zn_SVE_Zd_SVE_Zm_16 (UZP1_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 13 & 1 == 0 {
                                                            if insn & 0xff30fe10 == 0x5204400 {
                                                                return Some (Opcode :: ZIP2_SVE_Pm_SVE_Pn_SVE_Pd (ZIP2_SVE_Pm_SVE_Pn_SVE_Pd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5206400 {
                                                                return Some (Opcode :: ZIP2_SVE_Zm_16_SVE_Zd_SVE_Zn (ZIP2_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 13 & 1 == 0 {
                                                            if insn & 0xff30fe10 == 0x5205400 {
                                                                return Some (Opcode :: TRN2_SVE_Pm_SVE_Pd_SVE_Pn (TRN2_SVE_Pm_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5207400 {
                                                                return Some (Opcode :: TRN2_SVE_Zd_SVE_Zm_16_SVE_Zn (TRN2_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xff30fe10 == 0x5204c00 {
                                                            return Some(
                                                                Opcode::UZP2_SVE_Pd_SVE_Pn_SVE_Pm(
                                                                    UZP2_SVE_Pd_SVE_Pn_SVE_Pm::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5206c00 {
                                                            return Some (Opcode :: UZP2_SVE_Zn_SVE_Zm_16_SVE_Zd (UZP2_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xff20c000 == 0x520c000 {
                                                return Some (Opcode :: SEL_SVE_Pg4_10_SVE_Zn_SVE_Zm_16_SVE_Zd (SEL_SVE_Pg4_10_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 13 & 1 == 0 {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn & 0xffc0e010 == 0x85800000 {
                                                    return Some(
                                                        Opcode::LDR_SVE_ADDR_RI_S9xVL_SVE_PNt(
                                                            LDR_SVE_ADDR_RI_S9xVL_SVE_PNt::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                                if insn & 0xffc0e010 == 0x85800000 {
                                                    return Some(
                                                        Opcode::LDR_SVE_ADDR_RI_S9xVL_SVE_PNt(
                                                            LDR_SVE_ADDR_RI_S9xVL_SVE_PNt::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xffc0e010 == 0x85c00000 {
                                                    return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffc0e000 == 0x85408000 {
                                                    return Some (Opcode :: LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 (LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffc0e000 == 0x85c08000 {
                                                    return Some (Opcode :: LD1RSB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6 (LD1RSB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x85004000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x85204000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x85804000 {
                                                        return Some(
                                                            Opcode::LDR_SVE_Zt_SVE_ADDR_RI_S9xVL(
                                                                LDR_SVE_Zt_SVE_ADDR_RI_S9xVL::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffc0e010 == 0x85c04000 {
                                                        return Some (Opcode :: PRFW_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL (PRFW_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e010 == 0x8500c000 {
                                                            return Some (Opcode :: PRFW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_PRFOP (PRFW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8580c000 {
                                                            return Some (Opcode :: PRFD_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_PRFOP (PRFD_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0x8520c000 {
                                                        return Some (Opcode :: LD1W_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_ZtxN (LD1W_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x8540c000 {
                                                        return Some (Opcode :: LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 (LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x85c0c000 {
                                                        return Some (Opcode :: LD1RSB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN (LD1RSB_SVE_Pg3_SVE_ADDR_RI_U6_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 15 & 1 == 0 {
                                            if insn & 0xffc0e010 == 0x85c02000 {
                                                return Some (Opcode :: PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL (PRFH_SVE_Pg3_SVE_PRFOP_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn & 0xffe0e000 == 0x8500a000 {
                                                    return Some (Opcode :: LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x8540a000 {
                                                        return Some (Opcode :: LD1RSH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN (LD1RSH_SVE_Pg3_SVE_ADDR_RI_U6x2_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x85c0a000 {
                                                        return Some (Opcode :: LD1RSB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S (LD1RSB_SVE_Pg3_P_Z_SVE_ADDR_RI_U6_SVE_ZtxN_S_S :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x85006000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 (LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x85206000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_ZtxN (LDFF1W_SVE_ADDR_RZ_XTW2_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffc0e010 == 0x85c06000 {
                                                    return Some (Opcode :: PRFD_SVE_Pg3_SVE_ADDR_RI_S6xVL_SVE_PRFOP (PRFD_SVE_Pg3_SVE_ADDR_RI_S6xVL_SVE_PRFOP :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e010 == 0x8500e000 {
                                                            return Some (Opcode :: PRFW_SVE_PRFOP_SVE_ADDR_ZI_U5x4_SVE_Pg3 (PRFW_SVE_PRFOP_SVE_ADDR_ZI_U5x4_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8580e000 {
                                                            return Some (Opcode :: PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8 (PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0x8520e000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0e000 == 0x8540e000 {
                                                        return Some (Opcode :: LD1RW_SVE_ADDR_RI_U6x4_SVE_ZtxN_SVE_Pg3 (LD1RW_SVE_ADDR_RI_U6x4_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x85c0e000 {
                                                        return Some (Opcode :: LD1RD_SVE_Pg3_SVE_ADDR_RI_U6x8_SVE_ZtxN (LD1RD_SVE_Pg3_SVE_ADDR_RI_U6x8_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 13 & 1 == 0 {
                                if insn >> 14 & 1 == 0 {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000000 {
                                                                return Some (Opcode :: SADDLB_SVE_Zm_16_SVE_Zn_SVE_Zd (SADDLB_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001000 {
                                                                return Some (Opcode :: SSUBLB_SVE_Zn_SVE_Zm_16_SVE_Zd (SSUBLB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000800 {
                                                                return Some (Opcode :: UADDLB_SVE_Zn_SVE_Zd_SVE_Zm_16 (UADDLB_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001800 {
                                                                return Some (Opcode :: USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000400 {
                                                                return Some (Opcode :: SADDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 (SADDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001400 {
                                                                return Some (Opcode :: SSUBLT_SVE_Zn_SVE_Zm_16_SVE_Zd (SSUBLT_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000c00 {
                                                                return Some (Opcode :: UADDLT_SVE_Zm_16_SVE_Zn_SVE_Zd (UADDLT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001c00 {
                                                                return Some (Opcode :: USUBLT_SVE_Zn_SVE_Zd_SVE_Zm_16 (USUBLT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa0e000 == 0xc5000000 {
                                                    return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200000 {
                                                                    return Some (Opcode :: SQSHRUNB_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn (SQSHRUNB_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201000 {
                                                                    return Some (Opcode :: SHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn (SHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200800 {
                                                                    return Some (Opcode :: SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201800 {
                                                                    return Some (Opcode :: RSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd (RSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200400 {
                                                                    return Some (Opcode :: SQSHRUNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn (SQSHRUNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201400 {
                                                                    return Some (Opcode :: SHRNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn (SHRNT_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200c00 {
                                                                    return Some (Opcode :: SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201c00 {
                                                                    return Some (Opcode :: RSHRNT_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn (RSHRNT_SVE_Zd_SVE_SHRIMM_UNPRED_22_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5200000 {
                                                        return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_ADDR_RZ_XTW2_22_SVE_Pg3 (LD1SW_SVE_ZtxN_SVE_ADDR_RZ_XTW2_22_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xfff0fc20 == 0x45b00800 {
                                                    return Some (Opcode :: SQRSHRUN_SME_Znx2_SVE_Zd_SME_SHRIMM4 (SQRSHRUN_SME_Znx2_SVE_Zd_SME_SHRIMM4 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45008000 {
                                                                return Some (Opcode :: SADDLBT_SVE_Zm_16_SVE_Zn_SVE_Zd (SADDLBT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45009000 {
                                                                return Some (Opcode :: EORBT_SVE_Zn_SVE_Zd_SVE_Zm_16 (EORBT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45008800 {
                                                                return Some (Opcode :: SSUBLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 (SSUBLBT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x45009800
                                                                    {
                                                                        return Some (Opcode :: SMMLA_SVE_Zd_SVE_Zm_16_SVE_Zn (SMMLA_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x45809800
                                                                    {
                                                                        return Some (Opcode :: USMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd (USMMLA_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x45c09800 {
                                                                    return Some (Opcode :: UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x45009400 {
                                                            return Some (Opcode :: EORTB_SVE_Zn_SVE_Zm_16_SVE_Zd (EORTB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x45008c00 {
                                                            return Some (Opcode :: SSUBLTB_SVE_Zn_SVE_Zd_SVE_Zm_16 (SSUBLTB_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc5008000 {
                                                        return Some (Opcode :: LDNT1SW_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN (LDNT1SW_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5408000 {
                                                        return Some (Opcode :: LD1SW_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 (LD1SW_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xffa0e010 == 0x45208000 {
                                                        return Some (Opcode :: MATCH_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd (MATCH_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Pd :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e010 == 0x45208010 {
                                                        return Some (Opcode :: NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc5208000 {
                                                        return Some (Opcode :: LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x4 (LD1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5608000 {
                                                        return Some (Opcode :: LD1SW_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN (LD1SW_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004000 {
                                                                return Some (Opcode :: SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005000 {
                                                                return Some (Opcode :: SSUBWB_SVE_Zd_SVE_Zm_16_SVE_Zn (SSUBWB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004800 {
                                                                return Some (Opcode :: UADDWB_SVE_Zn_SVE_Zm_16_SVE_Zd (UADDWB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005800 {
                                                                return Some (Opcode :: USUBWB_SVE_Zm_16_SVE_Zn_SVE_Zd (USUBWB_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004400 {
                                                                return Some (Opcode :: SADDWT_SVE_Zm_16_SVE_Zn_SVE_Zd (SADDWT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005400 {
                                                                return Some (Opcode :: SSUBWT_SVE_Zm_16_SVE_Zn_SVE_Zd (SSUBWT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004c00 {
                                                                return Some (Opcode :: UADDWT_SVE_Zn_SVE_Zd_SVE_Zm_16 (UADDWT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005c00 {
                                                                return Some (Opcode :: USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 (USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc5004000 {
                                                        return Some (Opcode :: LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 (LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5804000 {
                                                        return Some (Opcode :: LD1D_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN (LD1D_SVE_Pg3_SVE_ADDR_RZ_XTW_22_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa7fc00
                                                                        == 0x45204000
                                                                    {
                                                                        return Some (Opcode :: SQXTNB_SVE_Zn_SVE_Zd (SQXTNB_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc20
                                                                        == 0x45314000
                                                                    {
                                                                        return Some (Opcode :: SQCVTN_SME_Znx2_SVE_Zd (SQCVTN_SME_Znx2_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xffa7fc00
                                                                        == 0x45205000
                                                                    {
                                                                        return Some (Opcode :: SQXTUNB_SVE_Zd_SVE_Zn (SQXTUNB_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc20
                                                                        == 0x45315000
                                                                    {
                                                                        return Some (Opcode :: SQCVTUN_SVE_Zd_SME_Znx2 (SQCVTUN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xffa7fc00 == 0x45204800 {
                                                                    return Some (Opcode :: UQXTNB_SVE_Zd_SVE_Zn (UQXTNB_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc20 == 0x45314800 {
                                                                    return Some (Opcode :: UQCVTN_SVE_Zd_SME_Znx2 (UQCVTN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa7fc00 == 0x45204400 {
                                                                    return Some (Opcode :: SQXTNT_SVE_Zd_SVE_Zn (SQXTNT_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa7fc00 == 0x45205400 {
                                                                    return Some (Opcode :: SQXTUNT_SVE_Zn_SVE_Zd (SQXTUNT_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffa7fc00 == 0x45204c00 {
                                                                return Some(
                                                                    Opcode::UQXTNT_SVE_Zn_SVE_Zd(
                                                                        UQXTNT_SVE_Zn_SVE_Zd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5204000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa0e000 == 0xc5a04000 {
                                                    return Some (Opcode :: LD1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN (LD1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500c000 {
                                                                return Some (Opcode :: SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x4500d000 {
                                                                    return Some (Opcode :: ADCLB_SVE_Zd_SVE_Zm_16_SVE_Zn (ADCLB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4580d000 {
                                                                    return Some (Opcode :: SBCLB_SVE_Zd_SVE_Zm_16_SVE_Zn (SBCLB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500c400 {
                                                                return Some (Opcode :: SABALT_SVE_Zm_16_SVE_Zn_SVE_Zd (SABALT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x4500d400 {
                                                                    return Some (Opcode :: ADCLT_SVE_Zm_16_SVE_Zd_SVE_Zn (ADCLT_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4580d400 {
                                                                    return Some (Opcode :: SBCLT_SVE_Zm_16_SVE_Zn_SVE_Zd (SBCLT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500c800 {
                                                                return Some (Opcode :: UABALB_SVE_Zn_SVE_Zm_16_SVE_Zd (UABALB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500cc00 {
                                                                return Some (Opcode :: UABALT_SVE_Zm_16_SVE_Zd_SVE_Zn (UABALT_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0xff3ff800 == 0x4500d800 {
                                                                return Some (Opcode :: CADD_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 (CADD_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ff800 == 0x4501d800 {
                                                                return Some (Opcode :: SQCADD_SVE_Zn_SVE_Zd_SVE_IMM_ROT3 (SQCADD_SVE_Zn_SVE_Zd_SVE_IMM_ROT3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc500c000 {
                                                            return Some (Opcode :: LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D (LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc580c000 {
                                                            return Some (Opcode :: LDNT1D_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN (LDNT1D_SVE_Pg3_SVE_ADDR_ZX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc540c000 {
                                                            return Some (Opcode :: LD1W_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN (LD1W_SVE_Pg3_SVE_ADDR_RZ_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc5c0c000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_ADDR_RZ_SVE_Pg3 (LD1D_SVE_ZtxN_SVE_ADDR_RZ_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc520c000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc560c000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0x45a0c000 {
                                                        return Some (Opcode :: HISTCNT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Zd (HISTCNT_SVE_Zn_SVE_Zm_16_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc5a0c000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc5e0c000 {
                                                            return Some (Opcode :: LD1D_SVE_Pg3_SVE_ADDR_RZ_LSL3_SVE_ZtxN (LD1D_SVE_Pg3_SVE_ADDR_RZ_LSL3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 14 & 1 == 0 {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x45003000 {
                                                            return Some (Opcode :: SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x45003800 {
                                                            return Some (Opcode :: UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x45003400 {
                                                            return Some (Opcode :: SABDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 (SABDLT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x45003c00 {
                                                            return Some (Opcode :: UABDLT_SVE_Zd_SVE_Zm_16_SVE_Zn (UABDLT_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa0e000 == 0xc5002000 {
                                                    return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202000 {
                                                                    return Some (Opcode :: SQSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn (SQSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203000 {
                                                                    return Some (Opcode :: UQSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd (UQSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202800 {
                                                                    return Some (Opcode :: SQRSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn (SQRSHRNB_SVE_SHRIMM_UNPRED_22_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203800 {
                                                                    return Some (Opcode :: UQRSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd (UQRSHRNB_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202400 {
                                                                    return Some (Opcode :: SQSHRNT_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd (SQSHRNT_SVE_Zn_SVE_SHRIMM_UNPRED_22_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203400 {
                                                                    return Some (Opcode :: UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202c00 {
                                                                    return Some (Opcode :: SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203c00 {
                                                                    return Some (Opcode :: UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5202000 {
                                                        return Some (Opcode :: LDFF1SW_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN_SVE_Pg3 (LDFF1SW_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn & 0xfff0fc20 == 0x45b02800 {
                                                        return Some (Opcode :: SQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd (SQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0fc20 == 0x45b03800 {
                                                        return Some (Opcode :: UQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd (UQRSHRN_SME_Znx2_SME_SHRIMM4_SVE_Zd :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4500a000 {
                                                                return Some (Opcode :: SSHLLB_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn (SSHLLB_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500b000 {
                                                                return Some (Opcode :: BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 (BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4500a800 {
                                                                return Some (Opcode :: USHLLB_SVE_SHLIMM_UNPRED_22_SVE_Zn_SVE_Zd (USHLLB_SVE_SHLIMM_UNPRED_22_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500b800 {
                                                                return Some (Opcode :: BGRP_SVE_Zd_SVE_Zm_16_SVE_Zn (BGRP_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4500a400 {
                                                                return Some (Opcode :: SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 (SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500b400 {
                                                                return Some (Opcode :: BDEP_SVE_Zn_SVE_Zd_SVE_Zm_16 (BDEP_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x4500ac00 {
                                                            return Some (Opcode :: USHLLT_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn (USHLLT_SVE_Zd_SVE_SHLIMM_UNPRED_22_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xc540a000 {
                                                    return Some (Opcode :: LDFF1SW_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN (LDFF1SW_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x4520a000 {
                                                        return Some (Opcode :: HISTSEG_SVE_Zd_SVE_Zm_16_SVE_Zn (HISTSEG_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc520a000 {
                                                        return Some (Opcode :: LDFF1SW_SVE_ADDR_ZI_U5x4_SVE_ZtxN_SVE_Pg3 (LDFF1SW_SVE_ADDR_ZI_U5x4_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xc560a000 {
                                                    return Some (Opcode :: LDFF1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL2 (LDFF1SW_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45006000 {
                                                                return Some (Opcode :: SQDMULLB_SVE_Zm_16_SVE_Zd_SVE_Zn (SQDMULLB_SVE_Zm_16_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007000 {
                                                                return Some (Opcode :: SMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 (SMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x45006800 {
                                                                    return Some (Opcode :: PMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 (PMULLB_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff60fc00 == 0x45406800 {
                                                                    return Some (Opcode :: PMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd (PMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007800 {
                                                                return Some (Opcode :: UMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd (UMULLB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45006400 {
                                                                return Some (Opcode :: SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007400 {
                                                                return Some (Opcode :: SMULLT_SVE_Zm_16_SVE_Zn_SVE_Zd (SMULLT_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn & 0xffe0fc00 == 0x45006c00 {
                                                                    return Some (Opcode :: PMULLT_SVE_Zn_SVE_Zd_SVE_Zm_16 (PMULLT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff60fc00 == 0x45406c00 {
                                                                    return Some (Opcode :: PMULLT_SVE_Zn_S_B_SVE_Zd_S_H_SVE_Zm_16_S_B (PMULLT_SVE_Zn_S_B_SVE_Zd_S_H_SVE_Zm_16_S_B :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007c00 {
                                                                return Some (Opcode :: UMULLT_SVE_Zn_SVE_Zm_16_SVE_Zd (UMULLT_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc5006000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN (LDFF1W_SVE_ADDR_RZ_XTW_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5806000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206000 {
                                                                return Some (Opcode :: ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 (ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207000 {
                                                                return Some (Opcode :: SUBHNB_SVE_Zd_SVE_Zm_16_SVE_Zn (SUBHNB_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206800 {
                                                                return Some (Opcode :: RADDHNB_SVE_Zm_16_SVE_Zn_SVE_Zd (RADDHNB_SVE_Zm_16_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207800 {
                                                                return Some (Opcode :: RSUBHNB_SVE_Zn_SVE_Zm_16_SVE_Zd (RSUBHNB_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206400 {
                                                                return Some (Opcode :: ADDHNT_SVE_Zn_SVE_Zm_16_SVE_Zd (ADDHNT_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207400 {
                                                                return Some (Opcode :: SUBHNT_SVE_Zn_SVE_Zm_16_SVE_Zd (SUBHNT_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206c00 {
                                                                return Some (Opcode :: RADDHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 (RADDHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207c00 {
                                                                return Some (Opcode :: RSUBHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 (RSUBHNT_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0e000 == 0xc5206000 {
                                                        return Some (Opcode :: LDFF1W_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN (LDFF1W_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5a06000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN (LDFF1D_SVE_ADDR_RZ_XTW3_22_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500e000 {
                                                                return Some (Opcode :: SSRA_SVE_Zn_SVE_SHRIMM_UNPRED_SVE_Zd (SSRA_SVE_Zn_SVE_SHRIMM_UNPRED_SVE_Zd :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500f000 {
                                                                return Some (Opcode :: SRI_SVE_SHRIMM_UNPRED_SVE_Zn_SVE_Zd (SRI_SVE_SHRIMM_UNPRED_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500e800 {
                                                                return Some (Opcode :: SRSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED (SRSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500f800 {
                                                                return Some (Opcode :: SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500e400 {
                                                                return Some (Opcode :: USRA_SVE_SHRIMM_UNPRED_SVE_Zd_SVE_Zn (USRA_SVE_SHRIMM_UNPRED_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500f400 {
                                                                return Some (Opcode :: SLI_SVE_SHLIMM_UNPRED_SVE_Zd_SVE_Zn (SLI_SVE_SHLIMM_UNPRED_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500ec00 {
                                                                return Some (Opcode :: URSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED (URSRA_SVE_Zn_SVE_Zd_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500fc00 {
                                                                return Some (Opcode :: UABA_SVE_Zn_SVE_Zd_SVE_Zm_16 (UABA_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e010 == 0xc500e000 {
                                                            return Some (Opcode :: PRFW_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_PRFOP (PRFW_SVE_Pg3_SVE_ADDR_ZI_U5x4_SVE_PRFOP :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0xc580e000 {
                                                            return Some (Opcode :: PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8_c580e000 (PRFD_SVE_Pg3_SVE_PRFOP_SVE_ADDR_ZI_U5x8_c580e000 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xc540e000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc5c0e000 {
                                                            return Some (Opcode :: LDFF1D_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 (LDFF1D_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn >> 31 & 1 == 0 {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn >> 17 & 1 == 0 {
                                                                        if insn & 0xffffffe0
                                                                            == 0x4520e000
                                                                        {
                                                                            return Some (Opcode :: AESMC_SVE_Zd (AESMC_SVE_Zd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffc00
                                                                            == 0x4522e000
                                                                        {
                                                                            return Some (Opcode :: AESE_SVE_Zd_SVE_Zn (AESE_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4523e000
                                                                    {
                                                                        return Some (Opcode :: SM4E_SVE_Zn_SVE_Zd (SM4E_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4520f000 {
                                                                    return Some (Opcode :: SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 (SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn >> 17 & 1 == 0 {
                                                                    if insn & 0xffffffe0
                                                                        == 0x4520e400
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESIMC_SVE_Zd(
                                                                                AESIMC_SVE_Zd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4522e400
                                                                    {
                                                                        return Some (Opcode :: AESD_SVE_Zd_SVE_Zn (AESD_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4520f400 {
                                                                    return Some (Opcode :: RAX1_SVE_Zn_SVE_Zd_SVE_Zm_16 (RAX1_SVE_Zn_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc520e000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ADDR_ZI_U5x4_SVE_Pg3_SVE_ZtxN (LDFF1W_SVE_ADDR_ZI_U5x4_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5a0e000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ADDR_ZI_U5x8_SVE_Pg3_SVE_ZtxN (LDFF1D_SVE_ADDR_ZI_U5x8_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xc560e000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ADDR_RZ_LSL2_SVE_Pg3_SVE_ZtxN (LDFF1W_SVE_ADDR_RZ_LSL2_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5e0e000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 15 & 1 == 0 {
                            if insn >> 14 & 1 == 0 {
                                if insn >> 13 & 1 == 0 {
                                    if insn >> 30 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x25000000 {
                                                        return Some (Opcode :: CMPGE_SVE_Zn_SVE_Pd_SVE_Pg3_SIMM5 (CMPGE_SVE_Zn_SVE_Pd_SVE_Pg3_SIMM5 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x25000010 {
                                                        return Some (Opcode :: CMPGT_SVE_Pg3_SIMM5_SVE_Pd_SVE_Zn (CMPGT_SVE_Pg3_SIMM5_SVE_Pd_SVE_Zn :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xa5000000 {
                                                        return Some (Opcode :: LD1RQW_SVE_ZtxN_SVE_ADDR_RX_LSL2_SVE_Pg3 (LD1RQW_SVE_ZtxN_SVE_ADDR_RX_LSL2_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa5800000 {
                                                        return Some (Opcode :: LD1RQD_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 (LD1RQD_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200000 {
                                                                    return Some (Opcode :: WHILEGE_SVE_Pd_Rn_Rm (WHILEGE_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201000 {
                                                                    return Some (Opcode :: WHILEGE_Rn_SVE_Pd_Rm (WHILEGE_Rn_SVE_Pd_Rm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200800 {
                                                                    return Some (Opcode :: WHILEHS_SVE_Pd_Rn_Rm (WHILEHS_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201800 {
                                                                    return Some (Opcode :: WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X (WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200400 {
                                                                    return Some (Opcode :: WHILELT_Rm_SVE_Pd_Rn (WHILELT_Rm_SVE_Pd_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201400 {
                                                                    return Some (Opcode :: WHILELT_SVE_Pd_Rn_Rm (WHILELT_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200c00 {
                                                                    return Some (Opcode :: WHILELO_SVE_Pd_Rn_Rm (WHILELO_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201c00 {
                                                                    return Some (Opcode :: WHILELO_SVE_Pd_S_B_Rn_X_Rm_X (WHILELO_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200010 {
                                                                    return Some (Opcode :: WHILEGT_SVE_Pd_Rn_Rm (WHILEGT_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201010 {
                                                                    return Some (Opcode :: WHILEGT_Rn_Rm_SVE_Pd (WHILEGT_Rn_Rm_SVE_Pd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200810 {
                                                                    return Some (Opcode :: WHILEHI_Rn_SVE_Pd_Rm (WHILEHI_Rn_SVE_Pd_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201810 {
                                                                    return Some (Opcode :: WHILEHI_Rm_Rn_SVE_Pd (WHILEHI_Rm_Rn_SVE_Pd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200410 {
                                                                    return Some (Opcode :: WHILELE_Rm_SVE_Pd_Rn (WHILELE_Rm_SVE_Pd_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201410 {
                                                                    return Some (Opcode :: WHILELE_Rm_X_SVE_Pd_S_B_Rn_X (WHILELE_Rm_X_SVE_Pd_S_B_Rn_X :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200c10 {
                                                                    return Some (Opcode :: WHILELS_SVE_Pd_Rn_Rm (WHILELS_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201c10 {
                                                                    return Some (Opcode :: WHILELS_Rm_SVE_Pd_Rn (WHILELS_Rm_SVE_Pd_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xa5200000 {
                                                        return Some (Opcode :: LD1ROW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN (LD1ROW_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa5a00000 {
                                                        return Some (Opcode :: LD1ROD_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 (LD1ROD_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x65000000 {
                                                            return Some (Opcode :: FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0fc00 == 0x65000000 {
                                                            return Some (Opcode :: FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x65000800 {
                                                                return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                            if insn & 0xffe0fc00 == 0x65000800 {
                                                                return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x65001800 {
                                                                return Some (Opcode :: FRECPS_SVE_Zn_SVE_Zm_16_SVE_Zd (FRECPS_SVE_Zn_SVE_Zm_16_SVE_Zd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x65000400 {
                                                            return Some (Opcode :: FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0fc00 == 0x65000400 {
                                                            return Some (Opcode :: FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x65000c00 {
                                                                return Some (Opcode :: FTSMUL_SVE_Zd_SVE_Zm_16_SVE_Zn (FTSMUL_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x65001c00 {
                                                                return Some (Opcode :: FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 (FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff20e000 == 0x65200000 {
                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn (FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                }
                                                if insn & 0xffe0e000 == 0x65200000 {
                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn (FMLA_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0xffc0e010 == 0xe5800000 {
                                                return Some(
                                                    Opcode::STR_SVE_ADDR_RI_S9xVL_SVE_PNt(
                                                        STR_SVE_ADDR_RI_S9xVL_SVE_PNt::from(insn),
                                                    ),
                                                );
                                            }
                                            if insn & 0xffc0e010 == 0xe5800000 {
                                                return Some(
                                                    Opcode::STR_SVE_ADDR_RI_S9xVL_SVE_PNt(
                                                        STR_SVE_ADDR_RI_S9xVL_SVE_PNt::from(insn),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x25002000 {
                                                        return Some (Opcode :: CMPLT_SVE_Pg3_SVE_Pd_SIMM5_SVE_Zn (CMPLT_SVE_Pg3_SVE_Pd_SIMM5_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x25002010 {
                                                        return Some (Opcode :: CMPLE_SVE_Zn_SVE_Pg3_SVE_Pd_SIMM5 (CMPLE_SVE_Zn_SVE_Pg3_SVE_Pd_SIMM5 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xa5002000 {
                                                        return Some (Opcode :: LD1RQW_SVE_Pg3_SVE_ADDR_RI_S4x16_SVE_ZtxN (LD1RQW_SVE_Pg3_SVE_ADDR_RI_S4x16_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa5802000 {
                                                        return Some (Opcode :: LD1RQD_SVE_ADDR_RI_S4x16_SVE_Pg3_SVE_ZtxN (LD1RQD_SVE_ADDR_RI_S4x16_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65002000
                                                                    {
                                                                        return Some (Opcode :: FADDV_SVE_Pg3_SVE_Vd_SVE_Zn (FADDV_SVE_Pg3_SVE_Vd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 4 & 1 == 0 {
                                                                        if insn & 0xff3fe010
                                                                            == 0x65102000
                                                                        {
                                                                            return Some (Opcode :: FCMGE_FPIMM0_SVE_Pd_SVE_Pg3_SVE_Zn (FCMGE_FPIMM0_SVE_Pd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3fe010
                                                                            == 0x65102010
                                                                        {
                                                                            return Some (Opcode :: FCMGT_SVE_Zn_SVE_Pg3_SVE_Pd_FPIMM0 (FCMGT_SVE_Zn_SVE_Pg3_SVE_Pd_FPIMM0 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x65182000 {
                                                                    return Some (Opcode :: FADDA_SVE_Vd_SVE_Pg3_SVE_Zm_5 (FADDA_SVE_Vd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x65042000 {
                                                                return Some (Opcode :: FMAXNMV_SVE_Pg3_SVE_Vd_SVE_Zn (FMAXNMV_SVE_Pg3_SVE_Vd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0xff3fe010 == 0x65122000 {
                                                                return Some (Opcode :: FCMEQ_SVE_Pg3_FPIMM0_SVE_Pd_SVE_Zn (FCMEQ_SVE_Pg3_FPIMM0_SVE_Pd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x65062000 {
                                                                    return Some (Opcode :: FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn (FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x650e3000 {
                                                                    return Some (Opcode :: FRECPE_SVE_Zd_SVE_Zn (FRECPE_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 4 & 1 == 0 {
                                                                if insn & 0xff3fe010 == 0x65112000 {
                                                                    return Some (Opcode :: FCMLT_SVE_Zn_SVE_Pg3_FPIMM0_SVE_Pd (FCMLT_SVE_Zn_SVE_Pg3_FPIMM0_SVE_Pd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe010 == 0x65112010 {
                                                                    return Some (Opcode :: FCMLE_SVE_Zn_SVE_Pd_FPIMM0_SVE_Pg3 (FCMLE_SVE_Zn_SVE_Pd_FPIMM0_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x65052000 {
                                                                return Some (Opcode :: FMINNMV_SVE_Pg3_SVE_Vd_SVE_Zn (FMINNMV_SVE_Pg3_SVE_Vd_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0xff3fe010 == 0x65132000 {
                                                                return Some (Opcode :: FCMNE_FPIMM0_SVE_Zn_SVE_Pd_SVE_Pg3 (FCMNE_FPIMM0_SVE_Zn_SVE_Pd_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x65072000 {
                                                                    return Some (Opcode :: FMINV_SVE_Pg3_SVE_Vd_SVE_Zn (FMINV_SVE_Pg3_SVE_Vd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x650f3000 {
                                                                    return Some (Opcode :: FRSQRTE_SVE_Zd_SVE_Zn (FRSQRTE_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5002000 {
                                                            return Some (Opcode :: STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5802000 {
                                                            return Some (Opcode :: STNT1D_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN (STNT1D_SVE_ADDR_ZX_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe5402000 {
                                                        return Some (Opcode :: STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX (STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn & 0xffa0fc1f == 0x25a02000 {
                                                            return Some(Opcode::CTERMEQ_Rn_Rm(
                                                                CTERMEQ_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc10 == 0x25203000 {
                                                            return Some(
                                                                Opcode::WHILEWR_SVE_Pd_Rn_Rm(
                                                                    WHILEWR_SVE_Pd_Rn_Rm::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn & 0xffa0fc1f == 0x25a02010 {
                                                            return Some(Opcode::CTERMNE_Rm_Rn(
                                                                CTERMNE_Rm_Rn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc10 == 0x25203010 {
                                                            return Some(
                                                                Opcode::WHILERW_Rm_Rn_SVE_Pd(
                                                                    WHILERW_Rm_Rn_SVE_Pd::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xa5202000 {
                                                        return Some (Opcode :: LD1ROW_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN (LD1ROW_SVE_Pg3_SVE_ADDR_RI_S4x32_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa5a02000 {
                                                        return Some (Opcode :: LD1ROD_SVE_ADDR_RI_S4x32_SVE_ZtxN_SVE_Pg3 (LD1ROD_SVE_ADDR_RI_S4x32_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xff20e000 == 0x65202000 {
                                                return Some(
                                                    Opcode::FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn(
                                                        FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                            if insn & 0xffe0e000 == 0x65202000 {
                                                return Some(
                                                    Opcode::FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn(
                                                        FMLS_SVE_Zm_16_SVE_Pg3_SVE_Zd_SVE_Zn::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 9 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 4 & 1 == 0 {
                                                                if insn & 0xfff0c210 == 0x25004000 {
                                                                    return Some (Opcode :: AND_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn (AND_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0c210 == 0x25004010 {
                                                                    return Some (Opcode :: BIC_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn (BIC_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xffffc200 == 0x25104000 {
                                                                    return Some (Opcode :: BRKA_SVE_Pn_SVE_Pg4_10_SVE_Pd (BRKA_SVE_Pn_SVE_Pg4_10_SVE_Pd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffc210 == 0x25184000 {
                                                                    return Some (Opcode :: BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn (BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 4 & 1 == 0 {
                                                            if insn & 0xfff0c210 == 0x25004200 {
                                                                return Some (Opcode :: EOR_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn (EOR_SVE_Pd_SVE_Pm_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25004210 {
                                                                return Some (Opcode :: SEL_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm (SEL_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5004000 {
                                                            return Some (Opcode :: LD1SH_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN (LD1SH_SVE_ADDR_RX_LSL1_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5006000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN (LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5006000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN (LDFF1SH_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 9 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 4 & 1 == 0 {
                                                                if insn & 0xfff0c210 == 0x25804000 {
                                                                    return Some (Opcode :: ORR_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm (ORR_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0c210 == 0x25804010 {
                                                                    return Some (Opcode :: ORN_SVE_Pg4_10_SVE_Pm_SVE_Pd_SVE_Pn (ORN_SVE_Pg4_10_SVE_Pm_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffffc200 == 0x25904000 {
                                                                return Some (Opcode :: BRKB_SVE_Pn_SVE_Pg4_10_SVE_Pd (BRKB_SVE_Pn_SVE_Pg4_10_SVE_Pd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 4 & 1 == 0 {
                                                            if insn & 0xfff0c210 == 0x25804200 {
                                                                return Some (Opcode :: NOR_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 (NOR_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25804210 {
                                                                return Some (Opcode :: NAND_SVE_Pg4_10_SVE_Pn_SVE_Pd_SVE_Pm (NAND_SVE_Pg4_10_SVE_Pn_SVE_Pd_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5804000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5806000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5806000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 4 & 1 == 0 {
                                                        if insn >> 9 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xfff0c210 == 0x25404000 {
                                                                    return Some (Opcode :: ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn (ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pm_SVE_Pn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xffffc210
                                                                        == 0x25504000
                                                                    {
                                                                        return Some (Opcode :: BRKAS_SVE_Pn_SVE_Pd_SVE_Pg4_10 (BRKAS_SVE_Pn_SVE_Pd_SVE_Pg4_10 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffc210
                                                                        == 0x25584000
                                                                    {
                                                                        return Some (Opcode :: BRKNS_SVE_Pn_SVE_Pd_SVE_Pg4_10 (BRKNS_SVE_Pn_SVE_Pd_SVE_Pg4_10 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25404200 {
                                                                return Some (Opcode :: EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff0c210 == 0x25404010 {
                                                            return Some (Opcode :: BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5404000 {
                                                            return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5406000 {
                                                            return Some (Opcode :: LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN (LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5406000 {
                                                            return Some (Opcode :: LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN (LDFF1W_SVE_Pg3_SVE_ADDR_R_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 31 & 1 == 0 {
                                                    if insn >> 4 & 1 == 0 {
                                                        if insn >> 9 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xfff0c210 == 0x25c04000 {
                                                                    return Some (Opcode :: ORRS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd (ORRS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffc210 == 0x25d04000 {
                                                                    return Some (Opcode :: BRKBS_SVE_Pg4_10_SVE_Pn_SVE_Pd (BRKBS_SVE_Pg4_10_SVE_Pn_SVE_Pd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25c04200 {
                                                                return Some (Opcode :: NORS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd (NORS_SVE_Pg4_10_SVE_Pn_SVE_Pm_SVE_Pd :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 9 & 1 == 0 {
                                                            if insn & 0xfff0c210 == 0x25c04010 {
                                                                return Some (Opcode :: ORNS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm (ORNS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25c04210 {
                                                                return Some (Opcode :: NANDS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm (NANDS_SVE_Pd_SVE_Pn_SVE_Pg4_10_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5c04000 {
                                                            return Some (Opcode :: LD1SB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN (LD1SB_SVE_Pg3_SVE_ADDR_RX_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5c06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5c06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn & 0xff20c210 == 0x25204000 {
                                                    return Some (Opcode :: PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd (PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd :: from (insn))) ;
                                                }
                                                if insn & 0xff20c210 == 0x25204000 {
                                                    return Some (Opcode :: PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd (PSEL_SME_PnT_Wm_imm_SVE_PNg4_10_SVE_PNd :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 10 & 1 == 0 {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 3 & 1 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204010 {
                                                                    return Some (Opcode :: WHILEGE_Rn_Rm_SME_VLxN_13_SME_PNd3 (WHILEGE_Rn_Rm_SME_VLxN_13_SME_PNd3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204018 {
                                                                    return Some (Opcode :: WHILEGT_Rm_Rn_SME_PNd3_SME_VLxN_13 (WHILEGT_Rm_Rn_SME_PNd3_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 13 & 1 == 0 {
                                                                if insn & 1 == 0 {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205010
                                                                    {
                                                                        return Some (Opcode :: WHILEGE_Rm_Rn_SME_Pdx2 (WHILEGE_Rm_Rn_SME_Pdx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205011
                                                                    {
                                                                        return Some (Opcode :: WHILEGT_SME_Pdx2_Rn_Rm (WHILEGT_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc10 == 0x25207010 {
                                                                    return Some (Opcode :: PEXT_SME_PNn3_INDEX2_SVE_Pd (PEXT_SME_PNn3_INDEX2_SVE_Pd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 3 & 1 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204810 {
                                                                    return Some (Opcode :: WHILEHS_Rn_SME_PNd3_Rm_SME_VLxN_13 (WHILEHS_Rn_SME_PNd3_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204818 {
                                                                    return Some (Opcode :: WHILEHI_SME_VLxN_13_Rn_SME_PNd3_Rm (WHILEHI_SME_VLxN_13_Rn_SME_PNd3_Rm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 13 & 1 == 0 {
                                                                if insn & 1 == 0 {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205810
                                                                    {
                                                                        return Some (Opcode :: WHILEHS_Rn_Rm_SME_Pdx2 (WHILEHS_Rn_Rm_SME_Pdx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205811
                                                                    {
                                                                        return Some (Opcode :: WHILEHI_Rn_SME_Pdx2_Rm (WHILEHI_Rn_SME_Pdx2_Rm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffff8 == 0x25207810 {
                                                                    return Some(
                                                                        Opcode::PTRUE_SME_PNd3(
                                                                            PTRUE_SME_PNd3::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 11 & 1 == 0 {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 3 & 1 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204410 {
                                                                    return Some (Opcode :: WHILELT_Rm_SME_VLxN_13_Rn_SME_PNd3 (WHILELT_Rm_SME_VLxN_13_Rn_SME_PNd3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204418 {
                                                                    return Some (Opcode :: WHILELE_SME_PNd3_SME_VLxN_13_Rn_Rm (WHILELE_SME_PNd3_SME_VLxN_13_Rn_Rm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 13 & 1 == 0 {
                                                                if insn & 1 == 0 {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205410
                                                                    {
                                                                        return Some (Opcode :: WHILELT_Rm_Rn_SME_Pdx2 (WHILELT_Rm_Rn_SME_Pdx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205411
                                                                    {
                                                                        return Some (Opcode :: WHILELE_SME_Pdx2_Rn_Rm (WHILELE_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe10 == 0x25207410 {
                                                                    return Some (Opcode :: PEXT_SME_PdxN_SME_PNn3_INDEX1 (PEXT_SME_PdxN_SME_PNn3_INDEX1 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 12 & 1 == 0 {
                                                            if insn >> 3 & 1 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204c10 {
                                                                    return Some (Opcode :: WHILELO_Rn_SME_VLxN_13_Rm_SME_PNd3 (WHILELO_Rn_SME_VLxN_13_Rm_SME_PNd3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204c18 {
                                                                    return Some (Opcode :: WHILELS_SME_VLxN_13_SME_PNd3_Rm_Rn (WHILELS_SME_VLxN_13_SME_PNd3_Rm_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 1 == 0 {
                                                                if insn & 0xff20fc11 == 0x25205c10 {
                                                                    return Some (Opcode :: WHILELO_SME_Pdx2_Rn_Rm (WHILELO_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc11 == 0x25205c11 {
                                                                    return Some (Opcode :: WHILELS_Rn_Rm_SME_Pdx2 (WHILELS_Rn_Rm_SME_Pdx2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5204000 {
                                                            return Some (Opcode :: LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 (LD1SH_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5a04000 {
                                                            return Some (Opcode :: LD1SB_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 (LD1SB_SVE_ADDR_RX_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5604000 {
                                                            return Some (Opcode :: LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 (LD1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5e04000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5206000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 (LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5206000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 (LDFF1SH_SVE_ZtxN_SVE_ADDR_R_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5a06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 (LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5a06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 (LDFF1SB_SVE_ADDR_R_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5606000 {
                                                            return Some (Opcode :: LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R (LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5606000 {
                                                            return Some (Opcode :: LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R (LDFF1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5e06000 {
                                                            return Some (Opcode :: LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R (LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5e06000 {
                                                            return Some (Opcode :: LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R (LDFF1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x65004000 {
                                                        return Some (Opcode :: FCMGE_SVE_Zm_16_SVE_Pg3_SVE_Pd_SVE_Zn (FCMGE_SVE_Zm_16_SVE_Pg3_SVE_Pd_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x65004010 {
                                                        return Some (Opcode :: FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff20e000 == 0x65204000 {
                                                    return Some (Opcode :: FNMLA_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 (FNMLA_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn & 0xffc0e000 == 0xe5804000 {
                                                    return Some(
                                                        Opcode::STR_SVE_Zt_SVE_ADDR_RI_S9xVL(
                                                            STR_SVE_Zt_SVE_ADDR_RI_S9xVL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xe5404000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5604000 {
                                                            return Some (Opcode :: ST1W_SVE_ADDR_RX_LSL2_SVE_Pg3_SVE_ZtxN (ST1W_SVE_ADDR_RX_LSL2_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5e04000 {
                                                            return Some (Opcode :: ST1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 (ST1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x65006000 {
                                                        return Some (Opcode :: FCMEQ_SVE_Zm_16_SVE_Pg3_SVE_Zn_SVE_Pd (FCMEQ_SVE_Zm_16_SVE_Pg3_SVE_Zn_SVE_Pd :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x65006010 {
                                                        return Some (Opcode :: FCMNE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 (FCMNE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5006000 {
                                                            return Some (Opcode :: STNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 (STNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5806000 {
                                                            return Some (Opcode :: STNT1D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN (STNT1D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5406000 {
                                                            return Some (Opcode :: ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5c06000 {
                                                            return Some (Opcode :: ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 (ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x65206000 {
                                                    return Some (Opcode :: FNMLS_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 (FNMLS_SVE_Zn_SVE_Pg3_SVE_Zd_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5206000 {
                                                            return Some (Opcode :: ST2W_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN (ST2W_SVE_Pg3_SVE_ADDR_RX_LSL2_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5a06000 {
                                                            return Some (Opcode :: ST2D_SVE_ADDR_RX_LSL3_SVE_Pg3_SVE_ZtxN (ST2D_SVE_ADDR_RX_LSL3_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5606000 {
                                                            return Some (Opcode :: ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 (ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5e06000 {
                                                            return Some (Opcode :: ST4D_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 (ST4D_SVE_ADDR_RX_LSL3_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 21 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn & 0xff20e010 == 0x25008000 {
                                                    return Some(
                                                        Opcode::CMPEQ_SIMM5_SVE_Pd_SVE_Pg3_SVE_Zn(
                                                            CMPEQ_SIMM5_SVE_Pd_SVE_Pg3_SVE_Zn::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xff20e010 == 0x25008010 {
                                                    return Some(
                                                        Opcode::CMPNE_SIMM5_SVE_Pg3_SVE_Zn_SVE_Pd(
                                                            CMPNE_SIMM5_SVE_Pg3_SVE_Zn_SVE_Pd::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn >> 20 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa500a000 {
                                                            return Some (Opcode :: LD1SH_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN (LD1SH_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa580a000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 (LD1SB_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa540a000 {
                                                            return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5c0a000 {
                                                            return Some (Opcode :: LD1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (LD1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa510a000 {
                                                            return Some (Opcode :: LDNF1SH_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 (LDNF1SH_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa590a000 {
                                                            return Some (Opcode :: LDNF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (LDNF1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa550a000 {
                                                            return Some (Opcode :: LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5d0a000 {
                                                            return Some (Opcode :: LDNF1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (LDNF1SB_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xfff0c210 == 0x2500c000 {
                                                            return Some (Opcode :: BRKPA_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 (BRKPA_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0c210 == 0x2540c000 {
                                                            return Some (Opcode :: BRKPAS_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm (BRKPAS_SVE_Pn_SVE_Pd_SVE_Pg4_10_SVE_Pm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn & 0xffffc21f == 0x2550c000 {
                                                                return Some (Opcode :: PTEST_SVE_Pg4_10_SVE_Pn (PTEST_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn >> 10 & 1 == 0 {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn >> 13 & 1 == 0 {
                                                                        if insn & 0xfffffe10
                                                                            == 0x2558c000
                                                                        {
                                                                            return Some (Opcode :: PFIRST_SVE_Pd_SVE_Pg4_5 (PFIRST_SVE_Pd_SVE_Pg4_5 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3ffc10
                                                                            == 0x2518e000
                                                                        {
                                                                            return Some (Opcode :: PTRUE_SVE_Pd_SVE_PATTERN (PTRUE_SVE_Pd_SVE_PATTERN :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 22 & 1 == 0 {
                                                                        if insn & 0xfffffe10
                                                                            == 0x2518f000
                                                                        {
                                                                            return Some (Opcode :: RDFFR_SVE_Pd_SVE_Pg4_5 (RDFFR_SVE_Pd_SVE_Pg4_5 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffe10
                                                                            == 0x2558f000
                                                                        {
                                                                            return Some (Opcode :: RDFFRS_SVE_Pd_SVE_Pg4_5 (RDFFRS_SVE_Pd_SVE_Pg4_5 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xfffffff0 == 0x2518e400 {
                                                                    return Some(
                                                                        Opcode::PFALSE_SVE_PNd(
                                                                            PFALSE_SVE_PNd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffff0 == 0x2518e400 {
                                                                    return Some(
                                                                        Opcode::PFALSE_SVE_PNd(
                                                                            PFALSE_SVE_PNd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 12 & 1 == 0 {
                                                                if insn & 0xff3ffc10 == 0x2519e000 {
                                                                    return Some (Opcode :: PTRUES_SVE_Pd_SVE_PATTERN (PTRUES_SVE_Pd_SVE_PATTERN :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffff0 == 0x2519f000 {
                                                                    return Some(
                                                                        Opcode::RDFFR_SVE_Pd(
                                                                            RDFFR_SVE_Pd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffe10 == 0x2519c400 {
                                                                return Some (Opcode :: PNEXT_SVE_Pg4_5_SVE_Pd (PNEXT_SVE_Pg4_5_SVE_Pd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn & 0xfff0c210 == 0x2500c010 {
                                                        return Some (Opcode :: BRKPB_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 (BRKPB_SVE_Pd_SVE_Pm_SVE_Pn_SVE_Pg4_10 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0c210 == 0x2540c010 {
                                                        return Some (Opcode :: BRKPBS_SVE_Pn_SVE_Pm_SVE_Pg4_10_SVE_Pd (BRKPBS_SVE_Pn_SVE_Pm_SVE_Pg4_10_SVE_Pd :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa500c000 {
                                                            return Some (Opcode :: LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa580c000 {
                                                            return Some (Opcode :: LDNT1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 (LDNT1D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa540c000 {
                                                            return Some (Opcode :: LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5c0c000 {
                                                            return Some (Opcode :: LD3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 (LD3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa500e000 {
                                                                return Some (Opcode :: LDNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (LDNT1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa580e000 {
                                                                return Some (Opcode :: LDNT1D_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (LDNT1D_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa540e000 {
                                                                return Some (Opcode :: LD3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN (LD3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5c0e000 {
                                                                return Some (Opcode :: LD3D_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL_SVE_Pg3 (LD3D_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa510e000 {
                                                            return Some (Opcode :: LD3Q_SVE_ADDR_RI_S4x2xVL_SME_Zt3_SVE_Pg3 (LD3Q_SVE_ADDR_RI_S4x2xVL_SME_Zt3_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa590e000 {
                                                            return Some (Opcode :: LD4Q_SVE_ADDR_RI_S4x2xVL_SME_Zt4_SVE_Pg3 (LD4Q_SVE_ADDR_RI_S4x2xVL_SME_Zt4_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 19 & 1 == 0 {
                                                    if insn >> 20 & 1 == 0 {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn >> 17 & 1 == 0 {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65008000
                                                                    {
                                                                        return Some (Opcode :: FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5 (FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65008000
                                                                    {
                                                                        return Some (Opcode :: FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5 (FADD_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65048000
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 (FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65048000
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 (FMAXNM_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65028000
                                                                    {
                                                                        return Some (Opcode :: FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd (FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65028000
                                                                    {
                                                                        return Some (Opcode :: FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd (FMUL_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65068000
                                                                    {
                                                                        return Some (Opcode :: FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd (FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65068000
                                                                    {
                                                                        return Some (Opcode :: FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd (FMAX_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 17 & 1 == 0 {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65018000
                                                                    {
                                                                        return Some (Opcode :: FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 (FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65018000
                                                                    {
                                                                        return Some (Opcode :: FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 (FSUB_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65058000
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd (FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65058000
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd (FMINNM_SVE_Zm_5_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65038000
                                                                    {
                                                                        return Some (Opcode :: FSUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 (FSUBR_SVE_Zd_SVE_Pg3_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65078000
                                                                    {
                                                                        return Some (Opcode :: FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3 (FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65078000
                                                                    {
                                                                        return Some (Opcode :: FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3 (FMIN_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff38fc00 == 0x65108000 {
                                                            return Some (Opcode :: FTMAD_SVE_Zm_5_SVE_UIMM3_SVE_Zd (FTMAD_SVE_Zm_5_SVE_UIMM3_SVE_Zd :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 17 & 1 == 0 {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65088000
                                                                    {
                                                                        return Some (Opcode :: FABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 (FABD_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x65188000
                                                                    {
                                                                        return Some (Opcode :: FADD_SVE_I1_HALF_ONE_SVE_Pg3_SVE_Zd (FADD_SVE_I1_HALF_ONE_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650c8000
                                                                    {
                                                                        return Some (Opcode :: FDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd (FDIVR_SVE_Pg3_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x651c8000
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 (FMAXNM_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650a8000
                                                                    {
                                                                        return Some (Opcode :: FMULX_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMULX_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x651a8000
                                                                    {
                                                                        return Some (Opcode :: FMUL_SVE_Pg3_SVE_I1_HALF_TWO_SVE_Zd (FMUL_SVE_Pg3_SVE_I1_HALF_TWO_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe3c0 == 0x651e8000 {
                                                                    return Some (Opcode :: FMAX_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE (FMAX_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 17 & 1 == 0 {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65098000
                                                                    {
                                                                        return Some (Opcode :: FSCALE_SVE_Zm_5_SVE_Zd_SVE_Pg3 (FSCALE_SVE_Zm_5_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x65198000
                                                                    {
                                                                        return Some (Opcode :: FSUB_SVE_Pg3_SVE_I1_HALF_ONE_SVE_Zd (FSUB_SVE_Pg3_SVE_I1_HALF_ONE_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650d8000
                                                                    {
                                                                        return Some (Opcode :: FDIV_SVE_Zm_5_SVE_Pg3_SVE_Zd (FDIV_SVE_Zm_5_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x651d8000
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SVE_I1_ZERO_ONE_SVE_Pg3_SVE_Zd (FMINNM_SVE_I1_ZERO_ONE_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn & 0xff3fe3c0 == 0x651b8000 {
                                                                    return Some (Opcode :: FSUBR_SVE_I1_HALF_ONE_SVE_Zd_SVE_Pg3 (FSUBR_SVE_I1_HALF_ONE_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe3c0 == 0x651f8000 {
                                                                    return Some (Opcode :: FMIN_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 (FMIN_SVE_Zd_SVE_I1_ZERO_ONE_SVE_Pg3 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20e010 == 0x6500c000 {
                                                        return Some (Opcode :: FCMUO_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 (FCMUO_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x6500c010 {
                                                        return Some (Opcode :: FACGE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 (FACGE_SVE_Zn_SVE_Pd_SVE_Pg3_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0a000 == 0xe5008000 {
                                                        return Some (Opcode :: ST1W_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 (ST1W_SVE_ADDR_RZ_XTW_14_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe5808000 {
                                                        return Some (Opcode :: ST1D_SVE_Pg3_SVE_ADDR_RZ_XTW_14_SVE_ZtxN (ST1D_SVE_Pg3_SVE_ADDR_RZ_XTW_14_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0a000 == 0xe5408000 {
                                                    return Some (Opcode :: ST1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_14 (ST1W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 19 & 1 == 0 {
                                                        if insn >> 17 & 1 == 0 {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6500a000
                                                                    {
                                                                        return Some (Opcode :: FRINTN_SVE_Zn_SVE_Pg3_SVE_Zd (FRINTN_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65d0a000
                                                                    {
                                                                        return Some (Opcode :: SCVTF_SVE_Zn_SVE_Pg3_SVE_Zd (SCVTF_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6504a000
                                                                    {
                                                                        return Some (Opcode :: FRINTA_SVE_Zd_SVE_Zn_SVE_Pg3 (FRINTA_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 22 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6594a000
                                                                        {
                                                                            return Some (Opcode :: SCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 (SCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn >> 23 & 1 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x6554a000
                                                                            {
                                                                                return Some (Opcode :: SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn (SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65d4a000
                                                                            {
                                                                                return Some (Opcode :: SCVTF_SVE_Pg3_SVE_Zd_SVE_Zn (SCVTF_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6502a000
                                                                    {
                                                                        return Some (Opcode :: FRINTM_SVE_Pg3_SVE_Zn_SVE_Zd (FRINTM_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x6552a000
                                                                    {
                                                                        return Some (Opcode :: SCVTF_SVE_Zn_S_H_SVE_Zd_S_H_SVE_Pg3_P_M (SCVTF_SVE_Zn_S_H_SVE_Zd_S_H_SVE_Pg3_P_M :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6506a000
                                                                    {
                                                                        return Some (Opcode :: FRINTX_SVE_Zn_SVE_Pg3_SVE_Zd (FRINTX_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6556a000
                                                                        {
                                                                            return Some (Opcode :: SCVTF_SVE_Pg3_SVE_Zn_SVE_Zd (SCVTF_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d6a000
                                                                        {
                                                                            return Some (Opcode :: SCVTF_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_D (SCVTF_SVE_Pg3_P_M_SVE_Zn_S_D_SVE_Zd_S_D :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn >> 17 & 1 == 0 {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn >> 22 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6588a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Pg3_SVE_Zd_SVE_Zn (FCVT_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65c8a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zn_SVE_Pg3_SVE_Zd (FCVT_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650ca000
                                                                    {
                                                                        return Some (Opcode :: FRECPX_SVE_Pg3_SVE_Zd_SVE_Zn (FRECPX_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x650aa000
                                                                        {
                                                                            return Some (Opcode :: FCVTX_SVE_Zn_SVE_Zd_SVE_Pg3 (FCVTX_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x658aa000
                                                                        {
                                                                            return Some (Opcode :: BFCVT_SVE_Zd_SVE_Zn_SVE_Pg3 (BFCVT_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65caa000
                                                                    {
                                                                        return Some (Opcode :: FCVT_SVE_Pg3_SVE_Zn_SVE_Zd (FCVT_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xfff9e000
                                                                        == 0x6518a000
                                                                    {
                                                                        return Some (Opcode :: FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn (FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x659ca000
                                                                    {
                                                                        return Some (Opcode :: FCVTZS_SVE_Zn_SVE_Zd_SVE_Pg3 (FCVTZS_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 17 & 1 == 0 {
                                                                    if insn >> 18 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d8a000
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_SVE_Pg3_SVE_Zd_SVE_Zn (FCVTZS_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn >> 23 & 1 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x655ca000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Pg3_P_M_SVE_Zd_S_S_SVE_Zn_S_H (FCVTZS_SVE_Pg3_P_M_SVE_Zd_S_S_SVE_Zn_S_H :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65dca000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Pg3_SVE_Zn_SVE_Zd (FCVTZS_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 18 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x655aa000
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_SVE_Pg3_P_M_SVE_Zn_S_H_SVE_Zd_S_H (FCVTZS_SVE_Pg3_P_M_SVE_Zn_S_H_SVE_Zd_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn >> 23 & 1 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x655ea000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65dea000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M (FCVTZS_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6501a000
                                                                    {
                                                                        return Some (Opcode :: FRINTP_SVE_Pg3_SVE_Zn_SVE_Zd (FRINTP_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65d1a000
                                                                    {
                                                                        return Some (Opcode :: UCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 (UCVTF_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn >> 22 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6589a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zd_SVE_Pg3_SVE_Zn (FCVT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65c9a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H (FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65d9a000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 22 & 1 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x6595a000
                                                                    {
                                                                        return Some (Opcode :: UCVTF_SVE_Zn_SVE_Pg3_SVE_Zd (UCVTF_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6555a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Zd_SVE_Zn_SVE_Pg3 (UCVTF_SVE_Zd_SVE_Zn_SVE_Pg3 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d5a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Pg3_SVE_Zd_SVE_Zn (UCVTF_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650da000
                                                                    {
                                                                        return Some (Opcode :: FSQRT_SVE_Pg3_SVE_Zd_SVE_Zn (FSQRT_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 22 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x659da000
                                                                        {
                                                                            return Some (Opcode :: FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S (FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn >> 23 & 1 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x655da000
                                                                            {
                                                                                return Some (Opcode :: FCVTZU_SVE_Zn_SVE_Zd_SVE_Pg3 (FCVTZU_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65dda000
                                                                            {
                                                                                return Some (Opcode :: FCVTZU_SVE_Zn_SVE_Pg3_SVE_Zd (FCVTZU_SVE_Zn_SVE_Pg3_SVE_Zd :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6503a000
                                                                    {
                                                                        return Some (Opcode :: FRINTZ_SVE_Zn_SVE_Zd_SVE_Pg3 (FRINTZ_SVE_Zn_SVE_Zd_SVE_Pg3 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x6553a000
                                                                    {
                                                                        return Some (Opcode :: UCVTF_SVE_Zd_S_H_SVE_Zn_S_H_SVE_Pg3_P_M (UCVTF_SVE_Zd_S_H_SVE_Zn_S_H_SVE_Pg3_P_M :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x65cba000
                                                                    {
                                                                        return Some (Opcode :: FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S (FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x655ba000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Pg3_SVE_Zn_SVE_Zd (FCVTZU_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6507a000
                                                                    {
                                                                        return Some (Opcode :: FRINTI_SVE_Pg3_SVE_Zn_SVE_Zd (FRINTI_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6557a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Pg3_P_M_SVE_Zd_S_H_SVE_Zn_S_D (UCVTF_SVE_Pg3_P_M_SVE_Zd_S_H_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d7a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Pg3_SVE_Zn_SVE_Zd (UCVTF_SVE_Pg3_SVE_Zn_SVE_Zd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x655fa000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zn_S_H_SVE_Zd_S_D_SVE_Pg3_P_M (FCVTZU_SVE_Zn_S_H_SVE_Zd_S_D_SVE_Pg3_P_M :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65dfa000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M (FCVTZU_SVE_Zn_S_D_SVE_Zd_S_D_SVE_Pg3_P_M :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe500a000 {
                                                            return Some (Opcode :: ST1W_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 (ST1W_SVE_ADDR_RZ_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe580a000 {
                                                            return Some (Opcode :: ST1D_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN (ST1D_SVE_ADDR_RZ_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe540a000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5c0a000 {
                                                            return Some (Opcode :: ST1D_SVE_Pg3_SVE_ADDR_ZI_U5x8_SVE_ZtxN (ST1D_SVE_Pg3_SVE_ADDR_ZI_U5x8_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xff20e010 == 0x6500e010 {
                                                    return Some (Opcode :: FACGT_SVE_Pd_SVE_Zn_SVE_Zm_16_SVE_Pg3 (FACGT_SVE_Pd_SVE_Zn_SVE_Zm_16_SVE_Pg3 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn & 0xfff0e000 == 0xe540e000 {
                                                        return Some (Opcode :: ST1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (ST1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe510e000 {
                                                                return Some (Opcode :: STNT1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN (STNT1W_SVE_ADDR_RI_S4xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe590e000 {
                                                                return Some (Opcode :: STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe550e000 {
                                                                return Some (Opcode :: ST3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN (ST3W_SVE_ADDR_RI_S4x3xVL_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe5d0e000 {
                                                                return Some (Opcode :: ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL (ST3D_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 9 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xff3fc200 == 0x25208000 {
                                                                    return Some (Opcode :: CNTP_SVE_Pg4_10_SVE_Pn_Rd (CNTP_SVE_Pg4_10_SVE_Pn_Rd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn >> 10 & 1 == 0 {
                                                                    if insn >> 11 & 1 == 0 {
                                                                        if insn >> 12 & 1 == 0 {
                                                                            if insn & 0xff3ffe00
                                                                                == 0x25288000
                                                                            {
                                                                                return Some (Opcode :: SQINCP_SVE_Pg4_5_SVE_Zd (SQINCP_SVE_Pg4_5_SVE_Zd :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xfffffe1f
                                                                                == 0x25289000
                                                                            {
                                                                                return Some (Opcode :: WRFFR_SVE_Pn (WRFFR_SVE_Pn :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3ffe00
                                                                            == 0x25288800
                                                                        {
                                                                            return Some (Opcode :: SQINCP_SVE_Pg4_5_Rd (SQINCP_SVE_Pg4_5_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x25288c00
                                                                    {
                                                                        return Some (Opcode :: SQINCP_SVE_Pg4_5_S_B_Rd_X (SQINCP_SVE_Pg4_5_S_B_Rd_X :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 11 & 1 == 0 {
                                                                if insn >> 12 & 1 == 0 {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x252c8000
                                                                    {
                                                                        return Some (Opcode :: INCP_SVE_Pg4_5_SVE_Zd (INCP_SVE_Pg4_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn == 0x252c9000 {
                                                                        return Some(
                                                                            Opcode::SETFFR(
                                                                                SETFFR::from(insn),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252c8800 {
                                                                    return Some(
                                                                        Opcode::INCP_SVE_Pg4_5_Rd(
                                                                            INCP_SVE_Pg4_5_Rd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 10 & 1 == 0 {
                                                            if insn >> 11 & 1 == 0 {
                                                                if insn & 0xff3ffe00 == 0x252a8000 {
                                                                    return Some (Opcode :: SQDECP_SVE_Pg4_5_SVE_Zd (SQDECP_SVE_Pg4_5_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252a8800 {
                                                                    return Some (Opcode :: SQDECP_Rd_SVE_Pg4_5 (SQDECP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffe00 == 0x252a8c00 {
                                                                return Some(
                                                                    Opcode::SQDECP_SVE_Pg4_5_Rd(
                                                                        SQDECP_SVE_Pg4_5_Rd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 10 & 1 == 0 {
                                                        if insn >> 11 & 1 == 0 {
                                                            if insn >> 17 & 1 == 0 {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x25298000
                                                                    {
                                                                        return Some (Opcode :: UQINCP_SVE_Zd_SVE_Pg4_5 (UQINCP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x252d8000
                                                                    {
                                                                        return Some (Opcode :: DECP_SVE_Pg4_5_SVE_Zd (DECP_SVE_Pg4_5_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252b8000 {
                                                                    return Some (Opcode :: UQDECP_SVE_Zd_SVE_Pg4_5 (UQDECP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 17 & 1 == 0 {
                                                                if insn >> 18 & 1 == 0 {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x25298800
                                                                    {
                                                                        return Some (Opcode :: UQINCP_SVE_Pg4_5_Rd (UQINCP_SVE_Pg4_5_Rd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x252d8800
                                                                    {
                                                                        return Some (Opcode :: DECP_Rd_SVE_Pg4_5 (DECP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252b8800 {
                                                                    return Some (Opcode :: UQDECP_Rd_SVE_Pg4_5 (UQDECP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 17 & 1 == 0 {
                                                            if insn & 0xff3ffe00 == 0x25298c00 {
                                                                return Some(
                                                                    Opcode::UQINCP_Rd_SVE_Pg4_5(
                                                                        UQINCP_Rd_SVE_Pg4_5::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffe00 == 0x252b8c00 {
                                                                return Some (Opcode :: UQDECP_Rd_X_SVE_Pg4_5_S_B (UQDECP_Rd_X_SVE_Pg4_5_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff3ffa00 == 0x25208200 {
                                                    return Some(
                                                        Opcode::CNTP_Rd_SME_VLxN_10_SME_PNn(
                                                            CNTP_Rd_SME_VLxN_10_SME_PNn::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0e000 == 0xa5208000 {
                                                        return Some (Opcode :: LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 (LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa5a08000 {
                                                        return Some (Opcode :: LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 (LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa520a000 {
                                                                return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5a0a000 {
                                                                return Some (Opcode :: LD1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL (LD1SB_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa560a000 {
                                                                return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5e0a000 {
                                                                return Some (Opcode :: LD1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN (LD1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa530a000 {
                                                                return Some (Opcode :: LDNF1SH_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 (LDNF1SH_SVE_ADDR_RI_S4xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5b0a000 {
                                                                return Some (Opcode :: LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xa570a000 {
                                                                return Some (Opcode :: LDNF1W_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 (LDNF1W_SVE_ZtxN_SVE_ADDR_RI_S4xVL_SVE_Pg3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5f0a000 {
                                                                return Some (Opcode :: LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 16 & 1 == 0 {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fc000 == 0x2520c000 {
                                                                    return Some (Opcode :: ADD_SVE_AIMM_SVE_Zd (ADD_SVE_AIMM_SVE_Zd :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x2530c000 {
                                                                    return Some (Opcode :: MUL_SVE_Zd_SVE_SIMM8 (MUL_SVE_Zd_SVE_SIMM8 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x2528c000 {
                                                                    return Some (Opcode :: SMAX_SVE_Zd_SVE_SIMM8 (SMAX_SVE_Zd_SVE_SIMM8 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fc000 == 0x2538c000 {
                                                                    return Some (Opcode :: DUP_SVE_ASIMM_SVE_Zd (DUP_SVE_ASIMM_SVE_Zd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2524c000 {
                                                            return Some(
                                                                Opcode::SQADD_SVE_AIMM_SVE_Zd(
                                                                    SQADD_SVE_AIMM_SVE_Zd::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn & 0xff3fe000 == 0x252ac000 {
                                                            return Some(
                                                                Opcode::SMIN_SVE_Zd_SVE_SIMM8(
                                                                    SMIN_SVE_Zd_SVE_SIMM8::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2526c000 {
                                                            return Some(
                                                                Opcode::SQSUB_SVE_Zd_SVE_AIMM(
                                                                    SQSUB_SVE_Zd_SVE_AIMM::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn & 0xff3fc000 == 0x2521c000 {
                                                                return Some(
                                                                    Opcode::SUB_SVE_Zd_SVE_AIMM(
                                                                        SUB_SVE_Zd_SVE_AIMM::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xff3fe000 == 0x2529c000 {
                                                                    return Some (Opcode :: UMAX_SVE_Zd_SVE_UIMM8 (UMAX_SVE_Zd_SVE_UIMM8 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x2539c000 {
                                                                    return Some (Opcode :: FDUP_SVE_Zd_SVE_FPIMM8 (FDUP_SVE_Zd_SVE_FPIMM8 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2525c000 {
                                                            return Some(
                                                                Opcode::UQADD_SVE_Zd_SVE_AIMM(
                                                                    UQADD_SVE_Zd_SVE_AIMM::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn & 0xff3fc000 == 0x2523c000 {
                                                                return Some(
                                                                    Opcode::SUBR_SVE_AIMM_SVE_Zd(
                                                                        SUBR_SVE_AIMM_SVE_Zd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x252bc000 {
                                                                return Some(
                                                                    Opcode::UMIN_SVE_Zd_SVE_UIMM8(
                                                                        UMIN_SVE_Zd_SVE_UIMM8::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2527c000 {
                                                            return Some(
                                                                Opcode::UQSUB_SVE_Zd_SVE_AIMM(
                                                                    UQSUB_SVE_Zd_SVE_AIMM::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa520c000 {
                                                            return Some (Opcode :: LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5a0c000 {
                                                            return Some (Opcode :: LD2D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN (LD2D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xa560c000 {
                                                            return Some (Opcode :: LD4W_SVE_ADDR_RX_LSL2_SVE_ZtxN_SVE_Pg3 (LD4W_SVE_ADDR_RX_LSL2_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5e0c000 {
                                                            return Some (Opcode :: LD4D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN (LD4D_SVE_Pg3_SVE_ADDR_RX_LSL3_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa520e000 {
                                                            return Some (Opcode :: LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5a0e000 {
                                                            return Some (Opcode :: LD2D_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 (LD2D_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xa560e000 {
                                                            return Some (Opcode :: LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5e0e000 {
                                                            return Some (Opcode :: LD4D_SVE_Pg3_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN (LD4D_SVE_Pg3_SVE_ADDR_RI_S4x4xVL_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 31 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x65208000 {
                                                    return Some (Opcode :: FMAD_SVE_Pg3_SVE_Za_16_SVE_Zm_5_SVE_Zd (FMAD_SVE_Pg3_SVE_Za_16_SVE_Zm_5_SVE_Zd :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xff20e000 == 0x6520c000 {
                                                    return Some (Opcode :: FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 (FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0a000 == 0xe5208000 {
                                                        return Some (Opcode :: ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN (ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe5a08000 {
                                                        return Some (Opcode :: ST1D_SVE_ADDR_RZ_XTW3_14_SVE_ZtxN_SVE_Pg3 (ST1D_SVE_ADDR_RZ_XTW3_14_SVE_ZtxN_SVE_Pg3 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0a000 == 0xe5608000 {
                                                    return Some (Opcode :: ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN_S_S (ST1W_SVE_ADDR_RZ_XTW2_14_SVE_Pg3_SVE_ZtxN_S_S :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x6520a000 {
                                                    return Some (Opcode :: FMSB_SVE_Za_16_SVE_Zd_SVE_Zm_5_SVE_Pg3 (FMSB_SVE_Za_16_SVE_Zd_SVE_Zm_5_SVE_Pg3 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0e000 == 0xe520a000 {
                                                            return Some (Opcode :: ST1W_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN (ST1W_SVE_Pg3_SVE_ADDR_RZ_LSL2_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5a0a000 {
                                                            return Some (Opcode :: ST1D_SVE_ZtxN_SVE_ADDR_RZ_LSL3_SVE_Pg3 (ST1D_SVE_ZtxN_SVE_ADDR_RZ_LSL3_SVE_Pg3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe560a000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 (ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 31 & 1 == 0 {
                                                if insn & 0xff20e000 == 0x6520e000 {
                                                    return Some (Opcode :: FNMSB_SVE_Zm_5_SVE_Zd_SVE_Pg3_SVE_Za_16 (FNMSB_SVE_Zm_5_SVE_Zd_SVE_Pg3_SVE_Za_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn >> 20 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xfff0e000 == 0xe560e000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe5e0e000 {
                                                            return Some (Opcode :: ST1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN (ST1D_SVE_Pg3_SVE_ADDR_RI_S4xVL_SVE_ZtxN :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe530e000 {
                                                                return Some (Opcode :: ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe5b0e000 {
                                                                return Some (Opcode :: ST2D_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN (ST2D_SVE_Pg3_SVE_ADDR_RI_S4x2xVL_SVE_ZtxN :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xfff0e000 == 0xe570e000 {
                                                                return Some (Opcode :: ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x4xVL (ST4W_SVE_Pg3_SVE_ZtxN_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe5f0e000 {
                                                                return Some (Opcode :: ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                if insn >> 29 & 1 == 0 {
                    if insn >> 30 & 1 == 0 {
                        if insn >> 31 & 1 == 0 {
                            if insn & 0xfc000000 == 0x14000000 {
                                return Some(Opcode::B_ADDR_PCREL26(B_ADDR_PCREL26::from(insn)));
                            }
                        } else {
                            if insn & 0xfc000000 == 0x94000000 {
                                return Some(Opcode::BL_ADDR_PCREL26(BL_ADDR_PCREL26::from(insn)));
                            }
                        }
                    } else {
                        if insn >> 24 & 1 == 0 {
                            if insn >> 4 & 1 == 0 {
                                if insn >> 25 & 1 == 0 {
                                    if insn >> 31 & 1 == 0 {
                                        if insn & 0xff000010 == 0x54000000 {
                                            return Some(Opcode::B_C_ADDR_PCREL19(
                                                B_C_ADDR_PCREL19::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 1 == 0 {
                                            if insn >> 1 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffe0001f == 0xd4400000 {
                                                        return Some(Opcode::HLT_EXCEPTION(
                                                            HLT_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xffe0001f == 0xd4200000 {
                                                            return Some(Opcode::BRK_EXCEPTION(
                                                                BRK_EXCEPTION::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0001f == 0xd4600000 {
                                                            return Some(
                                                                Opcode::TCANCEL_TME_UIMM16(
                                                                    TCANCEL_TME_UIMM16::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffe0001f == 0xd4000002 {
                                                        return Some(Opcode::HVC_EXCEPTION(
                                                            HVC_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0001f == 0xd4a00002 {
                                                        return Some(Opcode::DCPS2_EXCEPTION(
                                                            DCPS2_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 1 & 1 == 0 {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffe0001f == 0xd4000001 {
                                                        return Some(Opcode::SVC_EXCEPTION(
                                                            SVC_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0001f == 0xd4a00001 {
                                                        return Some(Opcode::DCPS1_EXCEPTION(
                                                            DCPS1_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 21 & 1 == 0 {
                                                    if insn & 0xffe0001f == 0xd4000003 {
                                                        return Some(Opcode::SMC_EXCEPTION(
                                                            SMC_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0001f == 0xd4a00003 {
                                                        return Some(Opcode::DCPS3_EXCEPTION(
                                                            DCPS3_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 21 & 1 == 0 {
                                        if insn >> 22 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xfffffc1f == 0xd61f0000 {
                                                    return Some(Opcode::BR_Rn(BR_Rn::from(insn)));
                                                }
                                            } else {
                                                if insn == 0xd69f03e0 {
                                                    return Some(Opcode::ERET(ERET::from(insn)));
                                                }
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0xd65f0000 {
                                                return Some(Opcode::RET_Rn(RET_Rn::from(insn)));
                                            }
                                        }
                                    } else {
                                        if insn >> 23 & 1 == 0 {
                                            if insn & 0xfffffc1f == 0xd63f0000 {
                                                return Some(Opcode::BLR_Rn(BLR_Rn::from(insn)));
                                            }
                                        } else {
                                            if insn == 0xd6bf03e0 {
                                                return Some(Opcode::DRPS(DRPS::from(insn)));
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 25 & 1 == 0 {
                                    if insn & 0xff000010 == 0x54000010 {
                                        return Some(Opcode::BC_C_ADDR_PCREL19(
                                            BC_C_ADDR_PCREL19::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xfffffc1f == 0xd61f081f {
                                                        return Some(Opcode::BRAAZ_Rn(
                                                            BRAAZ_Rn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn == 0xd69f0bff {
                                                        return Some(Opcode::ERETAA(ERETAA::from(
                                                            insn,
                                                        )));
                                                    }
                                                }
                                            } else {
                                                if insn == 0xd65f0bff {
                                                    return Some(Opcode::RETAA(RETAA::from(insn)));
                                                }
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0xd63f081f {
                                                return Some(Opcode::BLRAAZ_Rn(BLRAAZ_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn >> 22 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xfffffc1f == 0xd61f0c1f {
                                                        return Some(Opcode::BRABZ_Rn(
                                                            BRABZ_Rn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn == 0xd69f0fff {
                                                        return Some(Opcode::ERETAB(ERETAB::from(
                                                            insn,
                                                        )));
                                                    }
                                                }
                                            } else {
                                                if insn == 0xd65f0fff {
                                                    return Some(Opcode::RETAB(RETAB::from(insn)));
                                                }
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0xd63f0c1f {
                                                return Some(Opcode::BLRABZ_Rn(BLRABZ_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 21 & 1 == 0 {
                                if insn >> 22 & 1 == 0 {
                                    if insn >> 25 & 1 == 0 {
                                        if insn == 0xd500403f {
                                            return Some(Opcode::XAFLAG(XAFLAG::from(insn)));
                                        }
                                        if insn == 0xd500405f {
                                            return Some(Opcode::AXFLAG(AXFLAG::from(insn)));
                                        }
                                        if insn == 0xd503307f {
                                            return Some(Opcode::TCOMMIT(TCOMMIT::from(insn)));
                                        }
                                        if insn == 0xd503477f {
                                            return Some(Opcode::SMSTART(SMSTART::from(insn)));
                                        }
                                        if insn == 0xd503467f {
                                            return Some(Opcode::SMSTOP(SMSTOP::from(insn)));
                                        }
                                        if insn & 0xfffff1ff == 0xd503417f {
                                            return Some(Opcode::SMSTART_SME_SM_ZA(
                                                SMSTART_SME_SM_ZA::from(insn),
                                            ));
                                        }
                                        if insn & 0xfffff1ff == 0xd503407f {
                                            return Some(Opcode::SMSTOP_SME_SM_ZA(
                                                SMSTOP_SME_SM_ZA::from(insn),
                                            ));
                                        }
                                        if insn == 0xd503251f {
                                            return Some(Opcode::CHKFEAT_X16(CHKFEAT_X16::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfff8f01f == 0xd500401f {
                                            return Some(Opcode::MSR_UIMM4_PSTATEFIELD(
                                                MSR_UIMM4_PSTATEFIELD::from(insn),
                                            ));
                                        }
                                        if insn & 0xfffff01f == 0xd503201f {
                                            return Some(Opcode::HINT_UIMM7(HINT_UIMM7::from(
                                                insn,
                                            )));
                                        }
                                        if insn == 0xd50320df {
                                            return Some(Opcode::DGH(DGH::from(insn)));
                                        }
                                        if insn & 0xfffff0ff == 0xd503305f {
                                            return Some(Opcode::CLREX_UIMM4(CLREX_UIMM4::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfffff0ff == 0xd503309f {
                                            return Some(Opcode::DSB_BARRIER(DSB_BARRIER::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfffff3ff == 0xd503323f {
                                            return Some(Opcode::DSB_BARRIER_DSB_NXS(
                                                DSB_BARRIER_DSB_NXS::from(insn),
                                            ));
                                        }
                                        if insn & 0xfffff0ff == 0xd50330bf {
                                            return Some(Opcode::DMB_BARRIER(DMB_BARRIER::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfffff0ff == 0xd50330df {
                                            return Some(Opcode::ISB_BARRIER_ISB(
                                                ISB_BARRIER_ISB::from(insn),
                                            ));
                                        }
                                        if insn == 0xd50330ff {
                                            return Some(Opcode::SB(SB::from(insn)));
                                        }
                                        if insn == 0xd508779f {
                                            return Some(Opcode::GCSPUSHX(GCSPUSHX::from(insn)));
                                        }
                                        if insn == 0xd50877df {
                                            return Some(Opcode::GCSPOPX(GCSPOPX::from(insn)));
                                        }
                                        if insn == 0xd50877bf {
                                            return Some(Opcode::GCSPOPCX(GCSPOPCX::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd50b7740 {
                                            return Some(Opcode::GCSSS1_Rt(GCSSS1_Rt::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd50b7700 {
                                            return Some(Opcode::GCSPUSHM_Rt(GCSPUSHM_Rt::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfff80000 == 0xd5080000 {
                                            return Some(
                                                Opcode::SYS_UIMM3_OP2_CRn_CRm_Rt_UIMM3_OP1(
                                                    SYS_UIMM3_OP2_CRn_CRm_Rt_UIMM3_OP1::from(insn),
                                                ),
                                            );
                                        }
                                        if insn & 0xffffffe0 == 0xd5031000 {
                                            return Some(Opcode::WFET_Rd(WFET_Rd::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd5031020 {
                                            return Some(Opcode::WFIT_Rd(WFIT_Rd::from(insn)));
                                        }
                                        if insn == 0xd500401f {
                                            return Some(Opcode::MSR_UIMM4_PSTATEFIELD(
                                                MSR_UIMM4_PSTATEFIELD::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe00000 == 0xd5000000 {
                                            return Some(Opcode::MSR_Rt_SYSREG(
                                                MSR_Rt_SYSREG::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn >> 10 & 1 == 0 {
                                            if insn & 0xfffffc00 == 0xd71f0800 {
                                                return Some(Opcode::BRAA_Rn_Rd_SP(
                                                    BRAA_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xfffffc00 == 0xd71f0c00 {
                                                return Some(Opcode::BRAB_Rn_Rd_SP(
                                                    BRAB_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 20 & 1 == 0 {
                                        if insn & 0xfff80000 == 0xd5480000 {
                                            return Some (Opcode :: SYSP_PAIRREG_OR_XZR_Rt_UIMM3_OP2_CRn_UIMM3_OP1_CRm (SYSP_PAIRREG_OR_XZR_Rt_UIMM3_OP2_CRn_UIMM3_OP1_CRm :: from (insn))) ;
                                        }
                                    } else {
                                        if insn & 0xfff00000 == 0xd5500000 {
                                            return Some(Opcode::MSRR_PAIRREG_Rt_SYSREG128(
                                                MSRR_PAIRREG_Rt_SYSREG128::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn >> 22 & 1 == 0 {
                                    if insn >> 25 & 1 == 0 {
                                        if insn & 0xffffffe0 == 0xd5233060 {
                                            return Some(Opcode::TSTART_Rd(TSTART_Rd::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd5233160 {
                                            return Some(Opcode::TTEST_Rd(TTEST_Rd::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd52b7760 {
                                            return Some(Opcode::GCSSS2_Rt(GCSSS2_Rt::from(insn)));
                                        }
                                        if insn == 0xd52b773f {
                                            return Some(Opcode::GCSPOPM(GCSPOPM::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd52b7720 {
                                            return Some(Opcode::GCSPOPM_Rt(GCSPOPM_Rt::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfff80000 == 0xd5280000 {
                                            return Some(
                                                Opcode::SYSL_CRn_Rt_UIMM3_OP1_CRm_UIMM3_OP2(
                                                    SYSL_CRn_Rt_UIMM3_OP1_CRm_UIMM3_OP2::from(insn),
                                                ),
                                            );
                                        }
                                        if insn & 0xffe00000 == 0xd5200000 {
                                            return Some(Opcode::MRS_Rt_SYSREG(
                                                MRS_Rt_SYSREG::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn >> 10 & 1 == 0 {
                                            if insn & 0xfffffc00 == 0xd73f0800 {
                                                return Some(Opcode::BLRAA_Rn_Rd_SP(
                                                    BLRAA_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xfffffc00 == 0xd73f0c00 {
                                                return Some(Opcode::BLRAB_Rn_Rd_SP(
                                                    BLRAB_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0xfff00000 == 0xd5700000 {
                                        return Some(Opcode::MRRS_SYSREG128_Rt_PAIRREG(
                                            MRRS_SYSREG128_Rt_PAIRREG::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn >> 24 & 1 == 0 {
                        if insn >> 25 & 1 == 0 {
                            if insn & 0x7f000000 == 0x34000000 {
                                return Some(Opcode::CBZ_ADDR_PCREL19_Rt(
                                    CBZ_ADDR_PCREL19_Rt::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x7f000000 == 0x36000000 {
                                return Some(Opcode::TBZ_Rt_ADDR_PCREL14_BIT_NUM(
                                    TBZ_Rt_ADDR_PCREL14_BIT_NUM::from(insn),
                                ));
                            }
                        }
                    } else {
                        if insn >> 25 & 1 == 0 {
                            if insn & 0x7f000000 == 0x35000000 {
                                return Some(Opcode::CBNZ_Rt_ADDR_PCREL19(
                                    CBNZ_Rt_ADDR_PCREL19::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x7f000000 == 0x37000000 {
                                return Some(Opcode::TBNZ_Rt_BIT_NUM_ADDR_PCREL14(
                                    TBNZ_Rt_BIT_NUM_ADDR_PCREL14::from(insn),
                                ));
                            }
                        }
                    }
                }
            }
        } else {
            if insn >> 25 & 1 == 0 {
                if insn >> 28 & 1 == 0 {
                    if insn >> 22 & 1 == 0 {
                        if insn >> 23 & 1 == 0 {
                            if insn >> 24 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2c000000 {
                                        return Some(Opcode::STNP_ADDR_SIMM7_Ft_Ft2(
                                            STNP_ADDR_SIMM7_Ft_Ft2::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 16 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn & 0xbfff2000 == 0xd000000 {
                                                    return Some(Opcode::ST1_SIMD_ADDR_SIMPLE_LEt(
                                                        ST1_SIMD_ADDR_SIMPLE_LEt::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbfff2000 == 0xd200000 {
                                                    return Some(Opcode::ST2_LEt_SIMD_ADDR_SIMPLE(
                                                        ST2_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0xd018400 {
                                                return Some(Opcode::STL1_LEt_SIMD_ADDR_SIMPLE(
                                                    STL1_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn & 0xbfff2000 == 0xd002000 {
                                                return Some(Opcode::ST3_LEt_SIMD_ADDR_SIMPLE(
                                                    ST3_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfff2000 == 0xd202000 {
                                                return Some(Opcode::ST4_LEt_SIMD_ADDR_SIMPLE(
                                                    ST4_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2d000000 {
                                        return Some(Opcode::STP_Ft_Ft2_ADDR_SIMM7(
                                            STP_Ft_Ft2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 21 & 1 == 0 {
                                    if insn >> 24 & 1 == 0 {
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn & 0xbfe02000 == 0xd800000 {
                                                return Some(Opcode::ST1_LEt_SIMD_ADDR_POST(
                                                    ST1_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfe02000 == 0xd802000 {
                                                return Some(Opcode::ST3_LEt_SIMD_ADDR_POST(
                                                    ST3_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn & 0xbfe02000 == 0xda00000 {
                                            return Some(Opcode::ST2_LEt_SIMD_ADDR_POST(
                                                ST2_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbfe02000 == 0xda02000 {
                                            return Some(Opcode::ST4_LEt_SIMD_ADDR_POST(
                                                ST4_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3ec00000 == 0x2c800000 {
                                    return Some(Opcode::STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S(
                                        STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::from(insn),
                                    ));
                                }
                            }
                        }
                    } else {
                        if insn >> 23 & 1 == 0 {
                            if insn >> 24 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2c400000 {
                                        return Some(Opcode::LDNP_Ft2_ADDR_SIMM7_Ft(
                                            LDNP_Ft2_ADDR_SIMM7_Ft::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 16 & 1 == 0 {
                                            if insn >> 21 & 1 == 0 {
                                                if insn & 0xbfff2000 == 0xd400000 {
                                                    return Some(Opcode::LD1_SIMD_ADDR_SIMPLE_LEt(
                                                        LD1_SIMD_ADDR_SIMPLE_LEt::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbffff000 == 0xd40c000 {
                                                    return Some(
                                                        Opcode::LD1R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                            LD1R_LVt_AL_SIMD_ADDR_SIMPLE::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbfff2000 == 0xd600000 {
                                                    return Some(Opcode::LD2_LEt_SIMD_ADDR_SIMPLE(
                                                        LD2_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbffff000 == 0xd60c000 {
                                                    return Some(
                                                        Opcode::LD2R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                            LD2R_LVt_AL_SIMD_ADDR_SIMPLE::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0xd418400 {
                                                return Some(Opcode::LDAP1_SIMD_ADDR_SIMPLE_LEt(
                                                    LDAP1_SIMD_ADDR_SIMPLE_LEt::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 21 & 1 == 0 {
                                            if insn & 0xbfff2000 == 0xd402000 {
                                                return Some(Opcode::LD3_LEt_SIMD_ADDR_SIMPLE(
                                                    LD3_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                            if insn & 0xbffff000 == 0xd40e000 {
                                                return Some(Opcode::LD3R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                    LD3R_LVt_AL_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfff2000 == 0xd602000 {
                                                return Some(Opcode::LD4_LEt_SIMD_ADDR_SIMPLE(
                                                    LD4_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                            if insn & 0xbffff000 == 0xd60e000 {
                                                return Some(Opcode::LD4R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                    LD4R_LVt_AL_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2d400000 {
                                        return Some(Opcode::LDP_ADDR_SIMM7_Ft_Ft2(
                                            LDP_ADDR_SIMM7_Ft_Ft2::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 21 & 1 == 0 {
                                    if insn >> 24 & 1 == 0 {
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn & 0xbfe02000 == 0xdc00000 {
                                                return Some(Opcode::LD1_SIMD_ADDR_POST_LEt(
                                                    LD1_SIMD_ADDR_POST_LEt::from(insn),
                                                ));
                                            }
                                            if insn & 0xbfe0f000 == 0xdc0c000 {
                                                return Some(Opcode::LD1R_LVt_AL_SIMD_ADDR_POST(
                                                    LD1R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfe02000 == 0xdc02000 {
                                                return Some(Opcode::LD3_LEt_SIMD_ADDR_POST(
                                                    LD3_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                            if insn & 0xbfe0f000 == 0xdc0e000 {
                                                return Some(Opcode::LD3R_LVt_AL_SIMD_ADDR_POST(
                                                    LD3R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn & 0xbfe02000 == 0xde00000 {
                                            return Some(Opcode::LD2_LEt_SIMD_ADDR_POST(
                                                LD2_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe0f000 == 0xde0c000 {
                                            return Some(Opcode::LD2R_SIMD_ADDR_POST_LVt_AL(
                                                LD2R_SIMD_ADDR_POST_LVt_AL::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbfe02000 == 0xde02000 {
                                            return Some(Opcode::LD4_SIMD_ADDR_POST_LEt(
                                                LD4_SIMD_ADDR_POST_LEt::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe0f000 == 0xde0e000 {
                                            return Some(Opcode::LD4R_LVt_AL_SIMD_ADDR_POST(
                                                LD4R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3ec00000 == 0x2cc00000 {
                                    return Some(Opcode::LDP_ADDR_SIMM7_S_S_Ft_S_S_Ft2_S_S(
                                        LDP_ADDR_SIMM7_S_S_Ft_S_S_Ft2_S_S::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                } else {
                    if insn >> 24 & 1 == 0 {
                        if insn >> 29 & 1 == 0 {
                            if insn & 0x3f000000 == 0x1c000000 {
                                return Some(Opcode::LDR_Ft_ADDR_PCREL19(
                                    LDR_Ft_ADDR_PCREL19::from(insn),
                                ));
                            }
                        } else {
                            if insn >> 10 & 1 == 0 {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 22 & 1 == 0 {
                                        if insn & 0x3f600c00 == 0x3c000000 {
                                            return Some(Opcode::STUR_ADDR_SIMM9_Ft(
                                                STUR_ADDR_SIMM9_Ft::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x3f600c00 == 0x3c400000 {
                                            return Some(Opcode::LDUR_Ft_ADDR_SIMM9(
                                                LDUR_Ft_ADDR_SIMM9::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 22 & 1 == 0 {
                                        if insn & 0x3f600c00 == 0x3c200800 {
                                            return Some(Opcode::STR_ADDR_REGOFF_Ft(
                                                STR_ADDR_REGOFF_Ft::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x3f600c00 == 0x3c600800 {
                                            return Some(Opcode::LDR_Ft_ADDR_REGOFF(
                                                LDR_Ft_ADDR_REGOFF::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn >> 22 & 1 == 0 {
                                    if insn & 0x3f600400 == 0x3c000400 {
                                        return Some(Opcode::STR_ADDR_SIMM9_Ft(
                                            STR_ADDR_SIMM9_Ft::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x3f600400 == 0x3c400400 {
                                        return Some(Opcode::LDR_Ft_ADDR_SIMM9(
                                            LDR_Ft_ADDR_SIMM9::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 22 & 1 == 0 {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 10 & 1 == 0 {
                                    if insn & 0x3f600c00 == 0x1d000800 {
                                        return Some(Opcode::STLUR_RCPC3_ADDR_OFFSET_Ft(
                                            STLUR_RCPC3_ADDR_OFFSET_Ft::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d000400 {
                                                            return Some (Opcode :: CPYP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYP_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d800400 {
                                                            return Some (Opcode :: CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d008400 {
                                                            return Some (Opcode :: CPYPRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYPRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d808400 {
                                                            return Some (Opcode :: CPYERN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYERN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d004400 {
                                                            return Some (Opcode :: CPYPWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYPWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d804400 {
                                                            return Some (Opcode :: CPYEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYEWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00c400 {
                                                            return Some (Opcode :: CPYPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYPN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80c400 {
                                                            return Some (Opcode :: CPYEN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYEN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d002400 {
                                                            return Some (Opcode :: CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d802400 {
                                                            return Some (Opcode :: CPYERT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYERT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00a400 {
                                                            return Some (Opcode :: CPYPRTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYPRTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80a400 {
                                                            return Some (Opcode :: CPYERTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYERTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d006400 {
                                                            return Some (Opcode :: CPYPRTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYPRTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d806400 {
                                                            return Some (Opcode :: CPYERTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYERTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00e400 {
                                                            return Some (Opcode :: CPYPRTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYPRTN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80e400 {
                                                            return Some (Opcode :: CPYERTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYERTN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d001400 {
                                                            return Some (Opcode :: CPYPWT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYPWT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d801400 {
                                                            return Some (Opcode :: CPYEWT_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYEWT_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d009400 {
                                                            return Some (Opcode :: CPYPWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYPWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d809400 {
                                                            return Some (Opcode :: CPYEWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYEWTRN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d005400 {
                                                            return Some (Opcode :: CPYPWTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYPWTWN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d805400 {
                                                            return Some (Opcode :: CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00d400 {
                                                            return Some (Opcode :: CPYPWTN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYPWTN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80d400 {
                                                            return Some (Opcode :: CPYEWTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYEWTN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d003400 {
                                                            return Some (Opcode :: CPYPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYPT_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d803400 {
                                                            return Some (Opcode :: CPYET_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYET_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00b400 {
                                                            return Some (Opcode :: CPYPTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYPTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80b400 {
                                                            return Some (Opcode :: CPYETRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYETRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d007400 {
                                                            return Some (Opcode :: CPYPTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYPTWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d807400 {
                                                            return Some (Opcode :: CPYETWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs (CPYETWN_MOPS_WB_Rn_MOPS_ADDR_Rd_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00f400 {
                                                            return Some (Opcode :: CPYPTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYPTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80f400 {
                                                            return Some (Opcode :: CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3f400000 == 0x3d000000 {
                                    return Some(Opcode::STR_Ft_ADDR_UIMM12(
                                        STR_Ft_ADDR_UIMM12::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 10 & 1 == 0 {
                                    if insn & 0x3f600c00 == 0x1d400800 {
                                        return Some(Opcode::LDAPUR_Ft_RCPC3_ADDR_OFFSET(
                                            LDAPUR_Ft_RCPC3_ADDR_OFFSET::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d400400 {
                                                            return Some (Opcode :: CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc00400 {
                                                            return Some (Opcode :: SETGP_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETGP_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d408400 {
                                                            return Some (Opcode :: CPYMRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYMRN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc08400 {
                                                            return Some (Opcode :: SETGE_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn (SETGE_MOPS_ADDR_Rd_Rm_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d404400 {
                                                            return Some (Opcode :: CPYMWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYMWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc04400 {
                                                            return Some (Opcode :: SETGM_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETGM_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40c400 {
                                                        return Some (Opcode :: CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d402400 {
                                                            return Some (Opcode :: CPYMRT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYMRT_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc02400 {
                                                            return Some (Opcode :: SETGPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm (SETGPN_MOPS_WB_Rn_MOPS_ADDR_Rd_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d40a400 {
                                                            return Some (Opcode :: CPYMRTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYMRTRN_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc0a400 {
                                                            return Some (Opcode :: SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d406400 {
                                                            return Some (Opcode :: CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc06400 {
                                                            return Some (Opcode :: SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40e400 {
                                                        return Some (Opcode :: CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d401400 {
                                                            return Some (Opcode :: CPYMWT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs (CPYMWT_MOPS_ADDR_Rd_MOPS_WB_Rn_MOPS_ADDR_Rs :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc01400 {
                                                            return Some (Opcode :: SETGPT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETGPT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d409400 {
                                                            return Some (Opcode :: CPYMWTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYMWTRN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc09400 {
                                                            return Some (Opcode :: SETGET_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETGET_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d405400 {
                                                            return Some (Opcode :: CPYMWTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd (CPYMWTWN_MOPS_WB_Rn_MOPS_ADDR_Rs_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc05400 {
                                                            return Some (Opcode :: SETGMT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETGMT_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40d400 {
                                                        return Some (Opcode :: CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d403400 {
                                                            return Some (Opcode :: CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc03400 {
                                                            return Some (Opcode :: SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d40b400 {
                                                            return Some (Opcode :: CPYMTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn (CPYMTRN_MOPS_ADDR_Rs_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc0b400 {
                                                            return Some (Opcode :: SETGETN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn (SETGETN_Rm_MOPS_ADDR_Rd_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d407400 {
                                                            return Some (Opcode :: CPYMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYMTWN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc07400 {
                                                            return Some (Opcode :: SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40f400 {
                                                        return Some (Opcode :: CPYMTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd (CPYMTN_MOPS_ADDR_Rs_MOPS_WB_Rn_MOPS_ADDR_Rd :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3f400000 == 0x3d400000 {
                                    return Some(Opcode::LDR_ADDR_UIMM12_Ft(
                                        LDR_ADDR_UIMM12_Ft::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            } else {
                if insn >> 24 & 1 == 0 {
                    if insn >> 21 & 1 == 0 {
                        if insn >> 28 & 1 == 0 {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 31 & 1 == 0 {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 12 & 1 == 0 {
                                                if insn & 0xbfe09c00 == 0xe000000 {
                                                    return Some(Opcode::TBL_Vd_LVn_Vm(
                                                        TBL_Vd_LVn_Vm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbfe09c00 == 0xe001000 {
                                                    return Some(Opcode::TBX_Vm_LVn_Vd(
                                                        TBX_Vm_LVn_Vd::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xbf20fc00 == 0xe002800 {
                                                        return Some(Opcode::TRN1_Vm_Vd_Vn(
                                                            TRN1_Vm_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf20fc00 == 0xe006800 {
                                                        return Some(Opcode::TRN2_Vn_Vd_Vm(
                                                            TRN2_Vn_Vd_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe001800 {
                                                            return Some(Opcode::UZP1_Vm_Vn_Vd(
                                                                UZP1_Vm_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0xe005800 {
                                                            return Some(Opcode::UZP2_Vm_Vn_Vd(
                                                                UZP2_Vm_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe003800 {
                                                            return Some(Opcode::ZIP1_Vd_Vn_Vm(
                                                                ZIP1_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0xe007800 {
                                                            return Some(Opcode::ZIP2_Vn_Vd_Vm(
                                                                ZIP2_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe000400 {
                                                            return Some(Opcode::DUP_En_Vd(
                                                                DUP_En_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe400400 {
                                                                return Some(
                                                                    Opcode::FMAXNM_Vd_Vm_Vn(
                                                                        FMAXNM_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec00400 {
                                                                return Some(
                                                                    Opcode::FMINNM_Vd_Vn_Vm(
                                                                        FMINNM_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe402400 {
                                                            return Some(Opcode::FCMEQ_Vd_Vn_Vm(
                                                                FCMEQ_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x4e80a400 {
                                                            return Some(Opcode::SMMLA_Vn_Vm_Vd(
                                                                SMMLA_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe401400 {
                                                                return Some(
                                                                    Opcode::FADD_Vm_Vd_Vn(
                                                                        FADD_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec01400 {
                                                                return Some(
                                                                    Opcode::FSUB_Vn_Vd_Vm(
                                                                        FSUB_Vn_Vd_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0xe009400 {
                                                            return Some(Opcode::SDOT_Vd_Vn_Vm(
                                                                SDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe403400 {
                                                            return Some(Opcode::FMAX_Vn_Vd_Vm(
                                                                FMAX_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0xec03400 {
                                                            return Some(Opcode::FMIN_Vm_Vd_Vn(
                                                                FMIN_Vm_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe000c00 {
                                                            return Some(Opcode::DUP_Vd_Rn(
                                                                DUP_Vd_Rn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe400c00 {
                                                                return Some(
                                                                    Opcode::FMLA_Vn_Vm_Vd(
                                                                        FMLA_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec00c00 {
                                                                return Some(
                                                                    Opcode::FMLS_Vn_Vm_Vd(
                                                                        FMLS_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe002c00 {
                                                            return Some(Opcode::SMOV_Rd_En(
                                                                SMOV_Rd_En::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x4e80ac00 {
                                                            return Some(Opcode::USMMLA_Vd_Vm_Vn(
                                                                USMMLA_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4e001c00 {
                                                                return Some(Opcode::INS_Rn_Ed(
                                                                    INS_Rn_Ed::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xe401c00 {
                                                                return Some(
                                                                    Opcode::FMULX_Vn_Vm_Vd(
                                                                        FMULX_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0xe809c00 {
                                                            return Some(Opcode::USDOT_Vd_Vn_Vm(
                                                                USDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe003c00 {
                                                            return Some(Opcode::UMOV_En_Rd(
                                                                UMOV_En_Rd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe403c00 {
                                                                return Some(
                                                                    Opcode::FRECPS_Vd_Vn_Vm(
                                                                        FRECPS_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec03c00 {
                                                                return Some(
                                                                    Opcode::FRSQRTS_Vm_Vn_Vd(
                                                                        FRSQRTS_Vm_Vn_Vd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 22 & 1 == 0 {
                                        if insn >> 23 & 1 == 0 {
                                            if insn & 0xffe08000 == 0xce000000 {
                                                return Some(Opcode::EOR3_Vm_Va_Vd_Vn(
                                                    EOR3_Vm_Va_Vd_Vn::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffe00000 == 0xce800000 {
                                                return Some(Opcode::XAR_Vd_Vn_Vm_IMM(
                                                    XAR_Vd_Vn_Vm_IMM::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 15 & 1 == 0 {
                                            if insn & 0xffe08000 == 0xce400000 {
                                                return Some(Opcode::SM3SS1_Vd_Vn_Va_Vm(
                                                    SM3SS1_Vd_Vn_Va_Vm::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 10 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0cc00 == 0xce408000 {
                                                            return Some(Opcode::SM3TT1A_Vn_Vd_Em(
                                                                SM3TT1A_Vn_Vd_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xcec08000 {
                                                            return Some(Opcode::SHA512SU0_Vd_Vn(
                                                                SHA512SU0_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0cc00 == 0xce408800 {
                                                        return Some(Opcode::SM3TT2A_Vd_Vn_Em(
                                                            SM3TT2A_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffe0cc00 == 0xce408400 {
                                                            return Some(Opcode::SM3TT1B_Vd_Vn_Em(
                                                                SM3TT1B_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xcec08400 {
                                                            return Some(Opcode::SM4E_Vd_Vn(
                                                                SM4E_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0cc00 == 0xce408c00 {
                                                        return Some(Opcode::SM3TT2B_Vd_Vn_Em(
                                                            SM3TT2B_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 10 & 1 == 0 {
                                    if insn & 0xbfe08400 == 0x2e000000 {
                                        return Some(Opcode::EXT_Vd_Vm_IDX_Vn(
                                            EXT_Vd_Vm_IDX_Vn::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn >> 15 & 1 == 0 {
                                        if insn >> 22 & 1 == 0 {
                                            if insn & 0xffe08400 == 0x6e000400 {
                                                return Some(Opcode::INS_Ed_En(INS_Ed_En::from(
                                                    insn,
                                                )));
                                            }
                                        } else {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e400400 {
                                                                return Some(
                                                                    Opcode::FMAXNMP_Vd_Vm_Vn(
                                                                        FMAXNMP_Vd_Vm_Vn::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec00400 {
                                                                return Some(
                                                                    Opcode::FMINNMP_Vd_Vn_Vm(
                                                                        FMINNMP_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e402400 {
                                                                return Some(
                                                                    Opcode::FCMGE_Vd_Vm_Vn(
                                                                        FCMGE_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec02400 {
                                                                return Some(
                                                                    Opcode::FCMGT_Vd_Vm_Vn(
                                                                        FCMGT_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e401400 {
                                                                return Some(
                                                                    Opcode::FADDP_Vd_Vn_Vm(
                                                                        FADDP_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec01400 {
                                                                return Some(
                                                                    Opcode::FABD_Vm_Vd_Vn(
                                                                        FABD_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e403400 {
                                                                return Some(
                                                                    Opcode::FMAXP_Vd_Vm_Vn(
                                                                        FMAXP_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec03400 {
                                                                return Some(
                                                                    Opcode::FMINP_Vd_Vn_Vm(
                                                                        FMINP_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0x2e402c00 {
                                                            return Some(Opcode::FACGE_Vn_Vm_Vd(
                                                                FACGE_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0x2ec02c00 {
                                                            return Some(Opcode::FACGT_Vd_Vm_Vn(
                                                                FACGT_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0x2e401c00 {
                                                            return Some(Opcode::FMUL_Vn_Vm_Vd(
                                                                FMUL_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0x2e403c00 {
                                                            return Some(Opcode::FDIV_Vd_Vn_Vm(
                                                                FDIV_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 11 & 1 == 0 {
                                                    if insn >> 12 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e008400 {
                                                            return Some(
                                                                Opcode::SQRDMLAH_Vd_Vn_Vm(
                                                                    SQRDMLAH_Vd_Vn_Vm::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e009400 {
                                                            return Some(Opcode::UDOT_Vd_Vm_Vn(
                                                                UDOT_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbf20fc00 == 0x2e008c00 {
                                                        return Some(Opcode::SQRDMLSH_Vn_Vm_Vd(
                                                            SQRDMLSH_Vn_Vm_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf20e400 == 0x2e00c400 {
                                                    return Some(Opcode::FCMLA_Vd_Vm_Vn_IMM_ROT1(
                                                        FCMLA_Vd_Vm_Vn_IMM_ROT1::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x6e80a400 {
                                                        return Some(Opcode::UMMLA_Vn_Vm_Vd(
                                                            UMMLA_Vn_Vm_Vd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf20ec00 == 0x2e00e400 {
                                                        return Some(
                                                            Opcode::FCADD_Vm_Vd_Vn_IMM_ROT3(
                                                                FCADD_Vm_Vd_Vn_IMM_ROT3::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x6e40ec00 {
                                                        return Some(Opcode::BFMMLA_Vn_Vm_Vd(
                                                            BFMMLA_Vn_Vm_Vd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xbfe0fc00 == 0x2e40fc00 {
                                                            return Some(Opcode::BFDOT_Vd_Vn_Vm(
                                                                BFDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0x2ec0fc00 {
                                                                return Some(
                                                                    Opcode::BFMLALB_Vn_Vd_Vm(
                                                                        BFMLALB_Vn_Vd_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x6ec0fc00 {
                                                                return Some(
                                                                    Opcode::BFMLALT_Vd_Vn_Vm(
                                                                        BFMLALT_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 16 & 1 == 0 {
                                        if insn >> 17 & 1 == 0 {
                                            if insn & 0x7f3f0000 == 0x1e180000 {
                                                return Some(Opcode::FCVTZS_FBITS_Rd_Fn(
                                                    FCVTZS_FBITS_Rd_Fn::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ed80000 {
                                                return Some(
                                                    Opcode::FCVTZS_FBITS_imm_1_32_Rd_W_Fn_S_H(
                                                        FCVTZS_FBITS_imm_1_32_Rd_W_Fn_S_H::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0x7f3f0000 == 0x1e020000 {
                                                return Some(Opcode::SCVTF_Rn_Fd_FBITS(
                                                    SCVTF_Rn_Fd_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ec20000 {
                                                return Some(Opcode::SCVTF_Fd_Rn_FBITS(
                                                    SCVTF_Fd_Rn_FBITS::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 17 & 1 == 0 {
                                            if insn & 0x7f3f0000 == 0x1e190000 {
                                                return Some(Opcode::FCVTZU_Rd_Fn_FBITS(
                                                    FCVTZU_Rd_Fn_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ed90000 {
                                                return Some(Opcode::FCVTZU_Rd_FBITS_Fn(
                                                    FCVTZU_Rd_FBITS_Fn::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x7f3f0000 == 0x1e030000 {
                                                return Some(Opcode::UCVTF_Rn_Fd_FBITS(
                                                    UCVTF_Rn_Fd_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ec30000 {
                                                return Some(Opcode::UCVTF_FBITS_Fd_Rn(
                                                    UCVTF_FBITS_Fd_Rn::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e000000 {
                                                        return Some(Opcode::SHA1C_Vm_Fd_Fn(
                                                            SHA1C_Vm_Fd_Fn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5e004000 {
                                                        return Some(Opcode::SHA256H_Fd_Vm_Fn(
                                                            SHA256H_Fd_Vm_Fn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e002000 {
                                                        return Some(Opcode::SHA1M_Vm_Fn_Fd(
                                                            SHA1M_Vm_Fn_Fd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5e006000 {
                                                        return Some(Opcode::SHA256SU1_Vd_Vn_Vm(
                                                            SHA256SU1_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e001000 {
                                                        return Some(Opcode::SHA1P_Fd_Fn_Vm(
                                                            SHA1P_Fd_Fn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5e005000 {
                                                        return Some(Opcode::SHA256H2_Vm_Fd_Fn(
                                                            SHA256H2_Vm_Fd_Fn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x5e003000 {
                                                    return Some(Opcode::SHA1SU0_Vd_Vn_Vm(
                                                        SHA1SU0_Vd_Vn_Vm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x5e000400 {
                                                    return Some(Opcode::DUP_En_Sd(
                                                        DUP_En_Sd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x5e402400 {
                                                    return Some(Opcode::FCMEQ_Sm_Sd_Sn(
                                                        FCMEQ_Sm_Sd_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x5e401c00 {
                                                    return Some(Opcode::FMULX_Sn_Sd_Sm(
                                                        FMULX_Sn_Sd_Sm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e403c00 {
                                                        return Some(Opcode::FRECPS_Sn_Sd_Sm(
                                                            FRECPS_Sn_Sd_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5ec03c00 {
                                                        return Some(Opcode::FRSQRTS_Sd_Sm_Sn(
                                                            FRSQRTS_Sd_Sm_Sn::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn & 0xff20fc00 == 0x7e008400 {
                                                return Some(Opcode::SQRDMLAH_Sm_Sn_Sd(
                                                    SQRDMLAH_Sm_Sn_Sd::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffe0fc00 == 0x7e402400 {
                                                    return Some(Opcode::FCMGE_Sn_Sm_Sd(
                                                        FCMGE_Sn_Sm_Sd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x7ec02400 {
                                                    return Some(Opcode::FCMGT_Sm_Sd_Sn(
                                                        FCMGT_Sm_Sd_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe0fc00 == 0x7ec01400 {
                                            return Some(Opcode::FABD_Sd_Sm_Sn(
                                                FABD_Sd_Sm_Sn::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn & 0xff20fc00 == 0x7e008c00 {
                                            return Some(Opcode::SQRDMLSH_Sd_Sm_Sn(
                                                SQRDMLSH_Sd_Sm_Sn::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn >> 23 & 1 == 0 {
                                            if insn & 0xffe0fc00 == 0x7e402c00 {
                                                return Some(Opcode::FACGE_Sd_Sm_Sn(
                                                    FACGE_Sd_Sm_Sn::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffe0fc00 == 0x7ec02c00 {
                                                return Some(Opcode::FACGT_Sn_Sm_Sd(
                                                    FACGT_Sn_Sm_Sd::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 28 & 1 == 0 {
                            if insn >> 15 & 1 == 0 {
                                if insn >> 29 & 1 == 0 {
                                    if insn >> 31 & 1 == 0 {
                                        if insn >> 10 & 1 == 0 {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe200000 {
                                                                    return Some(
                                                                        Opcode::SADDL_Vd_Vn_Vm(
                                                                            SADDL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e200000 {
                                                                    return Some(
                                                                        Opcode::SADDL2_Vd_Vm_Vn(
                                                                            SADDL2_Vd_Vm_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe204000 {
                                                                    return Some(
                                                                        Opcode::ADDHN_Vd_Vn_Vm(
                                                                            ADDHN_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e204000 {
                                                                    return Some(
                                                                        Opcode::ADDHN2_Vd_Vn_Vm(
                                                                            ADDHN2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe202000 {
                                                                    return Some(
                                                                        Opcode::SSUBL_Vd_Vm_Vn(
                                                                            SSUBL_Vd_Vm_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e202000 {
                                                                    return Some(
                                                                        Opcode::SSUBL2_Vm_Vd_Vn(
                                                                            SSUBL2_Vm_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe206000 {
                                                                    return Some(
                                                                        Opcode::SUBHN_Vn_Vd_Vm(
                                                                            SUBHN_Vn_Vd_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e206000 {
                                                                    return Some(
                                                                        Opcode::SUBHN2_Vm_Vn_Vd(
                                                                            SUBHN2_Vm_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe201000 {
                                                                    return Some(
                                                                        Opcode::SADDW_Vn_Vm_Vd(
                                                                            SADDW_Vn_Vm_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e201000 {
                                                                    return Some(
                                                                        Opcode::SADDW2_Vm_Vd_Vn(
                                                                            SADDW2_Vm_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe205000 {
                                                                    return Some(
                                                                        Opcode::SABAL_Vd_Vn_Vm(
                                                                            SABAL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e205000 {
                                                                    return Some(
                                                                        Opcode::SABAL2_Vn_Vm_Vd(
                                                                            SABAL2_Vn_Vm_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe203000 {
                                                                    return Some(
                                                                        Opcode::SSUBW_Vn_Vd_Vm(
                                                                            SSUBW_Vn_Vd_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e203000 {
                                                                    return Some(
                                                                        Opcode::SSUBW2_Vd_Vn_Vm(
                                                                            SSUBW2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0xe207000 {
                                                                    return Some(
                                                                        Opcode::SABDL_Vd_Vm_Vn(
                                                                            SABDL_Vd_Vm_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e207000 {
                                                                    return Some(
                                                                        Opcode::SABDL2_Vn_Vm_Vd(
                                                                            SABDL2_Vn_Vm_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe200800 {
                                                                return Some(Opcode::REV64_Vn_Vd(
                                                                    REV64_Vn_Vd::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe204800
                                                                    {
                                                                        return Some(
                                                                            Opcode::CLS_Vd_Vn(
                                                                                CLS_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4e284800
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESE_Vn_Vd(
                                                                                AESE_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0xe214800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SQXTN_Vd_Vn(
                                                                                SQXTN_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x4e214800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SQXTN2_Vn_Vd(
                                                                                SQXTN2_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe202800 {
                                                                    return Some(
                                                                        Opcode::SADDLP_Vd_Vn(
                                                                            SADDLP_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0xe212800
                                                                    {
                                                                        return Some(
                                                                            Opcode::XTN_Vd_Vn(
                                                                                XTN_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x4e212800
                                                                    {
                                                                        return Some(
                                                                            Opcode::XTN2_Vd_Vn(
                                                                                XTN2_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe206800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SADALP_Vd_Vn(
                                                                                SADALP_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4e286800
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESMC_Vn_Vd(
                                                                                AESMC_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xffbffc00
                                                                            == 0xe216800
                                                                        {
                                                                            return Some (Opcode :: FCVTN_Vd_Vn (FCVTN_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x4e216800
                                                                        {
                                                                            return Some (Opcode :: FCVTN2_Vn_Vd (FCVTN2_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 30 & 1 == 0 {
                                                                        if insn & 0xfffffc00
                                                                            == 0xea16800
                                                                        {
                                                                            return Some (Opcode :: BFCVTN_Vn_Vd (BFCVTN_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffc00
                                                                            == 0x4ea16800
                                                                        {
                                                                            return Some (Opcode :: BFCVTN2_Vd_Vn (BFCVTN2_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe201800 {
                                                                return Some(Opcode::REV16_Vd_Vn(
                                                                    REV16_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe205800 {
                                                                    return Some(
                                                                        Opcode::CNT_Vd_Vn(
                                                                            CNT_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x4e285800 {
                                                                    return Some(
                                                                        Opcode::AESD_Vd_Vn(
                                                                            AESD_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe203800 {
                                                                    return Some(
                                                                        Opcode::SUQADD_Vd_Vn(
                                                                            SUQADD_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0xe303800 {
                                                                    return Some(
                                                                        Opcode::SADDLV_Fd_Vn(
                                                                            SADDLV_Fd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe207800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SQABS_Vn_Vd(
                                                                                SQABS_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4e287800
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESIMC_Vd_Vn(
                                                                                AESIMC_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 30 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0xe217800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTL_Vd_Vn(
                                                                                FCVTL_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x4e217800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTL2_Vd_Vn(
                                                                                FCVTL2_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 11 & 1 == 0 {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe200400 {
                                                                return Some(
                                                                    Opcode::SHADD_Vd_Vn_Vm(
                                                                        SHADD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe204400 {
                                                                return Some(
                                                                    Opcode::SSHL_Vn_Vm_Vd(
                                                                        SSHL_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe202400 {
                                                                return Some(
                                                                    Opcode::SHSUB_Vn_Vm_Vd(
                                                                        SHSUB_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe206400 {
                                                                return Some(
                                                                    Opcode::SMAX_Vn_Vm_Vd(
                                                                        SMAX_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe201400 {
                                                                return Some(
                                                                    Opcode::SRHADD_Vm_Vd_Vn(
                                                                        SRHADD_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe205400 {
                                                                return Some(
                                                                    Opcode::SRSHL_Vd_Vm_Vn(
                                                                        SRSHL_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe203400 {
                                                                return Some(
                                                                    Opcode::CMGT_Vm_Vd_Vn(
                                                                        CMGT_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe207400 {
                                                                return Some(
                                                                    Opcode::SABD_Vm_Vd_Vn(
                                                                        SABD_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 12 & 1 == 0 {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe200c00 {
                                                                return Some(
                                                                    Opcode::SQADD_Vm_Vd_Vn(
                                                                        SQADD_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe204c00 {
                                                                return Some(
                                                                    Opcode::SQSHL_Vd_Vn_Vm(
                                                                        SQSHL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe202c00 {
                                                                return Some(
                                                                    Opcode::SQSUB_Vn_Vd_Vm(
                                                                        SQSUB_Vn_Vd_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe206c00 {
                                                                return Some(
                                                                    Opcode::SMIN_Vn_Vm_Vd(
                                                                        SMIN_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 13 & 1 == 0 {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn >> 22 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xe201c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::AND_Vn_Vm_Vd(
                                                                                AND_Vn_Vm_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xea01c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::ORR_Vn_Vd_Vm(
                                                                                ORR_Vn_Vd_Vm::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xe601c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::BIC_Vm_Vd_Vn(
                                                                                BIC_Vm_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xee01c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::ORN_Vm_Vn_Vd(
                                                                                ORN_Vm_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe205c00 {
                                                                return Some(
                                                                    Opcode::SQRSHL_Vd_Vn_Vm(
                                                                        SQRSHL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 14 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe203c00 {
                                                                return Some(
                                                                    Opcode::CMGE_Vm_Vd_Vn(
                                                                        CMGE_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe207c00 {
                                                                return Some(
                                                                    Opcode::SABA_Vd_Vm_Vn(
                                                                        SABA_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe08000 == 0xce200000 {
                                            return Some(Opcode::BCAX_Va_Vn_Vm_Vd(
                                                BCAX_Va_Vn_Vm_Vd::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e200000 {
                                                                return Some(
                                                                    Opcode::UADDL_Vn_Vd_Vm(
                                                                        UADDL_Vn_Vd_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e200000 {
                                                                return Some(
                                                                    Opcode::UADDL2_Vn_Vm_Vd(
                                                                        UADDL2_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e204000 {
                                                                return Some(
                                                                    Opcode::RADDHN_Vd_Vn_Vm(
                                                                        RADDHN_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e204000 {
                                                                return Some(
                                                                    Opcode::RADDHN2_Vd_Vn_Vm(
                                                                        RADDHN2_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e202000 {
                                                                return Some(
                                                                    Opcode::USUBL_Vd_Vn_Vm(
                                                                        USUBL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e202000 {
                                                                return Some(
                                                                    Opcode::USUBL2_Vd_Vn_Vm(
                                                                        USUBL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e206000 {
                                                                return Some(
                                                                    Opcode::RSUBHN_Vm_Vd_Vn(
                                                                        RSUBHN_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e206000 {
                                                                return Some(
                                                                    Opcode::RSUBHN2_Vn_Vd_Vm(
                                                                        RSUBHN2_Vn_Vd_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e201000 {
                                                                return Some(
                                                                    Opcode::UADDW_Vm_Vn_Vd(
                                                                        UADDW_Vm_Vn_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e201000 {
                                                                return Some(
                                                                    Opcode::UADDW2_Vm_Vd_Vn(
                                                                        UADDW2_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e205000 {
                                                                return Some(
                                                                    Opcode::UABAL_Vd_Vn_Vm(
                                                                        UABAL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e205000 {
                                                                return Some(
                                                                    Opcode::UABAL2_Vd_Vn_Vm(
                                                                        UABAL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e203000 {
                                                                return Some(
                                                                    Opcode::USUBW_Vd_Vn_Vm(
                                                                        USUBW_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e203000 {
                                                                return Some(
                                                                    Opcode::USUBW2_Vn_Vm_Vd(
                                                                        USUBW2_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e207000 {
                                                                return Some(
                                                                    Opcode::UABDL_Vm_Vd_Vn(
                                                                        UABDL_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e207000 {
                                                                return Some(
                                                                    Opcode::UABDL2_Vm_Vd_Vn(
                                                                        UABDL2_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf3ffc00 == 0x2e200800 {
                                                            return Some(Opcode::REV32_Vn_Vd(
                                                                REV32_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e204800 {
                                                                return Some(Opcode::CLZ_Vd_Vn(
                                                                    CLZ_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff3ffc00 == 0x2e214800 {
                                                                    return Some(
                                                                        Opcode::UQXTN_Vd_Vn(
                                                                            UQXTN_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x6e214800 {
                                                                    return Some(
                                                                        Opcode::UQXTN2_Vd_Vn(
                                                                            UQXTN2_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e202800 {
                                                                return Some(Opcode::UADDLP_Vd_Vn(
                                                                    UADDLP_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff3ffc00 == 0x2e212800 {
                                                                    return Some(
                                                                        Opcode::SQXTUN_Vd_Vn(
                                                                            SQXTUN_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x6e212800 {
                                                                    return Some(
                                                                        Opcode::SQXTUN2_Vn_Vd(
                                                                            SQXTUN2_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e206800 {
                                                                return Some(Opcode::UADALP_Vd_Vn(
                                                                    UADALP_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x2e616800 {
                                                                    return Some(
                                                                        Opcode::FCVTXN_Vn_Vd(
                                                                            FCVTXN_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x6e616800 {
                                                                    return Some(
                                                                        Opcode::FCVTXN2_Vd_Vn(
                                                                            FCVTXN2_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn & 0xbffffc00 == 0x2e205800 {
                                                            return Some(Opcode::NOT_Vn_Vd(
                                                                NOT_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbffffc00 == 0x2e605800 {
                                                            return Some(Opcode::RBIT_Vd_Vn(
                                                                RBIT_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn & 0xbf3ffc00 == 0x2e203800 {
                                                                    return Some(
                                                                        Opcode::USQADD_Vd_Vn(
                                                                            USQADD_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0x2e303800 {
                                                                    return Some(
                                                                        Opcode::UADDLV_Fd_Vn(
                                                                            UADDLV_Fd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xff3ffc00 == 0x2e213800 {
                                                                    return Some (Opcode :: SHLL_Vn_Vd_SHLL_IMM (SHLL_Vn_Vd_SHLL_IMM :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x6e213800 {
                                                                    return Some (Opcode :: SHLL2_Vd_Vn_SHLL_IMM (SHLL2_Vd_Vn_SHLL_IMM :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf3ffc00 == 0x2e207800 {
                                                            return Some(Opcode::SQNEG_Vn_Vd(
                                                                SQNEG_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e200400 {
                                                            return Some(Opcode::UHADD_Vd_Vm_Vn(
                                                                UHADD_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e204400 {
                                                            return Some(Opcode::USHL_Vm_Vn_Vd(
                                                                USHL_Vm_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e202400 {
                                                            return Some(Opcode::UHSUB_Vn_Vd_Vm(
                                                                UHSUB_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e206400 {
                                                            return Some(Opcode::UMAX_Vd_Vm_Vn(
                                                                UMAX_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e201400 {
                                                            return Some(Opcode::URHADD_Vn_Vm_Vd(
                                                                URHADD_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e205400 {
                                                            return Some(Opcode::URSHL_Vn_Vm_Vd(
                                                                URSHL_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e203400 {
                                                            return Some(Opcode::CMHI_Vn_Vm_Vd(
                                                                CMHI_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e207400 {
                                                            return Some(Opcode::UABD_Vm_Vd_Vn(
                                                                UABD_Vm_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e200c00 {
                                                            return Some(Opcode::UQADD_Vm_Vd_Vn(
                                                                UQADD_Vm_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e204c00 {
                                                            return Some(Opcode::UQSHL_Vm_Vd_Vn(
                                                                UQSHL_Vm_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e202c00 {
                                                            return Some(Opcode::UQSUB_Vd_Vn_Vm(
                                                                UQSUB_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e206c00 {
                                                            return Some(Opcode::UMIN_Vn_Vm_Vd(
                                                                UMIN_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 22 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xbfe0fc00 == 0x2e201c00 {
                                                                    return Some(
                                                                        Opcode::EOR_Vd_Vm_Vn(
                                                                            EOR_Vd_Vm_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0x2ea01c00 {
                                                                    return Some(
                                                                        Opcode::BIT_Vd_Vn_Vm(
                                                                            BIT_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn & 0xbfe0fc00 == 0x2e601c00 {
                                                                    return Some(
                                                                        Opcode::BSL_Vd_Vn_Vm(
                                                                            BSL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0x2ee01c00 {
                                                                    return Some(
                                                                        Opcode::BIF_Vd_Vn_Vm(
                                                                            BIF_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e205c00 {
                                                            return Some(Opcode::UQRSHL_Vd_Vn_Vm(
                                                                UQRSHL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e203c00 {
                                                            return Some(Opcode::CMHS_Vn_Vd_Vm(
                                                                CMHS_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e207c00 {
                                                            return Some(Opcode::UABA_Vn_Vd_Vm(
                                                                UABA_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 10 & 1 == 0 {
                                    if insn >> 11 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0xe208000 {
                                                                return Some(
                                                                    Opcode::SMLAL_Vd_Vn_Vm(
                                                                        SMLAL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0x4e208000 {
                                                                    return Some(
                                                                        Opcode::SMLAL2_Vn_Vd_Vm(
                                                                            SMLAL2_Vn_Vd_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce608000 {
                                                                    return Some(
                                                                        Opcode::SHA512H_Fd_Fn_Vm(
                                                                            SHA512H_Fd_Fn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e208000 {
                                                                return Some(
                                                                    Opcode::UMLAL_Vd_Vn_Vm(
                                                                        UMLAL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e208000 {
                                                                return Some(
                                                                    Opcode::UMLAL2_Vd_Vn_Vm(
                                                                        UMLAL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0xe20c000 {
                                                                return Some(
                                                                    Opcode::SMULL_Vn_Vd_Vm(
                                                                        SMULL_Vn_Vd_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn & 0xff20fc00 == 0x4e20c000 {
                                                                    return Some(
                                                                        Opcode::SMULL2_Vd_Vn_Vm(
                                                                            SMULL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce60c000 {
                                                                    return Some (Opcode :: SM3PARTW1_Vm_Vd_Vn (SM3PARTW1_Vm_Vd_Vn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e20c000 {
                                                                return Some(
                                                                    Opcode::UMULL_Vn_Vm_Vd(
                                                                        UMULL_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e20c000 {
                                                                return Some(
                                                                    Opcode::UMULL2_Vd_Vm_Vn(
                                                                        UMULL2_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0xe20a000 {
                                                                return Some(
                                                                    Opcode::SMLSL_Vd_Vn_Vm(
                                                                        SMLSL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4e20a000 {
                                                                return Some(
                                                                    Opcode::SMLSL2_Vd_Vn_Vm(
                                                                        SMLSL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e20a000 {
                                                                return Some(
                                                                    Opcode::UMLSL_Vm_Vd_Vn(
                                                                        UMLSL_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e20a000 {
                                                                return Some(
                                                                    Opcode::UMLSL2_Vm_Vd_Vn(
                                                                        UMLSL2_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 22 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0xe20e000 {
                                                                return Some(
                                                                    Opcode::PMULL_Vn_Vm_Vd(
                                                                        PMULL_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4e20e000 {
                                                                return Some(
                                                                    Opcode::PMULL2_Vd_Vn_Vm(
                                                                        PMULL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffe0fc00 == 0xee0e000 {
                                                                return Some(
                                                                    Opcode::PMULL_Vd_Vn_Vm(
                                                                        PMULL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4ee0e000 {
                                                                return Some(
                                                                    Opcode::PMULL2_Vn_Vm_Vd(
                                                                        PMULL2_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0xe209000 {
                                                            return Some(Opcode::SQDMLAL_Vd_Vm_Vn(
                                                                SQDMLAL_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4e209000 {
                                                            return Some(
                                                                Opcode::SQDMLAL2_Vn_Vm_Vd(
                                                                    SQDMLAL2_Vn_Vm_Vd::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0xe20d000 {
                                                            return Some(Opcode::SQDMULL_Vn_Vm_Vd(
                                                                SQDMULL_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4e20d000 {
                                                            return Some(
                                                                Opcode::SQDMULL2_Vn_Vm_Vd(
                                                                    SQDMULL2_Vn_Vm_Vd::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff20fc00 == 0xe20b000 {
                                                        return Some(Opcode::SQDMLSL_Vd_Vn_Vm(
                                                            SQDMLSL_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x4e20b000 {
                                                        return Some(Opcode::SQDMLSL2_Vn_Vd_Vm(
                                                            SQDMLSL2_Vn_Vd_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 31 & 1 == 0 {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe208800 {
                                                                    return Some(
                                                                        Opcode::CMGT_Vd_Vn_IMM0(
                                                                            CMGT_Vd_Vn_IMM0::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe218800
                                                                        {
                                                                            return Some (Opcode :: FRINTN_Vn_Vd (FRINTN_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea18800
                                                                        {
                                                                            return Some (Opcode :: FRINTP_Vd_Vn (FRINTP_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 23 & 1 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xe798800
                                                                        {
                                                                            return Some (Opcode :: FRINTN_Vd_Vn (FRINTN_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbffffc00
                                                                            == 0xef98800
                                                                        {
                                                                            return Some (Opcode :: FRINTP_Vn_Vd (FRINTP_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xce608800 {
                                                                return Some(
                                                                    Opcode::SHA512SU1_Vn_Vm_Vd(
                                                                        SHA512SU1_Vn_Vm_Vd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e208800 {
                                                                return Some(
                                                                    Opcode::CMGE_Vd_IMM0_Vn(
                                                                        CMGE_Vd_IMM0_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0xbfbffc00 == 0x2e218800 {
                                                                    return Some(
                                                                        Opcode::FRINTA_Vn_Vd(
                                                                            FRINTA_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbffffc00 == 0x2e798800 {
                                                                    return Some(
                                                                        Opcode::FRINTA_Vd_Vn(
                                                                            FRINTA_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn >> 16 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe30c800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMAXNMV_Vn_Fd(
                                                                                FMAXNMV_Vn_Fd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn >> 19 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe21c800
                                                                        {
                                                                            return Some (Opcode :: FCVTAS_Vn_Vd (FCVTAS_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbffffc00
                                                                            == 0xe79c800
                                                                        {
                                                                            return Some (Opcode :: FCVTAS_Vd_Vn (FCVTAS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce60c800 {
                                                                    return Some(
                                                                        Opcode::SM4EKEY_Vm_Vn_Vd(
                                                                            SM4EKEY_Vm_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xbfbffc00 == 0x2e30c800 {
                                                                    return Some(
                                                                        Opcode::FMAXNMV_Fd_Vn(
                                                                            FMAXNMV_Fd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e21c800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTAU_Vd_Vn(
                                                                                FCVTAU_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79c800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTAU_Vn_Vd(
                                                                                FCVTAU_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea0c800
                                                                        {
                                                                            return Some (Opcode :: FCMGT_FPIMM0_Vd_Vn (FCMGT_FPIMM0_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2ea0c800
                                                                        {
                                                                            return Some (Opcode :: FCMGE_FPIMM0_Vn_Vd (FCMGE_FPIMM0_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xeb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMV_Fd_Vn (FMINNMV_Fd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2eb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMV_Vn_Fd (FMINNMV_Vn_Fd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef8c800
                                                                    {
                                                                        return Some (Opcode :: FCMGT_FPIMM0_Vd_V_4H_Vn_V_4H (FCMGT_FPIMM0_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef8c800
                                                                    {
                                                                        return Some (Opcode :: FCMGE_Vd_Vn_FPIMM0 (FCMGE_Vd_Vn_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xbfbffc00 == 0xea1c800 {
                                                                    return Some(
                                                                        Opcode::URECPE_Vd_Vn(
                                                                            URECPE_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbfbffc00 == 0x2ea1c800 {
                                                                    return Some(
                                                                        Opcode::URSQRTE_Vd_Vn(
                                                                            URSQRTE_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 20 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe20a800 {
                                                                return Some(
                                                                    Opcode::CMLT_Vn_IMM0_Vd(
                                                                        CMLT_Vn_IMM0_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe30a800 {
                                                                    return Some(
                                                                        Opcode::SMAXV_Vn_Fd(
                                                                            SMAXV_Vn_Fd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0x2e30a800 {
                                                                    return Some(
                                                                        Opcode::UMAXV_Fd_Vn(
                                                                            UMAXV_Fd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe21a800
                                                                        {
                                                                            return Some (Opcode :: FCVTNS_Vd_Vn (FCVTNS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2e21a800
                                                                        {
                                                                            return Some (Opcode :: FCVTNU_Vn_Vd (FCVTNU_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea1a800
                                                                        {
                                                                            return Some (Opcode :: FCVTPS_Vn_Vd (FCVTPS_Vn_Vd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2ea1a800
                                                                        {
                                                                            return Some (Opcode :: FCVTPU_Vd_Vn (FCVTPU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe31a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SMINV_Fd_Vn(
                                                                                SMINV_Fd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0x2e31a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UMINV_Fd_Vn(
                                                                                UMINV_Fd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNS_Vd_V_4H_Vn_V_4H (FCVTNS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNU_Vn_V_4H_Vd_V_4H (FCVTNU_Vn_V_4H_Vd_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef9a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Vd_Vn(
                                                                                FCVTPS_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef9a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Vn_Vd(
                                                                                FCVTPU_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn & 0xbfbffc00 == 0xea0e800 {
                                                                return Some(
                                                                    Opcode::FCMLT_Vd_FPIMM0_Vn(
                                                                        FCMLT_Vd_FPIMM0_Vn::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbffffc00 == 0xef8e800 {
                                                                return Some(
                                                                    Opcode::FCMLT_FPIMM0_Vn_Vd(
                                                                        FCMLT_FPIMM0_Vn_Vd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfbffc00 == 0xe21e800 {
                                                                return Some(
                                                                    Opcode::FRINT32Z_Vn_Vd(
                                                                        FRINT32Z_Vn_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfbffc00 == 0x2e21e800 {
                                                                return Some(
                                                                    Opcode::FRINT32X_Vd_Vn(
                                                                        FRINT32X_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe209800 {
                                                                return Some(
                                                                    Opcode::CMEQ_Vd_Vn_IMM0(
                                                                        CMEQ_Vd_Vn_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf3ffc00 == 0x2e209800 {
                                                                return Some(
                                                                    Opcode::CMLE_Vn_IMM0_Vd(
                                                                        CMLE_Vn_IMM0_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xe219800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTM_Vd_Vn(
                                                                                FRINTM_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e219800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTX_Vn_Vd(
                                                                                FRINTX_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xea19800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTZ_Vd_Vn(
                                                                                FRINTZ_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2ea19800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTI_Vn_Vd(
                                                                                FRINTI_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe799800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTM_Vn_Vd(
                                                                                FRINTM_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e799800
                                                                    {
                                                                        return Some (Opcode :: FRINTX_Vn_V_4H_Vd_V_4H (FRINTX_Vn_V_4H_Vd_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef99800
                                                                    {
                                                                        return Some (Opcode :: FRINTZ_Vd_V_4H_Vn_V_4H (FRINTZ_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef99800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTI_Vd_Vn(
                                                                                FRINTI_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xbfbffc00 == 0xea0d800 {
                                                                    return Some (Opcode :: FCMEQ_Vn_Vd_FPIMM0 (FCMEQ_Vn_Vd_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xbfbffc00 == 0x2ea0d800 {
                                                                    return Some (Opcode :: FCMLE_FPIMM0_Vd_Vn (FCMLE_FPIMM0_Vd_Vn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xbffffc00 == 0xef8d800 {
                                                                    return Some (Opcode :: FCMEQ_Vn_V_4H_Vd_V_4H_FPIMM0 (FCMEQ_Vn_V_4H_Vd_V_4H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xbffffc00 == 0x2ef8d800 {
                                                                    return Some (Opcode :: FCMLE_Vn_Vd_FPIMM0 (FCMLE_Vn_Vd_FPIMM0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xe21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SCVTF_Vn_Vd(
                                                                                SCVTF_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UCVTF_Vn_Vd(
                                                                                UCVTF_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRECPE_Vn_Vd(
                                                                                FRECPE_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2ea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRSQRTE_Vd_Vn(
                                                                                FRSQRTE_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe79d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SCVTF_Vd_Vn(
                                                                                SCVTF_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79d800
                                                                    {
                                                                        return Some (Opcode :: UCVTF_Vn_V_4H_Vd_V_4H (UCVTF_Vn_V_4H_Vd_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef9d800
                                                                    {
                                                                        return Some (Opcode :: FRECPE_Vn_V_4H_Vd_V_4H (FRECPE_Vn_V_4H_Vd_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef9d800
                                                                    {
                                                                        return Some (Opcode :: FRSQRTE_Vd_V_4H_Vn_V_4H (FRSQRTE_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe20b800 {
                                                                return Some(Opcode::ABS_Vn_Vd(
                                                                    ABS_Vn_Vd::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xbf3ffc00 == 0x2e20b800 {
                                                                return Some(Opcode::NEG_Vd_Vn(
                                                                    NEG_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMS_Vd_Vn (FCVTMS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2e21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMU_Vd_Vn (FCVTMU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_Vd_Vn (FCVTZS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2ea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZU_Vd_Vn (FCVTZU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0xe31b800 {
                                                                    return Some(
                                                                        Opcode::ADDV_Vn_Fd(
                                                                            ADDV_Vn_Fd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe79b800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMS_Vn_Vd(
                                                                                FCVTMS_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79b800
                                                                    {
                                                                        return Some (Opcode :: FCVTMU_Vd_V_4H_Vn_V_4H (FCVTMU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef9b800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZS_Vn_Vd(
                                                                                FCVTZS_Vn_Vd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef9b800
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_Vd_V_4H_Vn_V_4H (FCVTZU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xea0f800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FABS_Vd_Vn(
                                                                                FABS_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2ea0f800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FNEG_Vd_Vn(
                                                                                FNEG_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xe30f800
                                                                        {
                                                                            return Some (Opcode :: FMAXV_Vn_Fd (FMAXV_Vn_Fd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2e30f800
                                                                        {
                                                                            return Some (Opcode :: FMAXV_Fd_Vn (FMAXV_Fd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xeb0f800
                                                                        {
                                                                            return Some (Opcode :: FMINV_Vn_Fd (FMINV_Vn_Fd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2eb0f800
                                                                        {
                                                                            return Some (Opcode :: FMINV_Vn_V_4S_Fd_S_S (FMINV_Vn_V_4S_Fd_S_S :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xbffffc00 == 0xef8f800 {
                                                                    return Some(
                                                                        Opcode::FABS_Vn_Vd(
                                                                            FABS_Vn_Vd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbffffc00 == 0x2ef8f800 {
                                                                    return Some(
                                                                        Opcode::FNEG_Vn_Vd(
                                                                            FNEG_Vn_Vd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xe21f800
                                                                    {
                                                                        return Some (Opcode :: FRINT64Z_Vn_Vd (FRINT64Z_Vn_Vd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e21f800
                                                                    {
                                                                        return Some (Opcode :: FRINT64X_Vd_Vn (FRINT64X_Vd_Vn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfbffc00 == 0x2ea1f800 {
                                                                    return Some(
                                                                        Opcode::FSQRT_Vd_Vn(
                                                                            FSQRT_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbffffc00 == 0x2ef9f800 {
                                                                return Some(
                                                                    Opcode::FSQRT_Vd_V_4H_Vn_V_4H(
                                                                        FSQRT_Vd_V_4H_Vn_V_4H::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 11 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 31 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe208400 {
                                                                return Some(Opcode::ADD_Vd_Vm_Vn(
                                                                    ADD_Vd_Vm_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xce608400 {
                                                                return Some(
                                                                    Opcode::SHA512H2_Fn_Fd_Vm(
                                                                        SHA512H2_Fn_Fd_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e208400 {
                                                            return Some(Opcode::SUB_Vm_Vd_Vn(
                                                                SUB_Vm_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn >> 31 & 1 == 0 {
                                                                if insn & 0xbfa0fc00 == 0xe20c400 {
                                                                    return Some(
                                                                        Opcode::FMAXNM_Vn_Vm_Vd(
                                                                            FMAXNM_Vn_Vm_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce60c400 {
                                                                    return Some (Opcode :: SM3PARTW2_Vn_Vd_Vm (SM3PARTW2_Vn_Vd_Vm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20c400 {
                                                                return Some(
                                                                    Opcode::FMAXNMP_Vm_Vd_Vn(
                                                                        FMAXNMP_Vm_Vd_Vn::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0c400 {
                                                                return Some (Opcode :: FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0c400 {
                                                                return Some (Opcode :: FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe20a400 {
                                                            return Some(Opcode::SMAXP_Vm_Vn_Vd(
                                                                SMAXP_Vm_Vn_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e20a400 {
                                                            return Some(Opcode::UMAXP_Vd_Vn_Vm(
                                                                UMAXP_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20e400 {
                                                                return Some(
                                                                    Opcode::FCMEQ_Vm_Vn_Vd(
                                                                        FCMEQ_Vm_Vn_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20e400 {
                                                                return Some(
                                                                    Opcode::FCMGE_Vd_Vn_Vm(
                                                                        FCMGE_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbfa0fc00 == 0x2ea0e400 {
                                                            return Some (Opcode :: FCMGT_Vd_V_2S_Vm_V_2S_Vn_V_2S (FCMGT_Vd_V_2S_Vm_V_2S_Vn_V_2S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe209400 {
                                                            return Some(Opcode::MLA_Vd_Vm_Vn(
                                                                MLA_Vd_Vm_Vn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e209400 {
                                                            return Some(Opcode::MLS_Vn_Vm_Vd(
                                                                MLS_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20d400 {
                                                                return Some(
                                                                    Opcode::FADD_Vn_Vm_Vd(
                                                                        FADD_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20d400 {
                                                                return Some(
                                                                    Opcode::FADDP_Vn_Vm_Vd(
                                                                        FADDP_Vn_Vm_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0d400 {
                                                                return Some(
                                                                    Opcode::FSUB_Vd_Vn_Vm(
                                                                        FSUB_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0d400 {
                                                                return Some(
                                                                    Opcode::FABD_Vn_Vd_Vm(
                                                                        FABD_Vn_Vd_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe20b400 {
                                                            return Some(Opcode::SQDMULH_Vn_Vm_Vd(
                                                                SQDMULH_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e20b400 {
                                                            return Some(
                                                                Opcode::SQRDMULH_Vm_Vd_Vn(
                                                                    SQRDMULH_Vm_Vd_Vn::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20f400 {
                                                                return Some(
                                                                    Opcode::FMAX_Vd_Vn_Vm(
                                                                        FMAX_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20f400 {
                                                                return Some(
                                                                    Opcode::FMAXP_Vm_Vn_Vd(
                                                                        FMAXP_Vm_Vn_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0f400 {
                                                                return Some (Opcode :: FMIN_Vm_V_2S_Vd_V_2S_Vn_V_2S (FMIN_Vm_V_2S_Vd_V_2S_Vn_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0f400 {
                                                                return Some(
                                                                    Opcode::FMINP_Vd_Vm_Vn(
                                                                        FMINP_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 31 & 1 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe208c00 {
                                                                return Some(
                                                                    Opcode::CMTST_Vd_Vn_Vm(
                                                                        CMTST_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xce608c00 {
                                                                return Some(
                                                                    Opcode::RAX1_Vd_Vm_Vn(
                                                                        RAX1_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e208c00 {
                                                            return Some(Opcode::CMEQ_Vn_Vm_Vd(
                                                                CMEQ_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20cc00 {
                                                                return Some(
                                                                    Opcode::FMLA_Vm_Vd_Vn(
                                                                        FMLA_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x2e20cc00 {
                                                                    return Some(
                                                                        Opcode::FMLAL2_Vm_Vd_Vn(
                                                                            FMLAL2_Vm_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x6e20cc00 {
                                                                    return Some(
                                                                        Opcode::FMLAL2_Vm_Vn_Vd(
                                                                            FMLAL2_Vm_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0cc00 {
                                                                return Some(
                                                                    Opcode::FMLS_Vn_Vd_Vm(
                                                                        FMLS_Vn_Vd_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0x2ea0cc00 {
                                                                    return Some(
                                                                        Opcode::FMLSL2_Vn_Vd_Vm(
                                                                            FMLSL2_Vn_Vd_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x6ea0cc00 {
                                                                    return Some(
                                                                        Opcode::FMLSL2_Vm_Vn_Vd(
                                                                            FMLSL2_Vm_Vn_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe20ac00 {
                                                            return Some(Opcode::SMINP_Vn_Vm_Vd(
                                                                SMINP_Vn_Vm_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e20ac00 {
                                                            return Some(Opcode::UMINP_Vd_Vn_Vm(
                                                                UMINP_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0xe20ec00 {
                                                                    return Some(
                                                                        Opcode::FMLAL_Vd_Vn_Vm(
                                                                            FMLAL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4e20ec00 {
                                                                    return Some(
                                                                        Opcode::FMLAL_Vd_Vm_Vn(
                                                                            FMLAL_Vd_Vm_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20ec00 {
                                                                return Some(
                                                                    Opcode::FACGE_Vm_Vd_Vn(
                                                                        FACGE_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn >> 30 & 1 == 0 {
                                                                if insn & 0xffa0fc00 == 0xea0ec00 {
                                                                    return Some(
                                                                        Opcode::FMLSL_Vn_Vm_Vd(
                                                                            FMLSL_Vn_Vm_Vd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4ea0ec00 {
                                                                    return Some(
                                                                        Opcode::FMLSL_Vd_Vm_Vn(
                                                                            FMLSL_Vd_Vm_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0ec00 {
                                                                return Some(
                                                                    Opcode::FACGT_Vm_Vd_Vn(
                                                                        FACGT_Vm_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe209c00 {
                                                            return Some(Opcode::MUL_Vd_Vn_Vm(
                                                                MUL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e209c00 {
                                                            return Some(Opcode::PMUL_Vn_Vd_Vm(
                                                                PMUL_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xbfa0fc00 == 0xe20dc00 {
                                                            return Some(Opcode::FMULX_Vn_Vd_Vm(
                                                                FMULX_Vn_Vd_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfa0fc00 == 0x2e20dc00 {
                                                            return Some (Opcode :: FMUL_Vn_V_2S_Vm_V_2S_Vd_V_2S (FMUL_Vn_V_2S_Vm_V_2S_Vd_V_2S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xbf20fc00 == 0xe20bc00 {
                                                        return Some(Opcode::ADDP_Vm_Vn_Vd(
                                                            ADDP_Vm_Vn_Vd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20fc00 {
                                                                return Some (Opcode :: FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S (FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20fc00 {
                                                                return Some(
                                                                    Opcode::FDIV_Vd_Vm_Vn(
                                                                        FDIV_Vd_Vm_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbfa0fc00 == 0xea0fc00 {
                                                            return Some(Opcode::FRSQRTS_Vd_Vn_Vm(
                                                                FRSQRTS_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 10 & 1 == 0 {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 16 & 1 == 0 {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e200000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNS_Rd_Fn(
                                                                                FCVTNS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee00000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNS_Fn_Rd(
                                                                                FCVTNS_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e300000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMS_Fn_Rd(
                                                                                FCVTMS_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef00000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMS_Rd_Fn(
                                                                                FCVTMS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e280000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Fn_Rd(
                                                                                FCVTPS_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee80000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Rd_Fn(
                                                                                FCVTPS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e380000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZS_Fn_Rd(
                                                                                FCVTZS_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef80000
                                                                    {
                                                                        return Some (Opcode :: FCVTZS_Fn_S_H_Rd_W (FCVTZS_Fn_S_H_Rd_W :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x7f3ffc00 == 0x1e240000 {
                                                                return Some(Opcode::FCVTAS_Rd_Fn(
                                                                    FCVTAS_Rd_Fn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee40000 {
                                                                return Some(Opcode::FCVTAS_Fn_Rd(
                                                                    FCVTAS_Fn_Rd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0x7f3ffc00 == 0x1e220000 {
                                                                return Some(Opcode::SCVTF_Rn_Fd(
                                                                    SCVTF_Rn_Fd::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee20000 {
                                                                return Some(Opcode::SCVTF_Fd_Rn(
                                                                    SCVTF_Fd_Rn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0x7f3ffc00 == 0x1e260000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Fn_Rd(
                                                                            FMOV_Fn_Rd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0x7ffffc00 == 0x1ee60000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Rd_Fn(
                                                                            FMOV_Rd_Fn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x9eae0000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMOV_VnD1_Rd(
                                                                                FMOV_VnD1_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x1e7e0000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FJCVTZS_Fn_Rd(
                                                                                FJCVTZS_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 17 & 1 == 0 {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e210000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNU_Fn_Rd(
                                                                                FCVTNU_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee10000
                                                                    {
                                                                        return Some (Opcode :: FCVTNU_Fn_S_H_Rd_W (FCVTNU_Fn_S_H_Rd_W :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e310000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMU_Rd_Fn(
                                                                                FCVTMU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef10000
                                                                    {
                                                                        return Some (Opcode :: FCVTMU_Rd_W_Fn_S_H (FCVTMU_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 20 & 1 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e290000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Rd_Fn(
                                                                                FCVTPU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee90000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Fn_Rd(
                                                                                FCVTPU_Fn_Rd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e390000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZU_Rd_Fn(
                                                                                FCVTZU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef90000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_Rd_W_Fn_S_H (FCVTZU_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x7f3ffc00 == 0x1e250000 {
                                                                return Some(Opcode::FCVTAU_Fn_Rd(
                                                                    FCVTAU_Fn_Rd::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee50000 {
                                                                return Some(Opcode::FCVTAU_Rd_Fn(
                                                                    FCVTAU_Rd_Fn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 18 & 1 == 0 {
                                                            if insn & 0x7f3ffc00 == 0x1e230000 {
                                                                return Some(Opcode::UCVTF_Fd_Rn(
                                                                    UCVTF_Fd_Rn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee30000 {
                                                                return Some(
                                                                    Opcode::UCVTF_Fd_S_H_Rn_W(
                                                                        UCVTF_Fd_S_H_Rn_W::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn >> 19 & 1 == 0 {
                                                                if insn & 0x7f3ffc00 == 0x1e270000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Fd_Rn(
                                                                            FMOV_Fd_Rn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0x7ffffc00 == 0x1ee70000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Rn_Fd(
                                                                            FMOV_Rn_Fd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x9eaf0000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Rn_VdD1(
                                                                            FMOV_Rn_VdD1::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 17 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e204000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMOV_Fd_Fn(
                                                                                FMOV_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee04000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMOV_Fn_Fd(
                                                                                FMOV_Fn_Fd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e284000
                                                                    {
                                                                        return Some (Opcode :: FRINT32Z_Fn_Fd (FRINT32Z_Fn_Fd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e244000 {
                                                                    return Some(
                                                                        Opcode::FRINTN_Fd_Fn(
                                                                            FRINTN_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee44000 {
                                                                    return Some (Opcode :: FRINTN_Fd_S_H_Fn_S_H (FRINTN_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e214000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FNEG_Fd_Fn(
                                                                                FNEG_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee14000
                                                                    {
                                                                        return Some (Opcode :: FNEG_Fd_S_H_Fn_S_H (FNEG_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e294000
                                                                    {
                                                                        return Some (Opcode :: FRINT64Z_Fd_Fn (FRINT64Z_Fd_Fn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e254000 {
                                                                    return Some(
                                                                        Opcode::FRINTM_Fd_Fn(
                                                                            FRINTM_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee54000 {
                                                                    return Some(
                                                                        Opcode::FRINTM_Fn_Fd(
                                                                            FRINTM_Fn_Fd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 16 & 1 == 0 {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e20c000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FABS_Fd_Fn(
                                                                                FABS_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee0c000
                                                                    {
                                                                        return Some (Opcode :: FABS_Fd_S_H_Fn_S_H (FABS_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e28c000
                                                                    {
                                                                        return Some (Opcode :: FRINT32X_Fd_Fn (FRINT32X_Fd_Fn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e24c000 {
                                                                    return Some(
                                                                        Opcode::FRINTP_Fn_Fd(
                                                                            FRINTP_Fn_Fd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee4c000 {
                                                                    return Some(
                                                                        Opcode::FRINTP_Fd_Fn(
                                                                            FRINTP_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 18 & 1 == 0 {
                                                                if insn >> 19 & 1 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e21c000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FSQRT_Fd_Fn(
                                                                                FSQRT_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee1c000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FSQRT_Fn_Fd(
                                                                                FSQRT_Fn_Fd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e29c000
                                                                    {
                                                                        return Some (Opcode :: FRINT64X_Fn_Fd (FRINT64X_Fn_Fd :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e25c000 {
                                                                    return Some(
                                                                        Opcode::FRINTZ_Fd_Fn(
                                                                            FRINTZ_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee5c000 {
                                                                    return Some (Opcode :: FRINTZ_Fd_S_H_Fn_S_H (FRINTZ_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 18 & 1 == 0 {
                                                        if insn & 0xff3e7c00 == 0x1e224000 {
                                                            return Some(Opcode::FCVT_Fd_Fn(
                                                                FCVT_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xfffffc00 == 0x1e634000 {
                                                            return Some(Opcode::BFCVT_Fd_Fn(
                                                                BFCVT_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn >> 16 & 1 == 0 {
                                                                if insn & 0xff3ffc00 == 0x1e264000 {
                                                                    return Some(
                                                                        Opcode::FRINTA_Fd_Fn(
                                                                            FRINTA_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee64000 {
                                                                    return Some (Opcode :: FRINTA_Fd_S_H_Fn_S_H (FRINTA_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e274000 {
                                                                    return Some(
                                                                        Opcode::FRINTX_Fn_Fd(
                                                                            FRINTX_Fn_Fd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee74000 {
                                                                    return Some(
                                                                        Opcode::FRINTX_Fd_Fn(
                                                                            FRINTX_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x1e27c000 {
                                                                return Some(Opcode::FRINTI_Fn_Fd(
                                                                    FRINTI_Fn_Fd::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0xfffffc00 == 0x1ee7c000 {
                                                                return Some(Opcode::FRINTI_Fd_Fn(
                                                                    FRINTI_Fd_Fn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 3 & 1 == 0 {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20fc1f == 0x1e202000 {
                                                        return Some(Opcode::FCMP_Fn_Fm(
                                                            FCMP_Fn_Fm::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02000 {
                                                        return Some(Opcode::FCMP_Fm_Fn(
                                                            FCMP_Fm_Fn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc1f == 0x1e202010 {
                                                        return Some(Opcode::FCMPE_Fn_Fm(
                                                            FCMPE_Fn_Fm::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02010 {
                                                        return Some(Opcode::FCMPE_Fn_S_H_Fm_S_H(
                                                            FCMPE_Fn_S_H_Fm_S_H::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 4 & 1 == 0 {
                                                    if insn & 0xff20fc1f == 0x1e202008 {
                                                        return Some(Opcode::FCMP_FPIMM0_Fn(
                                                            FCMP_FPIMM0_Fn::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02008 {
                                                        return Some(
                                                            Opcode::FCMP_FPIMM0_S_H_Fn_S_H(
                                                                FCMP_FPIMM0_S_H_Fn_S_H::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff20fc1f == 0x1e202018 {
                                                        return Some(Opcode::FCMPE_Fn_FPIMM0(
                                                            FCMPE_Fn_FPIMM0::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02018 {
                                                        return Some(
                                                            Opcode::FCMPE_Fn_S_H_FPIMM0_S_H(
                                                                FCMPE_Fn_S_H_FPIMM0_S_H::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 0xff201fe0 == 0x1e201000 {
                                                return Some(Opcode::FMOV_Fd_FPIMM(
                                                    FMOV_Fd_FPIMM::from(insn),
                                                ));
                                            }
                                            if insn & 0xffe01fe0 == 0x1ee01000 {
                                                return Some(Opcode::FMOV_FPIMM_Fd(
                                                    FMOV_FPIMM_Fd::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xff20fc00 == 0x5e209000 {
                                                        return Some(Opcode::SQDMLAL_Sm_Sn_Sd(
                                                            SQDMLAL_Sm_Sn_Sd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x5e20d000 {
                                                        return Some(Opcode::SQDMULL_Sd_Sn_Sm(
                                                            SQDMULL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff20fc00 == 0x5e20b000 {
                                                    return Some(Opcode::SQDMLSL_Sn_Sm_Sd(
                                                        SQDMLSL_Sn_Sm_Sd::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x1e200800 {
                                                            return Some(Opcode::FMUL_Fd_Fm_Fn(
                                                                FMUL_Fd_Fm_Fn::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xffe0fc00 == 0x1ee00800 {
                                                            return Some(Opcode::FMUL_Fn_Fd_Fm(
                                                                FMUL_Fn_Fd_Fm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x5e280800 {
                                                            return Some(Opcode::SHA1H_Fd_Fn(
                                                                SHA1H_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e208800 {
                                                                return Some(
                                                                    Opcode::FNMUL_Fn_Fd_Fm(
                                                                        FNMUL_Fn_Fd_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee08800 {
                                                                return Some (Opcode :: FNMUL_Fn_S_H_Fd_S_H_Fm_S_H (FNMUL_Fn_S_H_Fd_S_H_Fm_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e208800 {
                                                                return Some(
                                                                    Opcode::CMGT_Sn_Sd_IMM0(
                                                                        CMGT_Sn_Sd_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e208800 {
                                                            return Some(Opcode::CMGE_Sn_Sd_IMM0(
                                                                CMGE_Sn_Sd_IMM0::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e204800 {
                                                                return Some(
                                                                    Opcode::FMAX_Fd_Fn_Fm(
                                                                        FMAX_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee04800 {
                                                                return Some(
                                                                    Opcode::FMAX_Fn_Fd_Fm(
                                                                        FMAX_Fn_Fd_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e214800 {
                                                                return Some(Opcode::SQXTN_Sn_Sd(
                                                                    SQXTN_Sn_Sd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e214800 {
                                                            return Some(Opcode::UQXTN_Sn_Sd(
                                                                UQXTN_Sn_Sd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea0c800
                                                                    {
                                                                        return Some (Opcode :: FCMGT_Sn_Sd_FPIMM0 (FCMGT_Sn_Sd_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea0c800
                                                                    {
                                                                        return Some (Opcode :: FCMGE_FPIMM0_Sd_Sn (FCMGE_FPIMM0_Sd_Sn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xfffffc00
                                                                            == 0x5e30c800
                                                                        {
                                                                            return Some (Opcode :: FMAXNMP_Sd_Vn (FMAXNMP_Sd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7e30c800
                                                                        {
                                                                            return Some (Opcode :: FMAXNMP_Vn_Sd (FMAXNMP_Vn_Sd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xfffffc00
                                                                            == 0x5eb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMP_Vn_Sd (FMINNMP_Vn_Sd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7eb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMP_Sd_Vn (FMINNMP_Sd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x5ef8c800 {
                                                                    return Some (Opcode :: FCMGT_Sd_Sn_FPIMM0 (FCMGT_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x7ef8c800 {
                                                                    return Some (Opcode :: FCMGE_Sd_FPIMM0_Sn (FCMGE_Sd_FPIMM0_Sn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xffbffc00 == 0x5e21c800 {
                                                                    return Some(
                                                                        Opcode::FCVTAS_Sn_Sd(
                                                                            FCVTAS_Sn_Sd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffbffc00 == 0x7e21c800 {
                                                                    return Some(
                                                                        Opcode::FCVTAU_Sd_Sn(
                                                                            FCVTAU_Sd_Sn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x5e79c800 {
                                                                    return Some (Opcode :: FCVTAS_Sn_S_H_Sd_S_H (FCVTAS_Sn_S_H_Sd_S_H :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x7e79c800 {
                                                                    return Some (Opcode :: FCVTAU_Sd_S_H_Sn_S_H (FCVTAU_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e202800 {
                                                                return Some(
                                                                    Opcode::FADD_Fd_Fn_Fm(
                                                                        FADD_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee02800 {
                                                                return Some(
                                                                    Opcode::FADD_Fn_Fd_Fm(
                                                                        FADD_Fn_Fd_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0x5e282800 {
                                                                return Some(
                                                                    Opcode::SHA256SU0_Vn_Vd(
                                                                        SHA256SU0_Vn_Vd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e212800 {
                                                            return Some(Opcode::SQXTUN_Sd_Sn(
                                                                SQXTUN_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn & 0xff3ffc00 == 0x5e20a800 {
                                                            return Some(Opcode::CMLT_Sd_Sn_IMM0(
                                                                CMLT_Sd_Sn_IMM0::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5e21a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNS_Sd_Sn(
                                                                                FCVTNS_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7e21a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNU_Sn_Sd(
                                                                                FCVTNU_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea1a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Sn_Sd(
                                                                                FCVTPS_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea1a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Sn_Sd(
                                                                                FCVTPU_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e79a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNS_Sn_Sd(
                                                                                FCVTNS_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7e79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNU_Sn_S_H_Sd_S_H (FCVTNU_Sn_S_H_Sd_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ef9a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Sd_Sn(
                                                                                FCVTPS_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7ef9a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Sd_Sn(
                                                                                FCVTPU_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x1e206800 {
                                                            return Some(Opcode::FMAXNM_Fn_Fm_Fd(
                                                                FMAXNM_Fn_Fm_Fd::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xffe0fc00 == 0x1ee06800 {
                                                            return Some(Opcode::FMAXNM_Fm_Fd_Fn(
                                                                FMAXNM_Fm_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffbffc00 == 0x7e216800 {
                                                            return Some(Opcode::FCVTXN_Sd_Sn(
                                                                FCVTXN_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 19 & 1 == 0 {
                                                        if insn & 0xffbffc00 == 0x5ea0e800 {
                                                            return Some(
                                                                Opcode::FCMLT_FPIMM0_Sd_Sn(
                                                                    FCMLT_FPIMM0_Sd_Sn::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x5ef8e800 {
                                                            return Some(
                                                                Opcode::FCMLT_FPIMM0_Sn_Sd(
                                                                    FCMLT_FPIMM0_Sn_Sd::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 30 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x1e201800 {
                                                            return Some(Opcode::FDIV_Fn_Fd_Fm(
                                                                FDIV_Fn_Fd_Fm::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xffe0fc00 == 0x1ee01800 {
                                                            return Some(Opcode::FDIV_Fd_Fn_Fm(
                                                                FDIV_Fd_Fn_Fm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x5e281800 {
                                                            return Some(Opcode::SHA1SU1_Vd_Vn(
                                                                SHA1SU1_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn & 0xff3ffc00 == 0x5e209800 {
                                                            return Some(Opcode::CMEQ_IMM0_Sn_Sd(
                                                                CMEQ_IMM0_Sn_Sd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e209800 {
                                                            return Some(Opcode::CMLE_Sn_IMM0_Sd(
                                                                CMLE_Sn_IMM0_Sd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn & 0xff20fc00 == 0x1e205800 {
                                                        return Some(Opcode::FMIN_Fm_Fd_Fn(
                                                            FMIN_Fm_Fd_Fn::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc00 == 0x1ee05800 {
                                                        return Some(Opcode::FMIN_Fd_Fm_Fn(
                                                            FMIN_Fd_Fm_Fn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea0d800
                                                                    {
                                                                        return Some (Opcode :: FCMEQ_FPIMM0_Sd_Sn (FCMEQ_FPIMM0_Sd_Sn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea0d800
                                                                    {
                                                                        return Some (Opcode :: FCMLE_Sd_Sn_FPIMM0 (FCMLE_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e30d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FADDP_Sd_Vn(
                                                                                FADDP_Sd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7e30d800
                                                                    {
                                                                        return Some (Opcode :: FADDP_Sd_S_S_Vn_V_2S (FADDP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x5ef8d800 {
                                                                    return Some (Opcode :: FCMEQ_Sd_Sn_FPIMM0 (FCMEQ_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x7ef8d800 {
                                                                    return Some (Opcode :: FCMLE_Sn_FPIMM0_Sd (FCMLE_Sn_FPIMM0_Sd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5e21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SCVTF_Sn_Sd(
                                                                                SCVTF_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7e21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UCVTF_Sn_Sd(
                                                                                UCVTF_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRECPE_Sn_Sd(
                                                                                FRECPE_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRSQRTE_Sn_Sd(
                                                                                FRSQRTE_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e79d800
                                                                    {
                                                                        return Some (Opcode :: SCVTF_Sn_S_H_Sd_S_H (SCVTF_Sn_S_H_Sd_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7e79d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UCVTF_Sd_Sn(
                                                                                UCVTF_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ef9d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRECPE_Sd_Sn(
                                                                                FRECPE_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7ef9d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRSQRTE_Sd_Sn(
                                                                                FRSQRTE_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e203800 {
                                                                return Some(
                                                                    Opcode::FSUB_Fd_Fn_Fm(
                                                                        FSUB_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee03800 {
                                                                return Some(
                                                                    Opcode::FSUB_Fn_Fm_Fd(
                                                                        FSUB_Fn_Fm_Fd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e203800 {
                                                                return Some(Opcode::SUQADD_Sd_Sn(
                                                                    SUQADD_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e203800 {
                                                            return Some(Opcode::USQADD_Sn_Sd(
                                                                USQADD_Sn_Sd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 29 & 1 == 0 {
                                                            if insn & 0xff3ffc00 == 0x5e20b800 {
                                                                return Some(Opcode::ABS_Sn_Sd(
                                                                    ABS_Sn_Sd::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x7e20b800 {
                                                                return Some(Opcode::NEG_Sn_Sd(
                                                                    NEG_Sn_Sd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn >> 20 & 1 == 0 {
                                                                if insn >> 23 & 1 == 0 {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xffbffc00
                                                                            == 0x5e21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMS_Sn_Sd (FCVTMS_Sn_Sd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7e21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMU_Sd_Sn (FCVTMU_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn >> 29 & 1 == 0 {
                                                                        if insn & 0xffbffc00
                                                                            == 0x5ea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_Sd_Sn (FCVTZS_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7ea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZU_Sd_Sn (FCVTZU_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x5e31b800 {
                                                                    return Some(
                                                                        Opcode::ADDP_Sd_Vn(
                                                                            ADDP_Sd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 23 & 1 == 0 {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e79b800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMS_Sd_Sn(
                                                                                FCVTMS_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7e79b800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMU_Sn_Sd(
                                                                                FCVTMU_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn >> 29 & 1 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ef9b800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZS_Sn_Sd(
                                                                                FCVTZS_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7ef9b800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZU_Sn_Sd(
                                                                                FCVTZU_Sn_Sd::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn >> 29 & 1 == 0 {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e207800 {
                                                                return Some(
                                                                    Opcode::FMINNM_Fm_Fd_Fn(
                                                                        FMINNM_Fm_Fd_Fn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee07800 {
                                                                return Some(
                                                                    Opcode::FMINNM_Fd_Fn_Fm(
                                                                        FMINNM_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e207800 {
                                                                return Some(Opcode::SQABS_Sd_Sn(
                                                                    SQABS_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e207800 {
                                                            return Some(Opcode::SQNEG_Sd_Sn(
                                                                SQNEG_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 16 & 1 == 0 {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x5e30f800 {
                                                                    return Some(
                                                                        Opcode::FMAXP_Vn_Sd(
                                                                            FMAXP_Vn_Sd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffbffc00 == 0x7e30f800 {
                                                                    return Some (Opcode :: FMAXP_Vn_V_2S_Sd_S_S (FMAXP_Vn_V_2S_Sd_S_S :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn >> 29 & 1 == 0 {
                                                                if insn & 0xfffffc00 == 0x5eb0f800 {
                                                                    return Some(
                                                                        Opcode::FMINP_Sd_Vn(
                                                                            FMINP_Sd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffbffc00 == 0x7eb0f800 {
                                                                    return Some (Opcode :: FMINP_Sd_S_S_Vn_V_2S (FMINP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn >> 19 & 1 == 0 {
                                                            if insn & 0xffbffc00 == 0x5ea1f800 {
                                                                return Some(Opcode::FRECPX_Sn_Sd(
                                                                    FRECPX_Sn_Sd::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0x5ef9f800 {
                                                                return Some(Opcode::FRECPX_Sd_Sn(
                                                                    FRECPX_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 29 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn >> 4 & 1 == 0 {
                                                if insn & 0xff200c10 == 0x1e200400 {
                                                    return Some(Opcode::FCCMP_Fn_Fm_NZCV_COND(
                                                        FCCMP_Fn_Fm_NZCV_COND::from(insn),
                                                    ));
                                                }
                                                if insn & 0xffe00c10 == 0x1ee00400 {
                                                    return Some(Opcode::FCCMP_Fm_Fn_COND_NZCV(
                                                        FCCMP_Fm_Fn_COND_NZCV::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff200c10 == 0x1e200410 {
                                                    return Some(Opcode::FCCMPE_COND_Fm_Fn_NZCV(
                                                        FCCMPE_COND_Fm_Fn_NZCV::from(insn),
                                                    ));
                                                }
                                                if insn & 0xffe00c10 == 0x1ee00410 {
                                                    return Some(Opcode::FCCMPE_Fm_COND_Fn_NZCV(
                                                        FCCMPE_Fm_COND_Fn_NZCV::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x5ee08400 {
                                                            return Some(Opcode::ADD_Sd_Sn_Sm(
                                                                ADD_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x5ee04400 {
                                                            return Some(Opcode::SSHL_Sn_Sm_Sd(
                                                                SSHL_Sn_Sm_Sd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0fc00 == 0x5e20e400 {
                                                        return Some(Opcode::FCMEQ_Sd_Sn_Sm(
                                                            FCMEQ_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5ee05400 {
                                                        return Some(Opcode::SRSHL_Sd_Sn_Sm(
                                                            SRSHL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x5ee03400 {
                                                            return Some(Opcode::CMGT_Sm_Sn_Sd(
                                                                CMGT_Sm_Sn_Sd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5e20b400 {
                                                            return Some(Opcode::SQDMULH_Sd_Sm_Sn(
                                                                SQDMULH_Sd_Sm_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x7ee08400 {
                                                        return Some(Opcode::SUB_Sd_Sm_Sn(
                                                            SUB_Sd_Sm_Sn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x7ee04400 {
                                                        return Some(Opcode::USHL_Sd_Sn_Sm(
                                                            USHL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffa0fc00 == 0x7e20e400 {
                                                        return Some(Opcode::FCMGE_Sn_Sd_Sm(
                                                            FCMGE_Sn_Sd_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffa0fc00 == 0x7ea0e400 {
                                                        return Some(Opcode::FCMGT_Sn_Sd_Sm(
                                                            FCMGT_Sn_Sd_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x7ee05400 {
                                                        return Some(Opcode::URSHL_Sn_Sm_Sd(
                                                            URSHL_Sn_Sm_Sd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffa0fc00 == 0x7ea0d400 {
                                                        return Some(Opcode::FABD_Sd_Sn_Sm(
                                                            FABD_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 15 & 1 == 0 {
                                                    if insn & 0xffe0fc00 == 0x7ee03400 {
                                                        return Some(Opcode::CMHI_Sn_Sd_Sm(
                                                            CMHI_Sn_Sd_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x7e20b400 {
                                                        return Some(Opcode::SQRDMULH_Sm_Sd_Sn(
                                                            SQRDMULH_Sm_Sd_Sn::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 29 & 1 == 0 {
                                        if insn >> 30 & 1 == 0 {
                                            if insn & 0xff200c00 == 0x1e200c00 {
                                                return Some(Opcode::FCSEL_Fn_COND_Fd_Fm(
                                                    FCSEL_Fn_COND_Fd_Fm::from(insn),
                                                ));
                                            }
                                            if insn & 0xffe00c00 == 0x1ee00c00 {
                                                return Some(
                                                    Opcode::FCSEL_Fn_S_H_COND_Fd_S_H_Fm_S_H(
                                                        FCSEL_Fn_S_H_COND_Fd_S_H_Fm_S_H::from(insn),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn >> 15 & 1 == 0 {
                                                            if insn & 0xff20fc00 == 0x5e200c00 {
                                                                return Some(
                                                                    Opcode::SQADD_Sn_Sm_Sd(
                                                                        SQADD_Sn_Sm_Sd::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x5ee08c00 {
                                                                return Some(
                                                                    Opcode::CMTST_Sn_Sd_Sm(
                                                                        CMTST_Sn_Sd_Sm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5e204c00 {
                                                            return Some(Opcode::SQSHL_Sn_Sm_Sd(
                                                                SQSHL_Sn_Sm_Sd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x5e202c00 {
                                                        return Some(Opcode::SQSUB_Sd_Sn_Sm(
                                                            SQSUB_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 13 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x5e205c00 {
                                                            return Some(Opcode::SQRSHL_Sd_Sm_Sn(
                                                                SQRSHL_Sd_Sm_Sn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x5e20dc00 {
                                                            return Some (Opcode :: FMULX_Sn_S_S_Sd_S_S_Sm_S_S (FMULX_Sn_S_S_Sd_S_S_Sm_S_S :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 14 & 1 == 0 {
                                                        if insn & 0xffe0fc00 == 0x5ee03c00 {
                                                            return Some(Opcode::CMGE_Sn_Sm_Sd(
                                                                CMGE_Sn_Sm_Sd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 23 & 1 == 0 {
                                                            if insn & 0xffa0fc00 == 0x5e20fc00 {
                                                                return Some (Opcode :: FRECPS_Sn_S_S_Sd_S_S_Sm_S_S (FRECPS_Sn_S_S_Sd_S_S_Sm_S_S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x5ea0fc00 {
                                                                return Some(
                                                                    Opcode::FRSQRTS_Sn_Sm_Sd(
                                                                        FRSQRTS_Sn_Sm_Sd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 15 & 1 == 0 {
                                                        if insn & 0xff20fc00 == 0x7e200c00 {
                                                            return Some(Opcode::UQADD_Sn_Sm_Sd(
                                                                UQADD_Sn_Sm_Sd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x7ee08c00 {
                                                            return Some(Opcode::CMEQ_Sn_Sm_Sd(
                                                                CMEQ_Sn_Sm_Sd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x7e204c00 {
                                                        return Some(Opcode::UQSHL_Sd_Sm_Sn(
                                                            UQSHL_Sd_Sm_Sn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xff20fc00 == 0x7e202c00 {
                                                        return Some(Opcode::UQSUB_Sd_Sm_Sn(
                                                            UQSUB_Sd_Sm_Sn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffa0fc00 == 0x7e20ec00 {
                                                            return Some(Opcode::FACGE_Sn_Sd_Sm(
                                                                FACGE_Sn_Sd_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x7ea0ec00 {
                                                            return Some (Opcode :: FACGT_Sn_S_S_Sm_S_S_Sd_S_S (FACGT_Sn_S_S_Sm_S_S_Sd_S_S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xff20fc00 == 0x7e205c00 {
                                                    return Some(Opcode::UQRSHL_Sn_Sm_Sd(
                                                        UQRSHL_Sn_Sm_Sd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x7ee03c00 {
                                                    return Some(Opcode::CMHS_Sd_Sn_Sm(
                                                        CMHS_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn >> 15 & 1 == 0 {
                        if insn >> 28 & 1 == 0 {
                            if insn >> 10 & 1 == 0 {
                                if insn >> 12 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffc0f400 == 0xf800000 {
                                                        return Some(Opcode::FMLAL_Vd_Vn_Em16(
                                                            FMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x4f800000 {
                                                        return Some (Opcode :: FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H (FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f000000 {
                                                    return Some(Opcode::MLA_Em16_Vd_Vn(
                                                        MLA_Em16_Vd_Vn::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffc0f400 == 0xf804000 {
                                                        return Some(Opcode::FMLSL_Vd_Vn_Em16(
                                                            FMLSL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x4f804000 {
                                                        return Some(Opcode::FMLSL_Em16_Vd_Vn(
                                                            FMLSL_Em16_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f004000 {
                                                    return Some(Opcode::MLS_Vd_Vn_Em16(
                                                        MLS_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0xf002000 {
                                                        return Some(Opcode::SMLAL_Vd_Vn_Em16(
                                                            SMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f002000 {
                                                        return Some(Opcode::SMLAL2_Vn_Em16_Vd(
                                                            SMLAL2_Vn_Em16_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0x2f002000 {
                                                        return Some(Opcode::UMLAL_Vn_Vd_Em16(
                                                            UMLAL_Vn_Vd_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x6f002000 {
                                                        return Some(Opcode::UMLAL2_Vn_Em16_Vd(
                                                            UMLAL2_Vn_Em16_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0xf006000 {
                                                        return Some(Opcode::SMLSL_Em16_Vd_Vn(
                                                            SMLSL_Em16_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f006000 {
                                                        return Some(Opcode::SMLSL2_Em16_Vd_Vn(
                                                            SMLSL2_Em16_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0x2f006000 {
                                                        return Some(Opcode::UMLSL_Vd_Vn_Em16(
                                                            UMLSL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x6f006000 {
                                                        return Some(Opcode::UMLSL2_Vd_Em16_Vn(
                                                            UMLSL2_Vd_Em16_Vn::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 29 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xbfc0f400 == 0xf001000 {
                                                        return Some(Opcode::FMLA_Vd_Vn_Em16(
                                                            FMLA_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf80f400 == 0xf801000 {
                                                        return Some(Opcode::FMLA_Vn_Em_Vd(
                                                            FMLA_Vn_Em_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xbfc0f400 == 0xf005000 {
                                                        return Some(Opcode::FMLS_Em16_Vd_Vn(
                                                            FMLS_Em16_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf80f400 == 0xf805000 {
                                                        return Some(Opcode::FMLS_Em_Vn_Vd(
                                                            FMLS_Em_Vn_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0xf003000 {
                                                        return Some(Opcode::SQDMLAL_Vd_Vn_Em16(
                                                            SQDMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f003000 {
                                                        return Some(Opcode::SQDMLAL2_Vn_Em16_Vd(
                                                            SQDMLAL2_Vn_Em16_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0xf007000 {
                                                        return Some(Opcode::SQDMLSL_Em16_Vd_Vn(
                                                            SQDMLSL_Em16_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f007000 {
                                                        return Some(Opcode::SQDMLSL2_Vn_Em16_Vd(
                                                            SQDMLSL2_Vn_Em16_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xbf009400 == 0x2f001000 {
                                            return Some(Opcode::FCMLA_Em_IMM_ROT2_Vn_Vd(
                                                FCMLA_Em_IMM_ROT2_Vn_Vd::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn >> 12 & 1 == 0 {
                                    if insn >> 29 & 1 == 0 {
                                        if insn & 0xbff89c00 == 0xf000400 {
                                            return Some(Opcode::SSHR_IMM_VLSR_Vd_Vn(
                                                SSHR_IMM_VLSR_Vd_Vn::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf000400 {
                                            return Some(Opcode::SSHR_IMM_VLSR_Vd_Vn(
                                                SSHR_IMM_VLSR_Vd_Vn::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf002400 {
                                            return Some(Opcode::SRSHR_IMM_VLSR_Vd_Vn(
                                                SRSHR_IMM_VLSR_Vd_Vn::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbff89c00 == 0x2f000400 {
                                            return Some(Opcode::USHR_IMM_VLSR_Vd_Vn(
                                                USHR_IMM_VLSR_Vd_Vn::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f000400 {
                                            return Some(Opcode::USHR_IMM_VLSR_Vd_Vn(
                                                USHR_IMM_VLSR_Vd_Vn::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f002400 {
                                            return Some(Opcode::URSHR_IMM_VLSR_Vn_Vd(
                                                URSHR_IMM_VLSR_Vn_Vd::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f004400 {
                                            return Some(Opcode::SRI_Vn_IMM_VLSR_Vd(
                                                SRI_Vn_IMM_VLSR_Vd::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f006400 {
                                            return Some(Opcode::SQSHLU_IMM_VLSL_Vd_Vn(
                                                SQSHLU_IMM_VLSL_Vd_Vn::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 29 & 1 == 0 {
                                        if insn & 0xbff89c00 == 0xf001400 {
                                            return Some(Opcode::SSRA_Vn_Vd_IMM_VLSR(
                                                SSRA_Vn_Vd_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf001400 {
                                            return Some(Opcode::SSRA_Vn_Vd_IMM_VLSR(
                                                SSRA_Vn_Vd_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf003400 {
                                            return Some(Opcode::SRSRA_Vn_IMM_VLSR_Vd(
                                                SRSRA_Vn_IMM_VLSR_Vd::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf005400 {
                                            return Some(Opcode::SHL_IMM_VLSL_Vn_Vd(
                                                SHL_IMM_VLSL_Vn_Vd::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf007400 {
                                            return Some(Opcode::SQSHL_Vd_IMM_VLSL_Vn(
                                                SQSHL_Vd_IMM_VLSL_Vn::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbff89c00 == 0x2f001400 {
                                            return Some(Opcode::USRA_IMM_VLSR_Vn_Vd(
                                                USRA_IMM_VLSR_Vn_Vd::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f001400 {
                                            return Some(Opcode::USRA_IMM_VLSR_Vn_Vd(
                                                USRA_IMM_VLSR_Vn_Vd::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f003400 {
                                            return Some(Opcode::URSRA_Vn_Vd_IMM_VLSR(
                                                URSRA_Vn_Vd_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f005400 {
                                            return Some(Opcode::SLI_IMM_VLSL_Vd_Vn(
                                                SLI_IMM_VLSL_Vd_Vn::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f007400 {
                                            return Some(Opcode::UQSHL_Vd_Vn_IMM_VLSL(
                                                UQSHL_Vd_Vn_IMM_VLSL::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn & 0xff208000 == 0x1f000000 {
                                            return Some(Opcode::FMADD_Fa_Fd_Fn_Fm(
                                                FMADD_Fa_Fd_Fn_Fm::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fc00000 {
                                            return Some(Opcode::FMADD_Fm_Fd_Fa_Fn(
                                                FMADD_Fm_Fd_Fa_Fn::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xff208000 == 0x1f200000 {
                                            return Some(Opcode::FNMADD_Fd_Fn_Fm_Fa(
                                                FNMADD_Fd_Fn_Fm_Fa::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fe00000 {
                                            return Some(Opcode::FNMADD_Fm_Fa_Fn_Fd(
                                                FNMADD_Fm_Fa_Fn_Fd::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 14 & 1 == 0 {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0f400 == 0x5f001000 {
                                                        return Some(Opcode::FMLA_Sd_Sn_Em16(
                                                            FMLA_Sd_Sn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80f400 == 0x5f801000 {
                                                        return Some(Opcode::FMLA_Sn_Em_Sd(
                                                            FMLA_Sn_Em_Sd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 23 & 1 == 0 {
                                                    if insn & 0xffc0f400 == 0x5f005000 {
                                                        return Some(Opcode::FMLS_Sn_Em16_Sd(
                                                            FMLS_Sn_Em16_Sd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80f400 == 0x5f805000 {
                                                        return Some(Opcode::FMLS_Sn_Em_Sd(
                                                            FMLS_Sn_Em_Sd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 14 & 1 == 0 {
                                                if insn & 0xff00f400 == 0x5f003000 {
                                                    return Some(Opcode::SQDMLAL_Sd_Sn_Em16(
                                                        SQDMLAL_Sd_Sn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff00f400 == 0x5f007000 {
                                                    return Some(Opcode::SQDMLSL_Em16_Sn_Sd(
                                                        SQDMLSL_Em16_Sn_Sd::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0x5f000400 {
                                                    return Some(Opcode::SSHR_IMM_VLSR_Sd_Sn(
                                                        SSHR_IMM_VLSR_Sd_Sn::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x5f002400 {
                                                    return Some(Opcode::SRSHR_IMM_VLSR_Sn_Sd(
                                                        SRSHR_IMM_VLSR_Sn_Sd::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xff80fc00 == 0x5f001400 {
                                                        return Some(Opcode::SSRA_Sd_Sn_IMM_VLSR(
                                                            SSRA_Sd_Sn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x5f005400 {
                                                        return Some(Opcode::SHL_IMM_VLSL_Sd_Sn(
                                                            SHL_IMM_VLSL_Sd_Sn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn & 0xff80fc00 == 0x5f003400 {
                                                        return Some(Opcode::SRSRA_Sn_IMM_VLSR_Sd(
                                                            SRSRA_Sn_IMM_VLSR_Sd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x5f007400 {
                                                        return Some(Opcode::SQSHL_IMM_VLSL_Sn_Sd(
                                                            SQSHL_IMM_VLSL_Sn_Sd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 12 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn & 0xff80fc00 == 0x7f000400 {
                                                return Some(Opcode::USHR_Sd_Sn_IMM_VLSR(
                                                    USHR_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f004400 {
                                                return Some(Opcode::SRI_Sd_IMM_VLSR_Sn(
                                                    SRI_Sd_IMM_VLSR_Sn::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn & 0xff80fc00 == 0x7f002400 {
                                                return Some(Opcode::URSHR_Sd_IMM_VLSR_Sn(
                                                    URSHR_Sd_IMM_VLSR_Sn::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f006400 {
                                                return Some(Opcode::SQSHLU_Sn_Sd_IMM_VLSL(
                                                    SQSHLU_Sn_Sd_IMM_VLSL::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn & 0xff80fc00 == 0x7f001400 {
                                                return Some(Opcode::USRA_Sd_Sn_IMM_VLSR(
                                                    USRA_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f005400 {
                                                return Some(Opcode::SLI_Sd_Sn_IMM_VLSL(
                                                    SLI_Sd_Sn_IMM_VLSL::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn & 0xff80fc00 == 0x7f003400 {
                                                return Some(Opcode::URSRA_Sd_Sn_IMM_VLSR(
                                                    URSRA_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f007400 {
                                                return Some(Opcode::UQSHL_Sn_Sd_IMM_VLSL(
                                                    UQSHL_Sn_Sd_IMM_VLSL::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn >> 28 & 1 == 0 {
                            if insn >> 10 & 1 == 0 {
                                if insn >> 12 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbf00f400 == 0xf008000 {
                                                    return Some(Opcode::MUL_Em16_Vd_Vn(
                                                        MUL_Em16_Vd_Vn::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffc0f400 == 0x2f808000 {
                                                        return Some(Opcode::FMLAL2_Vd_Em16_Vn(
                                                            FMLAL2_Vd_Em16_Vn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x6f808000 {
                                                        return Some(Opcode::FMLAL2_Vn_Vd_Em16(
                                                            FMLAL2_Vn_Vd_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbf00f400 == 0xf00c000 {
                                                    return Some(Opcode::SQDMULH_Vn_Em16_Vd(
                                                        SQDMULH_Vn_Em16_Vd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xffc0f400 == 0x2f80c000 {
                                                        return Some(Opcode::FMLSL2_Vd_Vn_Em16(
                                                            FMLSL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x6f80c000 {
                                                        return Some(Opcode::FMLSL2_Em16_Vn_Vd(
                                                            FMLSL2_Em16_Vn_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0xf00a000 {
                                                        return Some(Opcode::SMULL_Em16_Vd_Vn(
                                                            SMULL_Em16_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f00a000 {
                                                        return Some(Opcode::SMULL2_Vd_Vn_Em16(
                                                            SMULL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff00f400 == 0x2f00a000 {
                                                        return Some(Opcode::UMULL_Vd_Vn_Em16(
                                                            UMULL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x6f00a000 {
                                                        return Some(Opcode::UMULL2_Vd_Vn_Em16(
                                                            UMULL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbf00f400 == 0xf00e000 {
                                                    return Some(Opcode::SDOT_Em_Vd_Vn(
                                                        SDOT_Em_Vd_Vn::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f00e000 {
                                                    return Some(Opcode::UDOT_Vn_Vd_Em(
                                                        UDOT_Vn_Vd_Em::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn >> 29 & 1 == 0 {
                                                    if insn & 0xbfc0f400 == 0xf009000 {
                                                        return Some(Opcode::FMUL_Vn_Vd_Em16(
                                                            FMUL_Vn_Vd_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbfc0f400 == 0x2f009000 {
                                                        return Some(Opcode::FMULX_Vn_Em16_Vd(
                                                            FMULX_Vn_Em16_Vd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 29 & 1 == 0 {
                                                    if insn & 0xbf80f400 == 0xf809000 {
                                                        return Some(Opcode::FMUL_Vd_Vn_Em(
                                                            FMUL_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf80f400 == 0x2f809000 {
                                                        return Some(Opcode::FMULX_Vd_Em_Vn(
                                                            FMULX_Vd_Em_Vn::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbf00f400 == 0xf00d000 {
                                                    return Some(Opcode::SQRDMULH_Vd_Vn_Em16(
                                                        SQRDMULH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f00d000 {
                                                    return Some(Opcode::SQRDMLAH_Vd_Vn_Em16(
                                                        SQRDMLAH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xff00f400 == 0xf00b000 {
                                                    return Some(Opcode::SQDMULL_Vn_Vd_Em16(
                                                        SQDMULL_Vn_Vd_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff00f400 == 0x4f00b000 {
                                                    return Some(Opcode::SQDMULL2_Vd_Vn_Em16(
                                                        SQDMULL2_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 22 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xbfc0f400 == 0xf00f000 {
                                                            return Some(Opcode::SUDOT_Vd_Vn_Em(
                                                                SUDOT_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfc0f400 == 0xf80f000 {
                                                            return Some(Opcode::USDOT_Vd_Em_Vn(
                                                                USDOT_Vd_Em_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xbfc0f400 == 0xf40f000 {
                                                            return Some(Opcode::BFDOT_Vn_Em_Vd(
                                                                BFDOT_Vn_Em_Vd::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn >> 30 & 1 == 0 {
                                                            if insn & 0xffc0f400 == 0xfc0f000 {
                                                                return Some(
                                                                    Opcode::BFMLALB_Vn_Em16_Vd(
                                                                        BFMLALB_Vn_Em16_Vd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffc0f400 == 0x4fc0f000 {
                                                                return Some(
                                                                    Opcode::BFMLALT_Vn_Em16_Vd(
                                                                        BFMLALT_Vn_Em16_Vd::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f00f000 {
                                                    return Some(Opcode::SQRDMLSH_Vd_Vn_Em16(
                                                        SQRDMLSH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 11 & 1 == 0 {
                                    if insn >> 14 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbff8dc00 == 0xf008400 {
                                                    return Some(Opcode::SHRN_Vd_Vn_IMM_VLSR(
                                                        SHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0xf008400 {
                                                    return Some(Opcode::SHRN_Vd_Vn_IMM_VLSR(
                                                        SHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x4f008400 {
                                                    return Some(Opcode::SHRN2_IMM_VLSR_Vd_Vn(
                                                        SHRN2_IMM_VLSR_Vd_Vn::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0xf00a400 {
                                                    return Some(Opcode::SSHLL_Vd_IMM_VLSL_Vn(
                                                        SSHLL_Vd_IMM_VLSL_Vn::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x4f00a400 {
                                                    return Some(Opcode::SSHLL2_Vd_Vn_IMM_VLSL(
                                                        SSHLL2_Vd_Vn_IMM_VLSL::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbff8dc00 == 0x2f008400 {
                                                    return Some(Opcode::SQSHRUN_Vn_IMM_VLSR_Vd(
                                                        SQSHRUN_Vn_IMM_VLSR_Vd::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x2f008400 {
                                                    return Some(Opcode::SQSHRUN_Vn_IMM_VLSR_Vd(
                                                        SQSHRUN_Vn_IMM_VLSR_Vd::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x6f008400 {
                                                    return Some(Opcode::SQSHRUN2_Vd_IMM_VLSR_Vn(
                                                        SQSHRUN2_Vd_IMM_VLSR_Vn::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x2f00a400 {
                                                    return Some(Opcode::USHLL_Vn_IMM_VLSL_Vd(
                                                        USHLL_Vn_IMM_VLSL_Vd::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x6f00a400 {
                                                    return Some(Opcode::USHLL2_Vd_Vn_IMM_VLSL(
                                                        USHLL2_Vd_Vn_IMM_VLSL::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbff8dc00 == 0xf009400 {
                                                    return Some(Opcode::SQSHRN_Vn_Vd_IMM_VLSR(
                                                        SQSHRN_Vn_Vd_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0xf009400 {
                                                    return Some(Opcode::SQSHRN_Vn_Vd_IMM_VLSR(
                                                        SQSHRN_Vn_Vd_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x4f009400 {
                                                    return Some(Opcode::SQSHRN2_Vn_Vd_IMM_VLSR(
                                                        SQSHRN2_Vn_Vd_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbff8dc00 == 0x2f009400 {
                                                    return Some(Opcode::UQSHRN_Vn_IMM_VLSR_Vd(
                                                        UQSHRN_Vn_IMM_VLSR_Vd::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x2f009400 {
                                                    return Some(Opcode::UQSHRN_Vn_IMM_VLSR_Vd(
                                                        UQSHRN_Vn_IMM_VLSR_Vd::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x6f009400 {
                                                    return Some(Opcode::UQSHRN2_Vn_Vd_IMM_VLSR(
                                                        UQSHRN2_Vn_Vd_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbff8ec00 == 0xf00c400 {
                                                    return Some(
                                                        Opcode::MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL(
                                                            MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbff8ec00 == 0x2f00c400 {
                                                    return Some(
                                                        Opcode::MVNI_SIMD_IMM_SFT_MSL_Vd_V_2S(
                                                            MVNI_SIMD_IMM_SFT_MSL_Vd_V_2S::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn >> 12 & 1 == 0 {
                                                if insn >> 29 & 1 == 0 {
                                                    if insn & 0xbff8fc00 == 0xf00e400 {
                                                        return Some(Opcode::SCVTF_IMM_VLSR_Vd_Vn(
                                                            SCVTF_IMM_VLSR_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf80fc00 == 0xf00e400 {
                                                        return Some(Opcode::SCVTF_IMM_VLSR_Vd_Vn(
                                                            SCVTF_IMM_VLSR_Vd_Vn::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf90fc00 == 0xf10e400 {
                                                        return Some(Opcode::SCVTF_Vd_Vn_IMM_VLSR(
                                                            SCVTF_Vd_Vn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfff8fc00 == 0x2f00e400 {
                                                        return Some(Opcode::UCVTF_IMM_VLSR_Vn_Vd(
                                                            UCVTF_IMM_VLSR_Vn_Vd::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xfff8fc00 == 0x6f00e400 {
                                                        return Some(Opcode::MOVI_Vd_SIMD_IMM(
                                                            MOVI_Vd_SIMD_IMM::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf80fc00 == 0x2f00e400 {
                                                        return Some(Opcode::UCVTF_IMM_VLSR_Vn_Vd(
                                                            UCVTF_IMM_VLSR_Vn_Vd::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf90fc00 == 0x2f10e400 {
                                                        return Some(Opcode::UCVTF_Vd_IMM_VLSR_Vn(
                                                            UCVTF_Vd_IMM_VLSR_Vn::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn >> 29 & 1 == 0 {
                                                    if insn & 0xbff8fc00 == 0xf00f400 {
                                                        return Some(Opcode::FMOV_SIMD_FPIMM_Vd(
                                                            FMOV_SIMD_FPIMM_Vd::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfff8fc00 == 0x6f00f400 {
                                                        return Some(Opcode::FMOV_Vd_SIMD_FPIMM(
                                                            FMOV_Vd_SIMD_FPIMM::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn >> 12 & 1 == 0 {
                                        if insn >> 29 & 1 == 0 {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0xf008c00 {
                                                    return Some(Opcode::RSHRN_Vd_IMM_VLSR_Vn(
                                                        RSHRN_Vd_IMM_VLSR_Vn::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x4f008c00 {
                                                    return Some(Opcode::RSHRN2_Vd_Vn_IMM_VLSR(
                                                        RSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 30 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0x2f008c00 {
                                                    return Some(Opcode::SQRSHRUN_IMM_VLSR_Vn_Vd(
                                                        SQRSHRUN_IMM_VLSR_Vn_Vd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x6f008c00 {
                                                    return Some(Opcode::SQRSHRUN2_IMM_VLSR_Vn_Vd(
                                                        SQRSHRUN2_IMM_VLSR_Vn_Vd::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 13 & 1 == 0 {
                                            if insn >> 29 & 1 == 0 {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff80fc00 == 0xf009c00 {
                                                        return Some(
                                                            Opcode::SQRSHRN_IMM_VLSR_Vd_Vn(
                                                                SQRSHRN_IMM_VLSR_Vd_Vn::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x4f009c00 {
                                                        return Some(
                                                            Opcode::SQRSHRN2_Vd_Vn_IMM_VLSR(
                                                                SQRSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn >> 30 & 1 == 0 {
                                                    if insn & 0xff80fc00 == 0x2f009c00 {
                                                        return Some(
                                                            Opcode::UQRSHRN_Vd_Vn_IMM_VLSR(
                                                                UQRSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x6f009c00 {
                                                        return Some(
                                                            Opcode::UQRSHRN2_Vd_Vn_IMM_VLSR(
                                                                UQRSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn >> 29 & 1 == 0 {
                                                if insn & 0xbff8fc00 == 0xf00fc00 {
                                                    return Some(Opcode::FMOV_SIMD_FPIMM_Vd_V_4H(
                                                        FMOV_SIMD_FPIMM_Vd_V_4H::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbf80fc00 == 0xf00fc00 {
                                                    return Some(Opcode::FMOV_SIMD_FPIMM_Vd_V_4H(
                                                        FMOV_SIMD_FPIMM_Vd_V_4H::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbf90fc00 == 0xf10fc00 {
                                                    return Some(Opcode::FCVTZS_IMM_VLSR_Vd_Vn(
                                                        FCVTZS_IMM_VLSR_Vd_Vn::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbf80fc00 == 0x2f00fc00 {
                                                    return Some(Opcode::FCVTZU_Vd_Vn_IMM_VLSR(
                                                        FCVTZU_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbf90fc00 == 0x2f10fc00 {
                                                    return Some (Opcode :: FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H (FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn >> 29 & 1 == 0 {
                                if insn >> 30 & 1 == 0 {
                                    if insn >> 21 & 1 == 0 {
                                        if insn & 0xff208000 == 0x1f008000 {
                                            return Some(Opcode::FMSUB_Fm_Fa_Fn_Fd(
                                                FMSUB_Fm_Fa_Fn_Fd::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fc08000 {
                                            return Some(Opcode::FMSUB_Fm_Fd_Fa_Fn(
                                                FMSUB_Fm_Fd_Fa_Fn::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xff208000 == 0x1f208000 {
                                            return Some(Opcode::FNMSUB_Fn_Fm_Fa_Fd(
                                                FNMSUB_Fn_Fm_Fa_Fd::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fe08000 {
                                            return Some(Opcode::FNMSUB_Fm_Fa_Fd_Fn(
                                                FNMSUB_Fm_Fa_Fd_Fn::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 10 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn & 0xff00f400 == 0x5f00c000 {
                                                return Some(Opcode::SQDMULH_Sn_Sd_Em16(
                                                    SQDMULH_Sn_Sd_Em16::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn >> 14 & 1 == 0 {
                                                    if insn >> 23 & 1 == 0 {
                                                        if insn & 0xffc0f400 == 0x5f009000 {
                                                            return Some(Opcode::FMUL_Sn_Sd_Em16(
                                                                FMUL_Sn_Sd_Em16::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff80f400 == 0x5f809000 {
                                                            return Some(Opcode::FMUL_Sd_Em_Sn(
                                                                FMUL_Sd_Em_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x5f00d000 {
                                                        return Some(Opcode::SQRDMULH_Sn_Em16_Sd(
                                                            SQRDMULH_Sn_Em16_Sd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff00f400 == 0x5f00b000 {
                                                    return Some(Opcode::SQDMULL_Sd_Em16_Sn(
                                                        SQDMULL_Sd_Em16_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn >> 11 & 1 == 0 {
                                            if insn >> 12 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0x5f00e400 {
                                                    return Some(Opcode::SCVTF_IMM_VLSR_Sn_Sd(
                                                        SCVTF_IMM_VLSR_Sn_Sd::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x5f10e400 {
                                                    return Some(
                                                        Opcode::SCVTF_IMM_VLSR_S_H_Sn_S_H_Sd_S_H(
                                                            SCVTF_IMM_VLSR_S_H_Sn_S_H_Sd_S_H::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x5f009400 {
                                                    return Some(Opcode::SQSHRN_IMM_VLSR_Sd_Sn(
                                                        SQSHRN_IMM_VLSR_Sd_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0x5f009c00 {
                                                    return Some(Opcode::SQRSHRN_Sn_IMM_VLSR_Sd(
                                                        SQRSHRN_Sn_IMM_VLSR_Sd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x5f00fc00 {
                                                    return Some(Opcode::FCVTZS_Sd_Sn_IMM_VLSR(
                                                        FCVTZS_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x5f10fc00 {
                                                    return Some(Opcode::FCVTZS_Sd_IMM_VLSR_Sn(
                                                        FCVTZS_Sd_IMM_VLSR_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn >> 10 & 1 == 0 {
                                    if insn >> 13 & 1 == 0 {
                                        if insn >> 14 & 1 == 0 {
                                            if insn >> 23 & 1 == 0 {
                                                if insn & 0xffc0f400 == 0x7f009000 {
                                                    return Some(Opcode::FMULX_Sn_Em16_Sd(
                                                        FMULX_Sn_Em16_Sd::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80f400 == 0x7f809000 {
                                                    return Some(Opcode::FMULX_Sd_Em_Sn(
                                                        FMULX_Sd_Em_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xff00f400 == 0x7f00d000 {
                                                return Some(Opcode::SQRDMLAH_Sd_Sn_Em16(
                                                    SQRDMLAH_Sd_Sn_Em16::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0xff00f400 == 0x7f00f000 {
                                            return Some(Opcode::SQRDMLSH_Em16_Sn_Sd(
                                                SQRDMLSH_Em16_Sn_Sd::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn >> 11 & 1 == 0 {
                                        if insn >> 12 & 1 == 0 {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0x7f008400 {
                                                    return Some(Opcode::SQSHRUN_Sd_Sn_IMM_VLSR(
                                                        SQSHRUN_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x7f00e400 {
                                                    return Some(Opcode::UCVTF_Sd_IMM_VLSR_Sn(
                                                        UCVTF_Sd_IMM_VLSR_Sn::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x7f10e400 {
                                                    return Some(
                                                        Opcode::UCVTF_Sd_S_H_IMM_VLSR_S_H_Sn_S_H(
                                                            UCVTF_Sd_S_H_IMM_VLSR_S_H_Sn_S_H::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f009400 {
                                                return Some(Opcode::UQSHRN_Sd_Sn_IMM_VLSR(
                                                    UQSHRN_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn >> 12 & 1 == 0 {
                                            if insn & 0xff80fc00 == 0x7f008c00 {
                                                return Some(Opcode::SQRSHRUN_Sn_Sd_IMM_VLSR(
                                                    SQRSHRUN_Sn_Sd_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn >> 13 & 1 == 0 {
                                                if insn & 0xff80fc00 == 0x7f009c00 {
                                                    return Some(Opcode::UQRSHRN_IMM_VLSR_Sd_Sn(
                                                        UQRSHRN_IMM_VLSR_Sd_Sn::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x7f00fc00 {
                                                    return Some(Opcode::FCVTZU_Sd_Sn_IMM_VLSR(
                                                        FCVTZU_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x7f10fc00 {
                                                    return Some(Opcode::FCVTZU_IMM_VLSR_Sd_Sn(
                                                        FCVTZU_IMM_VLSR_Sd_Sn::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}
