#![allow(non_snake_case, non_camel_case_types)]
#![allow(clippy::collapsible_else_if)]
#![allow(clippy::upper_case_acronyms)]
#![allow(dead_code)]
use bitfield_struct::bitfield;
pub trait InsnOpcode {
    const OPCODE: u32;
    const MASK: u32;
    const MNEMONIC: &'static str;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ABS_Rd_Rn {
    const OPCODE: u32 = 0x5ac02000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "abs";
}
impl InsnOpcode for ABS_Rd_Rn {
    const OPCODE: u32 = ABS_Rd_Rn::OPCODE;
    const MASK: u32 = ABS_Rd_Rn::MASK;
    const MNEMONIC: &'static str = ABS_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x416a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "abs";
}
impl InsnOpcode for ABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = ABS_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = ABS_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ABS_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ABS_Vd_Vn {
    const OPCODE: u32 = 0xe20b800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "abs";
}
impl InsnOpcode for ABS_Vd_Vn {
    const OPCODE: u32 = ABS_Vd_Vn::OPCODE;
    const MASK: u32 = ABS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = ABS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ABS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ABS_Sd_Sn {
    const OPCODE: u32 = 0x5e20b800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "abs";
}
impl InsnOpcode for ABS_Sd_Sn {
    const OPCODE: u32 = ABS_Sd_Sn::OPCODE;
    const MASK: u32 = ABS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = ABS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADC_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADC_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1a000000;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "adc";
}
impl InsnOpcode for ADC_Rd_Rn_Rm {
    const OPCODE: u32 = ADC_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = ADC_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = ADC_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500d000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "adclb";
}
impl InsnOpcode for ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500d400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "adclt";
}
impl InsnOpcode for ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADCS_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADCS_Rd_Rn_Rm {
    const OPCODE: u32 = 0x3a000000;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "adcs";
}
impl InsnOpcode for ADCS_Rd_Rn_Rm {
    const OPCODE: u32 = ADCS_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = ADCS_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = ADCS_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201810;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = 0xc1301810;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::OPCODE;
    const MASK: u32 = ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MASK;
    const MNEMONIC: &'static str = ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01810;
    const MASK: u32 = 0xffa19c38;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11810;
    const MASK: u32 = 0xffa39c78;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl ADD_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c10;
    const MASK: u32 = 0xffbf9c38;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = ADD_SME_ZA_array_off3_0_SME_Znx2::OPCODE;
    const MASK: u32 = ADD_SME_ZA_array_off3_0_SME_Znx2::MASK;
    const MNEMONIC: &'static str = ADD_SME_ZA_array_off3_0_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl ADD_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11c10;
    const MASK: u32 = 0xffbf9c78;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = ADD_SME_ZA_array_off3_0_SME_Znx4::OPCODE;
    const MASK: u32 = ADD_SME_ZA_array_off3_0_SME_Znx4::MASK;
    const MNEMONIC: &'static str = ADD_SME_ZA_array_off3_0_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a300;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120ab00;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Rd_SP_Rn_SP_AIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl ADD_Rd_SP_Rn_SP_AIMM {
    const OPCODE: u32 = 0x11000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_Rd_SP_Rn_SP_AIMM {
    const OPCODE: u32 = ADD_Rd_SP_Rn_SP_AIMM::OPCODE;
    const MASK: u32 = ADD_Rd_SP_Rn_SP_AIMM::MASK;
    const MNEMONIC: &'static str = ADD_Rd_SP_Rn_SP_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ADD_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0xb000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = ADD_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = ADD_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = ADD_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Rd_SP_Rn_SP_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ADD_Rd_SP_Rn_SP_Rm_EXT {
    const OPCODE: u32 = 0xb200000;
    const MASK: u32 = 0x7fe00000;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_Rd_SP_Rn_SP_Rm_EXT {
    const OPCODE: u32 = ADD_Rd_SP_Rn_SP_Rm_EXT::OPCODE;
    const MASK: u32 = ADD_Rd_SP_Rn_SP_Rm_EXT::MASK;
    const MNEMONIC: &'static str = ADD_Rd_SP_Rn_SP_Rm_EXT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4000000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4200000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ADD_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl ADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2520c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = ADD_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = ADD_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = ADD_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe208400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_Vd_Vn_Vm {
    const OPCODE: u32 = ADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADD_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADD_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee08400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "add";
}
impl InsnOpcode for ADD_Sd_Sn_Sm {
    const OPCODE: u32 = ADD_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = ADD_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = ADD_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(4)]
    pub imm4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG {
    const OPCODE: u32 = 0x91800000;
    const MASK: u32 = 0xffc0c000;
    const MNEMONIC: &'static str = "addg";
}
impl InsnOpcode for ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG {
    const OPCODE: u32 = ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::OPCODE;
    const MASK: u32 = ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::MASK;
    const MNEMONIC: &'static str = ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = 0xc0900000;
    const MASK: u32 = 0xffff001c;
    const MNEMONIC: &'static str = "addha";
}
impl InsnOpcode for ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn::OPCODE;
    const MASK: u32 = ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = 0xc0d00000;
    const MASK: u32 = 0xffff0018;
    const MNEMONIC: &'static str = "addha";
}
impl InsnOpcode for ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn::OPCODE;
    const MASK: u32 = ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDHN_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe204000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "addhn";
}
impl InsnOpcode for ADDHN_Vd_Vn_Vm {
    const OPCODE: u32 = ADDHN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ADDHN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ADDHN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDHN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e204000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "addhn2";
}
impl InsnOpcode for ADDHN2_Vd_Vn_Vm {
    const OPCODE: u32 = ADDHN2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ADDHN2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ADDHN2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "addhnb";
}
impl InsnOpcode for ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45206400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "addhnt";
}
impl InsnOpcode for ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4411a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "addp";
}
impl InsnOpcode for ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDP_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20bc00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "addp";
}
impl InsnOpcode for ADDP_Vd_Vn_Vm {
    const OPCODE: u32 = ADDP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ADDP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ADDP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ADDP_Sd_Vn {
    const OPCODE: u32 = 0x5e31b800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "addp";
}
impl InsnOpcode for ADDP_Sd_Vn {
    const OPCODE: u32 = ADDP_Sd_Vn::OPCODE;
    const MASK: u32 = ADDP_Sd_Vn::MASK;
    const MNEMONIC: &'static str = ADDP_Sd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = 0x4605000;
    const MASK: u32 = 0xffe0f800;
    const MNEMONIC: &'static str = "addpl";
}
impl InsnOpcode for ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::OPCODE;
    const MASK: u32 = ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MASK;
    const MNEMONIC: &'static str = ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ADDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4052000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "addqv";
}
impl InsnOpcode for ADDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = ADDQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = ADDQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ADDQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDS_Rd_Rn_SP_AIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl ADDS_Rd_Rn_SP_AIMM {
    const OPCODE: u32 = 0x31000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "adds";
}
impl InsnOpcode for ADDS_Rd_Rn_SP_AIMM {
    const OPCODE: u32 = ADDS_Rd_Rn_SP_AIMM::OPCODE;
    const MASK: u32 = ADDS_Rd_Rn_SP_AIMM::MASK;
    const MNEMONIC: &'static str = ADDS_Rd_Rn_SP_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDS_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ADDS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x2b000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "adds";
}
impl InsnOpcode for ADDS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = ADDS_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = ADDS_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = ADDS_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDS_Rd_Rn_SP_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ADDS_Rd_Rn_SP_Rm_EXT {
    const OPCODE: u32 = 0x2b200000;
    const MASK: u32 = 0x7fe00000;
    const MNEMONIC: &'static str = "adds";
}
impl InsnOpcode for ADDS_Rd_Rn_SP_Rm_EXT {
    const OPCODE: u32 = ADDS_Rd_Rn_SP_Rm_EXT::OPCODE;
    const MASK: u32 = ADDS_Rd_Rn_SP_Rm_EXT::MASK;
    const MNEMONIC: &'static str = ADDS_Rd_Rn_SP_Rm_EXT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = 0x4605800;
    const MASK: u32 = 0xffe0f800;
    const MNEMONIC: &'static str = "addspl";
}
impl InsnOpcode for ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::OPCODE;
    const MASK: u32 = ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MASK;
    const MNEMONIC: &'static str = ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = 0x4205800;
    const MASK: u32 = 0xffe0f800;
    const MNEMONIC: &'static str = "addsvl";
}
impl InsnOpcode for ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::OPCODE;
    const MASK: u32 = ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MASK;
    const MNEMONIC: &'static str = ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ADDV_Fd_Vn {
    const OPCODE: u32 = 0xe31b800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "addv";
}
impl InsnOpcode for ADDV_Fd_Vn {
    const OPCODE: u32 = ADDV_Fd_Vn::OPCODE;
    const MASK: u32 = ADDV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = ADDV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = 0xc0910000;
    const MASK: u32 = 0xffff001c;
    const MNEMONIC: &'static str = "addva";
}
impl InsnOpcode for ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn::OPCODE;
    const MASK: u32 = ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = 0xc0d10000;
    const MASK: u32 = 0xffff0018;
    const MNEMONIC: &'static str = "addva";
}
impl InsnOpcode for ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn {
    const OPCODE: u32 = ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn::OPCODE;
    const MASK: u32 = ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(5)]
    pub _op_11: u32,
    #[bits(5)]
    pub sve_rn: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = 0x4205000;
    const MASK: u32 = 0xffe0f800;
    const MNEMONIC: &'static str = "addvl";
}
impl InsnOpcode for ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 {
    const OPCODE: u32 = ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::OPCODE;
    const MASK: u32 = ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MASK;
    const MNEMONIC: &'static str = ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_Rd_ADDR_PCREL21 {
    #[bits(5)]
    pub rd: u32,
    #[bits(19)]
    pub immhi: u32,
    #[bits(5)]
    pub _op_24: u32,
    #[bits(2)]
    pub immlo: u32,
    #[bits(1)]
    pub _op_31: u32,
}
impl ADR_Rd_ADDR_PCREL21 {
    const OPCODE: u32 = 0x10000000;
    const MASK: u32 = 0x9f000000;
    const MNEMONIC: &'static str = "adr";
}
impl InsnOpcode for ADR_Rd_ADDR_PCREL21 {
    const OPCODE: u32 = ADR_Rd_ADDR_PCREL21::OPCODE;
    const MASK: u32 = ADR_Rd_ADDR_PCREL21::MASK;
    const MNEMONIC: &'static str = ADR_Rd_ADDR_PCREL21::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW {
    const OPCODE: u32 = 0x420a000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "adr";
}
impl InsnOpcode for ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW {
    const OPCODE: u32 = ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW::OPCODE;
    const MASK: u32 = ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW::MASK;
    const MNEMONIC: &'static str = ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW {
    const OPCODE: u32 = 0x460a000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "adr";
}
impl InsnOpcode for ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW {
    const OPCODE: u32 = ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW::OPCODE;
    const MASK: u32 = ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW::MASK;
    const MNEMONIC: &'static str = ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADR_SVE_Zd_SVE_ADDR_ZZ_LSL {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ADR_SVE_Zd_SVE_ADDR_ZZ_LSL {
    const OPCODE: u32 = 0x4a0a000;
    const MASK: u32 = 0xffa0f000;
    const MNEMONIC: &'static str = "adr";
}
impl InsnOpcode for ADR_SVE_Zd_SVE_ADDR_ZZ_LSL {
    const OPCODE: u32 = ADR_SVE_Zd_SVE_ADDR_ZZ_LSL::OPCODE;
    const MASK: u32 = ADR_SVE_Zd_SVE_ADDR_ZZ_LSL::MASK;
    const MNEMONIC: &'static str = ADR_SVE_Zd_SVE_ADDR_ZZ_LSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ADRP_Rd_ADDR_ADRP {
    #[bits(5)]
    pub rd: u32,
    #[bits(19)]
    pub immhi: u32,
    #[bits(5)]
    pub _op_24: u32,
    #[bits(2)]
    pub immlo: u32,
    #[bits(1)]
    pub _op_31: u32,
}
impl ADRP_Rd_ADDR_ADRP {
    const OPCODE: u32 = 0x90000000;
    const MASK: u32 = 0x9f000000;
    const MNEMONIC: &'static str = "adrp";
}
impl InsnOpcode for ADRP_Rd_ADDR_ADRP {
    const OPCODE: u32 = ADRP_Rd_ADDR_ADRP::OPCODE;
    const MASK: u32 = ADRP_Rd_ADDR_ADRP::MASK;
    const MNEMONIC: &'static str = ADRP_Rd_ADDR_ADRP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESD_SVE_Zd_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AESD_SVE_Zd_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4522e400;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "aesd";
}
impl InsnOpcode for AESD_SVE_Zd_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = AESD_SVE_Zd_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = AESD_SVE_Zd_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = AESD_SVE_Zd_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESD_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AESD_Vd_Vn {
    const OPCODE: u32 = 0x4e285800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "aesd";
}
impl InsnOpcode for AESD_Vd_Vn {
    const OPCODE: u32 = AESD_Vd_Vn::OPCODE;
    const MASK: u32 = AESD_Vd_Vn::MASK;
    const MNEMONIC: &'static str = AESD_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESE_SVE_Zd_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AESE_SVE_Zd_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4522e000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "aese";
}
impl InsnOpcode for AESE_SVE_Zd_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = AESE_SVE_Zd_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = AESE_SVE_Zd_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = AESE_SVE_Zd_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AESE_Vd_Vn {
    const OPCODE: u32 = 0x4e284800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "aese";
}
impl InsnOpcode for AESE_Vd_Vn {
    const OPCODE: u32 = AESE_Vd_Vn::OPCODE;
    const MASK: u32 = AESE_Vd_Vn::MASK;
    const MNEMONIC: &'static str = AESE_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESIMC_SVE_Zd_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl AESIMC_SVE_Zd_SVE_Zd {
    const OPCODE: u32 = 0x4520e400;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "aesimc";
}
impl InsnOpcode for AESIMC_SVE_Zd_SVE_Zd {
    const OPCODE: u32 = AESIMC_SVE_Zd_SVE_Zd::OPCODE;
    const MASK: u32 = AESIMC_SVE_Zd_SVE_Zd::MASK;
    const MNEMONIC: &'static str = AESIMC_SVE_Zd_SVE_Zd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESIMC_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AESIMC_Vd_Vn {
    const OPCODE: u32 = 0x4e287800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "aesimc";
}
impl InsnOpcode for AESIMC_Vd_Vn {
    const OPCODE: u32 = AESIMC_Vd_Vn::OPCODE;
    const MASK: u32 = AESIMC_Vd_Vn::MASK;
    const MNEMONIC: &'static str = AESIMC_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESMC_SVE_Zd_SVE_Zd {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl AESMC_SVE_Zd_SVE_Zd {
    const OPCODE: u32 = 0x4520e000;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "aesmc";
}
impl InsnOpcode for AESMC_SVE_Zd_SVE_Zd {
    const OPCODE: u32 = AESMC_SVE_Zd_SVE_Zd::OPCODE;
    const MASK: u32 = AESMC_SVE_Zd_SVE_Zd::MASK;
    const MNEMONIC: &'static str = AESMC_SVE_Zd_SVE_Zd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AESMC_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AESMC_Vd_Vn {
    const OPCODE: u32 = 0x4e286800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "aesmc";
}
impl InsnOpcode for AESMC_Vd_Vn {
    const OPCODE: u32 = AESMC_Vd_Vn::OPCODE;
    const MASK: u32 = AESMC_Vd_Vn::MASK;
    const MNEMONIC: &'static str = AESMC_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_Rd_SP_Rn_LIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl AND_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = 0x12000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = AND_Rd_SP_Rn_LIMM::OPCODE;
    const MASK: u32 = AND_Rd_SP_Rn_LIMM::MASK;
    const MNEMONIC: &'static str = AND_Rd_SP_Rn_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AND_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0xa000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = AND_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = AND_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = AND_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x41a0000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl AND_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4203000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = AND_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = AND_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = AND_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Zd_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl AND_SVE_Zd_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5800000;
    const MASK: u32 = 0xfffc0000;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_SVE_Zd_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = AND_SVE_Zd_SVE_Zd_SVE_LIMM::OPCODE;
    const MASK: u32 = AND_SVE_Zd_SVE_Zd_SVE_LIMM::MASK;
    const MNEMONIC: &'static str = AND_SVE_Zd_SVE_Zd_SVE_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25004000;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AND_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl AND_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe201c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "and";
}
impl InsnOpcode for AND_Vd_Vn_Vm {
    const OPCODE: u32 = AND_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = AND_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = AND_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ANDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41e2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "andqv";
}
impl InsnOpcode for ANDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = ANDQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = ANDQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ANDQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDS_Rd_Rn_LIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl ANDS_Rd_Rn_LIMM {
    const OPCODE: u32 = 0x72000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "ands";
}
impl InsnOpcode for ANDS_Rd_Rn_LIMM {
    const OPCODE: u32 = ANDS_Rd_Rn_LIMM::OPCODE;
    const MASK: u32 = ANDS_Rd_Rn_LIMM::MASK;
    const MNEMONIC: &'static str = ANDS_Rd_Rn_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDS_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ANDS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x6a000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "ands";
}
impl InsnOpcode for ANDS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = ANDS_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = ANDS_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = ANDS_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25404000;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "ands";
}
impl InsnOpcode for ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ANDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ANDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41a2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "andv";
}
impl InsnOpcode for ANDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = ANDV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = ANDV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ANDV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = 0x4008000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "asr";
}
impl InsnOpcode for ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::OPCODE;
    const MASK: u32 = ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MASK;
    const MNEMONIC: &'static str = ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4108000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "asr";
}
impl InsnOpcode for ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    const OPCODE: u32 = 0x4188000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "asr";
}
impl InsnOpcode for ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    const OPCODE: u32 = ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::OPCODE;
    const MASK: u32 = ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::MASK;
    const MNEMONIC: &'static str = ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ASR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4208000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "asr";
}
impl InsnOpcode for ASR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ASR_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ASR_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ASR_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4209000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "asr";
}
impl InsnOpcode for ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = 0x4048000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "asrd";
}
impl InsnOpcode for ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::OPCODE;
    const MASK: u32 = ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MASK;
    const MNEMONIC: &'static str = ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4148000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "asrr";
}
impl InsnOpcode for ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ASRV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ASRV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02800;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "asrv";
}
impl InsnOpcode for ASRV_Rd_Rn_Rm {
    const OPCODE: u32 = ASRV_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = ASRV_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = ASRV_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDA_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AUTDA_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac11800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "autda";
}
impl InsnOpcode for AUTDA_Rd_Rn_SP {
    const OPCODE: u32 = AUTDA_Rd_Rn_SP::OPCODE;
    const MASK: u32 = AUTDA_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = AUTDA_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDB_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AUTDB_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac11c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "autdb";
}
impl InsnOpcode for AUTDB_Rd_Rn_SP {
    const OPCODE: u32 = AUTDB_Rd_Rn_SP::OPCODE;
    const MASK: u32 = AUTDB_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = AUTDB_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl AUTDZA_Rd {
    const OPCODE: u32 = 0xdac13be0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "autdza";
}
impl InsnOpcode for AUTDZA_Rd {
    const OPCODE: u32 = AUTDZA_Rd::OPCODE;
    const MASK: u32 = AUTDZA_Rd::MASK;
    const MNEMONIC: &'static str = AUTDZA_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTDZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl AUTDZB_Rd {
    const OPCODE: u32 = 0xdac13fe0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "autdzb";
}
impl InsnOpcode for AUTDZB_Rd {
    const OPCODE: u32 = AUTDZB_Rd::OPCODE;
    const MASK: u32 = AUTDZB_Rd::MASK;
    const MNEMONIC: &'static str = AUTDZB_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIA_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AUTIA_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac11000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "autia";
}
impl InsnOpcode for AUTIA_Rd_Rn_SP {
    const OPCODE: u32 = AUTIA_Rd_Rn_SP::OPCODE;
    const MASK: u32 = AUTIA_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = AUTIA_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIB_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl AUTIB_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac11400;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "autib";
}
impl InsnOpcode for AUTIB_Rd_Rn_SP {
    const OPCODE: u32 = AUTIB_Rd_Rn_SP::OPCODE;
    const MASK: u32 = AUTIB_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = AUTIB_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl AUTIZA_Rd {
    const OPCODE: u32 = 0xdac133e0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "autiza";
}
impl InsnOpcode for AUTIZA_Rd {
    const OPCODE: u32 = AUTIZA_Rd::OPCODE;
    const MASK: u32 = AUTIZA_Rd::MASK;
    const MNEMONIC: &'static str = AUTIZA_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AUTIZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl AUTIZB_Rd {
    const OPCODE: u32 = 0xdac137e0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "autizb";
}
impl InsnOpcode for AUTIZB_Rd {
    const OPCODE: u32 = AUTIZB_Rd::OPCODE;
    const MASK: u32 = AUTIZB_Rd::MASK;
    const MNEMONIC: &'static str = AUTIZB_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct AXFLAG {
    #[bits(32)]
    pub _op_0: u32,
}
impl AXFLAG {
    const OPCODE: u32 = 0xd500405f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "axflag";
}
impl InsnOpcode for AXFLAG {
    const OPCODE: u32 = AXFLAG::OPCODE;
    const MASK: u32 = AXFLAG::MASK;
    const MNEMONIC: &'static str = AXFLAG::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct B_ADDR_PCREL26 {
    #[bits(26)]
    pub imm26: u32,
    #[bits(6)]
    pub _op_26: u32,
}
impl B_ADDR_PCREL26 {
    const OPCODE: u32 = 0x14000000;
    const MASK: u32 = 0xfc000000;
    const MNEMONIC: &'static str = "b";
}
impl InsnOpcode for B_ADDR_PCREL26 {
    const OPCODE: u32 = B_ADDR_PCREL26::OPCODE;
    const MASK: u32 = B_ADDR_PCREL26::MASK;
    const MNEMONIC: &'static str = B_ADDR_PCREL26::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct B_C_ADDR_PCREL19 {
    #[bits(4)]
    pub cond: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl B_C_ADDR_PCREL19 {
    const OPCODE: u32 = 0x54000000;
    const MASK: u32 = 0xff000010;
    const MNEMONIC: &'static str = "b.c";
}
impl InsnOpcode for B_C_ADDR_PCREL19 {
    const OPCODE: u32 = B_C_ADDR_PCREL19::OPCODE;
    const MASK: u32 = B_C_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = B_C_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BC_C_ADDR_PCREL19 {
    #[bits(4)]
    pub cond: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl BC_C_ADDR_PCREL19 {
    const OPCODE: u32 = 0x54000010;
    const MASK: u32 = 0xff000010;
    const MNEMONIC: &'static str = "bc.c";
}
impl InsnOpcode for BC_C_ADDR_PCREL19 {
    const OPCODE: u32 = BC_C_ADDR_PCREL19::OPCODE;
    const MASK: u32 = BC_C_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = BC_C_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4603800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bcax";
}
impl InsnOpcode for BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::OPCODE;
    const MASK: u32 = BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MASK;
    const MNEMONIC: &'static str = BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BCAX_Vd_Vn_Vm_Va {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BCAX_Vd_Vn_Vm_Va {
    const OPCODE: u32 = 0xce200000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "bcax";
}
impl InsnOpcode for BCAX_Vd_Vn_Vm_Va {
    const OPCODE: u32 = BCAX_Vd_Vn_Vm_Va::OPCODE;
    const MASK: u32 = BCAX_Vd_Vn_Vm_Va::MASK;
    const MNEMONIC: &'static str = BCAX_Vd_Vn_Vm_Va::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500b400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "bdep";
}
impl InsnOpcode for BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500b000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "bext";
}
impl InsnOpcode for BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfadd";
}
impl InsnOpcode for BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65008000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfadd";
}
impl InsnOpcode for BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64202400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfclamp";
}
impl InsnOpcode for BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BFCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc160e000;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "bfcvt";
}
impl InsnOpcode for BFCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = BFCVT_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = BFCVT_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = BFCVT_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x658aa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfcvt";
}
impl InsnOpcode for BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVT_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BFCVT_Fd_Fn {
    const OPCODE: u32 = 0x1e634000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "bfcvt";
}
impl InsnOpcode for BFCVT_Fd_Fn {
    const OPCODE: u32 = BFCVT_Fd_Fn::OPCODE;
    const MASK: u32 = BFCVT_Fd_Fn::MASK;
    const MNEMONIC: &'static str = BFCVT_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BFCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc160e020;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "bfcvtn";
}
impl InsnOpcode for BFCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = BFCVTN_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = BFCVTN_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = BFCVTN_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BFCVTN_Vd_Vn {
    const OPCODE: u32 = 0xea16800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "bfcvtn";
}
impl InsnOpcode for BFCVTN_Vd_Vn {
    const OPCODE: u32 = BFCVTN_Vd_Vn::OPCODE;
    const MASK: u32 = BFCVTN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = BFCVTN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BFCVTN2_Vd_Vn {
    const OPCODE: u32 = 0x4ea16800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "bfcvtn2";
}
impl InsnOpcode for BFCVTN2_Vd_Vn {
    const OPCODE: u32 = BFCVTN2_Vd_Vn::OPCODE;
    const MASK: u32 = BFCVTN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = BFCVTN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x648aa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfcvtnt";
}
impl InsnOpcode for BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501018;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509018;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201010;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1301010;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01010;
    const MASK: u32 = 0xffe19c38;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11010;
    const MASK: u32 = 0xffe39c78;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x64604000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64608000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e40fc00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_Vd_Vn_Vm {
    const OPCODE: u32 = BFDOT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BFDOT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BFDOT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFDOT_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFDOT_Vd_Vn_Em {
    const OPCODE: u32 = 0xf40f000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "bfdot";
}
impl InsnOpcode for BFDOT_Vd_Vn_Em {
    const OPCODE: u32 = BFDOT_Vd_Vn_Em::OPCODE;
    const MASK: u32 = BFDOT_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = BFDOT_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFM_Rd_Rn_IMMR_IMMS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl BFM_Rd_Rn_IMMR_IMMS {
    const OPCODE: u32 = 0x33000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "bfm";
}
impl InsnOpcode for BFM_Rd_Rn_IMMR_IMMS {
    const OPCODE: u32 = BFM_Rd_Rn_IMMR_IMMS::OPCODE;
    const MASK: u32 = BFM_Rd_Rn_IMMR_IMMS::MASK;
    const MNEMONIC: &'static str = BFM_Rd_Rn_IMMR_IMMS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65068000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfmax";
}
impl InsnOpcode for BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65048000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfmaxnm";
}
impl InsnOpcode for BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65078000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfmin";
}
impl InsnOpcode for BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65058000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfminnm";
}
impl InsnOpcode for BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64200800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "bfmla";
}
impl InsnOpcode for BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65200000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "bfmla";
}
impl InsnOpcode for BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1801010;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1901010;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1909010;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200810;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1300810;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00810;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10810;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200c10;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "bfmlal";
}
impl InsnOpcode for BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64e04000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "bfmlalb";
}
impl InsnOpcode for BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64e08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmlalb";
}
impl InsnOpcode for BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALB_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec0fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmlalb";
}
impl InsnOpcode for BFMLALB_Vd_Vn_Vm {
    const OPCODE: u32 = BFMLALB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BFMLALB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BFMLALB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALB_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALB_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xfc0f000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "bfmlalb";
}
impl InsnOpcode for BFMLALB_Vd_Vn_Em16 {
    const OPCODE: u32 = BFMLALB_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = BFMLALB_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = BFMLALB_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64e04400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "bfmlalt";
}
impl InsnOpcode for BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64e08400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmlalt";
}
impl InsnOpcode for BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6ec0fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmlalt";
}
impl InsnOpcode for BFMLALT_Vd_Vn_Vm {
    const OPCODE: u32 = BFMLALT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BFMLALT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BFMLALT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLALT_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLALT_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4fc0f000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "bfmlalt";
}
impl InsnOpcode for BFMLALT_Vd_Vn_Em16 {
    const OPCODE: u32 = BFMLALT_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = BFMLALT_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = BFMLALT_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64200c00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "bfmls";
}
impl InsnOpcode for BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65202000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "bfmls";
}
impl InsnOpcode for BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1801018;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1901018;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1909018;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200818;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1300818;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00818;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10818;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200c18;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "bfmlsl";
}
impl InsnOpcode for BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64e0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmlslb";
}
impl InsnOpcode for BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64e06000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "bfmlslb";
}
impl InsnOpcode for BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64e0a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmlslt";
}
impl InsnOpcode for BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64e06400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "bfmlslt";
}
impl InsnOpcode for BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x6460e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmmla";
}
impl InsnOpcode for BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMMLA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e40ec00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmmla";
}
impl InsnOpcode for BFMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = BFMMLA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BFMMLA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BFMMLA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x81800000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "bfmopa";
}
impl InsnOpcode for BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x81800010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "bfmops";
}
impl InsnOpcode for BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64202800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "bfmul";
}
impl InsnOpcode for BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfmul";
}
impl InsnOpcode for BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65028000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfmul";
}
impl InsnOpcode for BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bfsub";
}
impl InsnOpcode for BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65018000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "bfsub";
}
impl InsnOpcode for BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500018;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "bfvdot";
}
impl InsnOpcode for BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500b800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "bgrp";
}
impl InsnOpcode for BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BIC_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0xa200000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = BIC_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = BIC_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = BIC_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x41b0000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BIC_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4e03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BIC_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BIC_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BIC_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25004010;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BIC_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe601c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_Vd_Vn_Vm {
    const OPCODE: u32 = BIC_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BIC_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BIC_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl BIC_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0x2f001400;
    const MASK: u32 = 0xbff89c00;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = BIC_Vd_SIMD_IMM_SFT::OPCODE;
    const MASK: u32 = BIC_Vd_SIMD_IMM_SFT::MASK;
    const MNEMONIC: &'static str = BIC_Vd_SIMD_IMM_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIC_Vd_V_4H_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl BIC_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0x2f009400;
    const MASK: u32 = 0xbff8dc00;
    const MNEMONIC: &'static str = "bic";
}
impl InsnOpcode for BIC_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = BIC_Vd_V_4H_SIMD_IMM_SFT_LSL::OPCODE;
    const MASK: u32 = BIC_Vd_V_4H_SIMD_IMM_SFT_LSL::MASK;
    const MNEMONIC: &'static str = BIC_Vd_V_4H_SIMD_IMM_SFT_LSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BICS_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BICS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x6a200000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "bics";
}
impl InsnOpcode for BICS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = BICS_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = BICS_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = BICS_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25404010;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "bics";
}
impl InsnOpcode for BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIF_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BIF_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ee01c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "bif";
}
impl InsnOpcode for BIF_Vd_Vn_Vm {
    const OPCODE: u32 = BIF_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BIF_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BIF_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BIT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BIT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ea01c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "bit";
}
impl InsnOpcode for BIT_Vd_Vn_Vm {
    const OPCODE: u32 = BIT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BIT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BIT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BL_ADDR_PCREL26 {
    #[bits(26)]
    pub imm26: u32,
    #[bits(6)]
    pub _op_26: u32,
}
impl BL_ADDR_PCREL26 {
    const OPCODE: u32 = 0x94000000;
    const MASK: u32 = 0xfc000000;
    const MNEMONIC: &'static str = "bl";
}
impl InsnOpcode for BL_ADDR_PCREL26 {
    const OPCODE: u32 = BL_ADDR_PCREL26::OPCODE;
    const MASK: u32 = BL_ADDR_PCREL26::MASK;
    const MNEMONIC: &'static str = BL_ADDR_PCREL26::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLR_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BLR_Rn {
    const OPCODE: u32 = 0xd63f0000;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "blr";
}
impl InsnOpcode for BLR_Rn {
    const OPCODE: u32 = BLR_Rn::OPCODE;
    const MASK: u32 = BLR_Rn::MASK;
    const MNEMONIC: &'static str = BLR_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRAA_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BLRAA_Rn_Rd_SP {
    const OPCODE: u32 = 0xd73f0800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "blraa";
}
impl InsnOpcode for BLRAA_Rn_Rd_SP {
    const OPCODE: u32 = BLRAA_Rn_Rd_SP::OPCODE;
    const MASK: u32 = BLRAA_Rn_Rd_SP::MASK;
    const MNEMONIC: &'static str = BLRAA_Rn_Rd_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRAAZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BLRAAZ_Rn {
    const OPCODE: u32 = 0xd63f081f;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "blraaz";
}
impl InsnOpcode for BLRAAZ_Rn {
    const OPCODE: u32 = BLRAAZ_Rn::OPCODE;
    const MASK: u32 = BLRAAZ_Rn::MASK;
    const MNEMONIC: &'static str = BLRAAZ_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRAB_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BLRAB_Rn_Rd_SP {
    const OPCODE: u32 = 0xd73f0c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "blrab";
}
impl InsnOpcode for BLRAB_Rn_Rd_SP {
    const OPCODE: u32 = BLRAB_Rn_Rd_SP::OPCODE;
    const MASK: u32 = BLRAB_Rn_Rd_SP::MASK;
    const MNEMONIC: &'static str = BLRAB_Rn_Rd_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BLRABZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BLRABZ_Rn {
    const OPCODE: u32 = 0xd63f0c1f;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "blrabz";
}
impl InsnOpcode for BLRABZ_Rn {
    const OPCODE: u32 = BLRABZ_Rn::OPCODE;
    const MASK: u32 = BLRABZ_Rn::MASK;
    const MNEMONIC: &'static str = BLRABZ_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800008;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "bmopa";
}
impl InsnOpcode for BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800018;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "bmops";
}
impl InsnOpcode for BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BR_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BR_Rn {
    const OPCODE: u32 = 0xd61f0000;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "br";
}
impl InsnOpcode for BR_Rn {
    const OPCODE: u32 = BR_Rn::OPCODE;
    const MASK: u32 = BR_Rn::MASK;
    const MNEMONIC: &'static str = BR_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRAA_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BRAA_Rn_Rd_SP {
    const OPCODE: u32 = 0xd71f0800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "braa";
}
impl InsnOpcode for BRAA_Rn_Rd_SP {
    const OPCODE: u32 = BRAA_Rn_Rd_SP::OPCODE;
    const MASK: u32 = BRAA_Rn_Rd_SP::MASK;
    const MNEMONIC: &'static str = BRAA_Rn_Rd_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRAAZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BRAAZ_Rn {
    const OPCODE: u32 = 0xd61f081f;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "braaz";
}
impl InsnOpcode for BRAAZ_Rn {
    const OPCODE: u32 = BRAAZ_Rn::OPCODE;
    const MASK: u32 = BRAAZ_Rn::MASK;
    const MNEMONIC: &'static str = BRAAZ_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRAB_Rn_Rd_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BRAB_Rn_Rd_SP {
    const OPCODE: u32 = 0xd71f0c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "brab";
}
impl InsnOpcode for BRAB_Rn_Rd_SP {
    const OPCODE: u32 = BRAB_Rn_Rd_SP::OPCODE;
    const MASK: u32 = BRAB_Rn_Rd_SP::MASK;
    const MNEMONIC: &'static str = BRAB_Rn_Rd_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRABZ_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl BRABZ_Rn {
    const OPCODE: u32 = 0xd61f0c1f;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "brabz";
}
impl InsnOpcode for BRABZ_Rn {
    const OPCODE: u32 = BRABZ_Rn::OPCODE;
    const MASK: u32 = BRABZ_Rn::MASK;
    const MNEMONIC: &'static str = BRABZ_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRK_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BRK_EXCEPTION {
    const OPCODE: u32 = 0xd4200000;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "brk";
}
impl InsnOpcode for BRK_EXCEPTION {
    const OPCODE: u32 = BRK_EXCEPTION::OPCODE;
    const MASK: u32 = BRK_EXCEPTION::MASK;
    const MNEMONIC: &'static str = BRK_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25104000;
    const MASK: u32 = 0xffffc200;
    const MNEMONIC: &'static str = "brka";
}
impl InsnOpcode for BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn::OPCODE;
    const MASK: u32 = BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn::MASK;
    const MNEMONIC: &'static str = BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25504000;
    const MASK: u32 = 0xffffc210;
    const MNEMONIC: &'static str = "brkas";
}
impl InsnOpcode for BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn::OPCODE;
    const MASK: u32 = BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn::MASK;
    const MNEMONIC: &'static str = BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25904000;
    const MASK: u32 = 0xffffc200;
    const MNEMONIC: &'static str = "brkb";
}
impl InsnOpcode for BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn::OPCODE;
    const MASK: u32 = BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn::MASK;
    const MNEMONIC: &'static str = BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25d04000;
    const MASK: u32 = 0xffffc210;
    const MNEMONIC: &'static str = "brkbs";
}
impl InsnOpcode for BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn::OPCODE;
    const MASK: u32 = BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn::MASK;
    const MNEMONIC: &'static str = BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = 0x25184000;
    const MASK: u32 = 0xffffc210;
    const MNEMONIC: &'static str = "brkn";
}
impl InsnOpcode for BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd::OPCODE;
    const MASK: u32 = BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd::MASK;
    const MNEMONIC: &'static str = BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = 0x25584000;
    const MASK: u32 = 0xffffc210;
    const MNEMONIC: &'static str = "brkns";
}
impl InsnOpcode for BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd {
    const OPCODE: u32 = BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd::OPCODE;
    const MASK: u32 = BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd::MASK;
    const MNEMONIC: &'static str = BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x2500c000;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "brkpa";
}
impl InsnOpcode for BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x2540c000;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "brkpas";
}
impl InsnOpcode for BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x2500c010;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "brkpb";
}
impl InsnOpcode for BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x2540c010;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "brkpbs";
}
impl InsnOpcode for BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4203c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bsl";
}
impl InsnOpcode for BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::OPCODE;
    const MASK: u32 = BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MASK;
    const MNEMONIC: &'static str = BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e601c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "bsl";
}
impl InsnOpcode for BSL_Vd_Vn_Vm {
    const OPCODE: u32 = BSL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = BSL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = BSL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4603c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bsl1n";
}
impl InsnOpcode for BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::OPCODE;
    const MASK: u32 = BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MASK;
    const MNEMONIC: &'static str = BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4a03c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "bsl2n";
}
impl InsnOpcode for BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::OPCODE;
    const MASK: u32 = BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MASK;
    const MNEMONIC: &'static str = BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub sve_rot3: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    const OPCODE: u32 = 0x4500d800;
    const MASK: u32 = 0xff3ff800;
    const MNEMONIC: &'static str = "cadd";
}
impl InsnOpcode for CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    const OPCODE: u32 = CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3::OPCODE;
    const MASK: u32 = CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3::MASK;
    const MNEMONIC: &'static str = CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CAS_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CAS_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88a07c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "cas";
}
impl InsnOpcode for CAS_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CAS_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CAS_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CAS_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88e07c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "casa";
}
impl InsnOpcode for CASA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8e07c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "casab";
}
impl InsnOpcode for CASAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48e07c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "casah";
}
impl InsnOpcode for CASAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88e0fc00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "casal";
}
impl InsnOpcode for CASAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8e0fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "casalb";
}
impl InsnOpcode for CASALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48e0fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "casalh";
}
impl InsnOpcode for CASALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8a07c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "casb";
}
impl InsnOpcode for CASB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48a07c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cash";
}
impl InsnOpcode for CASH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88a0fc00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "casl";
}
impl InsnOpcode for CASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8a0fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "caslb";
}
impl InsnOpcode for CASLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48a0fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "caslh";
}
impl InsnOpcode for CASLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = CASLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8207c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "casp";
}
impl InsnOpcode for CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8607c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "caspa";
}
impl InsnOpcode for CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x860fc00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "caspal";
}
impl InsnOpcode for CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x820fc00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "caspl";
}
impl InsnOpcode for CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CBNZ_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl CBNZ_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x35000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "cbnz";
}
impl InsnOpcode for CBNZ_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = CBNZ_Rt_ADDR_PCREL19::OPCODE;
    const MASK: u32 = CBNZ_Rt_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = CBNZ_Rt_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CBZ_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl CBZ_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x34000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "cbz";
}
impl InsnOpcode for CBZ_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = CBZ_Rt_ADDR_PCREL19::OPCODE;
    const MASK: u32 = CBZ_Rt_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = CBZ_Rt_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMN_Rn_Rm_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CCMN_Rn_Rm_NZCV_COND {
    const OPCODE: u32 = 0x3a400000;
    const MASK: u32 = 0x7fe00c10;
    const MNEMONIC: &'static str = "ccmn";
}
impl InsnOpcode for CCMN_Rn_Rm_NZCV_COND {
    const OPCODE: u32 = CCMN_Rn_Rm_NZCV_COND::OPCODE;
    const MASK: u32 = CCMN_Rn_Rm_NZCV_COND::MASK;
    const MNEMONIC: &'static str = CCMN_Rn_Rm_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMN_Rn_CCMP_IMM_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CCMN_Rn_CCMP_IMM_NZCV_COND {
    const OPCODE: u32 = 0x3a400800;
    const MASK: u32 = 0x7fe00c10;
    const MNEMONIC: &'static str = "ccmn";
}
impl InsnOpcode for CCMN_Rn_CCMP_IMM_NZCV_COND {
    const OPCODE: u32 = CCMN_Rn_CCMP_IMM_NZCV_COND::OPCODE;
    const MASK: u32 = CCMN_Rn_CCMP_IMM_NZCV_COND::MASK;
    const MNEMONIC: &'static str = CCMN_Rn_CCMP_IMM_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMP_Rn_Rm_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CCMP_Rn_Rm_NZCV_COND {
    const OPCODE: u32 = 0x7a400000;
    const MASK: u32 = 0x7fe00c10;
    const MNEMONIC: &'static str = "ccmp";
}
impl InsnOpcode for CCMP_Rn_Rm_NZCV_COND {
    const OPCODE: u32 = CCMP_Rn_Rm_NZCV_COND::OPCODE;
    const MASK: u32 = CCMP_Rn_Rm_NZCV_COND::MASK;
    const MNEMONIC: &'static str = CCMP_Rn_Rm_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CCMP_Rn_CCMP_IMM_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CCMP_Rn_CCMP_IMM_NZCV_COND {
    const OPCODE: u32 = 0x7a400800;
    const MASK: u32 = 0x7fe00c10;
    const MNEMONIC: &'static str = "ccmp";
}
impl InsnOpcode for CCMP_Rn_CCMP_IMM_NZCV_COND {
    const OPCODE: u32 = CCMP_Rn_CCMP_IMM_NZCV_COND::OPCODE;
    const MASK: u32 = CCMP_Rn_CCMP_IMM_NZCV_COND::MASK;
    const MNEMONIC: &'static str = CCMP_Rn_CCMP_IMM_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44801000;
    const MASK: u32 = 0xffa0f000;
    const MNEMONIC: &'static str = "cdot";
}
impl InsnOpcode for CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44a04000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "cdot";
}
impl InsnOpcode for CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44e04000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "cdot";
}
impl InsnOpcode for CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CFINV {
    #[bits(32)]
    pub _op_0: u32,
}
impl CFINV {
    const OPCODE: u32 = 0xd500401f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "cfinv";
}
impl InsnOpcode for CFINV {
    const OPCODE: u32 = CFINV::OPCODE;
    const MASK: u32 = CFINV::MASK;
    const MNEMONIC: &'static str = CFINV::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CHKFEAT_X16 {
    #[bits(32)]
    pub _op_0: u32,
}
impl CHKFEAT_X16 {
    const OPCODE: u32 = 0xd503251f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "chkfeat";
}
impl InsnOpcode for CHKFEAT_X16 {
    const OPCODE: u32 = CHKFEAT_X16::OPCODE;
    const MASK: u32 = CHKFEAT_X16::MASK;
    const MNEMONIC: &'static str = CHKFEAT_X16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x5288000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clasta";
}
impl InsnOpcode for CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    const OPCODE: u32 = 0x52a8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clasta";
}
impl InsnOpcode for CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    const OPCODE: u32 = CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::OPCODE;
    const MASK: u32 = CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5 {
    const OPCODE: u32 = 0x530a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clasta";
}
impl InsnOpcode for CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5 {
    const OPCODE: u32 = CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5::OPCODE;
    const MASK: u32 = CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x5298000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clastb";
}
impl InsnOpcode for CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    const OPCODE: u32 = 0x52b8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clastb";
}
impl InsnOpcode for CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    const OPCODE: u32 = CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::OPCODE;
    const MASK: u32 = CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5 {
    const OPCODE: u32 = 0x531a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clastb";
}
impl InsnOpcode for CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5 {
    const OPCODE: u32 = CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5::OPCODE;
    const MASK: u32 = CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLREX_UIMM4 {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl CLREX_UIMM4 {
    const OPCODE: u32 = 0xd503305f;
    const MASK: u32 = 0xfffff0ff;
    const MNEMONIC: &'static str = "clrex";
}
impl InsnOpcode for CLREX_UIMM4 {
    const OPCODE: u32 = CLREX_UIMM4::OPCODE;
    const MASK: u32 = CLREX_UIMM4::MASK;
    const MNEMONIC: &'static str = CLREX_UIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLS_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CLS_Rd_Rn {
    const OPCODE: u32 = 0x5ac01400;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "cls";
}
impl InsnOpcode for CLS_Rd_Rn {
    const OPCODE: u32 = CLS_Rd_Rn::OPCODE;
    const MASK: u32 = CLS_Rd_Rn::MASK;
    const MNEMONIC: &'static str = CLS_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLS_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x418a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "cls";
}
impl InsnOpcode for CLS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = CLS_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = CLS_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = CLS_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CLS_Vd_Vn {
    const OPCODE: u32 = 0xe204800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cls";
}
impl InsnOpcode for CLS_Vd_Vn {
    const OPCODE: u32 = CLS_Vd_Vn::OPCODE;
    const MASK: u32 = CLS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = CLS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLZ_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CLZ_Rd_Rn {
    const OPCODE: u32 = 0x5ac01000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "clz";
}
impl InsnOpcode for CLZ_Rd_Rn {
    const OPCODE: u32 = CLZ_Rd_Rn::OPCODE;
    const MASK: u32 = CLZ_Rd_Rn::MASK;
    const MNEMONIC: &'static str = CLZ_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLZ_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CLZ_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x419a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "clz";
}
impl InsnOpcode for CLZ_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = CLZ_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = CLZ_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = CLZ_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CLZ_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CLZ_Vd_Vn {
    const OPCODE: u32 = 0x2e204800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "clz";
}
impl InsnOpcode for CLZ_Vd_Vn {
    const OPCODE: u32 = CLZ_Vd_Vn::OPCODE;
    const MASK: u32 = CLZ_Vd_Vn::MASK;
    const MNEMONIC: &'static str = CLZ_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMEQ_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0xe209800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cmeq";
}
impl InsnOpcode for CMEQ_Vd_Vn_IMM0 {
    const OPCODE: u32 = CMEQ_Vd_Vn_IMM0::OPCODE;
    const MASK: u32 = CMEQ_Vd_Vn_IMM0::MASK;
    const MNEMONIC: &'static str = CMEQ_Vd_Vn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMEQ_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e208c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "cmeq";
}
impl InsnOpcode for CMEQ_Vd_Vn_Vm {
    const OPCODE: u32 = CMEQ_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = CMEQ_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = CMEQ_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Sd_Sn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMEQ_Sd_Sn_IMM0 {
    const OPCODE: u32 = 0x5e209800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "cmeq";
}
impl InsnOpcode for CMEQ_Sd_Sn_IMM0 {
    const OPCODE: u32 = CMEQ_Sd_Sn_IMM0::OPCODE;
    const MASK: u32 = CMEQ_Sd_Sn_IMM0::MASK;
    const MNEMONIC: &'static str = CMEQ_Sd_Sn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMEQ_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMEQ_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee08c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cmeq";
}
impl InsnOpcode for CMEQ_Sd_Sn_Sm {
    const OPCODE: u32 = CMEQ_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = CMEQ_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = CMEQ_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMGE_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe203c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "cmge";
}
impl InsnOpcode for CMGE_Vd_Vn_Vm {
    const OPCODE: u32 = CMGE_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = CMGE_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = CMGE_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMGE_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0x2e208800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cmge";
}
impl InsnOpcode for CMGE_Vd_Vn_IMM0 {
    const OPCODE: u32 = CMGE_Vd_Vn_IMM0::OPCODE;
    const MASK: u32 = CMGE_Vd_Vn_IMM0::MASK;
    const MNEMONIC: &'static str = CMGE_Vd_Vn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Sd_Sn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMGE_Sd_Sn_IMM0 {
    const OPCODE: u32 = 0x7e208800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "cmge";
}
impl InsnOpcode for CMGE_Sd_Sn_IMM0 {
    const OPCODE: u32 = CMGE_Sd_Sn_IMM0::OPCODE;
    const MASK: u32 = CMGE_Sd_Sn_IMM0::MASK;
    const MNEMONIC: &'static str = CMGE_Sd_Sn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGE_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMGE_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee03c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cmge";
}
impl InsnOpcode for CMGE_Sd_Sn_Sm {
    const OPCODE: u32 = CMGE_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = CMGE_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = CMGE_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMGT_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe203400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "cmgt";
}
impl InsnOpcode for CMGT_Vd_Vn_Vm {
    const OPCODE: u32 = CMGT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = CMGT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = CMGT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMGT_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0xe208800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cmgt";
}
impl InsnOpcode for CMGT_Vd_Vn_IMM0 {
    const OPCODE: u32 = CMGT_Vd_Vn_IMM0::OPCODE;
    const MASK: u32 = CMGT_Vd_Vn_IMM0::MASK;
    const MNEMONIC: &'static str = CMGT_Vd_Vn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Sd_Sn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMGT_Sd_Sn_IMM0 {
    const OPCODE: u32 = 0x5e208800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "cmgt";
}
impl InsnOpcode for CMGT_Sd_Sn_IMM0 {
    const OPCODE: u32 = CMGT_Sd_Sn_IMM0::OPCODE;
    const MASK: u32 = CMGT_Sd_Sn_IMM0::MASK;
    const MNEMONIC: &'static str = CMGT_Sd_Sn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMGT_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMGT_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee03400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cmgt";
}
impl InsnOpcode for CMGT_Sd_Sn_Sm {
    const OPCODE: u32 = CMGT_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = CMGT_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = CMGT_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHI_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMHI_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e203400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "cmhi";
}
impl InsnOpcode for CMHI_Vd_Vn_Vm {
    const OPCODE: u32 = CMHI_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = CMHI_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = CMHI_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHI_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMHI_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee03400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cmhi";
}
impl InsnOpcode for CMHI_Sd_Sn_Sm {
    const OPCODE: u32 = CMHI_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = CMHI_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = CMHI_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMHS_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e203c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "cmhs";
}
impl InsnOpcode for CMHS_Vd_Vn_Vm {
    const OPCODE: u32 = CMHS_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = CMHS_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = CMHS_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMHS_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMHS_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee03c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cmhs";
}
impl InsnOpcode for CMHS_Sd_Sn_Sm {
    const OPCODE: u32 = CMHS_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = CMHS_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = CMHS_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44002000;
    const MASK: u32 = 0xff20f000;
    const MNEMONIC: &'static str = "cmla";
}
impl InsnOpcode for CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44a06000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "cmla";
}
impl InsnOpcode for CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44e06000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "cmla";
}
impl InsnOpcode for CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLE_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMLE_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0x2e209800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cmle";
}
impl InsnOpcode for CMLE_Vd_Vn_IMM0 {
    const OPCODE: u32 = CMLE_Vd_Vn_IMM0::OPCODE;
    const MASK: u32 = CMLE_Vd_Vn_IMM0::MASK;
    const MNEMONIC: &'static str = CMLE_Vd_Vn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLE_Sd_Sn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMLE_Sd_Sn_IMM0 {
    const OPCODE: u32 = 0x7e209800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "cmle";
}
impl InsnOpcode for CMLE_Sd_Sn_IMM0 {
    const OPCODE: u32 = CMLE_Sd_Sn_IMM0::OPCODE;
    const MASK: u32 = CMLE_Sd_Sn_IMM0::MASK;
    const MNEMONIC: &'static str = CMLE_Sd_Sn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLT_Vd_Vn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMLT_Vd_Vn_IMM0 {
    const OPCODE: u32 = 0xe20a800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cmlt";
}
impl InsnOpcode for CMLT_Vd_Vn_IMM0 {
    const OPCODE: u32 = CMLT_Vd_Vn_IMM0::OPCODE;
    const MASK: u32 = CMLT_Vd_Vn_IMM0::MASK;
    const MNEMONIC: &'static str = CMLT_Vd_Vn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMLT_Sd_Sn_IMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CMLT_Sd_Sn_IMM0 {
    const OPCODE: u32 = 0x5e20a800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "cmlt";
}
impl InsnOpcode for CMLT_Sd_Sn_IMM0 {
    const OPCODE: u32 = CMLT_Sd_Sn_IMM0::OPCODE;
    const MASK: u32 = CMLT_Sd_Sn_IMM0::MASK;
    const MNEMONIC: &'static str = CMLT_Sd_Sn_IMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24002000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpeq";
}
impl InsnOpcode for CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x2400a000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpeq";
}
impl InsnOpcode for CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = 0x25008000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpeq";
}
impl InsnOpcode for CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::OPCODE;
    const MASK: u32 = CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MASK;
    const MNEMONIC: &'static str = CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24004000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpge";
}
impl InsnOpcode for CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x24008000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpge";
}
impl InsnOpcode for CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = 0x25000000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpge";
}
impl InsnOpcode for CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::OPCODE;
    const MASK: u32 = CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MASK;
    const MNEMONIC: &'static str = CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24004010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpgt";
}
impl InsnOpcode for CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x24008010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpgt";
}
impl InsnOpcode for CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = 0x25000010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpgt";
}
impl InsnOpcode for CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::OPCODE;
    const MASK: u32 = CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MASK;
    const MNEMONIC: &'static str = CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24000010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmphi";
}
impl InsnOpcode for CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D {
    const OPCODE: u32 = 0x2400c010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmphi";
}
impl InsnOpcode for CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D {
    const OPCODE: u32 = CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D::OPCODE;
    const MASK: u32 = CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D::MASK;
    const MNEMONIC: &'static str = CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = 0x24200010;
    const MASK: u32 = 0xff202010;
    const MNEMONIC: &'static str = "cmphi";
}
impl InsnOpcode for CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::OPCODE;
    const MASK: u32 = CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MASK;
    const MNEMONIC: &'static str = CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24000000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmphs";
}
impl InsnOpcode for CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D {
    const OPCODE: u32 = 0x2400c000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmphs";
}
impl InsnOpcode for CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D {
    const OPCODE: u32 = CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D::OPCODE;
    const MASK: u32 = CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D::MASK;
    const MNEMONIC: &'static str = CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = 0x24200000;
    const MASK: u32 = 0xff202010;
    const MNEMONIC: &'static str = "cmphs";
}
impl InsnOpcode for CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::OPCODE;
    const MASK: u32 = CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MASK;
    const MNEMONIC: &'static str = CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24006010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmple";
}
impl InsnOpcode for CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = 0x25002010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmple";
}
impl InsnOpcode for CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::OPCODE;
    const MASK: u32 = CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MASK;
    const MNEMONIC: &'static str = CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x2400e000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmplo";
}
impl InsnOpcode for CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = 0x24202000;
    const MASK: u32 = 0xff202010;
    const MNEMONIC: &'static str = "cmplo";
}
impl InsnOpcode for CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::OPCODE;
    const MASK: u32 = CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MASK;
    const MNEMONIC: &'static str = CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x2400e010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpls";
}
impl InsnOpcode for CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(7)]
    pub sve_imm7: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = 0x24202010;
    const MASK: u32 = 0xff202010;
    const MNEMONIC: &'static str = "cmpls";
}
impl InsnOpcode for CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7 {
    const OPCODE: u32 = CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::OPCODE;
    const MASK: u32 = CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MASK;
    const MNEMONIC: &'static str = CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24006000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmplt";
}
impl InsnOpcode for CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = 0x25002000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmplt";
}
impl InsnOpcode for CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::OPCODE;
    const MASK: u32 = CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MASK;
    const MNEMONIC: &'static str = CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x24002010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpne";
}
impl InsnOpcode for CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x2400a010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpne";
}
impl InsnOpcode for CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = 0x25008010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "cmpne";
}
impl InsnOpcode for CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 {
    const OPCODE: u32 = CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::OPCODE;
    const MASK: u32 = CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MASK;
    const MNEMONIC: &'static str = CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMTST_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMTST_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe208c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "cmtst";
}
impl InsnOpcode for CMTST_Vd_Vn_Vm {
    const OPCODE: u32 = CMTST_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = CMTST_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = CMTST_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CMTST_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CMTST_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee08c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cmtst";
}
impl InsnOpcode for CMTST_Sd_Sn_Sm {
    const OPCODE: u32 = CMTST_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = CMTST_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = CMTST_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CNOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41ba000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "cnot";
}
impl InsnOpcode for CNOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = CNOT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = CNOT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = CNOT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNT_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CNT_Rd_Rn {
    const OPCODE: u32 = 0x5ac01c00;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "cnt";
}
impl InsnOpcode for CNT_Rd_Rn {
    const OPCODE: u32 = CNT_Rd_Rn::OPCODE;
    const MASK: u32 = CNT_Rd_Rn::MASK;
    const MNEMONIC: &'static str = CNT_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41aa000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "cnt";
}
impl InsnOpcode for CNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = CNT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = CNT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = CNT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CNT_Vd_Vn {
    const OPCODE: u32 = 0xe205800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "cnt";
}
impl InsnOpcode for CNT_Vd_Vn {
    const OPCODE: u32 = CNT_Vd_Vn::OPCODE;
    const MASK: u32 = CNT_Vd_Vn::MASK;
    const MNEMONIC: &'static str = CNT_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CNTB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "cntb";
}
impl InsnOpcode for CNTB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = CNTB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = CNTB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = CNTB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CNTD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "cntd";
}
impl InsnOpcode for CNTD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = CNTD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = CNTD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = CNTD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CNTH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "cnth";
}
impl InsnOpcode for CNTH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = CNTH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = CNTH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = CNTH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTP_Rd_SVE_Pg4_10_SVE_Pn {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl CNTP_Rd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x25208000;
    const MASK: u32 = 0xff3fc200;
    const MNEMONIC: &'static str = "cntp";
}
impl InsnOpcode for CNTP_Rd_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = CNTP_Rd_SVE_Pg4_10_SVE_Pn::OPCODE;
    const MASK: u32 = CNTP_Rd_SVE_Pg4_10_SVE_Pn::MASK;
    const MNEMONIC: &'static str = CNTP_Rd_SVE_Pg4_10_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTP_Rd_SME_PNn_SME_VLxN_10 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(1)]
    pub sme_vl_10: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl CNTP_Rd_SME_PNn_SME_VLxN_10 {
    const OPCODE: u32 = 0x25208200;
    const MASK: u32 = 0xff3ffa00;
    const MNEMONIC: &'static str = "cntp";
}
impl InsnOpcode for CNTP_Rd_SME_PNn_SME_VLxN_10 {
    const OPCODE: u32 = CNTP_Rd_SME_PNn_SME_VLxN_10::OPCODE;
    const MASK: u32 = CNTP_Rd_SME_PNn_SME_VLxN_10::MASK;
    const MNEMONIC: &'static str = CNTP_Rd_SME_PNn_SME_VLxN_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CNTW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CNTW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "cntw";
}
impl InsnOpcode for CNTW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = CNTW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = CNTW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = CNTW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5a18000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "compact";
}
impl InsnOpcode for COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pg4_16: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM {
    const OPCODE: u32 = 0x5100000;
    const MASK: u32 = 0xff308000;
    const MNEMONIC: &'static str = "cpy";
}
impl InsnOpcode for CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM {
    const OPCODE: u32 = CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM::OPCODE;
    const MASK: u32 = CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM::MASK;
    const MNEMONIC: &'static str = CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPY_SVE_Zd_SVE_Pg3_SVE_Vn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_vn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CPY_SVE_Zd_SVE_Pg3_SVE_Vn {
    const OPCODE: u32 = 0x5208000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "cpy";
}
impl InsnOpcode for CPY_SVE_Zd_SVE_Pg3_SVE_Vn {
    const OPCODE: u32 = CPY_SVE_Zd_SVE_Pg3_SVE_Vn::OPCODE;
    const MASK: u32 = CPY_SVE_Zd_SVE_Pg3_SVE_Vn::MASK;
    const MNEMONIC: &'static str = CPY_SVE_Zd_SVE_Pg3_SVE_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPY_SVE_Zd_SVE_Pg3_Rn_SP {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl CPY_SVE_Zd_SVE_Pg3_Rn_SP {
    const OPCODE: u32 = 0x528a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "cpy";
}
impl InsnOpcode for CPY_SVE_Zd_SVE_Pg3_Rn_SP {
    const OPCODE: u32 = CPY_SVE_Zd_SVE_Pg3_Rn_SP::OPCODE;
    const MASK: u32 = CPY_SVE_Zd_SVE_Pg3_Rn_SP::MASK;
    const MNEMONIC: &'static str = CPY_SVE_Zd_SVE_Pg3_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d800400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpye";
}
impl InsnOpcode for CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyen";
}
impl InsnOpcode for CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d808400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyern";
}
impl InsnOpcode for CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d802400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyert";
}
impl InsnOpcode for CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyertn";
}
impl InsnOpcode for CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyertrn";
}
impl InsnOpcode for CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d806400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyertwn";
}
impl InsnOpcode for CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d803400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyet";
}
impl InsnOpcode for CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyetn";
}
impl InsnOpcode for CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyetrn";
}
impl InsnOpcode for CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d807400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyetwn";
}
impl InsnOpcode for CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d804400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyewn";
}
impl InsnOpcode for CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d801400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyewt";
}
impl InsnOpcode for CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d80d400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyewtn";
}
impl InsnOpcode for CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d809400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyewtrn";
}
impl InsnOpcode for CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d805400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyewtwn";
}
impl InsnOpcode for CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19800400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfe";
}
impl InsnOpcode for CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfen";
}
impl InsnOpcode for CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19808400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfern";
}
impl InsnOpcode for CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19802400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfert";
}
impl InsnOpcode for CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfertn";
}
impl InsnOpcode for CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfertrn";
}
impl InsnOpcode for CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19806400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfertwn";
}
impl InsnOpcode for CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19803400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfet";
}
impl InsnOpcode for CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfetn";
}
impl InsnOpcode for CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfetrn";
}
impl InsnOpcode for CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19807400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfetwn";
}
impl InsnOpcode for CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19804400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfewn";
}
impl InsnOpcode for CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19801400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfewt";
}
impl InsnOpcode for CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1980d400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfewtn";
}
impl InsnOpcode for CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19809400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfewtrn";
}
impl InsnOpcode for CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19805400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfewtwn";
}
impl InsnOpcode for CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19400400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfm";
}
impl InsnOpcode for CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmn";
}
impl InsnOpcode for CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19408400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmrn";
}
impl InsnOpcode for CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19402400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmrt";
}
impl InsnOpcode for CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmrtn";
}
impl InsnOpcode for CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmrtrn";
}
impl InsnOpcode for CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19406400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmrtwn";
}
impl InsnOpcode for CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19403400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmt";
}
impl InsnOpcode for CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmtn";
}
impl InsnOpcode for CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmtrn";
}
impl InsnOpcode for CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19407400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmtwn";
}
impl InsnOpcode for CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19404400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmwn";
}
impl InsnOpcode for CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19401400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmwt";
}
impl InsnOpcode for CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1940d400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmwtn";
}
impl InsnOpcode for CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19409400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmwtrn";
}
impl InsnOpcode for CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19405400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfmwtwn";
}
impl InsnOpcode for CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19000400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfp";
}
impl InsnOpcode for CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpn";
}
impl InsnOpcode for CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19008400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfprn";
}
impl InsnOpcode for CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19002400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfprt";
}
impl InsnOpcode for CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfprtn";
}
impl InsnOpcode for CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfprtrn";
}
impl InsnOpcode for CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19006400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfprtwn";
}
impl InsnOpcode for CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19003400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpt";
}
impl InsnOpcode for CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfptn";
}
impl InsnOpcode for CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfptrn";
}
impl InsnOpcode for CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19007400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfptwn";
}
impl InsnOpcode for CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19004400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpwn";
}
impl InsnOpcode for CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19001400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpwt";
}
impl InsnOpcode for CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1900d400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpwtn";
}
impl InsnOpcode for CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19009400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpwtrn";
}
impl InsnOpcode for CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x19005400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyfpwtwn";
}
impl InsnOpcode for CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d400400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpym";
}
impl InsnOpcode for CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymn";
}
impl InsnOpcode for CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d408400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymrn";
}
impl InsnOpcode for CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d402400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymrt";
}
impl InsnOpcode for CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymrtn";
}
impl InsnOpcode for CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymrtrn";
}
impl InsnOpcode for CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d406400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymrtwn";
}
impl InsnOpcode for CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d403400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymt";
}
impl InsnOpcode for CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymtn";
}
impl InsnOpcode for CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymtrn";
}
impl InsnOpcode for CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d407400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymtwn";
}
impl InsnOpcode for CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d404400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymwn";
}
impl InsnOpcode for CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d401400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymwt";
}
impl InsnOpcode for CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d40d400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymwtn";
}
impl InsnOpcode for CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d409400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymwtrn";
}
impl InsnOpcode for CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d405400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpymwtwn";
}
impl InsnOpcode for CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d000400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyp";
}
impl InsnOpcode for CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypn";
}
impl InsnOpcode for CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d008400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyprn";
}
impl InsnOpcode for CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d002400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyprt";
}
impl InsnOpcode for CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyprtn";
}
impl InsnOpcode for CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyprtrn";
}
impl InsnOpcode for CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d006400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyprtwn";
}
impl InsnOpcode for CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d003400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypt";
}
impl InsnOpcode for CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyptn";
}
impl InsnOpcode for CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyptrn";
}
impl InsnOpcode for CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d007400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpyptwn";
}
impl InsnOpcode for CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d004400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypwn";
}
impl InsnOpcode for CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d001400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypwt";
}
impl InsnOpcode for CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d00d400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypwtn";
}
impl InsnOpcode for CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d009400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypwtrn";
}
impl InsnOpcode for CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = 0x1d005400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "cpypwtwn";
}
impl InsnOpcode for CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn {
    const OPCODE: u32 = CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::OPCODE;
    const MASK: u32 = CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MASK;
    const MNEMONIC: &'static str = CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32B_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32B_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac04000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32b";
}
impl InsnOpcode for CRC32B_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32B_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32B_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32B_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CB_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32CB_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac05000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32cb";
}
impl InsnOpcode for CRC32CB_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32CB_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32CB_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32CB_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CH_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32CH_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac05400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32ch";
}
impl InsnOpcode for CRC32CH_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32CH_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32CH_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32CH_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CW_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32CW_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac05800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32cw";
}
impl InsnOpcode for CRC32CW_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32CW_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32CW_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32CW_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32CX_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32CX_Rd_Rn_Rm {
    const OPCODE: u32 = 0x9ac05c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32cx";
}
impl InsnOpcode for CRC32CX_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32CX_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32CX_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32CX_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32H_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32H_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac04400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32h";
}
impl InsnOpcode for CRC32H_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32H_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32H_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32H_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32W_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32W_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac04800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32w";
}
impl InsnOpcode for CRC32W_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32W_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32W_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32W_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CRC32X_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CRC32X_Rd_Rn_Rm {
    const OPCODE: u32 = 0x9ac04c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "crc32x";
}
impl InsnOpcode for CRC32X_Rd_Rn_Rm {
    const OPCODE: u32 = CRC32X_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = CRC32X_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CRC32X_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSEL_Rd_Rn_Rm_COND {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CSEL_Rd_Rn_Rm_COND {
    const OPCODE: u32 = 0x1a800000;
    const MASK: u32 = 0x7fe00c00;
    const MNEMONIC: &'static str = "csel";
}
impl InsnOpcode for CSEL_Rd_Rn_Rm_COND {
    const OPCODE: u32 = CSEL_Rd_Rn_Rm_COND::OPCODE;
    const MASK: u32 = CSEL_Rd_Rn_Rm_COND::MASK;
    const MNEMONIC: &'static str = CSEL_Rd_Rn_Rm_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSINC_Rd_Rn_Rm_COND {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CSINC_Rd_Rn_Rm_COND {
    const OPCODE: u32 = 0x1a800400;
    const MASK: u32 = 0x7fe00c00;
    const MNEMONIC: &'static str = "csinc";
}
impl InsnOpcode for CSINC_Rd_Rn_Rm_COND {
    const OPCODE: u32 = CSINC_Rd_Rn_Rm_COND::OPCODE;
    const MASK: u32 = CSINC_Rd_Rn_Rm_COND::MASK;
    const MNEMONIC: &'static str = CSINC_Rd_Rn_Rm_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSINV_Rd_Rn_Rm_COND {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CSINV_Rd_Rn_Rm_COND {
    const OPCODE: u32 = 0x5a800000;
    const MASK: u32 = 0x7fe00c00;
    const MNEMONIC: &'static str = "csinv";
}
impl InsnOpcode for CSINV_Rd_Rn_Rm_COND {
    const OPCODE: u32 = CSINV_Rd_Rn_Rm_COND::OPCODE;
    const MASK: u32 = CSINV_Rd_Rn_Rm_COND::MASK;
    const MNEMONIC: &'static str = CSINV_Rd_Rn_Rm_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CSNEG_Rd_Rn_Rm_COND {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CSNEG_Rd_Rn_Rm_COND {
    const OPCODE: u32 = 0x5a800400;
    const MASK: u32 = 0x7fe00c00;
    const MNEMONIC: &'static str = "csneg";
}
impl InsnOpcode for CSNEG_Rd_Rn_Rm_COND {
    const OPCODE: u32 = CSNEG_Rd_Rn_Rm_COND::OPCODE;
    const MASK: u32 = CSNEG_Rd_Rn_Rm_COND::MASK;
    const MNEMONIC: &'static str = CSNEG_Rd_Rn_Rm_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CTERMEQ_Rn_Rm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CTERMEQ_Rn_Rm {
    const OPCODE: u32 = 0x25a02000;
    const MASK: u32 = 0xffa0fc1f;
    const MNEMONIC: &'static str = "ctermeq";
}
impl InsnOpcode for CTERMEQ_Rn_Rm {
    const OPCODE: u32 = CTERMEQ_Rn_Rm::OPCODE;
    const MASK: u32 = CTERMEQ_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CTERMEQ_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CTERMNE_Rn_Rm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl CTERMNE_Rn_Rm {
    const OPCODE: u32 = 0x25a02010;
    const MASK: u32 = 0xffa0fc1f;
    const MNEMONIC: &'static str = "ctermne";
}
impl InsnOpcode for CTERMNE_Rn_Rm {
    const OPCODE: u32 = CTERMNE_Rn_Rm::OPCODE;
    const MASK: u32 = CTERMNE_Rn_Rm::MASK;
    const MNEMONIC: &'static str = CTERMNE_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct CTZ_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl CTZ_Rd_Rn {
    const OPCODE: u32 = 0x5ac01800;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "ctz";
}
impl InsnOpcode for CTZ_Rd_Rn {
    const OPCODE: u32 = CTZ_Rd_Rn::OPCODE;
    const MASK: u32 = CTZ_Rd_Rn::MASK;
    const MNEMONIC: &'static str = CTZ_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DCPS1_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl DCPS1_EXCEPTION {
    const OPCODE: u32 = 0xd4a00001;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "dcps1";
}
impl InsnOpcode for DCPS1_EXCEPTION {
    const OPCODE: u32 = DCPS1_EXCEPTION::OPCODE;
    const MASK: u32 = DCPS1_EXCEPTION::MASK;
    const MNEMONIC: &'static str = DCPS1_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DCPS2_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl DCPS2_EXCEPTION {
    const OPCODE: u32 = 0xd4a00002;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "dcps2";
}
impl InsnOpcode for DCPS2_EXCEPTION {
    const OPCODE: u32 = DCPS2_EXCEPTION::OPCODE;
    const MASK: u32 = DCPS2_EXCEPTION::MASK;
    const MNEMONIC: &'static str = DCPS2_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DCPS3_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl DCPS3_EXCEPTION {
    const OPCODE: u32 = 0xd4a00003;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "dcps3";
}
impl InsnOpcode for DCPS3_EXCEPTION {
    const OPCODE: u32 = DCPS3_EXCEPTION::OPCODE;
    const MASK: u32 = DCPS3_EXCEPTION::MASK;
    const MNEMONIC: &'static str = DCPS3_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430e400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "decb";
}
impl InsnOpcode for DECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0c400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "decd";
}
impl InsnOpcode for DECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECD_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECD_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECD_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0e400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "decd";
}
impl InsnOpcode for DECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470c400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "dech";
}
impl InsnOpcode for DECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECH_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECH_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECH_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470e400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "dech";
}
impl InsnOpcode for DECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl DECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252d8000;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "decp";
}
impl InsnOpcode for DECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = DECP_SVE_Zd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = DECP_SVE_Zd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = DECP_SVE_Zd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl DECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252d8800;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "decp";
}
impl InsnOpcode for DECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = DECP_Rd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = DECP_Rd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = DECP_Rd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0c400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "decw";
}
impl InsnOpcode for DECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECW_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECW_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECW_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DECW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0e400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "decw";
}
impl InsnOpcode for DECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = DECW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = DECW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = DECW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DGH {
    #[bits(32)]
    pub _op_0: u32,
}
impl DGH {
    const OPCODE: u32 = 0xd50320df;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "dgh";
}
impl InsnOpcode for DGH {
    const OPCODE: u32 = DGH::OPCODE;
    const MASK: u32 = DGH::MASK;
    const MNEMONIC: &'static str = DGH::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DMB_BARRIER {
    #[bits(32)]
    pub _op_0: u32,
}
impl DMB_BARRIER {
    const OPCODE: u32 = 0xd50330bf;
    const MASK: u32 = 0xfffff0ff;
    const MNEMONIC: &'static str = "dmb";
}
impl InsnOpcode for DMB_BARRIER {
    const OPCODE: u32 = DMB_BARRIER::OPCODE;
    const MASK: u32 = DMB_BARRIER::MASK;
    const MNEMONIC: &'static str = DMB_BARRIER::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DRPS {
    #[bits(32)]
    pub _op_0: u32,
}
impl DRPS {
    const OPCODE: u32 = 0xd6bf03e0;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "drps";
}
impl InsnOpcode for DRPS {
    const OPCODE: u32 = DRPS::OPCODE;
    const MASK: u32 = DRPS::MASK;
    const MNEMONIC: &'static str = DRPS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DSB_BARRIER {
    #[bits(32)]
    pub _op_0: u32,
}
impl DSB_BARRIER {
    const OPCODE: u32 = 0xd503309f;
    const MASK: u32 = 0xfffff0ff;
    const MNEMONIC: &'static str = "dsb";
}
impl InsnOpcode for DSB_BARRIER {
    const OPCODE: u32 = DSB_BARRIER::OPCODE;
    const MASK: u32 = DSB_BARRIER::MASK;
    const MNEMONIC: &'static str = DSB_BARRIER::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DSB_BARRIER_DSB_NXS {
    #[bits(32)]
    pub _op_0: u32,
}
impl DSB_BARRIER_DSB_NXS {
    const OPCODE: u32 = 0xd503323f;
    const MASK: u32 = 0xfffff3ff;
    const MNEMONIC: &'static str = "dsb";
}
impl InsnOpcode for DSB_BARRIER_DSB_NXS {
    const OPCODE: u32 = DSB_BARRIER_DSB_NXS::OPCODE;
    const MASK: u32 = DSB_BARRIER_DSB_NXS::MASK;
    const MNEMONIC: &'static str = DSB_BARRIER_DSB_NXS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_SVE_Zd_SVE_Zn_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DUP_SVE_Zd_SVE_Zn_INDEX {
    const OPCODE: u32 = 0x5202000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "dup";
}
impl InsnOpcode for DUP_SVE_Zd_SVE_Zn_INDEX {
    const OPCODE: u32 = DUP_SVE_Zd_SVE_Zn_INDEX::OPCODE;
    const MASK: u32 = DUP_SVE_Zd_SVE_Zn_INDEX::MASK;
    const MNEMONIC: &'static str = DUP_SVE_Zd_SVE_Zn_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_SVE_Zd_Rn_SP {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DUP_SVE_Zd_Rn_SP {
    const OPCODE: u32 = 0x5203800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "dup";
}
impl InsnOpcode for DUP_SVE_Zd_Rn_SP {
    const OPCODE: u32 = DUP_SVE_Zd_Rn_SP::OPCODE;
    const MASK: u32 = DUP_SVE_Zd_Rn_SP::MASK;
    const MNEMONIC: &'static str = DUP_SVE_Zd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_SVE_Zd_SVE_ASIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl DUP_SVE_Zd_SVE_ASIMM {
    const OPCODE: u32 = 0x2538c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "dup";
}
impl InsnOpcode for DUP_SVE_Zd_SVE_ASIMM {
    const OPCODE: u32 = DUP_SVE_Zd_SVE_ASIMM::OPCODE;
    const MASK: u32 = DUP_SVE_Zd_SVE_ASIMM::MASK;
    const MNEMONIC: &'static str = DUP_SVE_Zd_SVE_ASIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_Vd_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DUP_Vd_En {
    const OPCODE: u32 = 0xe000400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "dup";
}
impl InsnOpcode for DUP_Vd_En {
    const OPCODE: u32 = DUP_Vd_En::OPCODE;
    const MASK: u32 = DUP_Vd_En::MASK;
    const MNEMONIC: &'static str = DUP_Vd_En::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_Vd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DUP_Vd_Rn {
    const OPCODE: u32 = 0xe000c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "dup";
}
impl InsnOpcode for DUP_Vd_Rn {
    const OPCODE: u32 = DUP_Vd_Rn::OPCODE;
    const MASK: u32 = DUP_Vd_Rn::MASK;
    const MNEMONIC: &'static str = DUP_Vd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUP_Sd_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl DUP_Sd_En {
    const OPCODE: u32 = 0x5e000400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "dup";
}
impl InsnOpcode for DUP_Sd_En {
    const OPCODE: u32 = DUP_Sd_En::OPCODE;
    const MASK: u32 = DUP_Sd_En::MASK;
    const MNEMONIC: &'static str = DUP_Sd_En::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUPM_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl DUPM_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5c00000;
    const MASK: u32 = 0xfffc0000;
    const MNEMONIC: &'static str = "dupm";
}
impl InsnOpcode for DUPM_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = DUPM_SVE_Zd_SVE_LIMM::OPCODE;
    const MASK: u32 = DUPM_SVE_Zd_SVE_LIMM::MASK;
    const MNEMONIC: &'static str = DUPM_SVE_Zd_SVE_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct DUPQ_SVE_Zd_SVE_Zn_5_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_tsz: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl DUPQ_SVE_Zd_SVE_Zn_5_INDEX {
    const OPCODE: u32 = 0x5202400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "dupq";
}
impl InsnOpcode for DUPQ_SVE_Zd_SVE_Zn_5_INDEX {
    const OPCODE: u32 = DUPQ_SVE_Zd_SVE_Zn_5_INDEX::OPCODE;
    const MASK: u32 = DUPQ_SVE_Zd_SVE_Zn_5_INDEX::MASK;
    const MNEMONIC: &'static str = DUPQ_SVE_Zd_SVE_Zn_5_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EON_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl EON_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x4a200000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "eon";
}
impl InsnOpcode for EON_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = EON_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = EON_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = EON_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_Rd_SP_Rn_LIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl EOR_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = 0x52000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = EOR_Rd_SP_Rn_LIMM::OPCODE;
    const MASK: u32 = EOR_Rd_SP_Rn_LIMM::MASK;
    const MNEMONIC: &'static str = EOR_Rd_SP_Rn_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl EOR_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x4a000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = EOR_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = EOR_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = EOR_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4190000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EOR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4a03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = EOR_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = EOR_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = EOR_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Zd_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl EOR_SVE_Zd_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5400000;
    const MASK: u32 = 0xfffc0000;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_SVE_Zd_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = EOR_SVE_Zd_SVE_Zd_SVE_LIMM::OPCODE;
    const MASK: u32 = EOR_SVE_Zd_SVE_Zd_SVE_LIMM::MASK;
    const MNEMONIC: &'static str = EOR_SVE_Zd_SVE_Zd_SVE_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25004200;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EOR_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e201c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "eor";
}
impl InsnOpcode for EOR_Vd_Vn_Vm {
    const OPCODE: u32 = EOR_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = EOR_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = EOR_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4203800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "eor3";
}
impl InsnOpcode for EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::OPCODE;
    const MASK: u32 = EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MASK;
    const MNEMONIC: &'static str = EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EOR3_Vd_Vn_Vm_Va {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EOR3_Vd_Vn_Vm_Va {
    const OPCODE: u32 = 0xce000000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "eor3";
}
impl InsnOpcode for EOR3_Vd_Vn_Vm_Va {
    const OPCODE: u32 = EOR3_Vd_Vn_Vm_Va::OPCODE;
    const MASK: u32 = EOR3_Vd_Vn_Vm_Va::MASK;
    const MNEMONIC: &'static str = EOR3_Vd_Vn_Vm_Va::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45009000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "eorbt";
}
impl InsnOpcode for EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl EORQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41d2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "eorqv";
}
impl InsnOpcode for EORQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = EORQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = EORQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = EORQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25404200;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "eors";
}
impl InsnOpcode for EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45009400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "eortb";
}
impl InsnOpcode for EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl EORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4192000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "eorv";
}
impl InsnOpcode for EORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = EORV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = EORV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = EORV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ERET {
    #[bits(32)]
    pub _op_0: u32,
}
impl ERET {
    const OPCODE: u32 = 0xd69f03e0;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "eret";
}
impl InsnOpcode for ERET {
    const OPCODE: u32 = ERET::OPCODE;
    const MASK: u32 = ERET::MASK;
    const MNEMONIC: &'static str = ERET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ERETAA {
    #[bits(32)]
    pub _op_0: u32,
}
impl ERETAA {
    const OPCODE: u32 = 0xd69f0bff;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "eretaa";
}
impl InsnOpcode for ERETAA {
    const OPCODE: u32 = ERETAA::OPCODE;
    const MASK: u32 = ERETAA::MASK;
    const MNEMONIC: &'static str = ERETAA::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ERETAB {
    #[bits(32)]
    pub _op_0: u32,
}
impl ERETAB {
    const OPCODE: u32 = 0xd69f0fff;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "eretab";
}
impl InsnOpcode for ERETAB {
    const OPCODE: u32 = ERETAB::OPCODE;
    const MASK: u32 = ERETAB::MASK;
    const MNEMONIC: &'static str = ERETAB::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53 {
    const OPCODE: u32 = 0x5200000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ext";
}
impl InsnOpcode for EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53 {
    const OPCODE: u32 = EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53::OPCODE;
    const MASK: u32 = EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53::MASK;
    const MNEMONIC: &'static str = EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53 {
    const OPCODE: u32 = 0x5600000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ext";
}
impl InsnOpcode for EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53 {
    const OPCODE: u32 = EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53::OPCODE;
    const MASK: u32 = EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53::MASK;
    const MNEMONIC: &'static str = EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXT_Vd_Vn_Vm_IDX {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(4)]
    pub imm4_11: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EXT_Vd_Vn_Vm_IDX {
    const OPCODE: u32 = 0x2e000000;
    const MASK: u32 = 0xbfe08400;
    const MNEMONIC: &'static str = "ext";
}
impl InsnOpcode for EXT_Vd_Vn_Vm_IDX {
    const OPCODE: u32 = EXT_Vd_Vn_Vm_IDX::OPCODE;
    const MASK: u32 = EXT_Vd_Vn_Vm_IDX::MASK;
    const MNEMONIC: &'static str = EXT_Vd_Vn_Vm_IDX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4 {
    const OPCODE: u32 = 0x5602400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "extq";
}
impl InsnOpcode for EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4 {
    const OPCODE: u32 = EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4::OPCODE;
    const MASK: u32 = EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4::MASK;
    const MNEMONIC: &'static str = EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct EXTR_Rd_Rn_Rm_IMMS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl EXTR_Rd_Rn_Rm_IMMS {
    const OPCODE: u32 = 0x13800000;
    const MASK: u32 = 0x7fa00000;
    const MNEMONIC: &'static str = "extr";
}
impl InsnOpcode for EXTR_Rd_Rn_Rm_IMMS {
    const OPCODE: u32 = EXTR_Rd_Rn_Rm_IMMS::OPCODE;
    const MASK: u32 = EXTR_Rd_Rn_Rm_IMMS::MASK;
    const MNEMONIC: &'static str = EXTR_Rd_Rn_Rm_IMMS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65088000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fabd";
}
impl InsnOpcode for FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FABD_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec01400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fabd";
}
impl InsnOpcode for FABD_Vd_Vn_Vm {
    const OPCODE: u32 = FABD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FABD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FABD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FABD_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ec01400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fabd";
}
impl InsnOpcode for FABD_Sd_Sn_Sm {
    const OPCODE: u32 = FABD_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FABD_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FABD_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2ea0d400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fabd";
}
impl InsnOpcode for FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABD_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FABD_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x7ea0d400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fabd";
}
impl InsnOpcode for FABD_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FABD_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FABD_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FABD_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41ca000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fabs";
}
impl InsnOpcode for FABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FABS_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FABS_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FABS_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FABS_Vd_Vn {
    const OPCODE: u32 = 0xea0f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fabs";
}
impl InsnOpcode for FABS_Vd_Vn {
    const OPCODE: u32 = FABS_Vd_Vn::OPCODE;
    const MASK: u32 = FABS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FABS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FABS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef8f800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fabs";
}
impl InsnOpcode for FABS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FABS_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FABS_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FABS_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FABS_Fd_Fn {
    const OPCODE: u32 = 0x1e20c000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "fabs";
}
impl InsnOpcode for FABS_Fd_Fn {
    const OPCODE: u32 = FABS_Fd_Fn::OPCODE;
    const MASK: u32 = FABS_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FABS_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FABS_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FABS_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee0c000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fabs";
}
impl InsnOpcode for FABS_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FABS_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FABS_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FABS_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x6500c010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "facge";
}
impl InsnOpcode for FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGE_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e402c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "facge";
}
impl InsnOpcode for FACGE_Vd_Vn_Vm {
    const OPCODE: u32 = FACGE_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FACGE_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FACGE_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGE_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e402c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "facge";
}
impl InsnOpcode for FACGE_Sd_Sn_Sm {
    const OPCODE: u32 = FACGE_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FACGE_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FACGE_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20ec00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "facge";
}
impl InsnOpcode for FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGE_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGE_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x7e20ec00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "facge";
}
impl InsnOpcode for FACGE_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FACGE_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FACGE_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FACGE_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x6500e010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "facgt";
}
impl InsnOpcode for FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec02c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "facgt";
}
impl InsnOpcode for FACGT_Vd_Vn_Vm {
    const OPCODE: u32 = FACGT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FACGT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FACGT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGT_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ec02c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "facgt";
}
impl InsnOpcode for FACGT_Sd_Sn_Sm {
    const OPCODE: u32 = FACGT_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FACGT_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FACGT_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2ea0ec00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "facgt";
}
impl InsnOpcode for FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FACGT_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FACGT_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x7ea0ec00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "facgt";
}
impl InsnOpcode for FACGT_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FACGT_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FACGT_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FACGT_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl FADD_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c00;
    const MASK: u32 = 0xffbf9c38;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = FADD_SME_ZA_array_off3_0_SME_Znx2::OPCODE;
    const MASK: u32 = FADD_SME_ZA_array_off3_0_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FADD_SME_ZA_array_off3_0_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl FADD_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11c00;
    const MASK: u32 = 0xffbf9c78;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = FADD_SME_ZA_array_off3_0_SME_Znx4::OPCODE;
    const MASK: u32 = FADD_SME_ZA_array_off3_0_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FADD_SME_ZA_array_off3_0_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FADD_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65008000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    const OPCODE: u32 = 0x65188000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    const OPCODE: u32 = FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::OPCODE;
    const MASK: u32 = FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::MASK;
    const MNEMONIC: &'static str = FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe401400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_Vd_Vn_Vm {
    const OPCODE: u32 = FADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20d400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADD_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e202800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_Fd_Fn_Fm {
    const OPCODE: u32 = FADD_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FADD_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FADD_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADD_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADD_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee02800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fadd";
}
impl InsnOpcode for FADD_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FADD_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FADD_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FADD_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65182000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fadda";
}
impl InsnOpcode for FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 {
    const OPCODE: u32 = FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64108000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "faddp";
}
impl InsnOpcode for FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADDP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e401400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "faddp";
}
impl InsnOpcode for FADDP_Vd_Vn_Vm {
    const OPCODE: u32 = FADDP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FADDP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FADDP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20d400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "faddp";
}
impl InsnOpcode for FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FADDP_Sd_Vn {
    const OPCODE: u32 = 0x5e30d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "faddp";
}
impl InsnOpcode for FADDP_Sd_Vn {
    const OPCODE: u32 = FADDP_Sd_Vn::OPCODE;
    const MASK: u32 = FADDP_Sd_Vn::MASK;
    const MNEMONIC: &'static str = FADDP_Sd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FADDP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7e30d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "faddp";
}
impl InsnOpcode for FADDP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = FADDP_Sd_S_S_Vn_V_2S::OPCODE;
    const MASK: u32 = FADDP_Sd_S_S_Vn_V_2S::MASK;
    const MNEMONIC: &'static str = FADDP_Sd_S_S_Vn_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FADDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6410a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "faddqv";
}
impl InsnOpcode for FADDQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FADDQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FADDQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FADDQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65002000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "faddv";
}
impl InsnOpcode for FADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FADDV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FADDV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FADDV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_rot1: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1 {
    const OPCODE: u32 = 0x64008000;
    const MASK: u32 = 0xff3ee000;
    const MNEMONIC: &'static str = "fcadd";
}
impl InsnOpcode for FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1 {
    const OPCODE: u32 = FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1::OPCODE;
    const MASK: u32 = FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1::MASK;
    const MNEMONIC: &'static str = FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCADD_Vd_Vn_Vm_IMM_ROT3 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(2)]
    pub _op_10: u32,
    #[bits(1)]
    pub rotate3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCADD_Vd_Vn_Vm_IMM_ROT3 {
    const OPCODE: u32 = 0x2e00e400;
    const MASK: u32 = 0xbf20ec00;
    const MNEMONIC: &'static str = "fcadd";
}
impl InsnOpcode for FCADD_Vd_Vn_Vm_IMM_ROT3 {
    const OPCODE: u32 = FCADD_Vd_Vn_Vm_IMM_ROT3::OPCODE;
    const MASK: u32 = FCADD_Vd_Vn_Vm_IMM_ROT3::MASK;
    const MNEMONIC: &'static str = FCADD_Vd_Vn_Vm_IMM_ROT3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMP_Fn_Fm_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCCMP_Fn_Fm_NZCV_COND {
    const OPCODE: u32 = 0x1e200400;
    const MASK: u32 = 0xff200c10;
    const MNEMONIC: &'static str = "fccmp";
}
impl InsnOpcode for FCCMP_Fn_Fm_NZCV_COND {
    const OPCODE: u32 = FCCMP_Fn_Fm_NZCV_COND::OPCODE;
    const MASK: u32 = FCCMP_Fn_Fm_NZCV_COND::MASK;
    const MNEMONIC: &'static str = FCCMP_Fn_Fm_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMP_Fn_S_H_Fm_S_H_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCCMP_Fn_S_H_Fm_S_H_NZCV_COND {
    const OPCODE: u32 = 0x1ee00400;
    const MASK: u32 = 0xffe00c10;
    const MNEMONIC: &'static str = "fccmp";
}
impl InsnOpcode for FCCMP_Fn_S_H_Fm_S_H_NZCV_COND {
    const OPCODE: u32 = FCCMP_Fn_S_H_Fm_S_H_NZCV_COND::OPCODE;
    const MASK: u32 = FCCMP_Fn_S_H_Fm_S_H_NZCV_COND::MASK;
    const MNEMONIC: &'static str = FCCMP_Fn_S_H_Fm_S_H_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMPE_Fn_Fm_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCCMPE_Fn_Fm_NZCV_COND {
    const OPCODE: u32 = 0x1e200410;
    const MASK: u32 = 0xff200c10;
    const MNEMONIC: &'static str = "fccmpe";
}
impl InsnOpcode for FCCMPE_Fn_Fm_NZCV_COND {
    const OPCODE: u32 = FCCMPE_Fn_Fm_NZCV_COND::OPCODE;
    const MASK: u32 = FCCMPE_Fn_Fm_NZCV_COND::MASK;
    const MNEMONIC: &'static str = FCCMPE_Fn_Fm_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND {
    #[bits(4)]
    pub nzcv: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND {
    const OPCODE: u32 = 0x1ee00410;
    const MASK: u32 = 0xffe00c10;
    const MNEMONIC: &'static str = "fccmpe";
}
impl InsnOpcode for FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND {
    const OPCODE: u32 = FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND::OPCODE;
    const MASK: u32 = FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND::MASK;
    const MNEMONIC: &'static str = FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120c000;
    const MASK: u32 = 0xff20fc01;
    const MNEMONIC: &'static str = "fclamp";
}
impl InsnOpcode for FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120c800;
    const MASK: u32 = 0xff20fc03;
    const MNEMONIC: &'static str = "fclamp";
}
impl InsnOpcode for FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64202400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fclamp";
}
impl InsnOpcode for FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = 0x65122000;
    const MASK: u32 = 0xff3fe010;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::OPCODE;
    const MASK: u32 = FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65006000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMEQ_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe402400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Vd_Vn_Vm {
    const OPCODE: u32 = FCMEQ_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FCMEQ_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FCMEQ_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMEQ_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e402400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Sd_Sn_Sm {
    const OPCODE: u32 = FCMEQ_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FCMEQ_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FCMEQ_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vd_Vn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMEQ_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = 0xea0d800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = FCMEQ_Vd_Vn_FPIMM0::OPCODE;
    const MASK: u32 = FCMEQ_Vd_Vn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMEQ_Vd_Vn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = 0xef8d800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0::OPCODE;
    const MASK: u32 = FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20e400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMEQ_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x5ea0d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = FCMEQ_Sd_Sn_FPIMM0::OPCODE;
    const MASK: u32 = FCMEQ_Sd_Sn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMEQ_Sd_Sn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sd_S_H_Sn_S_H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMEQ_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = 0x5ef8d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = FCMEQ_Sd_S_H_Sn_S_H_FPIMM0::OPCODE;
    const MASK: u32 = FCMEQ_Sd_S_H_Sn_S_H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMEQ_Sd_S_H_Sn_S_H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x5e20e400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fcmeq";
}
impl InsnOpcode for FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = 0x65102000;
    const MASK: u32 = 0xff3fe010;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::OPCODE;
    const MASK: u32 = FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65004000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGE_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e402400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Vd_Vn_Vm {
    const OPCODE: u32 = FCMGE_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FCMGE_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FCMGE_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGE_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e402400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Sd_Sn_Sm {
    const OPCODE: u32 = FCMGE_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FCMGE_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FCMGE_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_Vn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGE_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = 0x2ea0c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = FCMGE_Vd_Vn_FPIMM0::OPCODE;
    const MASK: u32 = FCMGE_Vd_Vn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGE_Vd_Vn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = 0x2ef8c800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0::OPCODE;
    const MASK: u32 = FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20e400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGE_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x7ea0c800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = FCMGE_Sd_Sn_FPIMM0::OPCODE;
    const MASK: u32 = FCMGE_Sd_Sn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGE_Sd_Sn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sd_S_H_Sn_S_H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGE_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = 0x7ef8c800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = FCMGE_Sd_S_H_Sn_S_H_FPIMM0::OPCODE;
    const MASK: u32 = FCMGE_Sd_S_H_Sn_S_H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGE_Sd_S_H_Sn_S_H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGE_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGE_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x7e20e400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fcmge";
}
impl InsnOpcode for FCMGE_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FCMGE_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FCMGE_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FCMGE_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = 0x65102010;
    const MASK: u32 = 0xff3fe010;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::OPCODE;
    const MASK: u32 = FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65004010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec02400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Vd_Vn_Vm {
    const OPCODE: u32 = FCMGT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FCMGT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FCMGT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGT_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ec02400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Sd_Sn_Sm {
    const OPCODE: u32 = FCMGT_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FCMGT_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FCMGT_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Vd_Vn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGT_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = 0xea0c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = FCMGT_Vd_Vn_FPIMM0::OPCODE;
    const MASK: u32 = FCMGT_Vd_Vn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGT_Vd_Vn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = 0xef8c800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0::OPCODE;
    const MASK: u32 = FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2ea0e400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGT_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x5ea0c800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = FCMGT_Sd_Sn_FPIMM0::OPCODE;
    const MASK: u32 = FCMGT_Sd_Sn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGT_Sd_Sn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sd_S_H_Sn_S_H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMGT_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = 0x5ef8c800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = FCMGT_Sd_S_H_Sn_S_H_FPIMM0::OPCODE;
    const MASK: u32 = FCMGT_Sd_S_H_Sn_S_H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMGT_Sd_S_H_Sn_S_H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMGT_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMGT_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x7ea0e400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fcmgt";
}
impl InsnOpcode for FCMGT_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FCMGT_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FCMGT_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FCMGT_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub rotate2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2 {
    const OPCODE: u32 = 0x64000000;
    const MASK: u32 = 0xff208000;
    const MNEMONIC: &'static str = "fcmla";
}
impl InsnOpcode for FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2 {
    const OPCODE: u32 = FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2::OPCODE;
    const MASK: u32 = FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x64a01000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "fcmla";
}
impl InsnOpcode for FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x64e01000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "fcmla";
}
impl InsnOpcode for FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_Vd_Vn_Vm_IMM_ROT1 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(2)]
    pub rotate1: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMLA_Vd_Vn_Vm_IMM_ROT1 {
    const OPCODE: u32 = 0x2e00c400;
    const MASK: u32 = 0xbf20e400;
    const MNEMONIC: &'static str = "fcmla";
}
impl InsnOpcode for FCMLA_Vd_Vn_Vm_IMM_ROT1 {
    const OPCODE: u32 = FCMLA_Vd_Vn_Vm_IMM_ROT1::OPCODE;
    const MASK: u32 = FCMLA_Vd_Vn_Vm_IMM_ROT1::MASK;
    const MNEMONIC: &'static str = FCMLA_Vd_Vn_Vm_IMM_ROT1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLA_Vd_Vn_Em_IMM_ROT2 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub rotate2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMLA_Vd_Vn_Em_IMM_ROT2 {
    const OPCODE: u32 = 0x2f001000;
    const MASK: u32 = 0xbf009400;
    const MNEMONIC: &'static str = "fcmla";
}
impl InsnOpcode for FCMLA_Vd_Vn_Em_IMM_ROT2 {
    const OPCODE: u32 = FCMLA_Vd_Vn_Em_IMM_ROT2::OPCODE;
    const MASK: u32 = FCMLA_Vd_Vn_Em_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = FCMLA_Vd_Vn_Em_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = 0x65112010;
    const MASK: u32 = 0xff3fe010;
    const MNEMONIC: &'static str = "fcmle";
}
impl InsnOpcode for FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::OPCODE;
    const MASK: u32 = FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Vd_Vn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLE_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = 0x2ea0d800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcmle";
}
impl InsnOpcode for FCMLE_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = FCMLE_Vd_Vn_FPIMM0::OPCODE;
    const MASK: u32 = FCMLE_Vd_Vn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLE_Vd_Vn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = 0x2ef8d800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcmle";
}
impl InsnOpcode for FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0::OPCODE;
    const MASK: u32 = FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLE_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x7ea0d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcmle";
}
impl InsnOpcode for FCMLE_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = FCMLE_Sd_Sn_FPIMM0::OPCODE;
    const MASK: u32 = FCMLE_Sd_Sn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLE_Sd_Sn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLE_Sd_S_H_Sn_S_H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLE_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = 0x7ef8d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcmle";
}
impl InsnOpcode for FCMLE_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = FCMLE_Sd_S_H_Sn_S_H_FPIMM0::OPCODE;
    const MASK: u32 = FCMLE_Sd_S_H_Sn_S_H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLE_Sd_S_H_Sn_S_H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = 0x65112000;
    const MASK: u32 = 0xff3fe010;
    const MNEMONIC: &'static str = "fcmlt";
}
impl InsnOpcode for FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::OPCODE;
    const MASK: u32 = FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_Vd_Vn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLT_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = 0xea0e800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcmlt";
}
impl InsnOpcode for FCMLT_Vd_Vn_FPIMM0 {
    const OPCODE: u32 = FCMLT_Vd_Vn_FPIMM0::OPCODE;
    const MASK: u32 = FCMLT_Vd_Vn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLT_Vd_Vn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = 0xef8e800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcmlt";
}
impl InsnOpcode for FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0 {
    const OPCODE: u32 = FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0::OPCODE;
    const MASK: u32 = FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_Sd_Sn_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLT_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = 0x5ea0e800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcmlt";
}
impl InsnOpcode for FCMLT_Sd_Sn_FPIMM0 {
    const OPCODE: u32 = FCMLT_Sd_Sn_FPIMM0::OPCODE;
    const MASK: u32 = FCMLT_Sd_Sn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLT_Sd_Sn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMLT_Sd_S_H_Sn_S_H_FPIMM0 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMLT_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = 0x5ef8e800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcmlt";
}
impl InsnOpcode for FCMLT_Sd_S_H_Sn_S_H_FPIMM0 {
    const OPCODE: u32 = FCMLT_Sd_S_H_Sn_S_H_FPIMM0::OPCODE;
    const MASK: u32 = FCMLT_Sd_S_H_Sn_S_H_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMLT_Sd_S_H_Sn_S_H_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = 0x65132000;
    const MASK: u32 = 0xff3fe010;
    const MNEMONIC: &'static str = "fcmne";
}
impl InsnOpcode for FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 {
    const OPCODE: u32 = FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::OPCODE;
    const MASK: u32 = FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65006010;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "fcmne";
}
impl InsnOpcode for FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_Fn_Fm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMP_Fn_Fm {
    const OPCODE: u32 = 0x1e202000;
    const MASK: u32 = 0xff20fc1f;
    const MNEMONIC: &'static str = "fcmp";
}
impl InsnOpcode for FCMP_Fn_Fm {
    const OPCODE: u32 = FCMP_Fn_Fm::OPCODE;
    const MASK: u32 = FCMP_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FCMP_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMP_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee02000;
    const MASK: u32 = 0xffe0fc1f;
    const MNEMONIC: &'static str = "fcmp";
}
impl InsnOpcode for FCMP_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FCMP_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FCMP_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FCMP_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_Fn_FPIMM0 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMP_Fn_FPIMM0 {
    const OPCODE: u32 = 0x1e202008;
    const MASK: u32 = 0xff20fc1f;
    const MNEMONIC: &'static str = "fcmp";
}
impl InsnOpcode for FCMP_Fn_FPIMM0 {
    const OPCODE: u32 = FCMP_Fn_FPIMM0::OPCODE;
    const MASK: u32 = FCMP_Fn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMP_Fn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMP_Fn_S_H_FPIMM0_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMP_Fn_S_H_FPIMM0_S_H {
    const OPCODE: u32 = 0x1ee02008;
    const MASK: u32 = 0xffe0fc1f;
    const MNEMONIC: &'static str = "fcmp";
}
impl InsnOpcode for FCMP_Fn_S_H_FPIMM0_S_H {
    const OPCODE: u32 = FCMP_Fn_S_H_FPIMM0_S_H::OPCODE;
    const MASK: u32 = FCMP_Fn_S_H_FPIMM0_S_H::MASK;
    const MNEMONIC: &'static str = FCMP_Fn_S_H_FPIMM0_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_Fm {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMPE_Fn_Fm {
    const OPCODE: u32 = 0x1e202010;
    const MASK: u32 = 0xff20fc1f;
    const MNEMONIC: &'static str = "fcmpe";
}
impl InsnOpcode for FCMPE_Fn_Fm {
    const OPCODE: u32 = FCMPE_Fn_Fm::OPCODE;
    const MASK: u32 = FCMPE_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FCMPE_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMPE_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee02010;
    const MASK: u32 = 0xffe0fc1f;
    const MNEMONIC: &'static str = "fcmpe";
}
impl InsnOpcode for FCMPE_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FCMPE_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FCMPE_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FCMPE_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_FPIMM0 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMPE_Fn_FPIMM0 {
    const OPCODE: u32 = 0x1e202018;
    const MASK: u32 = 0xff20fc1f;
    const MNEMONIC: &'static str = "fcmpe";
}
impl InsnOpcode for FCMPE_Fn_FPIMM0 {
    const OPCODE: u32 = FCMPE_Fn_FPIMM0::OPCODE;
    const MASK: u32 = FCMPE_Fn_FPIMM0::MASK;
    const MNEMONIC: &'static str = FCMPE_Fn_FPIMM0::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMPE_Fn_S_H_FPIMM0_S_H {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCMPE_Fn_S_H_FPIMM0_S_H {
    const OPCODE: u32 = 0x1ee02018;
    const MASK: u32 = 0xffe0fc1f;
    const MNEMONIC: &'static str = "fcmpe";
}
impl InsnOpcode for FCMPE_Fn_S_H_FPIMM0_S_H {
    const OPCODE: u32 = FCMPE_Fn_S_H_FPIMM0_S_H::OPCODE;
    const MASK: u32 = FCMPE_Fn_S_H_FPIMM0_S_H::MASK;
    const MNEMONIC: &'static str = FCMPE_Fn_S_H_FPIMM0_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x6500c000;
    const MASK: u32 = 0xff20e010;
    const MNEMONIC: &'static str = "fcmuo";
}
impl InsnOpcode for FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(4)]
    pub sve_pg4_16: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8 {
    const OPCODE: u32 = 0x510c000;
    const MASK: u32 = 0xff30e000;
    const MNEMONIC: &'static str = "fcpy";
}
impl InsnOpcode for FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8 {
    const OPCODE: u32 = FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8::OPCODE;
    const MASK: u32 = FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8::MASK;
    const MNEMONIC: &'static str = FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCSEL_Fd_Fn_Fm_COND {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCSEL_Fd_Fn_Fm_COND {
    const OPCODE: u32 = 0x1e200c00;
    const MASK: u32 = 0xff200c00;
    const MNEMONIC: &'static str = "fcsel";
}
impl InsnOpcode for FCSEL_Fd_Fn_Fm_COND {
    const OPCODE: u32 = FCSEL_Fd_Fn_Fm_COND::OPCODE;
    const MASK: u32 = FCSEL_Fd_Fn_Fm_COND::MASK;
    const MNEMONIC: &'static str = FCSEL_Fd_Fn_Fm_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND {
    const OPCODE: u32 = 0x1ee00c00;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "fcsel";
}
impl InsnOpcode for FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND {
    const OPCODE: u32 = FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND::OPCODE;
    const MASK: u32 = FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND::MASK;
    const MNEMONIC: &'static str = FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc120e000;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = FCVT_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6588a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65c8a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65caa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x6589a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x65c9a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x65cba000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVT_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVT_Fd_Fn {
    const OPCODE: u32 = 0x1e224000;
    const MASK: u32 = 0xff3e7c00;
    const MNEMONIC: &'static str = "fcvt";
}
impl InsnOpcode for FCVT_Fd_Fn {
    const OPCODE: u32 = FCVT_Fd_Fn::OPCODE;
    const MASK: u32 = FCVT_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FCVT_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAS_Vd_Vn {
    const OPCODE: u32 = 0xe21c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtas";
}
impl InsnOpcode for FCVTAS_Vd_Vn {
    const OPCODE: u32 = FCVTAS_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTAS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTAS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe79c800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtas";
}
impl InsnOpcode for FCVTAS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTAS_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTAS_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTAS_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAS_Rd_Fn {
    const OPCODE: u32 = 0x1e240000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtas";
}
impl InsnOpcode for FCVTAS_Rd_Fn {
    const OPCODE: u32 = FCVTAS_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTAS_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTAS_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAS_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee40000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtas";
}
impl InsnOpcode for FCVTAS_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTAS_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTAS_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTAS_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAS_Sd_Sn {
    const OPCODE: u32 = 0x5e21c800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtas";
}
impl InsnOpcode for FCVTAS_Sd_Sn {
    const OPCODE: u32 = FCVTAS_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTAS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTAS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAS_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5e79c800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtas";
}
impl InsnOpcode for FCVTAS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTAS_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTAS_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTAS_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAU_Vd_Vn {
    const OPCODE: u32 = 0x2e21c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtau";
}
impl InsnOpcode for FCVTAU_Vd_Vn {
    const OPCODE: u32 = FCVTAU_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTAU_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTAU_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e79c800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtau";
}
impl InsnOpcode for FCVTAU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTAU_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTAU_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTAU_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAU_Rd_Fn {
    const OPCODE: u32 = 0x1e250000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtau";
}
impl InsnOpcode for FCVTAU_Rd_Fn {
    const OPCODE: u32 = FCVTAU_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTAU_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTAU_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee50000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtau";
}
impl InsnOpcode for FCVTAU_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTAU_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTAU_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTAU_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAU_Sd_Sn {
    const OPCODE: u32 = 0x7e21c800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtau";
}
impl InsnOpcode for FCVTAU_Sd_Sn {
    const OPCODE: u32 = FCVTAU_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTAU_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTAU_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTAU_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTAU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7e79c800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtau";
}
impl InsnOpcode for FCVTAU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTAU_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTAU_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTAU_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTL_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTL_Vd_Vn {
    const OPCODE: u32 = 0xe217800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtl";
}
impl InsnOpcode for FCVTL_Vd_Vn {
    const OPCODE: u32 = FCVTL_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTL_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTL_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTL2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTL2_Vd_Vn {
    const OPCODE: u32 = 0x4e217800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtl2";
}
impl InsnOpcode for FCVTL2_Vd_Vn {
    const OPCODE: u32 = FCVTL2_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTL2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTL2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6489a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtlt";
}
impl InsnOpcode for FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x64cba000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtlt";
}
impl InsnOpcode for FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMS_Vd_Vn {
    const OPCODE: u32 = 0xe21b800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtms";
}
impl InsnOpcode for FCVTMS_Vd_Vn {
    const OPCODE: u32 = FCVTMS_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTMS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTMS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe79b800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtms";
}
impl InsnOpcode for FCVTMS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTMS_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTMS_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTMS_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMS_Rd_Fn {
    const OPCODE: u32 = 0x1e300000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtms";
}
impl InsnOpcode for FCVTMS_Rd_Fn {
    const OPCODE: u32 = FCVTMS_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTMS_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTMS_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMS_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ef00000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtms";
}
impl InsnOpcode for FCVTMS_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTMS_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTMS_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTMS_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMS_Sd_Sn {
    const OPCODE: u32 = 0x5e21b800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtms";
}
impl InsnOpcode for FCVTMS_Sd_Sn {
    const OPCODE: u32 = FCVTMS_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTMS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTMS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMS_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5e79b800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtms";
}
impl InsnOpcode for FCVTMS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTMS_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTMS_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTMS_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMU_Vd_Vn {
    const OPCODE: u32 = 0x2e21b800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtmu";
}
impl InsnOpcode for FCVTMU_Vd_Vn {
    const OPCODE: u32 = FCVTMU_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTMU_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTMU_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e79b800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtmu";
}
impl InsnOpcode for FCVTMU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTMU_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTMU_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTMU_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMU_Rd_Fn {
    const OPCODE: u32 = 0x1e310000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtmu";
}
impl InsnOpcode for FCVTMU_Rd_Fn {
    const OPCODE: u32 = FCVTMU_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTMU_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTMU_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ef10000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtmu";
}
impl InsnOpcode for FCVTMU_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTMU_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTMU_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTMU_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMU_Sd_Sn {
    const OPCODE: u32 = 0x7e21b800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtmu";
}
impl InsnOpcode for FCVTMU_Sd_Sn {
    const OPCODE: u32 = FCVTMU_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTMU_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTMU_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTMU_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTMU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7e79b800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtmu";
}
impl InsnOpcode for FCVTMU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTMU_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTMU_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTMU_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc120e020;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "fcvtn";
}
impl InsnOpcode for FCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = FCVTN_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = FCVTN_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FCVTN_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTN_Vd_Vn {
    const OPCODE: u32 = 0xe216800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtn";
}
impl InsnOpcode for FCVTN_Vd_Vn {
    const OPCODE: u32 = FCVTN_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTN2_Vd_Vn {
    const OPCODE: u32 = 0x4e216800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtn2";
}
impl InsnOpcode for FCVTN2_Vd_Vn {
    const OPCODE: u32 = FCVTN2_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNS_Vd_Vn {
    const OPCODE: u32 = 0xe21a800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtns";
}
impl InsnOpcode for FCVTNS_Vd_Vn {
    const OPCODE: u32 = FCVTNS_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTNS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTNS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe79a800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtns";
}
impl InsnOpcode for FCVTNS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTNS_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTNS_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTNS_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNS_Rd_Fn {
    const OPCODE: u32 = 0x1e200000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtns";
}
impl InsnOpcode for FCVTNS_Rd_Fn {
    const OPCODE: u32 = FCVTNS_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTNS_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTNS_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNS_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee00000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtns";
}
impl InsnOpcode for FCVTNS_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTNS_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTNS_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTNS_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNS_Sd_Sn {
    const OPCODE: u32 = 0x5e21a800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtns";
}
impl InsnOpcode for FCVTNS_Sd_Sn {
    const OPCODE: u32 = FCVTNS_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTNS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTNS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNS_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5e79a800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtns";
}
impl InsnOpcode for FCVTNS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTNS_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTNS_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTNS_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6488a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtnt";
}
impl InsnOpcode for FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x64caa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtnt";
}
impl InsnOpcode for FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNU_Vd_Vn {
    const OPCODE: u32 = 0x2e21a800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtnu";
}
impl InsnOpcode for FCVTNU_Vd_Vn {
    const OPCODE: u32 = FCVTNU_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTNU_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTNU_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e79a800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtnu";
}
impl InsnOpcode for FCVTNU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTNU_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTNU_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTNU_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNU_Rd_Fn {
    const OPCODE: u32 = 0x1e210000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtnu";
}
impl InsnOpcode for FCVTNU_Rd_Fn {
    const OPCODE: u32 = FCVTNU_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTNU_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTNU_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee10000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtnu";
}
impl InsnOpcode for FCVTNU_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTNU_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTNU_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTNU_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNU_Sd_Sn {
    const OPCODE: u32 = 0x7e21a800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtnu";
}
impl InsnOpcode for FCVTNU_Sd_Sn {
    const OPCODE: u32 = FCVTNU_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTNU_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTNU_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTNU_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTNU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7e79a800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtnu";
}
impl InsnOpcode for FCVTNU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTNU_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTNU_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTNU_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPS_Vd_Vn {
    const OPCODE: u32 = 0xea1a800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtps";
}
impl InsnOpcode for FCVTPS_Vd_Vn {
    const OPCODE: u32 = FCVTPS_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTPS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTPS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef9a800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtps";
}
impl InsnOpcode for FCVTPS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTPS_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTPS_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTPS_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPS_Rd_Fn {
    const OPCODE: u32 = 0x1e280000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtps";
}
impl InsnOpcode for FCVTPS_Rd_Fn {
    const OPCODE: u32 = FCVTPS_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTPS_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTPS_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPS_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee80000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtps";
}
impl InsnOpcode for FCVTPS_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTPS_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTPS_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTPS_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPS_Sd_Sn {
    const OPCODE: u32 = 0x5ea1a800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtps";
}
impl InsnOpcode for FCVTPS_Sd_Sn {
    const OPCODE: u32 = FCVTPS_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTPS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTPS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPS_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5ef9a800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtps";
}
impl InsnOpcode for FCVTPS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTPS_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTPS_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTPS_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPU_Vd_Vn {
    const OPCODE: u32 = 0x2ea1a800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtpu";
}
impl InsnOpcode for FCVTPU_Vd_Vn {
    const OPCODE: u32 = FCVTPU_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTPU_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTPU_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9a800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtpu";
}
impl InsnOpcode for FCVTPU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTPU_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTPU_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTPU_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPU_Rd_Fn {
    const OPCODE: u32 = 0x1e290000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtpu";
}
impl InsnOpcode for FCVTPU_Rd_Fn {
    const OPCODE: u32 = FCVTPU_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTPU_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTPU_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee90000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtpu";
}
impl InsnOpcode for FCVTPU_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTPU_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTPU_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTPU_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPU_Sd_Sn {
    const OPCODE: u32 = 0x7ea1a800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtpu";
}
impl InsnOpcode for FCVTPU_Sd_Sn {
    const OPCODE: u32 = FCVTPU_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTPU_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTPU_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTPU_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTPU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7ef9a800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtpu";
}
impl InsnOpcode for FCVTPU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTPU_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTPU_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTPU_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x650aa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtx";
}
impl InsnOpcode for FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTXN_Vd_Vn {
    const OPCODE: u32 = 0x2e616800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtxn";
}
impl InsnOpcode for FCVTXN_Vd_Vn {
    const OPCODE: u32 = FCVTXN_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTXN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTXN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXN_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTXN_Sd_Sn {
    const OPCODE: u32 = 0x7e216800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtxn";
}
impl InsnOpcode for FCVTXN_Sd_Sn {
    const OPCODE: u32 = FCVTXN_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTXN_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTXN_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTXN2_Vd_Vn {
    const OPCODE: u32 = 0x6e616800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtxn2";
}
impl InsnOpcode for FCVTXN2_Vd_Vn {
    const OPCODE: u32 = FCVTXN2_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTXN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTXN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x640aa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtxnt";
}
impl InsnOpcode for FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc121e000;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = FCVTZS_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = FCVTZS_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FCVTZS_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc131e000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = FCVTZS_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = FCVTZS_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FCVTZS_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x659ca000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65d8a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655ca000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x65dca000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655aa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655ea000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65dea000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Rd_Fn_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl FCVTZS_Rd_Fn_FBITS {
    const OPCODE: u32 = 0x1e180000;
    const MASK: u32 = 0x7f3f0000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Rd_Fn_FBITS {
    const OPCODE: u32 = FCVTZS_Rd_Fn_FBITS::OPCODE;
    const MASK: u32 = FCVTZS_Rd_Fn_FBITS::MASK;
    const MNEMONIC: &'static str = FCVTZS_Rd_Fn_FBITS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32 {
    const OPCODE: u32 = 0x1ed80000;
    const MASK: u32 = 0x7fff0000;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32 {
    const OPCODE: u32 = FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32::OPCODE;
    const MASK: u32 = FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32::MASK;
    const MNEMONIC: &'static str = FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Vd_Vn {
    const OPCODE: u32 = 0xea1b800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Vd_Vn {
    const OPCODE: u32 = FCVTZS_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTZS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTZS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef9b800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTZS_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTZS_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTZS_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Rd_Fn {
    const OPCODE: u32 = 0x1e380000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Rd_Fn {
    const OPCODE: u32 = FCVTZS_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTZS_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTZS_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ef80000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTZS_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTZS_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZS_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Sd_Sn {
    const OPCODE: u32 = 0x5ea1b800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Sd_Sn {
    const OPCODE: u32 = FCVTZS_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTZS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTZS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5ef9b800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTZS_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTZS_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZS_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf00fc00;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = FCVTZS_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = FCVTZS_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = FCVTZS_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = 0xf10fc00;
    const MASK: u32 = 0xbf90fc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::OPCODE;
    const MASK: u32 = FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f00fc00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = FCVTZS_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = FCVTZS_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = FCVTZS_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = 0x5f10fc00;
    const MASK: u32 = 0xff90fc00;
    const MNEMONIC: &'static str = "fcvtzs";
}
impl InsnOpcode for FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::OPCODE;
    const MASK: u32 = FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc121e020;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = FCVTZU_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = FCVTZU_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FCVTZU_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc131e020;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = FCVTZU_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = FCVTZU_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FCVTZU_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65d9a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x659da000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655da000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x65dda000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655ba000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x655fa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65dfa000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_Fn_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl FCVTZU_Rd_Fn_FBITS {
    const OPCODE: u32 = 0x1e190000;
    const MASK: u32 = 0x7f3f0000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Rd_Fn_FBITS {
    const OPCODE: u32 = FCVTZU_Rd_Fn_FBITS::OPCODE;
    const MASK: u32 = FCVTZU_Rd_Fn_FBITS::MASK;
    const MNEMONIC: &'static str = FCVTZU_Rd_Fn_FBITS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32 {
    const OPCODE: u32 = 0x1ed90000;
    const MASK: u32 = 0x7fff0000;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32 {
    const OPCODE: u32 = FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32::OPCODE;
    const MASK: u32 = FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32::MASK;
    const MNEMONIC: &'static str = FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Vd_Vn {
    const OPCODE: u32 = 0x2ea1b800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Vd_Vn {
    const OPCODE: u32 = FCVTZU_Vd_Vn::OPCODE;
    const MASK: u32 = FCVTZU_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FCVTZU_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9b800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FCVTZU_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FCVTZU_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTZU_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Rd_Fn {
    const OPCODE: u32 = 0x1e390000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Rd_Fn {
    const OPCODE: u32 = FCVTZU_Rd_Fn::OPCODE;
    const MASK: u32 = FCVTZU_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FCVTZU_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ef90000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Rd_W_Fn_S_H {
    const OPCODE: u32 = FCVTZU_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FCVTZU_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZU_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Sd_Sn {
    const OPCODE: u32 = 0x7ea1b800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Sd_Sn {
    const OPCODE: u32 = FCVTZU_Sd_Sn::OPCODE;
    const MASK: u32 = FCVTZU_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FCVTZU_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7ef9b800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FCVTZU_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FCVTZU_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZU_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f00fc00;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = FCVTZU_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = FCVTZU_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = FCVTZU_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = 0x2f10fc00;
    const MASK: u32 = 0xbf90fc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::OPCODE;
    const MASK: u32 = FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MASK;
    const MNEMONIC: &'static str = FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f00fc00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = FCVTZU_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = FCVTZU_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = FCVTZU_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = 0x7f10fc00;
    const MASK: u32 = 0xff90fc00;
    const MNEMONIC: &'static str = "fcvtzu";
}
impl InsnOpcode for FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::OPCODE;
    const MASK: u32 = FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MASK;
    const MNEMONIC: &'static str = FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x650d8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fdiv";
}
impl InsnOpcode for FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDIV_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e403c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fdiv";
}
impl InsnOpcode for FDIV_Vd_Vn_Vm {
    const OPCODE: u32 = FDIV_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FDIV_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FDIV_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20fc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fdiv";
}
impl InsnOpcode for FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDIV_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e201800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fdiv";
}
impl InsnOpcode for FDIV_Fd_Fn_Fm {
    const OPCODE: u32 = FDIV_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FDIV_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FDIV_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIV_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDIV_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee01800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fdiv";
}
impl InsnOpcode for FDIV_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FDIV_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FDIV_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FDIV_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x650c8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fdivr";
}
impl InsnOpcode for FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501008;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509008;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201000;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1301000;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01000;
    const MASK: u32 = 0xffe19c38;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11000;
    const MASK: u32 = 0xffe39c78;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub imm2_19: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = 0x64204000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::OPCODE;
    const MASK: u32 = FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::MASK;
    const MNEMONIC: &'static str = FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64208000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fdot";
}
impl InsnOpcode for FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FDUP_SVE_Zd_SVE_FPIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FDUP_SVE_Zd_SVE_FPIMM8 {
    const OPCODE: u32 = 0x2539c000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fdup";
}
impl InsnOpcode for FDUP_SVE_Zd_SVE_FPIMM8 {
    const OPCODE: u32 = FDUP_SVE_Zd_SVE_FPIMM8::OPCODE;
    const MASK: u32 = FDUP_SVE_Zd_SVE_FPIMM8::MASK;
    const MNEMONIC: &'static str = FDUP_SVE_Zd_SVE_FPIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FEXPA_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FEXPA_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x420b800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "fexpa";
}
impl InsnOpcode for FEXPA_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FEXPA_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FEXPA_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FEXPA_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FJCVTZS_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FJCVTZS_Rd_Fn {
    const OPCODE: u32 = 0x1e7e0000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fjcvtzs";
}
impl InsnOpcode for FJCVTZS_Rd_Fn {
    const OPCODE: u32 = FJCVTZS_Rd_Fn::OPCODE;
    const MASK: u32 = FJCVTZS_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FJCVTZS_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6518a000;
    const MASK: u32 = 0xfff9e000;
    const MNEMONIC: &'static str = "flogb";
}
impl InsnOpcode for FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = 0x65208000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fmad";
}
impl InsnOpcode for FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::OPCODE;
    const MASK: u32 = FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MASK;
    const MNEMONIC: &'static str = FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMADD_Fd_Fn_Fm_Fa {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMADD_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = 0x1f000000;
    const MASK: u32 = 0xff208000;
    const MNEMONIC: &'static str = "fmadd";
}
impl InsnOpcode for FMADD_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = FMADD_Fd_Fn_Fm_Fa::OPCODE;
    const MASK: u32 = FMADD_Fd_Fn_Fm_Fa::MASK;
    const MNEMONIC: &'static str = FMADD_Fd_Fn_Fm_Fa::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = 0x1fc00000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "fmadd";
}
impl InsnOpcode for FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::OPCODE;
    const MASK: u32 = FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MASK;
    const MNEMONIC: &'static str = FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a100;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b100;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a900;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b900;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65068000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = 0x651e8000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::OPCODE;
    const MASK: u32 = FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MASK;
    const MNEMONIC: &'static str = FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAX_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe403400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_Vd_Vn_Vm {
    const OPCODE: u32 = FMAX_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMAX_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMAX_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20f400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAX_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e204800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_Fd_Fn_Fm {
    const OPCODE: u32 = FMAX_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FMAX_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FMAX_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAX_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAX_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee04800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmax";
}
impl InsnOpcode for FMAX_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FMAX_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FMAX_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FMAX_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a120;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b120;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a920;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b920;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65048000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = 0x651c8000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::OPCODE;
    const MASK: u32 = FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MASK;
    const MNEMONIC: &'static str = FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNM_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe400400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_Vd_Vn_Vm {
    const OPCODE: u32 = FMAXNM_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMAXNM_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMAXNM_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20c400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNM_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e206800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_Fd_Fn_Fm {
    const OPCODE: u32 = FMAXNM_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FMAXNM_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FMAXNM_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee06800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmaxnm";
}
impl InsnOpcode for FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64148000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxnmp";
}
impl InsnOpcode for FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNMP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e400400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmaxnmp";
}
impl InsnOpcode for FMAXNMP_Vd_Vn_Vm {
    const OPCODE: u32 = FMAXNMP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMAXNMP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMAXNMP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20c400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmaxnmp";
}
impl InsnOpcode for FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXNMP_Sd_Vn {
    const OPCODE: u32 = 0x5e30c800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fmaxnmp";
}
impl InsnOpcode for FMAXNMP_Sd_Vn {
    const OPCODE: u32 = FMAXNMP_Sd_Vn::OPCODE;
    const MASK: u32 = FMAXNMP_Sd_Vn::MASK;
    const MNEMONIC: &'static str = FMAXNMP_Sd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXNMP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7e30c800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fmaxnmp";
}
impl InsnOpcode for FMAXNMP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = FMAXNMP_Sd_S_S_Vn_V_2S::OPCODE;
    const MASK: u32 = FMAXNMP_Sd_S_S_Vn_V_2S::MASK;
    const MNEMONIC: &'static str = FMAXNMP_Sd_S_S_Vn_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXNMQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6414a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxnmqv";
}
impl InsnOpcode for FMAXNMQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMAXNMQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMAXNMQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMAXNMQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65042000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxnmv";
}
impl InsnOpcode for FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXNMV_Fd_Vn {
    const OPCODE: u32 = 0xe30c800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fmaxnmv";
}
impl InsnOpcode for FMAXNMV_Fd_Vn {
    const OPCODE: u32 = FMAXNMV_Fd_Vn::OPCODE;
    const MASK: u32 = FMAXNMV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = FMAXNMV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXNMV_Fd_S_S_Vn_V_4S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXNMV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = 0x2e30c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fmaxnmv";
}
impl InsnOpcode for FMAXNMV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = FMAXNMV_Fd_S_S_Vn_V_4S::OPCODE;
    const MASK: u32 = FMAXNMV_Fd_S_S_Vn_V_4S::MASK;
    const MNEMONIC: &'static str = FMAXNMV_Fd_S_S_Vn_V_4S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64168000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxp";
}
impl InsnOpcode for FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e403400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmaxp";
}
impl InsnOpcode for FMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = FMAXP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMAXP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMAXP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20f400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmaxp";
}
impl InsnOpcode for FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXP_Sd_Vn {
    const OPCODE: u32 = 0x5e30f800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fmaxp";
}
impl InsnOpcode for FMAXP_Sd_Vn {
    const OPCODE: u32 = FMAXP_Sd_Vn::OPCODE;
    const MASK: u32 = FMAXP_Sd_Vn::MASK;
    const MNEMONIC: &'static str = FMAXP_Sd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7e30f800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fmaxp";
}
impl InsnOpcode for FMAXP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = FMAXP_Sd_S_S_Vn_V_2S::OPCODE;
    const MASK: u32 = FMAXP_Sd_S_S_Vn_V_2S::MASK;
    const MNEMONIC: &'static str = FMAXP_Sd_S_S_Vn_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6416a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxqv";
}
impl InsnOpcode for FMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMAXQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMAXQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMAXQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65062000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmaxv";
}
impl InsnOpcode for FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXV_Fd_Vn {
    const OPCODE: u32 = 0xe30f800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fmaxv";
}
impl InsnOpcode for FMAXV_Fd_Vn {
    const OPCODE: u32 = FMAXV_Fd_Vn::OPCODE;
    const MASK: u32 = FMAXV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = FMAXV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMAXV_Fd_S_S_Vn_V_4S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMAXV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = 0x2e30f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fmaxv";
}
impl InsnOpcode for FMAXV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = FMAXV_Fd_S_S_Vn_V_4S::OPCODE;
    const MASK: u32 = FMAXV_Fd_S_S_Vn_V_4S::MASK;
    const MNEMONIC: &'static str = FMAXV_Fd_S_S_Vn_V_4S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a101;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b101;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a901;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b901;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65078000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = 0x651f8000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::OPCODE;
    const MASK: u32 = FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MASK;
    const MNEMONIC: &'static str = FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMIN_Vd_Vn_Vm {
    const OPCODE: u32 = 0xec03400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_Vd_Vn_Vm {
    const OPCODE: u32 = FMIN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMIN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMIN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xea0f400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMIN_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e205800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_Fd_Fn_Fm {
    const OPCODE: u32 = FMIN_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FMIN_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FMIN_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMIN_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMIN_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee05800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmin";
}
impl InsnOpcode for FMIN_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FMIN_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FMIN_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FMIN_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a121;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b121;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a921;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b921;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65058000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = 0x651d8000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE {
    const OPCODE: u32 = FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::OPCODE;
    const MASK: u32 = FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MASK;
    const MNEMONIC: &'static str = FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNM_Vd_Vn_Vm {
    const OPCODE: u32 = 0xec00400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_Vd_Vn_Vm {
    const OPCODE: u32 = FMINNM_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMINNM_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMINNM_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xea0c400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNM_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e207800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_Fd_Fn_Fm {
    const OPCODE: u32 = FMINNM_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FMINNM_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FMINNM_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNM_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNM_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee07800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fminnm";
}
impl InsnOpcode for FMINNM_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FMINNM_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FMINNM_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FMINNM_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64158000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminnmp";
}
impl InsnOpcode for FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNMP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec00400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fminnmp";
}
impl InsnOpcode for FMINNMP_Vd_Vn_Vm {
    const OPCODE: u32 = FMINNMP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMINNMP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMINNMP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2ea0c400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fminnmp";
}
impl InsnOpcode for FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINNMP_Sd_Vn {
    const OPCODE: u32 = 0x5eb0c800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fminnmp";
}
impl InsnOpcode for FMINNMP_Sd_Vn {
    const OPCODE: u32 = FMINNMP_Sd_Vn::OPCODE;
    const MASK: u32 = FMINNMP_Sd_Vn::MASK;
    const MNEMONIC: &'static str = FMINNMP_Sd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINNMP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7eb0c800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fminnmp";
}
impl InsnOpcode for FMINNMP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = FMINNMP_Sd_S_S_Vn_V_2S::OPCODE;
    const MASK: u32 = FMINNMP_Sd_S_S_Vn_V_2S::MASK;
    const MNEMONIC: &'static str = FMINNMP_Sd_S_S_Vn_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINNMQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6415a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminnmqv";
}
impl InsnOpcode for FMINNMQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMINNMQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMINNMQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMINNMQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65052000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminnmv";
}
impl InsnOpcode for FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINNMV_Fd_Vn {
    const OPCODE: u32 = 0xeb0c800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fminnmv";
}
impl InsnOpcode for FMINNMV_Fd_Vn {
    const OPCODE: u32 = FMINNMV_Fd_Vn::OPCODE;
    const MASK: u32 = FMINNMV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = FMINNMV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINNMV_Fd_S_S_Vn_V_4S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINNMV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = 0x2eb0c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fminnmv";
}
impl InsnOpcode for FMINNMV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = FMINNMV_Fd_S_S_Vn_V_4S::OPCODE;
    const MASK: u32 = FMINNMV_Fd_S_S_Vn_V_4S::MASK;
    const MNEMONIC: &'static str = FMINNMV_Fd_S_S_Vn_V_4S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x64178000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminp";
}
impl InsnOpcode for FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ec03400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fminp";
}
impl InsnOpcode for FMINP_Vd_Vn_Vm {
    const OPCODE: u32 = FMINP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMINP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMINP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2ea0f400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fminp";
}
impl InsnOpcode for FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Sd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINP_Sd_Vn {
    const OPCODE: u32 = 0x5eb0f800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fminp";
}
impl InsnOpcode for FMINP_Sd_Vn {
    const OPCODE: u32 = FMINP_Sd_Vn::OPCODE;
    const MASK: u32 = FMINP_Sd_Vn::MASK;
    const MNEMONIC: &'static str = FMINP_Sd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINP_Sd_S_S_Vn_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = 0x7eb0f800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "fminp";
}
impl InsnOpcode for FMINP_Sd_S_S_Vn_V_2S {
    const OPCODE: u32 = FMINP_Sd_S_S_Vn_V_2S::OPCODE;
    const MASK: u32 = FMINP_Sd_S_S_Vn_V_2S::MASK;
    const MNEMONIC: &'static str = FMINP_Sd_S_S_Vn_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6417a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminqv";
}
impl InsnOpcode for FMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMINQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMINQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMINQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65072000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fminv";
}
impl InsnOpcode for FMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FMINV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FMINV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FMINV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINV_Fd_Vn {
    const OPCODE: u32 = 0xeb0f800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fminv";
}
impl InsnOpcode for FMINV_Fd_Vn {
    const OPCODE: u32 = FMINV_Fd_Vn::OPCODE;
    const MASK: u32 = FMINV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = FMINV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMINV_Fd_S_S_Vn_V_4S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMINV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = 0x2eb0f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fminv";
}
impl InsnOpcode for FMINV_Fd_S_S_Vn_V_4S {
    const OPCODE: u32 = FMINV_Fd_S_S_Vn_V_4S::OPCODE;
    const MASK: u32 = FMINV_Fd_S_S_Vn_V_4S::MASK;
    const MNEMONIC: &'static str = FMINV_Fd_S_S_Vn_V_4S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500000;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508000;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d00000;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08000;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201800;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = 0xc1301800;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01800;
    const MASK: u32 = 0xffa19c38;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11800;
    const MASK: u32 = 0xffa39c78;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x64200000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x64a00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x64e00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65200000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe400c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_Vd_Vn_Vm {
    const OPCODE: u32 = FMLA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMLA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMLA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20cc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf001000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_Vd_Vn_Em16 {
    const OPCODE: u32 = FMLA_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMLA_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMLA_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_Vd_Vn_Em {
    const OPCODE: u32 = 0xf801000;
    const MASK: u32 = 0xbf80f400;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_Vd_Vn_Em {
    const OPCODE: u32 = FMLA_Vd_Vn_Em::OPCODE;
    const MASK: u32 = FMLA_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = FMLA_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f001000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_Sd_Sn_Em16 {
    const OPCODE: u32 = FMLA_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = FMLA_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = FMLA_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLA_Sd_Sn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLA_Sd_Sn_Em {
    const OPCODE: u32 = 0x5f801000;
    const MASK: u32 = 0xff80f400;
    const MNEMONIC: &'static str = "fmla";
}
impl InsnOpcode for FMLA_Sd_Sn_Em {
    const OPCODE: u32 = FMLA_Sd_Sn_Em::OPCODE;
    const MASK: u32 = FMLA_Sd_Sn_Em::MASK;
    const MNEMONIC: &'static str = FMLA_Sd_Sn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1801000;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1901000;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1909000;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200800;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1300800;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00800;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10800;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200c00;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20ec00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = FMLAL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMLAL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMLAL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = 0x4e20ec00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H::OPCODE;
    const MASK: u32 = FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H::MASK;
    const MNEMONIC: &'static str = FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf800000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = FMLAL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMLAL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMLAL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = 0x4f800000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlal";
}
impl InsnOpcode for FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H::OPCODE;
    const MASK: u32 = FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H::MASK;
    const MNEMONIC: &'static str = FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20cc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlal2";
}
impl InsnOpcode for FMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = FMLAL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMLAL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMLAL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = 0x6e20cc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlal2";
}
impl InsnOpcode for FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H::OPCODE;
    const MASK: u32 = FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H::MASK;
    const MNEMONIC: &'static str = FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f808000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlal2";
}
impl InsnOpcode for FMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = FMLAL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMLAL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMLAL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = 0x6f808000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlal2";
}
impl InsnOpcode for FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H::OPCODE;
    const MASK: u32 = FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H::MASK;
    const MNEMONIC: &'static str = FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64a04000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "fmlalb";
}
impl InsnOpcode for FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmlalb";
}
impl InsnOpcode for FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64a04400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "fmlalt";
}
impl InsnOpcode for FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a08400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmlalt";
}
impl InsnOpcode for FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500010;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508010;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d00010;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08010;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201808;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = 0xc1301808;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01808;
    const MASK: u32 = 0xffa19c38;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11808;
    const MASK: u32 = 0xffa39c78;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x64200400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x64a00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x64e00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65202000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_Vd_Vn_Vm {
    const OPCODE: u32 = 0xec00c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_Vd_Vn_Vm {
    const OPCODE: u32 = FMLS_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMLS_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMLS_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xea0cc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf005000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_Vd_Vn_Em16 {
    const OPCODE: u32 = FMLS_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMLS_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMLS_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_Vd_Vn_Em {
    const OPCODE: u32 = 0xf805000;
    const MASK: u32 = 0xbf80f400;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_Vd_Vn_Em {
    const OPCODE: u32 = FMLS_Vd_Vn_Em::OPCODE;
    const MASK: u32 = FMLS_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = FMLS_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f005000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_Sd_Sn_Em16 {
    const OPCODE: u32 = FMLS_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = FMLS_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = FMLS_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLS_Sd_Sn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLS_Sd_Sn_Em {
    const OPCODE: u32 = 0x5f805000;
    const MASK: u32 = 0xff80f400;
    const MNEMONIC: &'static str = "fmls";
}
impl InsnOpcode for FMLS_Sd_Sn_Em {
    const OPCODE: u32 = FMLS_Sd_Sn_Em::OPCODE;
    const MASK: u32 = FMLS_Sd_Sn_Em::MASK;
    const MNEMONIC: &'static str = FMLS_Sd_Sn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1801008;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1901008;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1909008;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200808;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1300808;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00808;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10808;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200c08;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xea0ec00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = FMLSL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMLSL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMLSL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = 0x4ea0ec00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H::OPCODE;
    const MASK: u32 = FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H::MASK;
    const MNEMONIC: &'static str = FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf804000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = FMLSL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMLSL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMLSL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = 0x4f804000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlsl";
}
impl InsnOpcode for FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H::OPCODE;
    const MASK: u32 = FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H::MASK;
    const MNEMONIC: &'static str = FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2ea0cc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlsl2";
}
impl InsnOpcode for FMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = FMLSL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMLSL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMLSL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = 0x6ea0cc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmlsl2";
}
impl InsnOpcode for FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H {
    const OPCODE: u32 = FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H::OPCODE;
    const MASK: u32 = FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H::MASK;
    const MNEMONIC: &'static str = FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f80c000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlsl2";
}
impl InsnOpcode for FMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = FMLSL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMLSL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMLSL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = 0x6f80c000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmlsl2";
}
impl InsnOpcode for FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H {
    const OPCODE: u32 = FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H::OPCODE;
    const MASK: u32 = FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H::MASK;
    const MNEMONIC: &'static str = FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmlslb";
}
impl InsnOpcode for FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64a06000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "fmlslb";
}
impl InsnOpcode for FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a0a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmlslt";
}
impl InsnOpcode for FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x64a06400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "fmlslt";
}
impl InsnOpcode for FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x64a0e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmmla";
}
impl InsnOpcode for FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D {
    const OPCODE: u32 = 0x64e0e400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmmla";
}
impl InsnOpcode for FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D {
    const OPCODE: u32 = FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D::OPCODE;
    const MASK: u32 = FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D::MASK;
    const MNEMONIC: &'static str = FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "fmopa";
}
impl InsnOpcode for FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80c00000;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "fmopa";
}
impl InsnOpcode for FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = 0x81a00000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "fmopa";
}
impl InsnOpcode for FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 =
        FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::OPCODE;
    const MASK: u32 = FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MASK;
    const MNEMONIC: &'static str =
        FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80800010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "fmops";
}
impl InsnOpcode for FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x80c00010;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "fmops";
}
impl InsnOpcode for FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = 0x81a00010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "fmops";
}
impl InsnOpcode for FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 =
        FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::OPCODE;
    const MASK: u32 = FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MASK;
    const MNEMONIC: &'static str =
        FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Rd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Rd_Fn {
    const OPCODE: u32 = 0x1e260000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Rd_Fn {
    const OPCODE: u32 = FMOV_Rd_Fn::OPCODE;
    const MASK: u32 = FMOV_Rd_Fn::MASK;
    const MNEMONIC: &'static str = FMOV_Rd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Rd_W_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Rd_W_Fn_S_H {
    const OPCODE: u32 = 0x1ee60000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Rd_W_Fn_S_H {
    const OPCODE: u32 = FMOV_Rd_W_Fn_S_H::OPCODE;
    const MASK: u32 = FMOV_Rd_W_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FMOV_Rd_W_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Rd_VnD1 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Rd_VnD1 {
    const OPCODE: u32 = 0x9eae0000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Rd_VnD1 {
    const OPCODE: u32 = FMOV_Rd_VnD1::OPCODE;
    const MASK: u32 = FMOV_Rd_VnD1::MASK;
    const MNEMONIC: &'static str = FMOV_Rd_VnD1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Fd_Rn {
    const OPCODE: u32 = 0x1e270000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Fd_Rn {
    const OPCODE: u32 = FMOV_Fd_Rn::OPCODE;
    const MASK: u32 = FMOV_Fd_Rn::MASK;
    const MNEMONIC: &'static str = FMOV_Fd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_S_H_Rn_W {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Fd_S_H_Rn_W {
    const OPCODE: u32 = 0x1ee70000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Fd_S_H_Rn_W {
    const OPCODE: u32 = FMOV_Fd_S_H_Rn_W::OPCODE;
    const MASK: u32 = FMOV_Fd_S_H_Rn_W::MASK;
    const MNEMONIC: &'static str = FMOV_Fd_S_H_Rn_W::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_VdD1_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_VdD1_Rn {
    const OPCODE: u32 = 0x9eaf0000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_VdD1_Rn {
    const OPCODE: u32 = FMOV_VdD1_Rn::OPCODE;
    const MASK: u32 = FMOV_VdD1_Rn::MASK;
    const MNEMONIC: &'static str = FMOV_VdD1_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Fd_Fn {
    const OPCODE: u32 = 0x1e204000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Fd_Fn {
    const OPCODE: u32 = FMOV_Fd_Fn::OPCODE;
    const MASK: u32 = FMOV_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FMOV_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FMOV_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee04000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FMOV_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FMOV_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FMOV_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(8)]
    pub _op_5: u32,
    #[bits(8)]
    pub imm8: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOV_Fd_FPIMM {
    const OPCODE: u32 = 0x1e201000;
    const MASK: u32 = 0xff201fe0;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Fd_FPIMM {
    const OPCODE: u32 = FMOV_Fd_FPIMM::OPCODE;
    const MASK: u32 = FMOV_Fd_FPIMM::MASK;
    const MNEMONIC: &'static str = FMOV_Fd_FPIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Fd_S_H_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(8)]
    pub _op_5: u32,
    #[bits(8)]
    pub imm8: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMOV_Fd_S_H_FPIMM {
    const OPCODE: u32 = 0x1ee01000;
    const MASK: u32 = 0xffe01fe0;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Fd_S_H_FPIMM {
    const OPCODE: u32 = FMOV_Fd_S_H_FPIMM::OPCODE;
    const MASK: u32 = FMOV_Fd_S_H_FPIMM::MASK;
    const MNEMONIC: &'static str = FMOV_Fd_S_H_FPIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Vd_SIMD_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl FMOV_Vd_SIMD_FPIMM {
    const OPCODE: u32 = 0xf00f400;
    const MASK: u32 = 0xbff8fc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Vd_SIMD_FPIMM {
    const OPCODE: u32 = FMOV_Vd_SIMD_FPIMM::OPCODE;
    const MASK: u32 = FMOV_Vd_SIMD_FPIMM::MASK;
    const MNEMONIC: &'static str = FMOV_Vd_SIMD_FPIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Vd_V_2D_SIMD_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl FMOV_Vd_V_2D_SIMD_FPIMM {
    const OPCODE: u32 = 0x6f00f400;
    const MASK: u32 = 0xfff8fc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Vd_V_2D_SIMD_FPIMM {
    const OPCODE: u32 = FMOV_Vd_V_2D_SIMD_FPIMM::OPCODE;
    const MASK: u32 = FMOV_Vd_V_2D_SIMD_FPIMM::MASK;
    const MNEMONIC: &'static str = FMOV_Vd_V_2D_SIMD_FPIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMOV_Vd_V_4H_SIMD_FPIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl FMOV_Vd_V_4H_SIMD_FPIMM {
    const OPCODE: u32 = 0xf00fc00;
    const MASK: u32 = 0xbff8fc00;
    const MNEMONIC: &'static str = "fmov";
}
impl InsnOpcode for FMOV_Vd_V_4H_SIMD_FPIMM {
    const OPCODE: u32 = FMOV_Vd_V_4H_SIMD_FPIMM::OPCODE;
    const MASK: u32 = FMOV_Vd_V_4H_SIMD_FPIMM::MASK;
    const MNEMONIC: &'static str = FMOV_Vd_V_4H_SIMD_FPIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = 0x6520a000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fmsb";
}
impl InsnOpcode for FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::OPCODE;
    const MASK: u32 = FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MASK;
    const MNEMONIC: &'static str = FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMSUB_Fd_Fn_Fm_Fa {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMSUB_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = 0x1f008000;
    const MASK: u32 = 0xff208000;
    const MNEMONIC: &'static str = "fmsub";
}
impl InsnOpcode for FMSUB_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = FMSUB_Fd_Fn_Fm_Fa::OPCODE;
    const MASK: u32 = FMSUB_Fd_Fn_Fm_Fa::MASK;
    const MNEMONIC: &'static str = FMSUB_Fd_Fn_Fm_Fa::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = 0x1fc08000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "fmsub";
}
impl InsnOpcode for FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::OPCODE;
    const MASK: u32 = FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MASK;
    const MNEMONIC: &'static str = FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x64202000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x64a02000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x64e02000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65028000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO {
    const OPCODE: u32 = 0x651a8000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO {
    const OPCODE: u32 = FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO::OPCODE;
    const MASK: u32 = FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO::MASK;
    const MNEMONIC: &'static str = FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e401c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Vd_Vn_Vm {
    const OPCODE: u32 = FMUL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMUL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMUL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0x2e20dc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e200800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Fd_Fn_Fm {
    const OPCODE: u32 = FMUL_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FMUL_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FMUL_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FMUL_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FMUL_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FMUL_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf009000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Vd_Vn_Em16 {
    const OPCODE: u32 = FMUL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMUL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMUL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Vd_Vn_Em {
    const OPCODE: u32 = 0xf809000;
    const MASK: u32 = 0xbf80f400;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Vd_Vn_Em {
    const OPCODE: u32 = FMUL_Vd_Vn_Em::OPCODE;
    const MASK: u32 = FMUL_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = FMUL_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f009000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Sd_Sn_Em16 {
    const OPCODE: u32 = FMUL_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = FMUL_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = FMUL_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMUL_Sd_Sn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMUL_Sd_Sn_Em {
    const OPCODE: u32 = 0x5f809000;
    const MASK: u32 = 0xff80f400;
    const MNEMONIC: &'static str = "fmul";
}
impl InsnOpcode for FMUL_Sd_Sn_Em {
    const OPCODE: u32 = FMUL_Sd_Sn_Em::OPCODE;
    const MASK: u32 = FMUL_Sd_Sn_Em::MASK;
    const MNEMONIC: &'static str = FMUL_Sd_Sn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x650a8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe401c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Vd_Vn_Vm {
    const OPCODE: u32 = FMULX_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FMULX_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FMULX_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e401c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Sd_Sn_Sm {
    const OPCODE: u32 = FMULX_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FMULX_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FMULX_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20dc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x5e20dc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FMULX_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FMULX_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FMULX_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f009000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Vd_Vn_Em16 {
    const OPCODE: u32 = FMULX_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = FMULX_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = FMULX_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Vd_Vn_Em {
    const OPCODE: u32 = 0x2f809000;
    const MASK: u32 = 0xbf80f400;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Vd_Vn_Em {
    const OPCODE: u32 = FMULX_Vd_Vn_Em::OPCODE;
    const MASK: u32 = FMULX_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = FMULX_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x7f009000;
    const MASK: u32 = 0xffc0f400;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Sd_Sn_Em16 {
    const OPCODE: u32 = FMULX_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = FMULX_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = FMULX_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FMULX_Sd_Sn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FMULX_Sd_Sn_Em {
    const OPCODE: u32 = 0x7f809000;
    const MASK: u32 = 0xff80f400;
    const MNEMONIC: &'static str = "fmulx";
}
impl InsnOpcode for FMULX_Sd_Sn_Em {
    const OPCODE: u32 = FMULX_Sd_Sn_Em::OPCODE;
    const MASK: u32 = FMULX_Sd_Sn_Em::MASK;
    const MNEMONIC: &'static str = FMULX_Sd_Sn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FNEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41da000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fneg";
}
impl InsnOpcode for FNEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FNEG_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FNEG_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FNEG_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FNEG_Vd_Vn {
    const OPCODE: u32 = 0x2ea0f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fneg";
}
impl InsnOpcode for FNEG_Vd_Vn {
    const OPCODE: u32 = FNEG_Vd_Vn::OPCODE;
    const MASK: u32 = FNEG_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FNEG_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FNEG_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef8f800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fneg";
}
impl InsnOpcode for FNEG_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FNEG_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FNEG_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FNEG_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FNEG_Fd_Fn {
    const OPCODE: u32 = 0x1e214000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "fneg";
}
impl InsnOpcode for FNEG_Fd_Fn {
    const OPCODE: u32 = FNEG_Fd_Fn::OPCODE;
    const MASK: u32 = FNEG_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FNEG_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNEG_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FNEG_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee14000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fneg";
}
impl InsnOpcode for FNEG_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FNEG_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FNEG_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FNEG_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = 0x6520c000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fnmad";
}
impl InsnOpcode for FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::OPCODE;
    const MASK: u32 = FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MASK;
    const MNEMONIC: &'static str = FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMADD_Fd_Fn_Fm_Fa {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMADD_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = 0x1f200000;
    const MASK: u32 = 0xff208000;
    const MNEMONIC: &'static str = "fnmadd";
}
impl InsnOpcode for FNMADD_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = FNMADD_Fd_Fn_Fm_Fa::OPCODE;
    const MASK: u32 = FNMADD_Fd_Fn_Fm_Fa::MASK;
    const MNEMONIC: &'static str = FNMADD_Fd_Fn_Fm_Fa::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = 0x1fe00000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "fnmadd";
}
impl InsnOpcode for FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::OPCODE;
    const MASK: u32 = FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MASK;
    const MNEMONIC: &'static str = FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65204000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fnmla";
}
impl InsnOpcode for FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65206000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fnmls";
}
impl InsnOpcode for FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_za_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = 0x6520e000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "fnmsb";
}
impl InsnOpcode for FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 {
    const OPCODE: u32 = FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::OPCODE;
    const MASK: u32 = FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MASK;
    const MNEMONIC: &'static str = FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMSUB_Fd_Fn_Fm_Fa {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMSUB_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = 0x1f208000;
    const MASK: u32 = 0xff208000;
    const MNEMONIC: &'static str = "fnmsub";
}
impl InsnOpcode for FNMSUB_Fd_Fn_Fm_Fa {
    const OPCODE: u32 = FNMSUB_Fd_Fn_Fm_Fa::OPCODE;
    const MASK: u32 = FNMSUB_Fd_Fn_Fm_Fa::MASK;
    const MNEMONIC: &'static str = FNMSUB_Fd_Fn_Fm_Fa::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = 0x1fe08000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "fnmsub";
}
impl InsnOpcode for FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H {
    const OPCODE: u32 = FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::OPCODE;
    const MASK: u32 = FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MASK;
    const MNEMONIC: &'static str = FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMUL_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMUL_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e208800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fnmul";
}
impl InsnOpcode for FNMUL_Fd_Fn_Fm {
    const OPCODE: u32 = FNMUL_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FNMUL_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FNMUL_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FNMUL_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FNMUL_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee08800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fnmul";
}
impl InsnOpcode for FNMUL_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FNMUL_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FNMUL_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FNMUL_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x650e3000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frecpe";
}
impl InsnOpcode for FRECPE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FRECPE_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FRECPE_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRECPE_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPE_Vd_Vn {
    const OPCODE: u32 = 0xea1d800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frecpe";
}
impl InsnOpcode for FRECPE_Vd_Vn {
    const OPCODE: u32 = FRECPE_Vd_Vn::OPCODE;
    const MASK: u32 = FRECPE_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRECPE_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPE_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef9d800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frecpe";
}
impl InsnOpcode for FRECPE_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRECPE_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRECPE_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRECPE_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPE_Sd_Sn {
    const OPCODE: u32 = 0x5ea1d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frecpe";
}
impl InsnOpcode for FRECPE_Sd_Sn {
    const OPCODE: u32 = FRECPE_Sd_Sn::OPCODE;
    const MASK: u32 = FRECPE_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FRECPE_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPE_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPE_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5ef9d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frecpe";
}
impl InsnOpcode for FRECPE_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FRECPE_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FRECPE_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FRECPE_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65001800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "frecps";
}
impl InsnOpcode for FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRECPS_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe403c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "frecps";
}
impl InsnOpcode for FRECPS_Vd_Vn_Vm {
    const OPCODE: u32 = FRECPS_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FRECPS_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FRECPS_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRECPS_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e403c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "frecps";
}
impl InsnOpcode for FRECPS_Sd_Sn_Sm {
    const OPCODE: u32 = FRECPS_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FRECPS_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FRECPS_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xe20fc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "frecps";
}
impl InsnOpcode for FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPS_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRECPS_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x5e20fc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "frecps";
}
impl InsnOpcode for FRECPS_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FRECPS_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FRECPS_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FRECPS_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x650ca000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frecpx";
}
impl InsnOpcode for FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPX_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPX_Sd_Sn {
    const OPCODE: u32 = 0x5ea1f800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frecpx";
}
impl InsnOpcode for FRECPX_Sd_Sn {
    const OPCODE: u32 = FRECPX_Sd_Sn::OPCODE;
    const MASK: u32 = FRECPX_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FRECPX_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRECPX_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRECPX_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5ef9f800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frecpx";
}
impl InsnOpcode for FRECPX_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FRECPX_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FRECPX_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FRECPX_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32X_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT32X_Vd_Vn {
    const OPCODE: u32 = 0x2e21e800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frint32x";
}
impl InsnOpcode for FRINT32X_Vd_Vn {
    const OPCODE: u32 = FRINT32X_Vd_Vn::OPCODE;
    const MASK: u32 = FRINT32X_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINT32X_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32X_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT32X_Fd_Fn {
    const OPCODE: u32 = 0x1e28c000;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frint32x";
}
impl InsnOpcode for FRINT32X_Fd_Fn {
    const OPCODE: u32 = FRINT32X_Fd_Fn::OPCODE;
    const MASK: u32 = FRINT32X_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINT32X_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32Z_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT32Z_Vd_Vn {
    const OPCODE: u32 = 0xe21e800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frint32z";
}
impl InsnOpcode for FRINT32Z_Vd_Vn {
    const OPCODE: u32 = FRINT32Z_Vd_Vn::OPCODE;
    const MASK: u32 = FRINT32Z_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINT32Z_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT32Z_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT32Z_Fd_Fn {
    const OPCODE: u32 = 0x1e284000;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frint32z";
}
impl InsnOpcode for FRINT32Z_Fd_Fn {
    const OPCODE: u32 = FRINT32Z_Fd_Fn::OPCODE;
    const MASK: u32 = FRINT32Z_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINT32Z_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64X_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT64X_Vd_Vn {
    const OPCODE: u32 = 0x2e21f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frint64x";
}
impl InsnOpcode for FRINT64X_Vd_Vn {
    const OPCODE: u32 = FRINT64X_Vd_Vn::OPCODE;
    const MASK: u32 = FRINT64X_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINT64X_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64X_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT64X_Fd_Fn {
    const OPCODE: u32 = 0x1e29c000;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frint64x";
}
impl InsnOpcode for FRINT64X_Fd_Fn {
    const OPCODE: u32 = FRINT64X_Fd_Fn::OPCODE;
    const MASK: u32 = FRINT64X_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINT64X_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64Z_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT64Z_Vd_Vn {
    const OPCODE: u32 = 0xe21f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frint64z";
}
impl InsnOpcode for FRINT64Z_Vd_Vn {
    const OPCODE: u32 = FRINT64Z_Vd_Vn::OPCODE;
    const MASK: u32 = FRINT64Z_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINT64Z_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINT64Z_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINT64Z_Fd_Fn {
    const OPCODE: u32 = 0x1e294000;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frint64z";
}
impl InsnOpcode for FRINT64Z_Fd_Fn {
    const OPCODE: u32 = FRINT64Z_Fd_Fn::OPCODE;
    const MASK: u32 = FRINT64Z_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINT64Z_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTA_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1ace000;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = FRINTA_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = FRINTA_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FRINTA_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTA_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1bce000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = FRINTA_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = FRINTA_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FRINTA_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6504a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTA_Vd_Vn {
    const OPCODE: u32 = 0x2e218800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_Vd_Vn {
    const OPCODE: u32 = FRINTA_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTA_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTA_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTA_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e798800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTA_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTA_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTA_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTA_Fd_Fn {
    const OPCODE: u32 = 0x1e264000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_Fd_Fn {
    const OPCODE: u32 = FRINTA_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTA_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTA_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTA_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTA_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee64000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frinta";
}
impl InsnOpcode for FRINTA_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTA_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTA_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTA_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6507a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frinti";
}
impl InsnOpcode for FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTI_Vd_Vn {
    const OPCODE: u32 = 0x2ea19800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frinti";
}
impl InsnOpcode for FRINTI_Vd_Vn {
    const OPCODE: u32 = FRINTI_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTI_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTI_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTI_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef99800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frinti";
}
impl InsnOpcode for FRINTI_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTI_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTI_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTI_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTI_Fd_Fn {
    const OPCODE: u32 = 0x1e27c000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frinti";
}
impl InsnOpcode for FRINTI_Fd_Fn {
    const OPCODE: u32 = FRINTI_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTI_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTI_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTI_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTI_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee7c000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frinti";
}
impl InsnOpcode for FRINTI_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTI_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTI_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTI_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTM_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1aae000;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = FRINTM_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = FRINTM_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FRINTM_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTM_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1bae000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = FRINTM_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = FRINTM_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FRINTM_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6502a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTM_Vd_Vn {
    const OPCODE: u32 = 0xe219800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_Vd_Vn {
    const OPCODE: u32 = FRINTM_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTM_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTM_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTM_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe799800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTM_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTM_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTM_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTM_Fd_Fn {
    const OPCODE: u32 = 0x1e254000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_Fd_Fn {
    const OPCODE: u32 = FRINTM_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTM_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTM_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTM_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTM_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee54000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frintm";
}
impl InsnOpcode for FRINTM_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTM_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTM_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTM_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTN_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a8e000;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = FRINTN_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = FRINTN_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FRINTN_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTN_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1b8e000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = FRINTN_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = FRINTN_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FRINTN_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6500a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTN_Vd_Vn {
    const OPCODE: u32 = 0xe218800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_Vd_Vn {
    const OPCODE: u32 = FRINTN_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTN_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe798800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTN_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTN_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTN_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTN_Fd_Fn {
    const OPCODE: u32 = 0x1e244000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_Fd_Fn {
    const OPCODE: u32 = FRINTN_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTN_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTN_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTN_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTN_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee44000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frintn";
}
impl InsnOpcode for FRINTN_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTN_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTN_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTN_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTP_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc1a9e000;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = FRINTP_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = FRINTP_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FRINTP_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc1b9e000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = FRINTP_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = FRINTP_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FRINTP_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6501a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTP_Vd_Vn {
    const OPCODE: u32 = 0xea18800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_Vd_Vn {
    const OPCODE: u32 = FRINTP_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTP_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTP_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTP_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef98800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTP_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTP_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTP_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTP_Fd_Fn {
    const OPCODE: u32 = 0x1e24c000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_Fd_Fn {
    const OPCODE: u32 = FRINTP_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTP_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTP_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTP_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTP_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee4c000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frintp";
}
impl InsnOpcode for FRINTP_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTP_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTP_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTP_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6506a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frintx";
}
impl InsnOpcode for FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTX_Vd_Vn {
    const OPCODE: u32 = 0x2e219800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frintx";
}
impl InsnOpcode for FRINTX_Vd_Vn {
    const OPCODE: u32 = FRINTX_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTX_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTX_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTX_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e799800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frintx";
}
impl InsnOpcode for FRINTX_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTX_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTX_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTX_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTX_Fd_Fn {
    const OPCODE: u32 = 0x1e274000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frintx";
}
impl InsnOpcode for FRINTX_Fd_Fn {
    const OPCODE: u32 = FRINTX_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTX_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTX_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTX_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTX_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee74000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frintx";
}
impl InsnOpcode for FRINTX_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTX_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTX_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTX_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x6503a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "frintz";
}
impl InsnOpcode for FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTZ_Vd_Vn {
    const OPCODE: u32 = 0xea19800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frintz";
}
impl InsnOpcode for FRINTZ_Vd_Vn {
    const OPCODE: u32 = FRINTZ_Vd_Vn::OPCODE;
    const MASK: u32 = FRINTZ_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRINTZ_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTZ_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xef99800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frintz";
}
impl InsnOpcode for FRINTZ_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRINTZ_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRINTZ_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRINTZ_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTZ_Fd_Fn {
    const OPCODE: u32 = 0x1e25c000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frintz";
}
impl InsnOpcode for FRINTZ_Fd_Fn {
    const OPCODE: u32 = FRINTZ_Fd_Fn::OPCODE;
    const MASK: u32 = FRINTZ_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FRINTZ_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRINTZ_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRINTZ_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee5c000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frintz";
}
impl InsnOpcode for FRINTZ_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FRINTZ_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FRINTZ_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FRINTZ_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRSQRTE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x650f3000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "frsqrte";
}
impl InsnOpcode for FRSQRTE_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = FRSQRTE_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = FRSQRTE_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FRSQRTE_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRSQRTE_Vd_Vn {
    const OPCODE: u32 = 0x2ea1d800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "frsqrte";
}
impl InsnOpcode for FRSQRTE_Vd_Vn {
    const OPCODE: u32 = FRSQRTE_Vd_Vn::OPCODE;
    const MASK: u32 = FRSQRTE_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FRSQRTE_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRSQRTE_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9d800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "frsqrte";
}
impl InsnOpcode for FRSQRTE_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FRSQRTE_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FRSQRTE_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FRSQRTE_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRSQRTE_Sd_Sn {
    const OPCODE: u32 = 0x7ea1d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "frsqrte";
}
impl InsnOpcode for FRSQRTE_Sd_Sn {
    const OPCODE: u32 = FRSQRTE_Sd_Sn::OPCODE;
    const MASK: u32 = FRSQRTE_Sd_Sn::MASK;
    const MNEMONIC: &'static str = FRSQRTE_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTE_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FRSQRTE_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7ef9d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "frsqrte";
}
impl InsnOpcode for FRSQRTE_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = FRSQRTE_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = FRSQRTE_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = FRSQRTE_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65001c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "frsqrts";
}
impl InsnOpcode for FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRSQRTS_Vd_Vn_Vm {
    const OPCODE: u32 = 0xec03c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "frsqrts";
}
impl InsnOpcode for FRSQRTS_Vd_Vn_Vm {
    const OPCODE: u32 = FRSQRTS_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FRSQRTS_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FRSQRTS_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRSQRTS_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ec03c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "frsqrts";
}
impl InsnOpcode for FRSQRTS_Sd_Sn_Sm {
    const OPCODE: u32 = FRSQRTS_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = FRSQRTS_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = FRSQRTS_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xea0fc00;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "frsqrts";
}
impl InsnOpcode for FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = 0x5ea0fc00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "frsqrts";
}
impl InsnOpcode for FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S {
    const OPCODE: u32 = FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S::OPCODE;
    const MASK: u32 = FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S::MASK;
    const MNEMONIC: &'static str = FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65098000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fscale";
}
impl InsnOpcode for FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x650da000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fsqrt";
}
impl InsnOpcode for FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FSQRT_Vd_Vn {
    const OPCODE: u32 = 0x2ea1f800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "fsqrt";
}
impl InsnOpcode for FSQRT_Vd_Vn {
    const OPCODE: u32 = FSQRT_Vd_Vn::OPCODE;
    const MASK: u32 = FSQRT_Vd_Vn::MASK;
    const MNEMONIC: &'static str = FSQRT_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FSQRT_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2ef9f800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "fsqrt";
}
impl InsnOpcode for FSQRT_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = FSQRT_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = FSQRT_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = FSQRT_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FSQRT_Fd_Fn {
    const OPCODE: u32 = 0x1e21c000;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "fsqrt";
}
impl InsnOpcode for FSQRT_Fd_Fn {
    const OPCODE: u32 = FSQRT_Fd_Fn::OPCODE;
    const MASK: u32 = FSQRT_Fd_Fn::MASK;
    const MNEMONIC: &'static str = FSQRT_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSQRT_Fd_S_H_Fn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl FSQRT_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = 0x1ee1c000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "fsqrt";
}
impl InsnOpcode for FSQRT_Fd_S_H_Fn_S_H {
    const OPCODE: u32 = FSQRT_Fd_S_H_Fn_S_H::OPCODE;
    const MASK: u32 = FSQRT_Fd_S_H_Fn_S_H::MASK;
    const MNEMONIC: &'static str = FSQRT_Fd_S_H_Fn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl FSUB_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c08;
    const MASK: u32 = 0xffbf9c38;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = FSUB_SME_ZA_array_off3_0_SME_Znx2::OPCODE;
    const MASK: u32 = FSUB_SME_ZA_array_off3_0_SME_Znx2::MASK;
    const MNEMONIC: &'static str = FSUB_SME_ZA_array_off3_0_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl FSUB_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11c08;
    const MASK: u32 = 0xffbf9c78;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = FSUB_SME_ZA_array_off3_0_SME_Znx4::OPCODE;
    const MASK: u32 = FSUB_SME_ZA_array_off3_0_SME_Znx4::MASK;
    const MNEMONIC: &'static str = FSUB_SME_ZA_array_off3_0_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65018000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    const OPCODE: u32 = 0x65198000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    const OPCODE: u32 = FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::OPCODE;
    const MASK: u32 = FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::MASK;
    const MNEMONIC: &'static str = FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0xec01400;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_Vd_Vn_Vm {
    const OPCODE: u32 = FSUB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = FSUB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = FSUB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = 0xea0d400;
    const MASK: u32 = 0xbfa0fc00;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S {
    const OPCODE: u32 = FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S::OPCODE;
    const MASK: u32 = FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S::MASK;
    const MNEMONIC: &'static str = FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Fd_Fn_Fm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FSUB_Fd_Fn_Fm {
    const OPCODE: u32 = 0x1e203800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_Fd_Fn_Fm {
    const OPCODE: u32 = FSUB_Fd_Fn_Fm::OPCODE;
    const MASK: u32 = FSUB_Fd_Fn_Fm::MASK;
    const MNEMONIC: &'static str = FSUB_Fd_Fn_Fm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUB_Fd_S_H_Fn_S_H_Fm_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FSUB_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = 0x1ee03800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "fsub";
}
impl InsnOpcode for FSUB_Fd_S_H_Fn_S_H_Fm_S_H {
    const OPCODE: u32 = FSUB_Fd_S_H_Fn_S_H_Fm_S_H::OPCODE;
    const MASK: u32 = FSUB_Fd_S_H_Fn_S_H_Fm_S_H::MASK;
    const MNEMONIC: &'static str = FSUB_Fd_S_H_Fn_S_H_Fm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x65038000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "fsubr";
}
impl InsnOpcode for FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub sve_i1: u32,
    #[bits(4)]
    pub _op_6: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    const OPCODE: u32 = 0x651b8000;
    const MASK: u32 = 0xff3fe3c0;
    const MNEMONIC: &'static str = "fsubr";
}
impl InsnOpcode for FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE {
    const OPCODE: u32 = FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::OPCODE;
    const MASK: u32 = FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::MASK;
    const MNEMONIC: &'static str = FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3 {
    const OPCODE: u32 = 0x65108000;
    const MASK: u32 = 0xff38fc00;
    const MNEMONIC: &'static str = "ftmad";
}
impl InsnOpcode for FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3 {
    const OPCODE: u32 = FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3::OPCODE;
    const MASK: u32 = FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3::MASK;
    const MNEMONIC: &'static str = FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x65000c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ftsmul";
}
impl InsnOpcode for FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x420b000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ftssel";
}
impl InsnOpcode for FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500008;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "fvdot";
}
impl InsnOpcode for FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPCX {
    #[bits(32)]
    pub _op_0: u32,
}
impl GCSPOPCX {
    const OPCODE: u32 = 0xd50877bf;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "gcspopcx";
}
impl InsnOpcode for GCSPOPCX {
    const OPCODE: u32 = GCSPOPCX::OPCODE;
    const MASK: u32 = GCSPOPCX::MASK;
    const MNEMONIC: &'static str = GCSPOPCX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPM {
    #[bits(32)]
    pub _op_0: u32,
}
impl GCSPOPM {
    const OPCODE: u32 = 0xd52b773f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "gcspopm";
}
impl InsnOpcode for GCSPOPM {
    const OPCODE: u32 = GCSPOPM::OPCODE;
    const MASK: u32 = GCSPOPM::MASK;
    const MNEMONIC: &'static str = GCSPOPM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPM_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl GCSPOPM_Rt {
    const OPCODE: u32 = 0xd52b7720;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "gcspopm";
}
impl InsnOpcode for GCSPOPM_Rt {
    const OPCODE: u32 = GCSPOPM_Rt::OPCODE;
    const MASK: u32 = GCSPOPM_Rt::MASK;
    const MNEMONIC: &'static str = GCSPOPM_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPOPX {
    #[bits(32)]
    pub _op_0: u32,
}
impl GCSPOPX {
    const OPCODE: u32 = 0xd50877df;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "gcspopx";
}
impl InsnOpcode for GCSPOPX {
    const OPCODE: u32 = GCSPOPX::OPCODE;
    const MASK: u32 = GCSPOPX::MASK;
    const MNEMONIC: &'static str = GCSPOPX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPUSHM_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl GCSPUSHM_Rt {
    const OPCODE: u32 = 0xd50b7700;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "gcspushm";
}
impl InsnOpcode for GCSPUSHM_Rt {
    const OPCODE: u32 = GCSPUSHM_Rt::OPCODE;
    const MASK: u32 = GCSPUSHM_Rt::MASK;
    const MNEMONIC: &'static str = GCSPUSHM_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSPUSHX {
    #[bits(32)]
    pub _op_0: u32,
}
impl GCSPUSHX {
    const OPCODE: u32 = 0xd508779f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "gcspushx";
}
impl InsnOpcode for GCSPUSHX {
    const OPCODE: u32 = GCSPUSHX::OPCODE;
    const MASK: u32 = GCSPUSHX::MASK;
    const MNEMONIC: &'static str = GCSPUSHX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSS1_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl GCSSS1_Rt {
    const OPCODE: u32 = 0xd50b7740;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "gcsss1";
}
impl InsnOpcode for GCSSS1_Rt {
    const OPCODE: u32 = GCSSS1_Rt::OPCODE;
    const MASK: u32 = GCSSS1_Rt::MASK;
    const MNEMONIC: &'static str = GCSSS1_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSS2_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl GCSSS2_Rt {
    const OPCODE: u32 = 0xd52b7760;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "gcsss2";
}
impl InsnOpcode for GCSSS2_Rt {
    const OPCODE: u32 = GCSSS2_Rt::OPCODE;
    const MASK: u32 = GCSSS2_Rt::MASK;
    const MNEMONIC: &'static str = GCSSS2_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSTR_Rt_Rn_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl GCSSTR_Rt_Rn_SP {
    const OPCODE: u32 = 0xd91f0c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "gcsstr";
}
impl InsnOpcode for GCSSTR_Rt_Rn_SP {
    const OPCODE: u32 = GCSSTR_Rt_Rn_SP::OPCODE;
    const MASK: u32 = GCSSTR_Rt_Rn_SP::MASK;
    const MNEMONIC: &'static str = GCSSTR_Rt_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GCSSTTR_Rt_Rn_SP {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl GCSSTTR_Rt_Rn_SP {
    const OPCODE: u32 = 0xd91f1c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "gcssttr";
}
impl InsnOpcode for GCSSTTR_Rt_Rn_SP {
    const OPCODE: u32 = GCSSTTR_Rt_Rn_SP::OPCODE;
    const MASK: u32 = GCSSTTR_Rt_Rn_SP::MASK;
    const MNEMONIC: &'static str = GCSSTTR_Rt_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct GMI_Rd_Rn_SP_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl GMI_Rd_Rn_SP_Rm {
    const OPCODE: u32 = 0x9ac01400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "gmi";
}
impl InsnOpcode for GMI_Rd_Rn_SP_Rm {
    const OPCODE: u32 = GMI_Rd_Rn_SP_Rm::OPCODE;
    const MASK: u32 = GMI_Rd_Rn_SP_Rm::MASK;
    const MNEMONIC: &'static str = GMI_Rd_Rn_SP_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HINT_UIMM7 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl HINT_UIMM7 {
    const OPCODE: u32 = 0xd503201f;
    const MASK: u32 = 0xfffff01f;
    const MNEMONIC: &'static str = "hint";
}
impl InsnOpcode for HINT_UIMM7 {
    const OPCODE: u32 = HINT_UIMM7::OPCODE;
    const MASK: u32 = HINT_UIMM7::MASK;
    const MNEMONIC: &'static str = HINT_UIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45a0c000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "histcnt";
}
impl InsnOpcode for HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4520a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "histseg";
}
impl InsnOpcode for HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HLT_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl HLT_EXCEPTION {
    const OPCODE: u32 = 0xd4400000;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "hlt";
}
impl InsnOpcode for HLT_EXCEPTION {
    const OPCODE: u32 = HLT_EXCEPTION::OPCODE;
    const MASK: u32 = HLT_EXCEPTION::MASK;
    const MNEMONIC: &'static str = HLT_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct HVC_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl HVC_EXCEPTION {
    const OPCODE: u32 = 0xd4000002;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "hvc";
}
impl InsnOpcode for HVC_EXCEPTION {
    const OPCODE: u32 = HVC_EXCEPTION::OPCODE;
    const MASK: u32 = HVC_EXCEPTION::MASK;
    const MNEMONIC: &'static str = HVC_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "incb";
}
impl InsnOpcode for INCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0c000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "incd";
}
impl InsnOpcode for INCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCD_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCD_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCD_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "incd";
}
impl InsnOpcode for INCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470c000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "inch";
}
impl InsnOpcode for INCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCH_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCH_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCH_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "inch";
}
impl InsnOpcode for INCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl INCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252c8000;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "incp";
}
impl InsnOpcode for INCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = INCP_SVE_Zd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = INCP_SVE_Zd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = INCP_SVE_Zd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl INCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252c8800;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "incp";
}
impl InsnOpcode for INCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = INCP_Rd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = INCP_Rd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = INCP_Rd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0c000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "incw";
}
impl InsnOpcode for INCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCW_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCW_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCW_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INCW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0e000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "incw";
}
impl InsnOpcode for INCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = INCW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = INCW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = INCW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B {
    const OPCODE: u32 = 0x4204000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "index";
}
impl InsnOpcode for INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B {
    const OPCODE: u32 = INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B::OPCODE;
    const MASK: u32 = INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B::MASK;
    const MNEMONIC: &'static str = INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_SVE_Zd_Rn_SIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl INDEX_SVE_Zd_Rn_SIMM5 {
    const OPCODE: u32 = 0x4204400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "index";
}
impl InsnOpcode for INDEX_SVE_Zd_Rn_SIMM5 {
    const OPCODE: u32 = INDEX_SVE_Zd_Rn_SIMM5::OPCODE;
    const MASK: u32 = INDEX_SVE_Zd_Rn_SIMM5::MASK;
    const MNEMONIC: &'static str = INDEX_SVE_Zd_Rn_SIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_SVE_Zd_SVE_SIMM5_Rm {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl INDEX_SVE_Zd_SVE_SIMM5_Rm {
    const OPCODE: u32 = 0x4204800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "index";
}
impl InsnOpcode for INDEX_SVE_Zd_SVE_SIMM5_Rm {
    const OPCODE: u32 = INDEX_SVE_Zd_SVE_SIMM5_Rm::OPCODE;
    const MASK: u32 = INDEX_SVE_Zd_SVE_SIMM5_Rm::MASK;
    const MNEMONIC: &'static str = INDEX_SVE_Zd_SVE_SIMM5_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INDEX_SVE_Zd_Rn_Rm {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl INDEX_SVE_Zd_Rn_Rm {
    const OPCODE: u32 = 0x4204c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "index";
}
impl InsnOpcode for INDEX_SVE_Zd_Rn_Rm {
    const OPCODE: u32 = INDEX_SVE_Zd_Rn_Rm::OPCODE;
    const MASK: u32 = INDEX_SVE_Zd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = INDEX_SVE_Zd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INS_Ed_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INS_Ed_Rn {
    const OPCODE: u32 = 0x4e001c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ins";
}
impl InsnOpcode for INS_Ed_Rn {
    const OPCODE: u32 = INS_Ed_Rn::OPCODE;
    const MASK: u32 = INS_Ed_Rn::MASK;
    const MNEMONIC: &'static str = INS_Ed_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INS_Ed_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INS_Ed_En {
    const OPCODE: u32 = 0x6e000400;
    const MASK: u32 = 0xffe08400;
    const MNEMONIC: &'static str = "ins";
}
impl InsnOpcode for INS_Ed_En {
    const OPCODE: u32 = INS_Ed_En::OPCODE;
    const MASK: u32 = INS_Ed_En::MASK;
    const MNEMONIC: &'static str = INS_Ed_En::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INSR_SVE_Zd_SVE_Rm {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_rm: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INSR_SVE_Zd_SVE_Rm {
    const OPCODE: u32 = 0x5243800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "insr";
}
impl InsnOpcode for INSR_SVE_Zd_SVE_Rm {
    const OPCODE: u32 = INSR_SVE_Zd_SVE_Rm::OPCODE;
    const MASK: u32 = INSR_SVE_Zd_SVE_Rm::MASK;
    const MNEMONIC: &'static str = INSR_SVE_Zd_SVE_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct INSR_SVE_Zd_SVE_Vm {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_vm: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl INSR_SVE_Zd_SVE_Vm {
    const OPCODE: u32 = 0x5343800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "insr";
}
impl InsnOpcode for INSR_SVE_Zd_SVE_Vm {
    const OPCODE: u32 = INSR_SVE_Zd_SVE_Vm::OPCODE;
    const MASK: u32 = INSR_SVE_Zd_SVE_Vm::MASK;
    const MNEMONIC: &'static str = INSR_SVE_Zd_SVE_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct IRG_Rd_SP_Rn_SP_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl IRG_Rd_SP_Rn_SP_Rm {
    const OPCODE: u32 = 0x9ac01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "irg";
}
impl InsnOpcode for IRG_Rd_SP_Rn_SP_Rm {
    const OPCODE: u32 = IRG_Rd_SP_Rn_SP_Rm::OPCODE;
    const MASK: u32 = IRG_Rd_SP_Rn_SP_Rm::MASK;
    const MNEMONIC: &'static str = IRG_Rd_SP_Rn_SP_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ISB_BARRIER_ISB {
    #[bits(32)]
    pub _op_0: u32,
}
impl ISB_BARRIER_ISB {
    const OPCODE: u32 = 0xd50330df;
    const MASK: u32 = 0xfffff0ff;
    const MNEMONIC: &'static str = "isb";
}
impl InsnOpcode for ISB_BARRIER_ISB {
    const OPCODE: u32 = ISB_BARRIER_ISB::OPCODE;
    const MASK: u32 = ISB_BARRIER_ISB::MASK;
    const MNEMONIC: &'static str = ISB_BARRIER_ISB::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTA_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LASTA_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5228000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lasta";
}
impl InsnOpcode for LASTA_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = LASTA_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = LASTA_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = LASTA_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTA_Rd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LASTA_Rd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x520a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lasta";
}
impl InsnOpcode for LASTA_Rd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = LASTA_Rd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = LASTA_Rd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = LASTA_Rd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTB_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LASTB_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5238000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lastb";
}
impl InsnOpcode for LASTB_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = LASTB_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = LASTB_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = LASTB_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LASTB_Rd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LASTB_Rd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x521a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lastb";
}
impl InsnOpcode for LASTB_Rd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = LASTB_Rd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = LASTB_Rd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = LASTB_Rd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD1_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "ld1";
}
impl InsnOpcode for LD1_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD1_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD1_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD1_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd400000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "ld1";
}
impl InsnOpcode for LD1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD1_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD1_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD1_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD1_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "ld1";
}
impl InsnOpcode for LD1_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD1_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD1_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD1_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD1_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc00000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "ld1";
}
impl InsnOpcode for LD1_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD1_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD1_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD1_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0000000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0008000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xe0000000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0000000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0400000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa0408000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1000000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1008000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1400000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa1408000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84004000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4004000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x8420c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc440c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = 0xc420c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4004000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4404000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa400a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa440a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4204000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4604000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa420a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa460a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1b";
}
impl InsnOpcode for LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa0006000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa000e000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0406000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa040e000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xe0c00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0c00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa1006000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa100e000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1406000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140e000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5804000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = 0xc5a04000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc5c0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = 0xc5a0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = 0xc5e0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5e04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5e0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1d";
}
impl InsnOpcode for LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa0002000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa000a000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0402000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa040a000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xe0400000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0400000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa1002000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa100a000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1402000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140a000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84804000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4804000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84a04000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = 0xc4a04000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0x84a0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4c0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = 0xc4a0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc4e0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4c04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4c0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4a04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4e04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4a0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4e0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1h";
}
impl InsnOpcode for LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe1c00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1q";
}
impl InsnOpcode for LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe1c00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1q";
}
impl InsnOpcode for LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xc400a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1q";
}
impl InsnOpcode for LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD1R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd40c000;
    const MASK: u32 = 0xbffff000;
    const MNEMONIC: &'static str = "ld1r";
}
impl InsnOpcode for LD1R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD1R_LVt_AL_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD1R_LVt_AL_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD1R_LVt_AL_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD1R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc0c000;
    const MASK: u32 = 0xbfe0f000;
    const MNEMONIC: &'static str = "ld1r";
}
impl InsnOpcode for LD1R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = LD1R_LVt_AL_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD1R_LVt_AL_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD1R_LVt_AL_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x84408000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rb";
}
impl InsnOpcode for LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x8440c000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rb";
}
impl InsnOpcode for LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x8440a000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rb";
}
impl InsnOpcode for LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x8440e000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rb";
}
impl InsnOpcode for LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8 {
    const OPCODE: u32 = 0x85c0e000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rd";
}
impl InsnOpcode for LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8 {
    const OPCODE: u32 = LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8::OPCODE;
    const MASK: u32 = LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8::MASK;
    const MNEMONIC: &'static str = LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x84c0c000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rh";
}
impl InsnOpcode for LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2::OPCODE;
    const MASK: u32 = LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2::MASK;
    const MNEMONIC: &'static str = LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x84c0a000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rh";
}
impl InsnOpcode for LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::OPCODE;
    const MASK: u32 = LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::MASK;
    const MNEMONIC: &'static str = LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x84c0e000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rh";
}
impl InsnOpcode for LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::OPCODE;
    const MASK: u32 = LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::MASK;
    const MNEMONIC: &'static str = LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4200000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1rob";
}
impl InsnOpcode for LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = 0xa4202000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1rob";
}
impl InsnOpcode for LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::OPCODE;
    const MASK: u32 = LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MASK;
    const MNEMONIC: &'static str = LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5a00000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1rod";
}
impl InsnOpcode for LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = 0xa5a02000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1rod";
}
impl InsnOpcode for LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::OPCODE;
    const MASK: u32 = LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MASK;
    const MNEMONIC: &'static str = LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4a00000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1roh";
}
impl InsnOpcode for LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = 0xa4a02000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1roh";
}
impl InsnOpcode for LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::OPCODE;
    const MASK: u32 = LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MASK;
    const MNEMONIC: &'static str = LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa5200000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1row";
}
impl InsnOpcode for LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = 0xa5202000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1row";
}
impl InsnOpcode for LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 {
    const OPCODE: u32 = LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::OPCODE;
    const MASK: u32 = LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MASK;
    const MNEMONIC: &'static str = LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa4000000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1rqb";
}
impl InsnOpcode for LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = 0xa4002000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1rqb";
}
impl InsnOpcode for LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::OPCODE;
    const MASK: u32 = LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MASK;
    const MNEMONIC: &'static str = LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5800000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1rqd";
}
impl InsnOpcode for LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = 0xa5802000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1rqd";
}
impl InsnOpcode for LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::OPCODE;
    const MASK: u32 = LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MASK;
    const MNEMONIC: &'static str = LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4800000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1rqh";
}
impl InsnOpcode for LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = 0xa4802000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1rqh";
}
impl InsnOpcode for LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::OPCODE;
    const MASK: u32 = LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MASK;
    const MNEMONIC: &'static str = LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa5000000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1rqw";
}
impl InsnOpcode for LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = 0xa5002000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1rqw";
}
impl InsnOpcode for LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 {
    const OPCODE: u32 = LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::OPCODE;
    const MASK: u32 = LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MASK;
    const MNEMONIC: &'static str = LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x85c08000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rsb";
}
impl InsnOpcode for LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x85c0c000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rsb";
}
impl InsnOpcode for LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = 0x85c0a000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rsb";
}
impl InsnOpcode for LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 {
    const OPCODE: u32 = LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::OPCODE;
    const MASK: u32 = LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MASK;
    const MNEMONIC: &'static str = LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x85408000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rsh";
}
impl InsnOpcode for LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2::OPCODE;
    const MASK: u32 = LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2::MASK;
    const MNEMONIC: &'static str = LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = 0x8540a000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rsh";
}
impl InsnOpcode for LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 {
    const OPCODE: u32 = LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::OPCODE;
    const MASK: u32 = LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::MASK;
    const MNEMONIC: &'static str = LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = 0x84c08000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rsw";
}
impl InsnOpcode for LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4::OPCODE;
    const MASK: u32 = LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4::MASK;
    const MNEMONIC: &'static str = LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = 0x8540c000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rw";
}
impl InsnOpcode for LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4::OPCODE;
    const MASK: u32 = LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4::MASK;
    const MNEMONIC: &'static str = LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = 0x8540e000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ld1rw";
}
impl InsnOpcode for LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4 {
    const OPCODE: u32 = LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4::OPCODE;
    const MASK: u32 = LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4::MASK;
    const MNEMONIC: &'static str = LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84000000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4000000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x84208000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = 0xc4208000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4408000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa5804000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa5c04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa5a04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa580a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5c0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5a0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1sb";
}
impl InsnOpcode for LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84800000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4800000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84a00000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = 0xc4a00000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0x84a08000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = 0xc4a08000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4c08000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc4e08000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa5004000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa5204000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa500a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa520a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1sh";
}
impl InsnOpcode for LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa4804000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa480a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5000000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0xc5200000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc5408000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xc5208000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc5608000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1sw";
}
impl InsnOpcode for LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::OPCODE;
    const MASK: u32 = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MASK;
    const MNEMONIC: &'static str = LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa0004000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa000c000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xe0800000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0800000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0404000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa040c000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa1004000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa100c000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1404000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140c000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x85004000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0x85204000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0x8520c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc5004000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    const OPCODE: u32 = 0xc5204000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    const OPCODE: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc540c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D {
    const OPCODE: u32 = 0xc520c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D {
    const OPCODE: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc560c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa5404000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa5604000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa540a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa560a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld1w";
}
impl InsnOpcode for LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD2_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "ld2";
}
impl InsnOpcode for LD2_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD2_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD2_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD2_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD2_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd600000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "ld2";
}
impl InsnOpcode for LD2_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD2_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD2_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD2_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD2_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "ld2";
}
impl InsnOpcode for LD2_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD2_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD2_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD2_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD2_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xde00000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "ld2";
}
impl InsnOpcode for LD2_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD2_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD2_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD2_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa420c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld2b";
}
impl InsnOpcode for LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa420e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld2b";
}
impl InsnOpcode for LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5a0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld2d";
}
impl InsnOpcode for LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa5a0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld2d";
}
impl InsnOpcode for LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4a0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld2h";
}
impl InsnOpcode for LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa4a0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld2h";
}
impl InsnOpcode for LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa490e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld2q";
}
impl InsnOpcode for LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xa4a0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld2q";
}
impl InsnOpcode for LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD2R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd60c000;
    const MASK: u32 = 0xbffff000;
    const MNEMONIC: &'static str = "ld2r";
}
impl InsnOpcode for LD2R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD2R_LVt_AL_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD2R_LVt_AL_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD2R_LVt_AL_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD2R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xde0c000;
    const MASK: u32 = 0xbfe0f000;
    const MNEMONIC: &'static str = "ld2r";
}
impl InsnOpcode for LD2R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = LD2R_LVt_AL_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD2R_LVt_AL_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD2R_LVt_AL_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa520c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld2w";
}
impl InsnOpcode for LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa520e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld2w";
}
impl InsnOpcode for LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD3_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "ld3";
}
impl InsnOpcode for LD3_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD3_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD3_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD3_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD3_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd402000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "ld3";
}
impl InsnOpcode for LD3_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD3_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD3_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD3_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD3_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "ld3";
}
impl InsnOpcode for LD3_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD3_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD3_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD3_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD3_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc02000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "ld3";
}
impl InsnOpcode for LD3_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD3_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD3_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD3_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa440c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld3b";
}
impl InsnOpcode for LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xa440e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld3b";
}
impl InsnOpcode for LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5c0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld3d";
}
impl InsnOpcode for LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xa5c0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld3d";
}
impl InsnOpcode for LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4c0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld3h";
}
impl InsnOpcode for LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xa4c0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld3h";
}
impl InsnOpcode for LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa510e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld3q";
}
impl InsnOpcode for LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xa5208000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld3q";
}
impl InsnOpcode for LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD3R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd40e000;
    const MASK: u32 = 0xbffff000;
    const MNEMONIC: &'static str = "ld3r";
}
impl InsnOpcode for LD3R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD3R_LVt_AL_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD3R_LVt_AL_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD3R_LVt_AL_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD3R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xdc0e000;
    const MASK: u32 = 0xbfe0f000;
    const MNEMONIC: &'static str = "ld3r";
}
impl InsnOpcode for LD3R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = LD3R_LVt_AL_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD3R_LVt_AL_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD3R_LVt_AL_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa540c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld3w";
}
impl InsnOpcode for LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xa540e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld3w";
}
impl InsnOpcode for LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD4_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc400000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "ld4";
}
impl InsnOpcode for LD4_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD4_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD4_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD4_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD4_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd602000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "ld4";
}
impl InsnOpcode for LD4_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD4_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD4_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD4_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD4_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xcc00000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "ld4";
}
impl InsnOpcode for LD4_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD4_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD4_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD4_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD4_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xde02000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "ld4";
}
impl InsnOpcode for LD4_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = LD4_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD4_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD4_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa460c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld4b";
}
impl InsnOpcode for LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa460e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld4b";
}
impl InsnOpcode for LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa5e0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld4d";
}
impl InsnOpcode for LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa5e0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld4d";
}
impl InsnOpcode for LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa4e0c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld4h";
}
impl InsnOpcode for LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa4e0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld4h";
}
impl InsnOpcode for LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa590e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld4q";
}
impl InsnOpcode for LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xa5a08000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld4q";
}
impl InsnOpcode for LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4R_LVt_AL_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD4R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd60e000;
    const MASK: u32 = 0xbffff000;
    const MNEMONIC: &'static str = "ld4r";
}
impl InsnOpcode for LD4R_LVt_AL_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LD4R_LVt_AL_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD4R_LVt_AL_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD4R_LVt_AL_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4R_LVt_AL_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl LD4R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xde0e000;
    const MASK: u32 = 0xbfe0f000;
    const MNEMONIC: &'static str = "ld4r";
}
impl InsnOpcode for LD4R_LVt_AL_SIMD_ADDR_POST {
    const OPCODE: u32 = LD4R_LVt_AL_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = LD4R_LVt_AL_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = LD4R_LVt_AL_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa560c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ld4w";
}
impl InsnOpcode for LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa560e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ld4w";
}
impl InsnOpcode for LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LD64B_Rt_LS64_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LD64B_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf83fd000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ld64b";
}
impl InsnOpcode for LD64B_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = LD64B_Rt_LS64_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LD64B_Rt_LS64_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LD64B_Rt_LS64_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADD_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADD_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8200000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldadd";
}
impl InsnOpcode for LDADD_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADD_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADD_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADD_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a00000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldadda";
}
impl InsnOpcode for LDADDA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddab";
}
impl InsnOpcode for LDADDAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddah";
}
impl InsnOpcode for LDADDAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e00000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldaddal";
}
impl InsnOpcode for LDADDAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddalb";
}
impl InsnOpcode for LDADDALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddalh";
}
impl InsnOpcode for LDADDALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38200000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddb";
}
impl InsnOpcode for LDADDB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78200000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddh";
}
impl InsnOpcode for LDADDH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8600000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldaddl";
}
impl InsnOpcode for LDADDL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38600000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddlb";
}
impl InsnOpcode for LDADDLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDADDLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDADDLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78600000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldaddlh";
}
impl InsnOpcode for LDADDLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDADDLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDADDLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDADDLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAP1_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LDAP1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd418400;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ldap1";
}
impl InsnOpcode for LDAP1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LDAP1_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAP1_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAP1_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAPR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8bfc000;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ldapr";
}
impl InsnOpcode for LDAPR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAPR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAPR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAPR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPR_Rt_RCPC3_ADDR_POSTIND {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAPR_Rt_RCPC3_ADDR_POSTIND {
    const OPCODE: u32 = 0x19c00800;
    const MASK: u32 = 0x3ffffc00;
    const MNEMONIC: &'static str = "ldapr";
}
impl InsnOpcode for LDAPR_Rt_RCPC3_ADDR_POSTIND {
    const OPCODE: u32 = LDAPR_Rt_RCPC3_ADDR_POSTIND::OPCODE;
    const MASK: u32 = LDAPR_Rt_RCPC3_ADDR_POSTIND::MASK;
    const MNEMONIC: &'static str = LDAPR_Rt_RCPC3_ADDR_POSTIND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAPRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38bfc000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldaprb";
}
impl InsnOpcode for LDAPRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAPRB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAPRB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAPRB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPRH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAPRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78bfc000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldaprh";
}
impl InsnOpcode for LDAPRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAPRH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAPRH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAPRH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPUR_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPUR_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x99400000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapur";
}
impl InsnOpcode for LDAPUR_Rt_ADDR_OFFSET {
    const OPCODE: u32 = LDAPUR_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPUR_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPUR_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPUR_Rt_X_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPUR_Rt_X_ADDR_OFFSET {
    const OPCODE: u32 = 0xd9400000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapur";
}
impl InsnOpcode for LDAPUR_Rt_X_ADDR_OFFSET {
    const OPCODE: u32 = LDAPUR_Rt_X_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPUR_Rt_X_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPUR_Rt_X_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPUR_Ft_RCPC3_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(2)]
    pub _op_10: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPUR_Ft_RCPC3_ADDR_OFFSET {
    const OPCODE: u32 = 0x1d400800;
    const MASK: u32 = 0x3f600c00;
    const MNEMONIC: &'static str = "ldapur";
}
impl InsnOpcode for LDAPUR_Ft_RCPC3_ADDR_OFFSET {
    const OPCODE: u32 = LDAPUR_Ft_RCPC3_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPUR_Ft_RCPC3_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPUR_Ft_RCPC3_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURB_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x19400000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapurb";
}
impl InsnOpcode for LDAPURB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURB_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURB_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURB_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURH_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x59400000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapurh";
}
impl InsnOpcode for LDAPURH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURH_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURH_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURH_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSB_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURSB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x19800000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapursb";
}
impl InsnOpcode for LDAPURSB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURSB_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURSB_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURSB_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSB_Rt_W_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURSB_Rt_W_ADDR_OFFSET {
    const OPCODE: u32 = 0x19c00000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapursb";
}
impl InsnOpcode for LDAPURSB_Rt_W_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURSB_Rt_W_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURSB_Rt_W_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURSB_Rt_W_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSH_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURSH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x59800000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapursh";
}
impl InsnOpcode for LDAPURSH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURSH_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURSH_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURSH_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSH_Rt_W_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURSH_Rt_W_ADDR_OFFSET {
    const OPCODE: u32 = 0x59c00000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapursh";
}
impl InsnOpcode for LDAPURSH_Rt_W_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURSH_Rt_W_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURSH_Rt_W_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURSH_Rt_W_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAPURSW_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDAPURSW_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x99800000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldapursw";
}
impl InsnOpcode for LDAPURSW_Rt_ADDR_OFFSET {
    const OPCODE: u32 = LDAPURSW_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = LDAPURSW_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = LDAPURSW_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88dffc00;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ldar";
}
impl InsnOpcode for LDAR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDARB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDARB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8dffc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldarb";
}
impl InsnOpcode for LDARB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDARB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDARB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDARB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDARH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDARH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48dffc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldarh";
}
impl InsnOpcode for LDARH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDARH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDARH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDARH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXP_Rt_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl LDAXP_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x887f8000;
    const MASK: u32 = 0xbfff8000;
    const MNEMONIC: &'static str = "ldaxp";
}
impl InsnOpcode for LDAXP_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDAXP_Rt_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAXP_Rt_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAXP_Rt_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAXR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x885ffc00;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ldaxr";
}
impl InsnOpcode for LDAXR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAXR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAXR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAXR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAXRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x85ffc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldaxrb";
}
impl InsnOpcode for LDAXRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAXRB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAXRB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAXRB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDAXRH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDAXRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x485ffc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldaxrh";
}
impl InsnOpcode for LDAXRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDAXRH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDAXRH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDAXRH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8201000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldclr";
}
impl InsnOpcode for LDCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLR_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLR_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLR_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a01000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldclra";
}
impl InsnOpcode for LDCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrab";
}
impl InsnOpcode for LDCLRAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrah";
}
impl InsnOpcode for LDCLRAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e01000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldclral";
}
impl InsnOpcode for LDCLRAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclralb";
}
impl InsnOpcode for LDCLRALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclralh";
}
impl InsnOpcode for LDCLRALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38201000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrb";
}
impl InsnOpcode for LDCLRB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78201000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrh";
}
impl InsnOpcode for LDCLRH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8601000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldclrl";
}
impl InsnOpcode for LDCLRL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38601000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrlb";
}
impl InsnOpcode for LDCLRLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78601000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrlh";
}
impl InsnOpcode for LDCLRLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19201000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrp";
}
impl InsnOpcode for LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrpa";
}
impl InsnOpcode for LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrpal";
}
impl InsnOpcode for LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19601000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldclrpl";
}
impl InsnOpcode for LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEOR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEOR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8202000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldeor";
}
impl InsnOpcode for LDEOR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEOR_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEOR_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEOR_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a02000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldeora";
}
impl InsnOpcode for LDEORA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a02000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeorab";
}
impl InsnOpcode for LDEORAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a02000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeorah";
}
impl InsnOpcode for LDEORAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e02000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldeoral";
}
impl InsnOpcode for LDEORAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e02000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeoralb";
}
impl InsnOpcode for LDEORALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e02000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeoralh";
}
impl InsnOpcode for LDEORALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38202000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeorb";
}
impl InsnOpcode for LDEORB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78202000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeorh";
}
impl InsnOpcode for LDEORH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8602000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldeorl";
}
impl InsnOpcode for LDEORL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38602000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeorlb";
}
impl InsnOpcode for LDEORLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDEORLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDEORLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78602000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldeorlh";
}
impl InsnOpcode for LDEORLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDEORLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDEORLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDEORLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84006000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4006000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x8420e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc440e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = 0xc420e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa4006000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4006000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa4406000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4406000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa4206000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4206000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa4606000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4606000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1b";
}
impl InsnOpcode for LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5806000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = 0xc5a06000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc5c0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = 0xc5a0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = 0xc5e0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa5e06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5e06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1d";
}
impl InsnOpcode for LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84806000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4806000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84a06000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = 0xc4a06000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MASK;
    const MNEMONIC: &'static str =
        LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0x84a0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4c0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = 0xc4a0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc4e0e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa4c06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4c06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa4a06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4a06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa4e06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4e06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1h";
}
impl InsnOpcode for LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84002000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4002000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str =
        LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x8420a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc440a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = 0xc420a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa5806000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5806000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa5c06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5c06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa5a06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5a06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sb";
}
impl InsnOpcode for LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84802000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc4802000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str =
        LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84a02000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = 0xc4a02000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MASK;
    const MNEMONIC: &'static str =
        LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0x84a0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4c0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = 0xc4a0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc4e0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa5006000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5006000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa5206000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5206000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sh";
}
impl InsnOpcode for LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa4806000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa4806000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0xc5002000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0xc5202000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc540a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xc520a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc560a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1sw";
}
impl InsnOpcode for LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::OPCODE;
    const MASK: u32 = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MASK;
    const MNEMONIC: &'static str = LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x85006000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0x85206000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0x8520e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = 0xc5006000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    const OPCODE: u32 = 0xc5206000;
    const MASK: u32 = 0xffa0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D::MASK;
    const MNEMONIC: &'static str =
        LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc540e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D {
    const OPCODE: u32 = 0xc520e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc560e000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa5406000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5406000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa5606000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = 0xa5606000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldff1w";
}
impl InsnOpcode for LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R {
    const OPCODE: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::OPCODE;
    const MASK: u32 = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDG_Rt_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDG_Rt_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9600000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldg";
}
impl InsnOpcode for LDG_Rt_ADDR_SIMM13 {
    const OPCODE: u32 = LDG_Rt_ADDR_SIMM13::OPCODE;
    const MASK: u32 = LDG_Rt_ADDR_SIMM13::MASK;
    const MNEMONIC: &'static str = LDG_Rt_ADDR_SIMM13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDGM_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd9e00000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldgm";
}
impl InsnOpcode for LDGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDGM_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDGM_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDGM_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(4)]
    pub opc2: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND {
    const OPCODE: u32 = 0x19400800;
    const MASK: u32 = 0x3fe0ec00;
    const MNEMONIC: &'static str = "ldiapp";
}
impl InsnOpcode for LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND {
    const OPCODE: u32 = LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND::OPCODE;
    const MASK: u32 = LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND::MASK;
    const MNEMONIC: &'static str = LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDLAR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDLAR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88df7c00;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ldlar";
}
impl InsnOpcode for LDLAR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDLAR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDLAR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDLAR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDLARB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDLARB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8df7c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldlarb";
}
impl InsnOpcode for LDLARB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDLARB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDLARB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDLARB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDLARH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDLARH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48df7c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldlarh";
}
impl InsnOpcode for LDLARH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDLARH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDLARH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDLARH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa410a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1b";
}
impl InsnOpcode for LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa450a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1b";
}
impl InsnOpcode for LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa430a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1b";
}
impl InsnOpcode for LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa470a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1b";
}
impl InsnOpcode for LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5f0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1d";
}
impl InsnOpcode for LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4d0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1h";
}
impl InsnOpcode for LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4b0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1h";
}
impl InsnOpcode for LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa4f0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1h";
}
impl InsnOpcode for LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa590a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1sb";
}
impl InsnOpcode for LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5d0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1sb";
}
impl InsnOpcode for LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa5b0a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1sb";
}
impl InsnOpcode for LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa510a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1sh";
}
impl InsnOpcode for LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa530a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1sh";
}
impl InsnOpcode for LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa490a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1sw";
}
impl InsnOpcode for LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa550a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1w";
}
impl InsnOpcode for LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa570a000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnf1w";
}
impl InsnOpcode for LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNP_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDNP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x28400000;
    const MASK: u32 = 0x7fc00000;
    const MNEMONIC: &'static str = "ldnp";
}
impl InsnOpcode for LDNP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = LDNP_Rt_Rt2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = LDNP_Rt_Rt2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = LDNP_Rt_Rt2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNP_Ft_Ft2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDNP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x2c400000;
    const MASK: u32 = 0x3fc00000;
    const MNEMONIC: &'static str = "ldnp";
}
impl InsnOpcode for LDNP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = LDNP_Ft_Ft2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = LDNP_Ft_Ft2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = LDNP_Ft_Ft2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0000001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0008001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0400001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa0408001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1000008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1008008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1400008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa1408008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xc400c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S {
    const OPCODE: u32 = 0x8400a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S {
    const OPCODE: u32 = LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S::OPCODE;
    const MASK: u32 = LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S::MASK;
    const MNEMONIC: &'static str = LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xa400c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa400e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnt1b";
}
impl InsnOpcode for LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa0006001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa000e001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0406001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa040e001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa1006008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa100e008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1406008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140e008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xc580c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xa580c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa580e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnt1d";
}
impl InsnOpcode for LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa0002001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa000a001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0402001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa040a001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa1002008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa100a008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1402008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140a008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xc480c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S {
    const OPCODE: u32 = 0x8480a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S {
    const OPCODE: u32 = LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S::OPCODE;
    const MASK: u32 = LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S::MASK;
    const MNEMONIC: &'static str = LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xa480c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa480e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnt1h";
}
impl InsnOpcode for LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0x84008000;
    const MASK: u32 = 0xbfe0e000;
    const MNEMONIC: &'static str = "ldnt1sb";
}
impl InsnOpcode for LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0x84808000;
    const MASK: u32 = 0xbfe0e000;
    const MNEMONIC: &'static str = "ldnt1sh";
}
impl InsnOpcode for LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xc5008000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1sw";
}
impl InsnOpcode for LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa0004001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa000c001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0404001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa040c001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa1004008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa100c008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1404008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa140c008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0x8500a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D {
    const OPCODE: u32 = 0xc500c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D {
    const OPCODE: u32 = LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D::OPCODE;
    const MASK: u32 = LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D::MASK;
    const MNEMONIC: &'static str = LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xa500c000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xa500e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "ldnt1w";
}
impl InsnOpcode for LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x29400000;
    const MASK: u32 = 0x7fc00000;
    const MNEMONIC: &'static str = "ldp";
}
impl InsnOpcode for LDP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = LDP_Rt_Rt2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = LDP_Rt_Rt2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = LDP_Rt_Rt2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S {
    const OPCODE: u32 = 0x28c00000;
    const MASK: u32 = 0x7ec00000;
    const MNEMONIC: &'static str = "ldp";
}
impl InsnOpcode for LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S {
    const OPCODE: u32 = LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::OPCODE;
    const MASK: u32 = LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::MASK;
    const MNEMONIC: &'static str = LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_Ft_Ft2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x2d400000;
    const MASK: u32 = 0x3fc00000;
    const MNEMONIC: &'static str = "ldp";
}
impl InsnOpcode for LDP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = LDP_Ft_Ft2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = LDP_Ft_Ft2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = LDP_Ft_Ft2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    const OPCODE: u32 = 0x2cc00000;
    const MASK: u32 = 0x3ec00000;
    const MNEMONIC: &'static str = "ldp";
}
impl InsnOpcode for LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    const OPCODE: u32 = LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::OPCODE;
    const MASK: u32 = LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::MASK;
    const MNEMONIC: &'static str = LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDPSW_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDPSW_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x69400000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "ldpsw";
}
impl InsnOpcode for LDPSW_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = LDPSW_Rt_Rt2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = LDPSW_Rt_Rt2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = LDPSW_Rt_Rt2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S {
    const OPCODE: u32 = 0x68c00000;
    const MASK: u32 = 0xfec00000;
    const MNEMONIC: &'static str = "ldpsw";
}
impl InsnOpcode for LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S {
    const OPCODE: u32 = LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S::OPCODE;
    const MASK: u32 = LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S::MASK;
    const MNEMONIC: &'static str = LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL {
    const OPCODE: u32 = 0xe1000000;
    const MASK: u32 = 0xffff9c10;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL {
    const OPCODE: u32 = LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL::OPCODE;
    const MASK: u32 = LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL::MASK;
    const MNEMONIC: &'static str = LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SME_ZT0_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl LDR_SME_ZT0_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xe11f8000;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_SME_ZT0_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = LDR_SME_ZT0_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDR_SME_ZT0_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDR_SME_ZT0_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LDR_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x18000000;
    const MASK: u32 = 0xbf000000;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = LDR_Rt_ADDR_PCREL19::OPCODE;
    const MASK: u32 = LDR_Rt_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = LDR_Rt_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDR_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0xb8600800;
    const MASK: u32 = 0xbfe00c00;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Rt_ADDR_REGOFF {
    const OPCODE: u32 = LDR_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDR_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDR_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8400400;
    const MASK: u32 = 0xbfe00400;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDR_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDR_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDR_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDR_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0xb9400000;
    const MASK: u32 = 0xbfc00000;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = LDR_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDR_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDR_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl LDR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0x85800000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = LDR_SVE_Pt_SVE_ADDR_RI_S9xVL::OPCODE;
    const MASK: u32 = LDR_SVE_Pt_SVE_ADDR_RI_S9xVL::MASK;
    const MNEMONIC: &'static str = LDR_SVE_Pt_SVE_ADDR_RI_S9xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SVE_PNt_SVE_ADDR_RI_S9xVL {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl LDR_SVE_PNt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0x85800000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_SVE_PNt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = LDR_SVE_PNt_SVE_ADDR_RI_S9xVL::OPCODE;
    const MASK: u32 = LDR_SVE_PNt_SVE_ADDR_RI_S9xVL::MASK;
    const MNEMONIC: &'static str = LDR_SVE_PNt_SVE_ADDR_RI_S9xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl LDR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0x85804000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = LDR_SVE_Zt_SVE_ADDR_RI_S9xVL::OPCODE;
    const MASK: u32 = LDR_SVE_Zt_SVE_ADDR_RI_S9xVL::MASK;
    const MNEMONIC: &'static str = LDR_SVE_Zt_SVE_ADDR_RI_S9xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LDR_Ft_ADDR_PCREL19 {
    const OPCODE: u32 = 0x1c000000;
    const MASK: u32 = 0x3f000000;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Ft_ADDR_PCREL19 {
    const OPCODE: u32 = LDR_Ft_ADDR_PCREL19::OPCODE;
    const MASK: u32 = LDR_Ft_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = LDR_Ft_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDR_Ft_ADDR_REGOFF {
    const OPCODE: u32 = 0x3c600800;
    const MASK: u32 = 0x3f600c00;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Ft_ADDR_REGOFF {
    const OPCODE: u32 = LDR_Ft_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDR_Ft_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDR_Ft_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = 0x3c400400;
    const MASK: u32 = 0x3f600400;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = LDR_Ft_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDR_Ft_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDR_Ft_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDR_Ft_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDR_Ft_ADDR_UIMM12 {
    const OPCODE: u32 = 0x3d400000;
    const MASK: u32 = 0x3f400000;
    const MNEMONIC: &'static str = "ldr";
}
impl InsnOpcode for LDR_Ft_ADDR_UIMM12 {
    const OPCODE: u32 = LDR_Ft_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDR_Ft_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDR_Ft_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRAA_Rt_ADDR_SIMM10 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub s_imm10: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDRAA_Rt_ADDR_SIMM10 {
    const OPCODE: u32 = 0xf8200400;
    const MASK: u32 = 0xffa00400;
    const MNEMONIC: &'static str = "ldraa";
}
impl InsnOpcode for LDRAA_Rt_ADDR_SIMM10 {
    const OPCODE: u32 = LDRAA_Rt_ADDR_SIMM10::OPCODE;
    const MASK: u32 = LDRAA_Rt_ADDR_SIMM10::MASK;
    const MNEMONIC: &'static str = LDRAA_Rt_ADDR_SIMM10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRAB_Rt_ADDR_SIMM10 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub s_imm10: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl LDRAB_Rt_ADDR_SIMM10 {
    const OPCODE: u32 = 0xf8a00400;
    const MASK: u32 = 0xffa00400;
    const MNEMONIC: &'static str = "ldrab";
}
impl InsnOpcode for LDRAB_Rt_ADDR_SIMM10 {
    const OPCODE: u32 = LDRAB_Rt_ADDR_SIMM10::OPCODE;
    const MASK: u32 = LDRAB_Rt_ADDR_SIMM10::MASK;
    const MNEMONIC: &'static str = LDRAB_Rt_ADDR_SIMM10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRB_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDRB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x38600800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldrb";
}
impl InsnOpcode for LDRB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = LDRB_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDRB_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDRB_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38400400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "ldrb";
}
impl InsnOpcode for LDRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDRB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDRB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDRB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRB_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDRB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x39400000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "ldrb";
}
impl InsnOpcode for LDRB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = LDRB_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDRB_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDRB_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRH_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDRH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x78600800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldrh";
}
impl InsnOpcode for LDRH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = LDRH_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDRH_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDRH_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78400400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "ldrh";
}
impl InsnOpcode for LDRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDRH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDRH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDRH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRH_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDRH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x79400000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "ldrh";
}
impl InsnOpcode for LDRH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = LDRH_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDRH_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDRH_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSB_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDRSB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x38a00800;
    const MASK: u32 = 0xffa00c00;
    const MNEMONIC: &'static str = "ldrsb";
}
impl InsnOpcode for LDRSB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = LDRSB_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDRSB_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDRSB_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDRSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38800400;
    const MASK: u32 = 0xffa00400;
    const MNEMONIC: &'static str = "ldrsb";
}
impl InsnOpcode for LDRSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDRSB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDRSB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDRSB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSB_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDRSB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x39800000;
    const MASK: u32 = 0xff800000;
    const MNEMONIC: &'static str = "ldrsb";
}
impl InsnOpcode for LDRSB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = LDRSB_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDRSB_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDRSB_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSH_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDRSH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x78a00800;
    const MASK: u32 = 0xffa00c00;
    const MNEMONIC: &'static str = "ldrsh";
}
impl InsnOpcode for LDRSH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = LDRSH_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDRSH_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDRSH_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDRSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78800400;
    const MASK: u32 = 0xffa00400;
    const MNEMONIC: &'static str = "ldrsh";
}
impl InsnOpcode for LDRSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDRSH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDRSH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDRSH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSH_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDRSH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x79800000;
    const MASK: u32 = 0xff800000;
    const MNEMONIC: &'static str = "ldrsh";
}
impl InsnOpcode for LDRSH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = LDRSH_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDRSH_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDRSH_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_PCREL19 {
    #[bits(5)]
    pub rt: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LDRSW_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = 0x98000000;
    const MASK: u32 = 0xff000000;
    const MNEMONIC: &'static str = "ldrsw";
}
impl InsnOpcode for LDRSW_Rt_ADDR_PCREL19 {
    const OPCODE: u32 = LDRSW_Rt_ADDR_PCREL19::OPCODE;
    const MASK: u32 = LDRSW_Rt_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = LDRSW_Rt_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDRSW_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0xb8a00800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldrsw";
}
impl InsnOpcode for LDRSW_Rt_ADDR_REGOFF {
    const OPCODE: u32 = LDRSW_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = LDRSW_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = LDRSW_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDRSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8800400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "ldrsw";
}
impl InsnOpcode for LDRSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDRSW_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDRSW_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDRSW_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDRSW_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl LDRSW_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0xb9800000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "ldrsw";
}
impl InsnOpcode for LDRSW_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = LDRSW_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = LDRSW_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = LDRSW_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSET_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8203000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldset";
}
impl InsnOpcode for LDSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSET_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSET_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSET_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a03000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldseta";
}
impl InsnOpcode for LDSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetab";
}
impl InsnOpcode for LDSETAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetah";
}
impl InsnOpcode for LDSETAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e03000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsetal";
}
impl InsnOpcode for LDSETAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetalb";
}
impl InsnOpcode for LDSETALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetalh";
}
impl InsnOpcode for LDSETALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38203000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetb";
}
impl InsnOpcode for LDSETB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78203000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldseth";
}
impl InsnOpcode for LDSETH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8603000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsetl";
}
impl InsnOpcode for LDSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38603000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetlb";
}
impl InsnOpcode for LDSETLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78603000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetlh";
}
impl InsnOpcode for LDSETLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19203000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetp";
}
impl InsnOpcode for LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetpa";
}
impl InsnOpcode for LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetpal";
}
impl InsnOpcode for LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19603000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsetpl";
}
impl InsnOpcode for LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAX_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAX_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8204000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsmax";
}
impl InsnOpcode for LDSMAX_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAX_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAX_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAX_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a04000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsmaxa";
}
impl InsnOpcode for LDSMAXA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a04000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxab";
}
impl InsnOpcode for LDSMAXAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a04000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxah";
}
impl InsnOpcode for LDSMAXAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e04000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsmaxal";
}
impl InsnOpcode for LDSMAXAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e04000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxalb";
}
impl InsnOpcode for LDSMAXALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e04000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxalh";
}
impl InsnOpcode for LDSMAXALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38204000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxb";
}
impl InsnOpcode for LDSMAXB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78204000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxh";
}
impl InsnOpcode for LDSMAXH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8604000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsmaxl";
}
impl InsnOpcode for LDSMAXL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38604000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxlb";
}
impl InsnOpcode for LDSMAXLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMAXLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMAXLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78604000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsmaxlh";
}
impl InsnOpcode for LDSMAXLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMAXLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMAXLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMAXLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMIN_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMIN_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8205000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsmin";
}
impl InsnOpcode for LDSMIN_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMIN_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMIN_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMIN_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a05000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsmina";
}
impl InsnOpcode for LDSMINA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a05000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminab";
}
impl InsnOpcode for LDSMINAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a05000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminah";
}
impl InsnOpcode for LDSMINAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e05000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsminal";
}
impl InsnOpcode for LDSMINAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e05000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminalb";
}
impl InsnOpcode for LDSMINALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e05000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminalh";
}
impl InsnOpcode for LDSMINALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38205000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminb";
}
impl InsnOpcode for LDSMINB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78205000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminh";
}
impl InsnOpcode for LDSMINH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8605000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldsminl";
}
impl InsnOpcode for LDSMINL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38605000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminlb";
}
impl InsnOpcode for LDSMINLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDSMINLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDSMINLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78605000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldsminlh";
}
impl InsnOpcode for LDSMINLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDSMINLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDSMINLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDSMINLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDTR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8400800;
    const MASK: u32 = 0xbfe00c00;
    const MNEMONIC: &'static str = "ldtr";
}
impl InsnOpcode for LDTR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDTR_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDTR_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDTR_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDTRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38400800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldtrb";
}
impl InsnOpcode for LDTRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDTRB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDTRB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDTRB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDTRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78400800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldtrh";
}
impl InsnOpcode for LDTRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDTRH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDTRH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDTRH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRSB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDTRSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38800800;
    const MASK: u32 = 0xffa00c00;
    const MNEMONIC: &'static str = "ldtrsb";
}
impl InsnOpcode for LDTRSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDTRSB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDTRSB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDTRSB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRSH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDTRSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78800800;
    const MASK: u32 = 0xffa00c00;
    const MNEMONIC: &'static str = "ldtrsh";
}
impl InsnOpcode for LDTRSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDTRSH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDTRSH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDTRSH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDTRSW_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDTRSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8800800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldtrsw";
}
impl InsnOpcode for LDTRSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDTRSW_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDTRSW_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDTRSW_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAX_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAX_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8206000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldumax";
}
impl InsnOpcode for LDUMAX_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAX_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAX_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAX_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a06000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldumaxa";
}
impl InsnOpcode for LDUMAXA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a06000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxab";
}
impl InsnOpcode for LDUMAXAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a06000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxah";
}
impl InsnOpcode for LDUMAXAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e06000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldumaxal";
}
impl InsnOpcode for LDUMAXAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e06000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxalb";
}
impl InsnOpcode for LDUMAXALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e06000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxalh";
}
impl InsnOpcode for LDUMAXALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38206000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxb";
}
impl InsnOpcode for LDUMAXB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78206000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxh";
}
impl InsnOpcode for LDUMAXH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8606000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldumaxl";
}
impl InsnOpcode for LDUMAXL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38606000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxlb";
}
impl InsnOpcode for LDUMAXLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMAXLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMAXLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78606000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ldumaxlh";
}
impl InsnOpcode for LDUMAXLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMAXLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMAXLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMAXLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMIN_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMIN_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8207000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldumin";
}
impl InsnOpcode for LDUMIN_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMIN_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMIN_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMIN_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a07000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "ldumina";
}
impl InsnOpcode for LDUMINA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a07000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminab";
}
impl InsnOpcode for LDUMINAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a07000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminah";
}
impl InsnOpcode for LDUMINAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e07000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "lduminal";
}
impl InsnOpcode for LDUMINAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e07000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminalb";
}
impl InsnOpcode for LDUMINALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e07000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminalh";
}
impl InsnOpcode for LDUMINALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38207000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminb";
}
impl InsnOpcode for LDUMINB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78207000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminh";
}
impl InsnOpcode for LDUMINH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8607000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "lduminl";
}
impl InsnOpcode for LDUMINL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38607000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminlb";
}
impl InsnOpcode for LDUMINLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUMINLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUMINLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78607000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "lduminlh";
}
impl InsnOpcode for LDUMINLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDUMINLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDUMINLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDUMINLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8400000;
    const MASK: u32 = 0xbfe00c00;
    const MNEMONIC: &'static str = "ldur";
}
impl InsnOpcode for LDUR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDUR_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDUR_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDUR_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDUR_Ft_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDUR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = 0x3c400000;
    const MASK: u32 = 0x3f600c00;
    const MNEMONIC: &'static str = "ldur";
}
impl InsnOpcode for LDUR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = LDUR_Ft_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDUR_Ft_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDUR_Ft_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDURB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38400000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldurb";
}
impl InsnOpcode for LDURB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDURB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDURB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDURB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDURH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78400000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldurh";
}
impl InsnOpcode for LDURH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDURH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDURH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDURH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURSB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDURSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38800000;
    const MASK: u32 = 0xffa00c00;
    const MNEMONIC: &'static str = "ldursb";
}
impl InsnOpcode for LDURSB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDURSB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDURSB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDURSB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURSH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDURSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78800000;
    const MASK: u32 = 0xffa00c00;
    const MNEMONIC: &'static str = "ldursh";
}
impl InsnOpcode for LDURSH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDURSH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDURSH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDURSH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDURSW_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LDURSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8800000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "ldursw";
}
impl InsnOpcode for LDURSW_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = LDURSW_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = LDURSW_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = LDURSW_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXP_Rt_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl LDXP_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x887f0000;
    const MASK: u32 = 0xbfff8000;
    const MNEMONIC: &'static str = "ldxp";
}
impl InsnOpcode for LDXP_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = LDXP_Rt_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDXP_Rt_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDXP_Rt_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDXR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x885f7c00;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ldxr";
}
impl InsnOpcode for LDXR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDXR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDXR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDXR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDXRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x85f7c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldxrb";
}
impl InsnOpcode for LDXRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDXRB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDXRB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDXRB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LDXRH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl LDXRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x485f7c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ldxrh";
}
impl InsnOpcode for LDXRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = LDXRH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = LDXRH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = LDXRH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = 0x4038000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsl";
}
impl InsnOpcode for LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::OPCODE;
    const MASK: u32 = LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MASK;
    const MNEMONIC: &'static str = LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4138000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsl";
}
impl InsnOpcode for LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    const OPCODE: u32 = 0x41b8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsl";
}
impl InsnOpcode for LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    const OPCODE: u32 = LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::OPCODE;
    const MASK: u32 = LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::MASK;
    const MNEMONIC: &'static str = LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LSL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4208c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "lsl";
}
impl InsnOpcode for LSL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = LSL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = LSL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = LSL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED {
    const OPCODE: u32 = 0x4209c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "lsl";
}
impl InsnOpcode for LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED {
    const OPCODE: u32 = LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED::OPCODE;
    const MASK: u32 = LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4178000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lslr";
}
impl InsnOpcode for LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSLV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LSLV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02000;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "lslv";
}
impl InsnOpcode for LSLV_Rd_Rn_Rm {
    const OPCODE: u32 = LSLV_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = LSLV_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = LSLV_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = 0x4018000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsr";
}
impl InsnOpcode for LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::OPCODE;
    const MASK: u32 = LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MASK;
    const MNEMONIC: &'static str = LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4118000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsr";
}
impl InsnOpcode for LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    const OPCODE: u32 = 0x4198000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsr";
}
impl InsnOpcode for LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D {
    const OPCODE: u32 = LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::OPCODE;
    const MASK: u32 = LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::MASK;
    const MNEMONIC: &'static str = LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LSR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4208400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "lsr";
}
impl InsnOpcode for LSR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = LSR_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = LSR_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = LSR_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4209400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "lsr";
}
impl InsnOpcode for LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4158000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "lsrr";
}
impl InsnOpcode for LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LSRV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl LSRV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02400;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "lsrv";
}
impl InsnOpcode for LSRV_Rd_Rn_Rm {
    const OPCODE: u32 = LSRV_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = LSRV_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = LSRV_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(2)]
    pub imm2_16: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16 {
    const OPCODE: u32 = 0xc08c8000;
    const MASK: u32 = 0xfffccc03;
    const MNEMONIC: &'static str = "luti2";
}
impl InsnOpcode for LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16 {
    const OPCODE: u32 = LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16::OPCODE;
    const MASK: u32 = LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16::MASK;
    const MNEMONIC: &'static str = LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(5)]
    pub _op_10: u32,
    #[bits(3)]
    pub imm3_15: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 {
    const OPCODE: u32 = 0xc08c4000;
    const MASK: u32 = 0xfffc4c01;
    const MNEMONIC: &'static str = "luti2";
}
impl InsnOpcode for LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 {
    const OPCODE: u32 = LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15::OPCODE;
    const MASK: u32 = LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15::MASK;
    const MNEMONIC: &'static str = LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(4)]
    pub _op_10: u32,
    #[bits(4)]
    pub imm4_14: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 {
    const OPCODE: u32 = 0xc0cc0000;
    const MASK: u32 = 0xfffc0c00;
    const MNEMONIC: &'static str = "luti2";
}
impl InsnOpcode for LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 {
    const OPCODE: u32 = LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14::OPCODE;
    const MASK: u32 = LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14::MASK;
    const MNEMONIC: &'static str = LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(1)]
    pub imm1_16: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16 {
    const OPCODE: u32 = 0xc08a8000;
    const MASK: u32 = 0xfffecc03;
    const MNEMONIC: &'static str = "luti4";
}
impl InsnOpcode for LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16 {
    const OPCODE: u32 = LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16::OPCODE;
    const MASK: u32 = LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16::MASK;
    const MNEMONIC: &'static str = LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(5)]
    pub _op_10: u32,
    #[bits(2)]
    pub imm2_15: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15 {
    const OPCODE: u32 = 0xc08a4000;
    const MASK: u32 = 0xfffe4c01;
    const MNEMONIC: &'static str = "luti4";
}
impl InsnOpcode for LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15 {
    const OPCODE: u32 = LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15::OPCODE;
    const MASK: u32 = LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15::MASK;
    const MNEMONIC: &'static str = LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(4)]
    pub _op_10: u32,
    #[bits(3)]
    pub imm3_14: u32,
    #[bits(15)]
    pub _op_17: u32,
}
impl LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14 {
    const OPCODE: u32 = 0xc0ca0000;
    const MASK: u32 = 0xfffe0c00;
    const MNEMONIC: &'static str = "luti4";
}
impl InsnOpcode for LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14 {
    const OPCODE: u32 = LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14::OPCODE;
    const MASK: u32 = LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14::MASK;
    const MNEMONIC: &'static str = LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_za_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 {
    const OPCODE: u32 = 0x400c000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "mad";
}
impl InsnOpcode for MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 {
    const OPCODE: u32 = MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5::OPCODE;
    const MASK: u32 = MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5::MASK;
    const MNEMONIC: &'static str = MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MADD_Rd_Rn_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MADD_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = 0x1b000000;
    const MASK: u32 = 0x7fe08000;
    const MNEMONIC: &'static str = "madd";
}
impl InsnOpcode for MADD_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = MADD_Rd_Rn_Rm_Ra::OPCODE;
    const MASK: u32 = MADD_Rd_Rn_Rm_Ra::MASK;
    const MNEMONIC: &'static str = MADD_Rd_Rn_Rm_Ra::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45208000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "match";
}
impl InsnOpcode for MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x44200800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "mla";
}
impl InsnOpcode for MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "mla";
}
impl InsnOpcode for MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "mla";
}
impl InsnOpcode for MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4004000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "mla";
}
impl InsnOpcode for MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLA_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe209400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "mla";
}
impl InsnOpcode for MLA_Vd_Vn_Vm {
    const OPCODE: u32 = MLA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = MLA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = MLA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLA_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLA_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f000000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "mla";
}
impl InsnOpcode for MLA_Vd_Vn_Em16 {
    const OPCODE: u32 = MLA_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = MLA_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = MLA_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x44200c00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "mls";
}
impl InsnOpcode for MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "mls";
}
impl InsnOpcode for MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "mls";
}
impl InsnOpcode for MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4006000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "mls";
}
impl InsnOpcode for MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLS_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e209400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "mls";
}
impl InsnOpcode for MLS_Vd_Vn_Vm {
    const OPCODE: u32 = MLS_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = MLS_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = MLS_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MLS_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MLS_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f004000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "mls";
}
impl InsnOpcode for MLS_Vd_Vn_Em16 {
    const OPCODE: u32 = MLS_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = MLS_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = MLS_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0xc0000000;
    const MASK: u32 = 0xff3e0010;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub imm4_5: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src {
    const OPCODE: u32 = 0xc0020000;
    const MASK: u32 = 0xff3e0200;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src {
    const OPCODE: u32 = MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src::OPCODE;
    const MASK: u32 = MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src::MASK;
    const MNEMONIC: &'static str = MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_HV_idx_destxN_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOV_SME_ZA_HV_idx_destxN_SME_Znx2 {
    const OPCODE: u32 = 0xc0040000;
    const MASK: u32 = 0xff3f1c38;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_ZA_HV_idx_destxN_SME_Znx2 {
    const OPCODE: u32 = MOV_SME_ZA_HV_idx_destxN_SME_Znx2::OPCODE;
    const MASK: u32 = MOV_SME_ZA_HV_idx_destxN_SME_Znx2::MASK;
    const MNEMONIC: &'static str = MOV_SME_ZA_HV_idx_destxN_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = 0xc0060000;
    const MASK: u32 = 0xff3f1f01;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN::OPCODE;
    const MASK: u32 = MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN::MASK;
    const MNEMONIC: &'static str = MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOV_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc0040800;
    const MASK: u32 = 0xffff9c38;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = MOV_SME_ZA_array_off3_0_SME_Znx2::OPCODE;
    const MASK: u32 = MOV_SME_ZA_array_off3_0_SME_Znx2::MASK;
    const MNEMONIC: &'static str = MOV_SME_ZA_array_off3_0_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_Zdnx2_SME_ZA_array_off3_5 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOV_SME_Zdnx2_SME_ZA_array_off3_5 {
    const OPCODE: u32 = 0xc0060800;
    const MASK: u32 = 0xffff9f01;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_Zdnx2_SME_ZA_array_off3_5 {
    const OPCODE: u32 = MOV_SME_Zdnx2_SME_ZA_array_off3_5::OPCODE;
    const MASK: u32 = MOV_SME_Zdnx2_SME_ZA_array_off3_5::MASK;
    const MNEMONIC: &'static str = MOV_SME_Zdnx2_SME_ZA_array_off3_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_HV_idx_destxN_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOV_SME_ZA_HV_idx_destxN_SME_Znx4 {
    const OPCODE: u32 = 0xc0040400;
    const MASK: u32 = 0xff3f1c78;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_ZA_HV_idx_destxN_SME_Znx4 {
    const OPCODE: u32 = MOV_SME_ZA_HV_idx_destxN_SME_Znx4::OPCODE;
    const MASK: u32 = MOV_SME_ZA_HV_idx_destxN_SME_Znx4::MASK;
    const MNEMONIC: &'static str = MOV_SME_ZA_HV_idx_destxN_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = 0xc0060400;
    const MASK: u32 = 0xff3f1f03;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN::OPCODE;
    const MASK: u32 = MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN::MASK;
    const MNEMONIC: &'static str = MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOV_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc0040c00;
    const MASK: u32 = 0xffff9c78;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = MOV_SME_ZA_array_off3_0_SME_Znx4::OPCODE;
    const MASK: u32 = MOV_SME_ZA_array_off3_0_SME_Znx4::MASK;
    const MNEMONIC: &'static str = MOV_SME_ZA_array_off3_0_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOV_SME_Zdnx4_SME_ZA_array_off3_5 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOV_SME_Zdnx4_SME_ZA_array_off3_5 {
    const OPCODE: u32 = 0xc0060c00;
    const MASK: u32 = 0xffff9f03;
    const MNEMONIC: &'static str = "mov";
}
impl InsnOpcode for MOV_SME_Zdnx4_SME_ZA_array_off3_5 {
    const OPCODE: u32 = MOV_SME_Zdnx4_SME_ZA_array_off3_5::OPCODE;
    const MASK: u32 = MOV_SME_Zdnx4_SME_ZA_array_off3_5::MASK;
    const MNEMONIC: &'static str = MOV_SME_Zdnx4_SME_ZA_array_off3_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0xc0000000;
    const MASK: u32 = 0xff3e0010;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub imm4_5: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(1)]
    pub sme_q: u32,
    #[bits(5)]
    pub _op_17: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src {
    const OPCODE: u32 = 0xc0020000;
    const MASK: u32 = 0xff3e0200;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src {
    const OPCODE: u32 = MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src::OPCODE;
    const MASK: u32 = MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src::MASK;
    const MNEMONIC: &'static str = MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 {
    const OPCODE: u32 = 0xc0040000;
    const MASK: u32 = 0xff3f1c38;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 {
    const OPCODE: u32 = MOVA_SME_ZA_HV_idx_destxN_SME_Znx2::OPCODE;
    const MASK: u32 = MOVA_SME_ZA_HV_idx_destxN_SME_Znx2::MASK;
    const MNEMONIC: &'static str = MOVA_SME_ZA_HV_idx_destxN_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = 0xc0060000;
    const MASK: u32 = 0xff3f1f01;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN::OPCODE;
    const MASK: u32 = MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN::MASK;
    const MNEMONIC: &'static str = MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOVA_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc0040800;
    const MASK: u32 = 0xffff9c38;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = MOVA_SME_ZA_array_off3_0_SME_Znx2::OPCODE;
    const MASK: u32 = MOVA_SME_ZA_array_off3_0_SME_Znx2::MASK;
    const MNEMONIC: &'static str = MOVA_SME_ZA_array_off3_0_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Zdnx2_SME_ZA_array_off3_5 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOVA_SME_Zdnx2_SME_ZA_array_off3_5 {
    const OPCODE: u32 = 0xc0060800;
    const MASK: u32 = 0xffff9f01;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_Zdnx2_SME_ZA_array_off3_5 {
    const OPCODE: u32 = MOVA_SME_Zdnx2_SME_ZA_array_off3_5::OPCODE;
    const MASK: u32 = MOVA_SME_Zdnx2_SME_ZA_array_off3_5::MASK;
    const MNEMONIC: &'static str = MOVA_SME_Zdnx2_SME_ZA_array_off3_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 {
    const OPCODE: u32 = 0xc0040400;
    const MASK: u32 = 0xff3f1c78;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 {
    const OPCODE: u32 = MOVA_SME_ZA_HV_idx_destxN_SME_Znx4::OPCODE;
    const MASK: u32 = MOVA_SME_ZA_HV_idx_destxN_SME_Znx4::MASK;
    const MNEMONIC: &'static str = MOVA_SME_ZA_HV_idx_destxN_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = 0xc0060400;
    const MASK: u32 = 0xff3f1f03;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN {
    const OPCODE: u32 = MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN::OPCODE;
    const MASK: u32 = MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN::MASK;
    const MNEMONIC: &'static str = MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOVA_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc0040c00;
    const MASK: u32 = 0xffff9c78;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = MOVA_SME_ZA_array_off3_0_SME_Znx4::OPCODE;
    const MASK: u32 = MOVA_SME_ZA_array_off3_0_SME_Znx4::MASK;
    const MNEMONIC: &'static str = MOVA_SME_ZA_array_off3_0_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVA_SME_Zdnx4_SME_ZA_array_off3_5 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub imm3_5: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOVA_SME_Zdnx4_SME_ZA_array_off3_5 {
    const OPCODE: u32 = 0xc0060c00;
    const MASK: u32 = 0xffff9f03;
    const MNEMONIC: &'static str = "mova";
}
impl InsnOpcode for MOVA_SME_Zdnx4_SME_ZA_array_off3_5 {
    const OPCODE: u32 = MOVA_SME_Zdnx4_SME_ZA_array_off3_5::OPCODE;
    const MASK: u32 = MOVA_SME_Zdnx4_SME_ZA_array_off3_5::MASK;
    const MNEMONIC: &'static str = MOVA_SME_Zdnx4_SME_ZA_array_off3_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub off3: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1 {
    const OPCODE: u32 = 0xc0060200;
    const MASK: u32 = 0xffff1f01;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub ol: u32,
    #[bits(2)]
    pub zan_2: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1 {
    const OPCODE: u32 = 0xc0860200;
    const MASK: u32 = 0xffff1f01;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(2)]
    pub off2: u32,
    #[bits(1)]
    pub zan_1: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 {
    const OPCODE: u32 = 0xc0460200;
    const MASK: u32 = 0xffff1f01;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(3)]
    pub zan_3: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1 {
    const OPCODE: u32 = 0xc0c60200;
    const MASK: u32 = 0xffff1f01;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub off2: u32,
    #[bits(6)]
    pub _op_7: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 {
    const OPCODE: u32 = 0xc0060600;
    const MASK: u32 = 0xffff1f83;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub off2: u32,
    #[bits(6)]
    pub _op_7: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 {
    const OPCODE: u32 = 0xc0860600;
    const MASK: u32 = 0xffff1f83;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(1)]
    pub ol: u32,
    #[bits(1)]
    pub zan: u32,
    #[bits(6)]
    pub _op_7: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 {
    const OPCODE: u32 = 0xc0460600;
    const MASK: u32 = 0xffff1f83;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(3)]
    pub zan_3: u32,
    #[bits(5)]
    pub _op_8: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2 {
    const OPCODE: u32 = 0xc0c60600;
    const MASK: u32 = 0xffff1f03;
    const MNEMONIC: &'static str = "movaz";
}
impl InsnOpcode for MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2 {
    const OPCODE: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2::OPCODE;
    const MASK: u32 = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2::MASK;
    const MNEMONIC: &'static str = MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MOVI_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0xf000400;
    const MASK: u32 = 0xbff89c00;
    const MNEMONIC: &'static str = "movi";
}
impl InsnOpcode for MOVI_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = MOVI_Vd_SIMD_IMM_SFT::OPCODE;
    const MASK: u32 = MOVI_Vd_SIMD_IMM_SFT::MASK;
    const MNEMONIC: &'static str = MOVI_Vd_SIMD_IMM_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0xf008400;
    const MASK: u32 = 0xbff8dc00;
    const MNEMONIC: &'static str = "movi";
}
impl InsnOpcode for MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL::OPCODE;
    const MASK: u32 = MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL::MASK;
    const MNEMONIC: &'static str = MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    const OPCODE: u32 = 0xf00c400;
    const MASK: u32 = 0xbff8ec00;
    const MNEMONIC: &'static str = "movi";
}
impl InsnOpcode for MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    const OPCODE: u32 = MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL::OPCODE;
    const MASK: u32 = MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL::MASK;
    const MNEMONIC: &'static str = MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0xf00e400;
    const MASK: u32 = 0xbff8fc00;
    const MNEMONIC: &'static str = "movi";
}
impl InsnOpcode for MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL::OPCODE;
    const MASK: u32 = MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL::MASK;
    const MNEMONIC: &'static str = MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Sd_SIMD_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MOVI_Sd_SIMD_IMM {
    const OPCODE: u32 = 0x2f00e400;
    const MASK: u32 = 0xfff8fc00;
    const MNEMONIC: &'static str = "movi";
}
impl InsnOpcode for MOVI_Sd_SIMD_IMM {
    const OPCODE: u32 = MOVI_Sd_SIMD_IMM::OPCODE;
    const MASK: u32 = MOVI_Sd_SIMD_IMM::MASK;
    const MNEMONIC: &'static str = MOVI_Sd_SIMD_IMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVI_Vd_SIMD_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MOVI_Vd_SIMD_IMM {
    const OPCODE: u32 = 0x6f00e400;
    const MASK: u32 = 0xfff8fc00;
    const MNEMONIC: &'static str = "movi";
}
impl InsnOpcode for MOVI_Vd_SIMD_IMM {
    const OPCODE: u32 = MOVI_Vd_SIMD_IMM::OPCODE;
    const MASK: u32 = MOVI_Vd_SIMD_IMM::MASK;
    const MNEMONIC: &'static str = MOVI_Vd_SIMD_IMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVK_Rd_HALF {
    #[bits(5)]
    pub rd: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MOVK_Rd_HALF {
    const OPCODE: u32 = 0x72800000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "movk";
}
impl InsnOpcode for MOVK_Rd_HALF {
    const OPCODE: u32 = MOVK_Rd_HALF::OPCODE;
    const MASK: u32 = MOVK_Rd_HALF::MASK;
    const MNEMONIC: &'static str = MOVK_Rd_HALF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVN_Rd_HALF {
    #[bits(5)]
    pub rd: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MOVN_Rd_HALF {
    const OPCODE: u32 = 0x12800000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "movn";
}
impl InsnOpcode for MOVN_Rd_HALF {
    const OPCODE: u32 = MOVN_Rd_HALF::OPCODE;
    const MASK: u32 = MOVN_Rd_HALF::MASK;
    const MNEMONIC: &'static str = MOVN_Rd_HALF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4102000;
    const MASK: u32 = 0xff3ee000;
    const MNEMONIC: &'static str = "movprfx";
}
impl InsnOpcode for MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVPRFX_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl MOVPRFX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x420bc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "movprfx";
}
impl InsnOpcode for MOVPRFX_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = MOVPRFX_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = MOVPRFX_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = MOVPRFX_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVT_Rt_SME_ZT0_INDEX {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(3)]
    pub imm3_12: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOVT_Rt_SME_ZT0_INDEX {
    const OPCODE: u32 = 0xc04c03e0;
    const MASK: u32 = 0xffff8fe0;
    const MNEMONIC: &'static str = "movt";
}
impl InsnOpcode for MOVT_Rt_SME_ZT0_INDEX {
    const OPCODE: u32 = MOVT_Rt_SME_ZT0_INDEX::OPCODE;
    const MASK: u32 = MOVT_Rt_SME_ZT0_INDEX::MASK;
    const MNEMONIC: &'static str = MOVT_Rt_SME_ZT0_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVT_SME_ZT0_INDEX_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(3)]
    pub imm3_12: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl MOVT_SME_ZT0_INDEX_Rt {
    const OPCODE: u32 = 0xc04e03e0;
    const MASK: u32 = 0xffff8fe0;
    const MNEMONIC: &'static str = "movt";
}
impl InsnOpcode for MOVT_SME_ZT0_INDEX_Rt {
    const OPCODE: u32 = MOVT_SME_ZT0_INDEX_Rt::OPCODE;
    const MASK: u32 = MOVT_SME_ZT0_INDEX_Rt::MASK;
    const MNEMONIC: &'static str = MOVT_SME_ZT0_INDEX_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MOVZ_Rd_HALF {
    #[bits(5)]
    pub rd: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MOVZ_Rd_HALF {
    const OPCODE: u32 = 0x52800000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "movz";
}
impl InsnOpcode for MOVZ_Rd_HALF {
    const OPCODE: u32 = MOVZ_Rd_HALF::OPCODE;
    const MASK: u32 = MOVZ_Rd_HALF::MASK;
    const MNEMONIC: &'static str = MOVZ_Rd_HALF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MRRS_Rt_PAIRREG_SYSREG128 {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MRRS_Rt_PAIRREG_SYSREG128 {
    const OPCODE: u32 = 0xd5700000;
    const MASK: u32 = 0xfff00000;
    const MNEMONIC: &'static str = "mrrs";
}
impl InsnOpcode for MRRS_Rt_PAIRREG_SYSREG128 {
    const OPCODE: u32 = MRRS_Rt_PAIRREG_SYSREG128::OPCODE;
    const MASK: u32 = MRRS_Rt_PAIRREG_SYSREG128::MASK;
    const MNEMONIC: &'static str = MRRS_Rt_PAIRREG_SYSREG128::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MRS_Rt_SYSREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MRS_Rt_SYSREG {
    const OPCODE: u32 = 0xd5200000;
    const MASK: u32 = 0xffe00000;
    const MNEMONIC: &'static str = "mrs";
}
impl InsnOpcode for MRS_Rt_SYSREG {
    const OPCODE: u32 = MRS_Rt_SYSREG::OPCODE;
    const MASK: u32 = MRS_Rt_SYSREG::MASK;
    const MNEMONIC: &'static str = MRS_Rt_SYSREG::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_za_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 {
    const OPCODE: u32 = 0x400e000;
    const MASK: u32 = 0xff20e000;
    const MNEMONIC: &'static str = "msb";
}
impl InsnOpcode for MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 {
    const OPCODE: u32 = MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5::OPCODE;
    const MASK: u32 = MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5::MASK;
    const MNEMONIC: &'static str = MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSR_PSTATEFIELD_UIMM4 {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl MSR_PSTATEFIELD_UIMM4 {
    const OPCODE: u32 = 0xd500401f;
    const MASK: u32 = 0xfff8f01f;
    const MNEMONIC: &'static str = "msr";
}
impl InsnOpcode for MSR_PSTATEFIELD_UIMM4 {
    const OPCODE: u32 = MSR_PSTATEFIELD_UIMM4::OPCODE;
    const MASK: u32 = MSR_PSTATEFIELD_UIMM4::MASK;
    const MNEMONIC: &'static str = MSR_PSTATEFIELD_UIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSR_SYSREG_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MSR_SYSREG_Rt {
    const OPCODE: u32 = 0xd5000000;
    const MASK: u32 = 0xffe00000;
    const MNEMONIC: &'static str = "msr";
}
impl InsnOpcode for MSR_SYSREG_Rt {
    const OPCODE: u32 = MSR_SYSREG_Rt::OPCODE;
    const MASK: u32 = MSR_SYSREG_Rt::MASK;
    const MNEMONIC: &'static str = MSR_SYSREG_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSRR_SYSREG128_Rt_PAIRREG {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MSRR_SYSREG128_Rt_PAIRREG {
    const OPCODE: u32 = 0xd5500000;
    const MASK: u32 = 0xfff00000;
    const MNEMONIC: &'static str = "msrr";
}
impl InsnOpcode for MSRR_SYSREG128_Rt_PAIRREG {
    const OPCODE: u32 = MSRR_SYSREG128_Rt_PAIRREG::OPCODE;
    const MASK: u32 = MSRR_SYSREG128_Rt_PAIRREG::MASK;
    const MNEMONIC: &'static str = MSRR_SYSREG128_Rt_PAIRREG::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MSUB_Rd_Rn_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MSUB_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = 0x1b008000;
    const MASK: u32 = 0x7fe08000;
    const MNEMONIC: &'static str = "msub";
}
impl InsnOpcode for MSUB_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = MSUB_Rd_Rn_Rm_Ra::OPCODE;
    const MASK: u32 = MSUB_Rd_Rn_Rm_Ra::MASK;
    const MNEMONIC: &'static str = MSUB_Rd_Rn_Rm_Ra::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4100000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = MUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x4420f800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a0f800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e0f800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl MUL_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = 0x2530c000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = MUL_SVE_Zd_SVE_Zd_SVE_SIMM8::OPCODE;
    const MASK: u32 = MUL_SVE_Zd_SVE_Zd_SVE_SIMM8::MASK;
    const MNEMONIC: &'static str = MUL_SVE_Zd_SVE_Zd_SVE_SIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MUL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe209c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_Vd_Vn_Vm {
    const OPCODE: u32 = MUL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = MUL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = MUL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MUL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl MUL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf008000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "mul";
}
impl InsnOpcode for MUL_Vd_Vn_Em16 {
    const OPCODE: u32 = MUL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = MUL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = MUL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MVNI_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MVNI_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0x2f000400;
    const MASK: u32 = 0xbff89c00;
    const MNEMONIC: &'static str = "mvni";
}
impl InsnOpcode for MVNI_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = MVNI_Vd_SIMD_IMM_SFT::OPCODE;
    const MASK: u32 = MVNI_Vd_SIMD_IMM_SFT::MASK;
    const MNEMONIC: &'static str = MVNI_Vd_SIMD_IMM_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0x2f008400;
    const MASK: u32 = 0xbff8dc00;
    const MNEMONIC: &'static str = "mvni";
}
impl InsnOpcode for MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL::OPCODE;
    const MASK: u32 = MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL::MASK;
    const MNEMONIC: &'static str = MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    const OPCODE: u32 = 0x2f00c400;
    const MASK: u32 = 0xbff8ec00;
    const MNEMONIC: &'static str = "mvni";
}
impl InsnOpcode for MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL {
    const OPCODE: u32 = MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL::OPCODE;
    const MASK: u32 = MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL::MASK;
    const MNEMONIC: &'static str = MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25804210;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "nand";
}
impl InsnOpcode for NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25c04210;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "nands";
}
impl InsnOpcode for NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = 0x4e03c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "nbsl";
}
impl InsnOpcode for NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn {
    const OPCODE: u32 = NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::OPCODE;
    const MASK: u32 = NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MASK;
    const MNEMONIC: &'static str = NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl NEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x417a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "neg";
}
impl InsnOpcode for NEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = NEG_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = NEG_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = NEG_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NEG_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl NEG_Vd_Vn {
    const OPCODE: u32 = 0x2e20b800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "neg";
}
impl InsnOpcode for NEG_Vd_Vn {
    const OPCODE: u32 = NEG_Vd_Vn::OPCODE;
    const MASK: u32 = NEG_Vd_Vn::MASK;
    const MNEMONIC: &'static str = NEG_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NEG_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl NEG_Sd_Sn {
    const OPCODE: u32 = 0x7e20b800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "neg";
}
impl InsnOpcode for NEG_Sd_Sn {
    const OPCODE: u32 = NEG_Sd_Sn::OPCODE;
    const MASK: u32 = NEG_Sd_Sn::MASK;
    const MNEMONIC: &'static str = NEG_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45208010;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "nmatch";
}
impl InsnOpcode for NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25804200;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "nor";
}
impl InsnOpcode for NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25c04200;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "nors";
}
impl InsnOpcode for NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl NOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x41ea000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "not";
}
impl InsnOpcode for NOT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = NOT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = NOT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = NOT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct NOT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl NOT_Vd_Vn {
    const OPCODE: u32 = 0x2e205800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "not";
}
impl InsnOpcode for NOT_Vd_Vn {
    const OPCODE: u32 = NOT_Vd_Vn::OPCODE;
    const MASK: u32 = NOT_Vd_Vn::MASK;
    const MNEMONIC: &'static str = NOT_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORN_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ORN_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x2a200000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "orn";
}
impl InsnOpcode for ORN_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = ORN_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = ORN_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = ORN_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25804010;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "orn";
}
impl InsnOpcode for ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ORN_Vd_Vn_Vm {
    const OPCODE: u32 = 0xee01c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "orn";
}
impl InsnOpcode for ORN_Vd_Vn_Vm {
    const OPCODE: u32 = ORN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ORN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ORN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25c04010;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "orns";
}
impl InsnOpcode for ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Rd_SP_Rn_LIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imms: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(1)]
    pub n: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl ORR_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = 0x32000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_Rd_SP_Rn_LIMM {
    const OPCODE: u32 = ORR_Rd_SP_Rn_LIMM::OPCODE;
    const MASK: u32 = ORR_Rd_SP_Rn_LIMM::MASK;
    const MNEMONIC: &'static str = ORR_Rd_SP_Rn_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ORR_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x2a000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = ORR_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = ORR_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = ORR_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4180000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ORR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4603000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ORR_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ORR_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ORR_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Zd_SVE_Zd_SVE_LIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(6)]
    pub sve_immr: u32,
    #[bits(1)]
    pub sve_n: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl ORR_SVE_Zd_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = 0x5000000;
    const MASK: u32 = 0xfffc0000;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_SVE_Zd_SVE_Zd_SVE_LIMM {
    const OPCODE: u32 = ORR_SVE_Zd_SVE_Zd_SVE_LIMM::OPCODE;
    const MASK: u32 = ORR_SVE_Zd_SVE_Zd_SVE_LIMM::MASK;
    const MNEMONIC: &'static str = ORR_SVE_Zd_SVE_Zd_SVE_LIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25804000;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ORR_Vd_Vn_Vm {
    const OPCODE: u32 = 0xea01c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_Vd_Vn_Vm {
    const OPCODE: u32 = ORR_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ORR_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ORR_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Vd_SIMD_IMM_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl ORR_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = 0xf001400;
    const MASK: u32 = 0xbff89c00;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_Vd_SIMD_IMM_SFT {
    const OPCODE: u32 = ORR_Vd_SIMD_IMM_SFT::OPCODE;
    const MASK: u32 = ORR_Vd_SIMD_IMM_SFT::MASK;
    const MNEMONIC: &'static str = ORR_Vd_SIMD_IMM_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORR_Vd_V_4H_SIMD_IMM_SFT_LSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl ORR_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = 0xf009400;
    const MASK: u32 = 0xbff8dc00;
    const MNEMONIC: &'static str = "orr";
}
impl InsnOpcode for ORR_Vd_V_4H_SIMD_IMM_SFT_LSL {
    const OPCODE: u32 = ORR_Vd_V_4H_SIMD_IMM_SFT_LSL::OPCODE;
    const MASK: u32 = ORR_Vd_V_4H_SIMD_IMM_SFT_LSL::MASK;
    const MNEMONIC: &'static str = ORR_Vd_V_4H_SIMD_IMM_SFT_LSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25c04000;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "orrs";
}
impl InsnOpcode for ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4182000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "orv";
}
impl InsnOpcode for ORV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = ORV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = ORV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = ORV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDA_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PACDA_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac10800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "pacda";
}
impl InsnOpcode for PACDA_Rd_Rn_SP {
    const OPCODE: u32 = PACDA_Rd_Rn_SP::OPCODE;
    const MASK: u32 = PACDA_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = PACDA_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDB_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PACDB_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac10c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "pacdb";
}
impl InsnOpcode for PACDB_Rd_Rn_SP {
    const OPCODE: u32 = PACDB_Rd_Rn_SP::OPCODE;
    const MASK: u32 = PACDB_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = PACDB_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl PACDZA_Rd {
    const OPCODE: u32 = 0xdac12be0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "pacdza";
}
impl InsnOpcode for PACDZA_Rd {
    const OPCODE: u32 = PACDZA_Rd::OPCODE;
    const MASK: u32 = PACDZA_Rd::MASK;
    const MNEMONIC: &'static str = PACDZA_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACDZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl PACDZB_Rd {
    const OPCODE: u32 = 0xdac12fe0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "pacdzb";
}
impl InsnOpcode for PACDZB_Rd {
    const OPCODE: u32 = PACDZB_Rd::OPCODE;
    const MASK: u32 = PACDZB_Rd::MASK;
    const MNEMONIC: &'static str = PACDZB_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACGA_Rd_Rn_Rm_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PACGA_Rd_Rn_Rm_SP {
    const OPCODE: u32 = 0x9ac03000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pacga";
}
impl InsnOpcode for PACGA_Rd_Rn_Rm_SP {
    const OPCODE: u32 = PACGA_Rd_Rn_Rm_SP::OPCODE;
    const MASK: u32 = PACGA_Rd_Rn_Rm_SP::MASK;
    const MNEMONIC: &'static str = PACGA_Rd_Rn_Rm_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIA_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PACIA_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac10000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "pacia";
}
impl InsnOpcode for PACIA_Rd_Rn_SP {
    const OPCODE: u32 = PACIA_Rd_Rn_SP::OPCODE;
    const MASK: u32 = PACIA_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = PACIA_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIB_Rd_Rn_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PACIB_Rd_Rn_SP {
    const OPCODE: u32 = 0xdac10400;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "pacib";
}
impl InsnOpcode for PACIB_Rd_Rn_SP {
    const OPCODE: u32 = PACIB_Rd_Rn_SP::OPCODE;
    const MASK: u32 = PACIB_Rd_Rn_SP::MASK;
    const MNEMONIC: &'static str = PACIB_Rd_Rn_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIZA_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl PACIZA_Rd {
    const OPCODE: u32 = 0xdac123e0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "paciza";
}
impl InsnOpcode for PACIZA_Rd {
    const OPCODE: u32 = PACIZA_Rd::OPCODE;
    const MASK: u32 = PACIZA_Rd::MASK;
    const MNEMONIC: &'static str = PACIZA_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PACIZB_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl PACIZB_Rd {
    const OPCODE: u32 = 0xdac127e0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "pacizb";
}
impl InsnOpcode for PACIZB_Rd {
    const OPCODE: u32 = PACIZB_Rd::OPCODE;
    const MASK: u32 = PACIZB_Rd::MASK;
    const MNEMONIC: &'static str = PACIZB_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PEXT_SVE_Pd_SME_PNn3_INDEX2 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(3)]
    pub sme_pnn3: u32,
    #[bits(2)]
    pub imm2_8: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PEXT_SVE_Pd_SME_PNn3_INDEX2 {
    const OPCODE: u32 = 0x25207010;
    const MASK: u32 = 0xff3ffc10;
    const MNEMONIC: &'static str = "pext";
}
impl InsnOpcode for PEXT_SVE_Pd_SME_PNn3_INDEX2 {
    const OPCODE: u32 = PEXT_SVE_Pd_SME_PNn3_INDEX2::OPCODE;
    const MASK: u32 = PEXT_SVE_Pd_SME_PNn3_INDEX2::MASK;
    const MNEMONIC: &'static str = PEXT_SVE_Pd_SME_PNn3_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PEXT_SME_PdxN_SME_PNn3_INDEX1 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(3)]
    pub sme_pnn3: u32,
    #[bits(1)]
    pub imm1_8: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl PEXT_SME_PdxN_SME_PNn3_INDEX1 {
    const OPCODE: u32 = 0x25207410;
    const MASK: u32 = 0xff3ffe10;
    const MNEMONIC: &'static str = "pext";
}
impl InsnOpcode for PEXT_SME_PdxN_SME_PNn3_INDEX1 {
    const OPCODE: u32 = PEXT_SME_PdxN_SME_PNn3_INDEX1::OPCODE;
    const MASK: u32 = PEXT_SME_PdxN_SME_PNn3_INDEX1::MASK;
    const MNEMONIC: &'static str = PEXT_SME_PdxN_SME_PNn3_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PFALSE_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(28)]
    pub _op_4: u32,
}
impl PFALSE_SVE_Pd {
    const OPCODE: u32 = 0x2518e400;
    const MASK: u32 = 0xfffffff0;
    const MNEMONIC: &'static str = "pfalse";
}
impl InsnOpcode for PFALSE_SVE_Pd {
    const OPCODE: u32 = PFALSE_SVE_Pd::OPCODE;
    const MASK: u32 = PFALSE_SVE_Pd::MASK;
    const MNEMONIC: &'static str = PFALSE_SVE_Pd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PFALSE_SVE_PNd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(28)]
    pub _op_4: u32,
}
impl PFALSE_SVE_PNd {
    const OPCODE: u32 = 0x2518e400;
    const MASK: u32 = 0xfffffff0;
    const MNEMONIC: &'static str = "pfalse";
}
impl InsnOpcode for PFALSE_SVE_PNd {
    const OPCODE: u32 = PFALSE_SVE_PNd::OPCODE;
    const MASK: u32 = PFALSE_SVE_PNd::MASK;
    const MNEMONIC: &'static str = PFALSE_SVE_PNd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd {
    const OPCODE: u32 = 0x2558c000;
    const MASK: u32 = 0xfffffe10;
    const MNEMONIC: &'static str = "pfirst";
}
impl InsnOpcode for PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd {
    const OPCODE: u32 = PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd::OPCODE;
    const MASK: u32 = PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd::MASK;
    const MNEMONIC: &'static str = PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4206400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmul";
}
impl InsnOpcode for PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMUL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMUL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e209c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "pmul";
}
impl InsnOpcode for PMUL_Vd_Vn_Vm {
    const OPCODE: u32 = PMUL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = PMUL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = PMUL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20e000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmull";
}
impl InsnOpcode for PMULL_Vd_Vn_Vm {
    const OPCODE: u32 = PMULL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = PMULL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = PMULL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D {
    const OPCODE: u32 = 0xee0e000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmull";
}
impl InsnOpcode for PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D {
    const OPCODE: u32 = PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D::OPCODE;
    const MASK: u32 = PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D::MASK;
    const MNEMONIC: &'static str = PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20e000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmull2";
}
impl InsnOpcode for PMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = PMULL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = PMULL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = PMULL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D {
    const OPCODE: u32 = 0x4ee0e000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmull2";
}
impl InsnOpcode for PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D {
    const OPCODE: u32 = PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D::OPCODE;
    const MASK: u32 = PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D::MASK;
    const MNEMONIC: &'static str = PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmullb";
}
impl InsnOpcode for PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x45406800;
    const MASK: u32 = 0xff60fc00;
    const MNEMONIC: &'static str = "pmullb";
}
impl InsnOpcode for PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "pmullt";
}
impl InsnOpcode for PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x45406c00;
    const MASK: u32 = 0xff60fc00;
    const MNEMONIC: &'static str = "pmullt";
}
impl InsnOpcode for PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd {
    const OPCODE: u32 = 0x2519c400;
    const MASK: u32 = 0xff3ffe10;
    const MNEMONIC: &'static str = "pnext";
}
impl InsnOpcode for PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd {
    const OPCODE: u32 = PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd::OPCODE;
    const MASK: u32 = PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd::MASK;
    const MNEMONIC: &'static str = PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = 0x84200000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22 {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000 {
    const OPCODE: u32 = 0xc4200000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000 {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xc4608000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0x8400c000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0x8400e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000 {
    const OPCODE: u32 = 0xc400e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000 {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c00000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "prfb";
}
impl InsnOpcode for PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::OPCODE;
    const MASK: u32 = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MASK;
    const MNEMONIC: &'static str = PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = 0x84206000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000 {
    const OPCODE: u32 = 0xc4206000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000 {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = 0xc460e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0x8580c000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c06000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = 0x8580e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000 {
    const OPCODE: u32 = 0xc580e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfd";
}
impl InsnOpcode for PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000 {
    const OPCODE: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000::OPCODE;
    const MASK: u32 = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000::MASK;
    const MNEMONIC: &'static str = PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0x8480c000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = 0x84202000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000 {
    const OPCODE: u32 = 0xc4202000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000 {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xc460a000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0x8480e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000 {
    const OPCODE: u32 = 0xc480e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000 {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c02000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "prfh";
}
impl InsnOpcode for PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::OPCODE;
    const MASK: u32 = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MASK;
    const MNEMONIC: &'static str = PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFM_PRFOP_ADDR_PCREL19 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(19)]
    pub imm19: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl PRFM_PRFOP_ADDR_PCREL19 {
    const OPCODE: u32 = 0xd8000000;
    const MASK: u32 = 0xff000000;
    const MNEMONIC: &'static str = "prfm";
}
impl InsnOpcode for PRFM_PRFOP_ADDR_PCREL19 {
    const OPCODE: u32 = PRFM_PRFOP_ADDR_PCREL19::OPCODE;
    const MASK: u32 = PRFM_PRFOP_ADDR_PCREL19::MASK;
    const MNEMONIC: &'static str = PRFM_PRFOP_ADDR_PCREL19::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFM_PRFOP_ADDR_REGOFF {
    #[bits(32)]
    pub _op_0: u32,
}
impl PRFM_PRFOP_ADDR_REGOFF {
    const OPCODE: u32 = 0xf8a00800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "prfm";
}
impl InsnOpcode for PRFM_PRFOP_ADDR_REGOFF {
    const OPCODE: u32 = PRFM_PRFOP_ADDR_REGOFF::OPCODE;
    const MASK: u32 = PRFM_PRFOP_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = PRFM_PRFOP_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFM_PRFOP_ADDR_UIMM12 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl PRFM_PRFOP_ADDR_UIMM12 {
    const OPCODE: u32 = 0xf9800000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "prfm";
}
impl InsnOpcode for PRFM_PRFOP_ADDR_UIMM12 {
    const OPCODE: u32 = PRFM_PRFOP_ADDR_UIMM12::OPCODE;
    const MASK: u32 = PRFM_PRFOP_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = PRFM_PRFOP_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFUM_PRFOP_ADDR_SIMM9 {
    #[bits(11)]
    pub _op_0: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFUM_PRFOP_ADDR_SIMM9 {
    const OPCODE: u32 = 0xf8800000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "prfum";
}
impl InsnOpcode for PRFUM_PRFOP_ADDR_SIMM9 {
    const OPCODE: u32 = PRFUM_PRFOP_ADDR_SIMM9::OPCODE;
    const MASK: u32 = PRFUM_PRFOP_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = PRFUM_PRFOP_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = 0x84204000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_xs_22: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000 {
    const OPCODE: u32 = 0xc4204000;
    const MASK: u32 = 0xffa0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000 {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xc460c000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = 0x85c04000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0x8500c000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0x8500e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000 {
    #[bits(4)]
    pub sve_prfop: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000 {
    const OPCODE: u32 = 0xc500e000;
    const MASK: u32 = 0xffe0e010;
    const MNEMONIC: &'static str = "prfw";
}
impl InsnOpcode for PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000 {
    const OPCODE: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000::OPCODE;
    const MASK: u32 = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000::MASK;
    const MNEMONIC: &'static str = PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(2)]
    pub sme_rm: u32,
    #[bits(3)]
    pub sme_tszl: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sme_tszh: u32,
    #[bits(1)]
    pub sme_i1: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm {
    const OPCODE: u32 = 0x25204000;
    const MASK: u32 = 0xff20c210;
    const MNEMONIC: &'static str = "psel";
}
impl InsnOpcode for PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm {
    const OPCODE: u32 = PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm::OPCODE;
    const MASK: u32 = PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm::MASK;
    const MNEMONIC: &'static str = PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(2)]
    pub sme_rm: u32,
    #[bits(3)]
    pub sme_tszl: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sme_tszh: u32,
    #[bits(1)]
    pub sme_i1: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm {
    const OPCODE: u32 = 0x25204000;
    const MASK: u32 = 0xff20c210;
    const MNEMONIC: &'static str = "psel";
}
impl InsnOpcode for PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm {
    const OPCODE: u32 = PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm::OPCODE;
    const MASK: u32 = PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm::MASK;
    const MNEMONIC: &'static str = PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTEST_SVE_Pg4_10_SVE_Pn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl PTEST_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = 0x2550c000;
    const MASK: u32 = 0xffffc21f;
    const MNEMONIC: &'static str = "ptest";
}
impl InsnOpcode for PTEST_SVE_Pg4_10_SVE_Pn {
    const OPCODE: u32 = PTEST_SVE_Pg4_10_SVE_Pn::OPCODE;
    const MASK: u32 = PTEST_SVE_Pg4_10_SVE_Pn::MASK;
    const MNEMONIC: &'static str = PTEST_SVE_Pg4_10_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTRUE_SME_PNd3 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(29)]
    pub _op_3: u32,
}
impl PTRUE_SME_PNd3 {
    const OPCODE: u32 = 0x25207810;
    const MASK: u32 = 0xff3ffff8;
    const MNEMONIC: &'static str = "ptrue";
}
impl InsnOpcode for PTRUE_SME_PNd3 {
    const OPCODE: u32 = PTRUE_SME_PNd3::OPCODE;
    const MASK: u32 = PTRUE_SME_PNd3::MASK;
    const MNEMONIC: &'static str = PTRUE_SME_PNd3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTRUE_SVE_Pd_SVE_PATTERN {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PTRUE_SVE_Pd_SVE_PATTERN {
    const OPCODE: u32 = 0x2518e000;
    const MASK: u32 = 0xff3ffc10;
    const MNEMONIC: &'static str = "ptrue";
}
impl InsnOpcode for PTRUE_SVE_Pd_SVE_PATTERN {
    const OPCODE: u32 = PTRUE_SVE_Pd_SVE_PATTERN::OPCODE;
    const MASK: u32 = PTRUE_SVE_Pd_SVE_PATTERN::MASK;
    const MNEMONIC: &'static str = PTRUE_SVE_Pd_SVE_PATTERN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PTRUES_SVE_Pd_SVE_PATTERN {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl PTRUES_SVE_Pd_SVE_PATTERN {
    const OPCODE: u32 = 0x2519e000;
    const MASK: u32 = 0xff3ffc10;
    const MNEMONIC: &'static str = "ptrues";
}
impl InsnOpcode for PTRUES_SVE_Pd_SVE_PATTERN {
    const OPCODE: u32 = PTRUES_SVE_Pd_SVE_PATTERN::OPCODE;
    const MASK: u32 = PTRUES_SVE_Pd_SVE_PATTERN::MASK;
    const MNEMONIC: &'static str = PTRUES_SVE_Pd_SVE_PATTERN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PUNPKHI_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl PUNPKHI_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x5314000;
    const MASK: u32 = 0xfffffe10;
    const MNEMONIC: &'static str = "punpkhi";
}
impl InsnOpcode for PUNPKHI_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = PUNPKHI_SVE_Pd_SVE_Pn::OPCODE;
    const MASK: u32 = PUNPKHI_SVE_Pd_SVE_Pn::MASK;
    const MNEMONIC: &'static str = PUNPKHI_SVE_Pd_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct PUNPKLO_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl PUNPKLO_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x5304000;
    const MASK: u32 = 0xfffffe10;
    const MNEMONIC: &'static str = "punpklo";
}
impl InsnOpcode for PUNPKLO_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = PUNPKLO_SVE_Pd_SVE_Pn::OPCODE;
    const MASK: u32 = PUNPKLO_SVE_Pd_SVE_Pn::MASK;
    const MNEMONIC: &'static str = PUNPKLO_SVE_Pd_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RADDHN_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e204000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "raddhn";
}
impl InsnOpcode for RADDHN_Vd_Vn_Vm {
    const OPCODE: u32 = RADDHN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = RADDHN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = RADDHN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RADDHN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e204000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "raddhn2";
}
impl InsnOpcode for RADDHN2_Vd_Vn_Vm {
    const OPCODE: u32 = RADDHN2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = RADDHN2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = RADDHN2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45206800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "raddhnb";
}
impl InsnOpcode for RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45206c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "raddhnt";
}
impl InsnOpcode for RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4520f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rax1";
}
impl InsnOpcode for RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RAX1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RAX1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xce608c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rax1";
}
impl InsnOpcode for RAX1_Vd_Vn_Vm {
    const OPCODE: u32 = RAX1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = RAX1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = RAX1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RBIT_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl RBIT_Rd_Rn {
    const OPCODE: u32 = 0x5ac00000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "rbit";
}
impl InsnOpcode for RBIT_Rd_Rn {
    const OPCODE: u32 = RBIT_Rd_Rn::OPCODE;
    const MASK: u32 = RBIT_Rd_Rn::MASK;
    const MNEMONIC: &'static str = RBIT_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RBIT_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl RBIT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5278000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "rbit";
}
impl InsnOpcode for RBIT_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = RBIT_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = RBIT_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = RBIT_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RBIT_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl RBIT_Vd_Vn {
    const OPCODE: u32 = 0x2e605800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "rbit";
}
impl InsnOpcode for RBIT_Vd_Vn {
    const OPCODE: u32 = RBIT_Vd_Vn::OPCODE;
    const MASK: u32 = RBIT_Vd_Vn::MASK;
    const MNEMONIC: &'static str = RBIT_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCAS_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCAS_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19200800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcas";
}
impl InsnOpcode for RCWCAS_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCAS_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCAS_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCAS_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcasa";
}
impl InsnOpcode for RCWCASA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcasal";
}
impl InsnOpcode for RCWCASAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19600800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcasl";
}
impl InsnOpcode for RCWCASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19200c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcasp";
}
impl InsnOpcode for RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcaspa";
}
impl InsnOpcode for RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcaspal";
}
impl InsnOpcode for RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19600c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwcaspl";
}
impl InsnOpcode for RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38209000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclr";
}
impl InsnOpcode for RCWCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLR_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLR_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLR_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclra";
}
impl InsnOpcode for RCWCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclral";
}
impl InsnOpcode for RCWCLRAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38609000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclrl";
}
impl InsnOpcode for RCWCLRL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19209000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclrp";
}
impl InsnOpcode for RCWCLRP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRP_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRP_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRP_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclrpa";
}
impl InsnOpcode for RCWCLRPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRPA_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRPA_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRPA_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclrpal";
}
impl InsnOpcode for RCWCLRPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRPAL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRPAL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRPAL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWCLRPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWCLRPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19609000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwclrpl";
}
impl InsnOpcode for RCWCLRPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWCLRPL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWCLRPL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWCLRPL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCAS_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCAS_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59200800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscas";
}
impl InsnOpcode for RCWSCAS_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCAS_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCAS_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCAS_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscasa";
}
impl InsnOpcode for RCWSCASA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59e00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscasal";
}
impl InsnOpcode for RCWSCASAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59600800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscasl";
}
impl InsnOpcode for RCWSCASL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59200c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscasp";
}
impl InsnOpcode for RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscaspa";
}
impl InsnOpcode for RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59e00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscaspal";
}
impl InsnOpcode for RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59600c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwscaspl";
}
impl InsnOpcode for RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78209000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclr";
}
impl InsnOpcode for RCWSCLR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLR_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLR_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLR_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclra";
}
impl InsnOpcode for RCWSCLRA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclral";
}
impl InsnOpcode for RCWSCLRAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78609000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclrl";
}
impl InsnOpcode for RCWSCLRL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59209000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclrp";
}
impl InsnOpcode for RCWSCLRP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRP_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRP_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRP_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclrpa";
}
impl InsnOpcode for RCWSCLRPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRPA_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRPA_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRPA_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59e09000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclrpal";
}
impl InsnOpcode for RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSCLRPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSCLRPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59609000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsclrpl";
}
impl InsnOpcode for RCWSCLRPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSCLRPL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSCLRPL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSCLRPL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSET_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3820b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwset";
}
impl InsnOpcode for RCWSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSET_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSET_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSET_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwseta";
}
impl InsnOpcode for RCWSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsetal";
}
impl InsnOpcode for RCWSETAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3860b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsetl";
}
impl InsnOpcode for RCWSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x1920b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsetp";
}
impl InsnOpcode for RCWSETP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETP_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETP_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETP_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsetpa";
}
impl InsnOpcode for RCWSETPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETPA_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETPA_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETPA_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsetpal";
}
impl InsnOpcode for RCWSETPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETPAL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETPAL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETPAL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSETPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSETPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x1960b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsetpl";
}
impl InsnOpcode for RCWSETPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSETPL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSETPL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSETPL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSET_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x7820b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsset";
}
impl InsnOpcode for RCWSSET_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSET_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSET_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSET_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsseta";
}
impl InsnOpcode for RCWSSETA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwssetal";
}
impl InsnOpcode for RCWSSETAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x7860b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwssetl";
}
impl InsnOpcode for RCWSSETL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x5920b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwssetp";
}
impl InsnOpcode for RCWSSETP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETP_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETP_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETP_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwssetpa";
}
impl InsnOpcode for RCWSSETPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETPA_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETPA_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETPA_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59e0b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwssetpal";
}
impl InsnOpcode for RCWSSETPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETPAL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETPAL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETPAL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSETPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSETPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x5960b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwssetpl";
}
impl InsnOpcode for RCWSSETPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSETPL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSETPL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSETPL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWP_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWP_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x7820a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswp";
}
impl InsnOpcode for RCWSSWP_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWP_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWP_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWP_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswpa";
}
impl InsnOpcode for RCWSSWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswpal";
}
impl InsnOpcode for RCWSSWPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x7860a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswpl";
}
impl InsnOpcode for RCWSSWPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x5920a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswpp";
}
impl InsnOpcode for RCWSSWPP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPP_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPP_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPP_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59a0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswppa";
}
impl InsnOpcode for RCWSSWPPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPPA_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPPA_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPPA_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x59e0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswppal";
}
impl InsnOpcode for RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSSWPPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSSWPPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x5960a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwsswppl";
}
impl InsnOpcode for RCWSSWPPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSSWPPL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSSWPPL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSSWPPL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWP_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWP_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3820a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswp";
}
impl InsnOpcode for RCWSWP_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWP_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWP_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWP_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswpa";
}
impl InsnOpcode for RCWSWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswpal";
}
impl InsnOpcode for RCWSWPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x3860a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswpl";
}
impl InsnOpcode for RCWSWPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPP_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x1920a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswpp";
}
impl InsnOpcode for RCWSWPP_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPP_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPP_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPP_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPPA_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswppa";
}
impl InsnOpcode for RCWSWPPA_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPPA_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPPA_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPPA_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPPAL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e0a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswppal";
}
impl InsnOpcode for RCWSWPPAL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPPAL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPPAL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPPAL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RCWSWPPL_Rt_Rs_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RCWSWPPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = 0x1960a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "rcwswppl";
}
impl InsnOpcode for RCWSWPPL_Rt_Rs_ADDR_SIMPLE {
    const OPCODE: u32 = RCWSWPPL_Rt_Rs_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RCWSWPPL_Rt_Rs_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RCWSWPPL_Rt_Rs_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDFFR_SVE_Pd_SVE_Pg4_5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl RDFFR_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x2518f000;
    const MASK: u32 = 0xfffffe10;
    const MNEMONIC: &'static str = "rdffr";
}
impl InsnOpcode for RDFFR_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = RDFFR_SVE_Pd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = RDFFR_SVE_Pd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = RDFFR_SVE_Pd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDFFR_SVE_Pd {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(28)]
    pub _op_4: u32,
}
impl RDFFR_SVE_Pd {
    const OPCODE: u32 = 0x2519f000;
    const MASK: u32 = 0xfffffff0;
    const MNEMONIC: &'static str = "rdffr";
}
impl InsnOpcode for RDFFR_SVE_Pd {
    const OPCODE: u32 = RDFFR_SVE_Pd::OPCODE;
    const MASK: u32 = RDFFR_SVE_Pd::MASK;
    const MNEMONIC: &'static str = RDFFR_SVE_Pd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDFFRS_SVE_Pd_SVE_Pg4_5 {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl RDFFRS_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x2558f000;
    const MASK: u32 = 0xfffffe10;
    const MNEMONIC: &'static str = "rdffrs";
}
impl InsnOpcode for RDFFRS_SVE_Pd_SVE_Pg4_5 {
    const OPCODE: u32 = RDFFRS_SVE_Pd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = RDFFRS_SVE_Pd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = RDFFRS_SVE_Pd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDSVL_Rd_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl RDSVL_Rd_SVE_SIMM6 {
    const OPCODE: u32 = 0x4bf5800;
    const MASK: u32 = 0xfffff800;
    const MNEMONIC: &'static str = "rdsvl";
}
impl InsnOpcode for RDSVL_Rd_SVE_SIMM6 {
    const OPCODE: u32 = RDSVL_Rd_SVE_SIMM6::OPCODE;
    const MASK: u32 = RDSVL_Rd_SVE_SIMM6::MASK;
    const MNEMONIC: &'static str = RDSVL_Rd_SVE_SIMM6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RDVL_Rd_SVE_SIMM6 {
    #[bits(5)]
    pub rd: u32,
    #[bits(6)]
    pub sve_imms: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl RDVL_Rd_SVE_SIMM6 {
    const OPCODE: u32 = 0x4bf5000;
    const MASK: u32 = 0xfffff800;
    const MNEMONIC: &'static str = "rdvl";
}
impl InsnOpcode for RDVL_Rd_SVE_SIMM6 {
    const OPCODE: u32 = RDVL_Rd_SVE_SIMM6::OPCODE;
    const MASK: u32 = RDVL_Rd_SVE_SIMM6::MASK;
    const MNEMONIC: &'static str = RDVL_Rd_SVE_SIMM6::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RET_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl RET_Rn {
    const OPCODE: u32 = 0xd65f0000;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "ret";
}
impl InsnOpcode for RET_Rn {
    const OPCODE: u32 = RET_Rn::OPCODE;
    const MASK: u32 = RET_Rn::MASK;
    const MNEMONIC: &'static str = RET_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RETAA {
    #[bits(32)]
    pub _op_0: u32,
}
impl RETAA {
    const OPCODE: u32 = 0xd65f0bff;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "retaa";
}
impl InsnOpcode for RETAA {
    const OPCODE: u32 = RETAA::OPCODE;
    const MASK: u32 = RETAA::MASK;
    const MNEMONIC: &'static str = RETAA::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RETAB {
    #[bits(32)]
    pub _op_0: u32,
}
impl RETAB {
    const OPCODE: u32 = 0xd65f0fff;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "retab";
}
impl InsnOpcode for RETAB {
    const OPCODE: u32 = RETAB::OPCODE;
    const MASK: u32 = RETAB::MASK;
    const MNEMONIC: &'static str = RETAB::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV_Rd_Rn {
    const OPCODE: u32 = 0x5ac00800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "rev";
}
impl InsnOpcode for REV_Rd_Rn {
    const OPCODE: u32 = REV_Rd_Rn::OPCODE;
    const MASK: u32 = REV_Rd_Rn::MASK;
    const MNEMONIC: &'static str = REV_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_Rd_X_Rn_X {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV_Rd_X_Rn_X {
    const OPCODE: u32 = 0xdac00c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "rev";
}
impl InsnOpcode for REV_Rd_X_Rn_X {
    const OPCODE: u32 = REV_Rd_X_Rn_X::OPCODE;
    const MASK: u32 = REV_Rd_X_Rn_X::MASK;
    const MNEMONIC: &'static str = REV_Rd_X_Rn_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5383800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "rev";
}
impl InsnOpcode for REV_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = REV_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = REV_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = REV_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV_SVE_Pd_SVE_Pn {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl REV_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = 0x5344000;
    const MASK: u32 = 0xff3ffe10;
    const MNEMONIC: &'static str = "rev";
}
impl InsnOpcode for REV_SVE_Pd_SVE_Pn {
    const OPCODE: u32 = REV_SVE_Pd_SVE_Pn::OPCODE;
    const MASK: u32 = REV_SVE_Pd_SVE_Pn::MASK;
    const MNEMONIC: &'static str = REV_SVE_Pd_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV16_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV16_Rd_Rn {
    const OPCODE: u32 = 0x5ac00400;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "rev16";
}
impl InsnOpcode for REV16_Rd_Rn {
    const OPCODE: u32 = REV16_Rd_Rn::OPCODE;
    const MASK: u32 = REV16_Rd_Rn::MASK;
    const MNEMONIC: &'static str = REV16_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV16_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV16_Vd_Vn {
    const OPCODE: u32 = 0xe201800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "rev16";
}
impl InsnOpcode for REV16_Vd_Vn {
    const OPCODE: u32 = REV16_Vd_Vn::OPCODE;
    const MASK: u32 = REV16_Vd_Vn::MASK;
    const MNEMONIC: &'static str = REV16_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV32_Rd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV32_Rd_Rn {
    const OPCODE: u32 = 0xdac00800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "rev32";
}
impl InsnOpcode for REV32_Rd_Rn {
    const OPCODE: u32 = REV32_Rd_Rn::OPCODE;
    const MASK: u32 = REV32_Rd_Rn::MASK;
    const MNEMONIC: &'static str = REV32_Rd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV32_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV32_Vd_Vn {
    const OPCODE: u32 = 0x2e200800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "rev32";
}
impl InsnOpcode for REV32_Vd_Vn {
    const OPCODE: u32 = REV32_Vd_Vn::OPCODE;
    const MASK: u32 = REV32_Vd_Vn::MASK;
    const MNEMONIC: &'static str = REV32_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REV64_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl REV64_Vd_Vn {
    const OPCODE: u32 = 0xe200800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "rev64";
}
impl InsnOpcode for REV64_Vd_Vn {
    const OPCODE: u32 = REV64_Vd_Vn::OPCODE;
    const MASK: u32 = REV64_Vd_Vn::MASK;
    const MNEMONIC: &'static str = REV64_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVB_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl REVB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5248000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "revb";
}
impl InsnOpcode for REVB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = REVB_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = REVB_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = REVB_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVD_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl REVD_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x52e8000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "revd";
}
impl InsnOpcode for REVD_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = REVD_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = REVD_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = REVD_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVH_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl REVH_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5a58000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "revh";
}
impl InsnOpcode for REVH_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = REVH_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = REVH_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = REVH_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct REVW_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl REVW_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x5e68000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "revw";
}
impl InsnOpcode for REVW_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = REVW_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = REVW_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = REVW_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RMIF_Rn_IMM_2_MASK {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub _op_10: u32,
    #[bits(6)]
    pub imm6_15: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RMIF_Rn_IMM_2_MASK {
    const OPCODE: u32 = 0xba000400;
    const MASK: u32 = 0xffe07c10;
    const MNEMONIC: &'static str = "rmif";
}
impl InsnOpcode for RMIF_Rn_IMM_2_MASK {
    const OPCODE: u32 = RMIF_Rn_IMM_2_MASK::OPCODE;
    const MASK: u32 = RMIF_Rn_IMM_2_MASK::MASK;
    const MNEMONIC: &'static str = RMIF_Rn_IMM_2_MASK::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RORV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RORV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac02c00;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "rorv";
}
impl InsnOpcode for RORV_Rd_Rn_Rm {
    const OPCODE: u32 = RORV_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = RORV_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = RORV_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(9)]
    pub _op_3: u32,
    #[bits(2)]
    pub imm2_12: u32,
    #[bits(1)]
    pub _op_14: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf8a04818;
    const MASK: u32 = 0xffe04c18;
    const MNEMONIC: &'static str = "rprfm";
}
impl InsnOpcode for RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl RSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf008c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "rshrn";
}
impl InsnOpcode for RSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = RSHRN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = RSHRN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = RSHRN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl RSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x4f008c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "rshrn2";
}
impl InsnOpcode for RSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = RSHRN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = RSHRN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = RSHRN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45201800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "rshrnb";
}
impl InsnOpcode for RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45201c00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "rshrnt";
}
impl InsnOpcode for RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RSUBHN_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "rsubhn";
}
impl InsnOpcode for RSUBHN_Vd_Vn_Vm {
    const OPCODE: u32 = RSUBHN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = RSUBHN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = RSUBHN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RSUBHN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "rsubhn2";
}
impl InsnOpcode for RSUBHN2_Vd_Vn_Vm {
    const OPCODE: u32 = RSUBHN2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = RSUBHN2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = RSUBHN2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45207800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "rsubhnb";
}
impl InsnOpcode for RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45207c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "rsubhnt";
}
impl InsnOpcode for RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500f800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saba";
}
impl InsnOpcode for SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SABA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SABA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SABA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABA_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe207c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "saba";
}
impl InsnOpcode for SABA_Vd_Vn_Vm {
    const OPCODE: u32 = SABA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SABA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SABA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe205000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabal";
}
impl InsnOpcode for SABAL_Vd_Vn_Vm {
    const OPCODE: u32 = SABAL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SABAL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SABAL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e205000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabal2";
}
impl InsnOpcode for SABAL2_Vd_Vn_Vm {
    const OPCODE: u32 = SABAL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SABAL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SABAL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500c000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabalb";
}
impl InsnOpcode for SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500c400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabalt";
}
impl InsnOpcode for SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x40c0000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sabd";
}
impl InsnOpcode for SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe207400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sabd";
}
impl InsnOpcode for SABD_Vd_Vn_Vm {
    const OPCODE: u32 = SABD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SABD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SABD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABDL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabdl";
}
impl InsnOpcode for SABDL_Vd_Vn_Vm {
    const OPCODE: u32 = SABDL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SABDL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SABDL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABDL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabdl2";
}
impl InsnOpcode for SABDL2_Vd_Vn_Vm {
    const OPCODE: u32 = SABDL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SABDL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SABDL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabdlb";
}
impl InsnOpcode for SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sabdlt";
}
impl InsnOpcode for SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4404a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sadalp";
}
impl InsnOpcode for SADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SADALP_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SADALP_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SADALP_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADALP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SADALP_Vd_Vn {
    const OPCODE: u32 = 0xe206800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "sadalp";
}
impl InsnOpcode for SADALP_Vd_Vn {
    const OPCODE: u32 = SADALP_Vd_Vn::OPCODE;
    const MASK: u32 = SADALP_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SADALP_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe200000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddl";
}
impl InsnOpcode for SADDL_Vd_Vn_Vm {
    const OPCODE: u32 = SADDL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SADDL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SADDL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e200000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddl2";
}
impl InsnOpcode for SADDL2_Vd_Vn_Vm {
    const OPCODE: u32 = SADDL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SADDL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SADDL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45000000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddlb";
}
impl InsnOpcode for SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45008000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddlbt";
}
impl InsnOpcode for SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SADDLP_Vd_Vn {
    const OPCODE: u32 = 0xe202800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "saddlp";
}
impl InsnOpcode for SADDLP_Vd_Vn {
    const OPCODE: u32 = SADDLP_Vd_Vn::OPCODE;
    const MASK: u32 = SADDLP_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SADDLP_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45000400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddlt";
}
impl InsnOpcode for SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDLV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SADDLV_Fd_Vn {
    const OPCODE: u32 = 0xe303800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "saddlv";
}
impl InsnOpcode for SADDLV_Fd_Vn {
    const OPCODE: u32 = SADDLV_Fd_Vn::OPCODE;
    const MASK: u32 = SADDLV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = SADDLV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4002000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "saddv";
}
impl InsnOpcode for SADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SADDV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SADDV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SADDV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDW_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDW_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe201000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddw";
}
impl InsnOpcode for SADDW_Vd_Vn_Vm {
    const OPCODE: u32 = SADDW_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SADDW_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SADDW_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDW2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDW2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e201000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddw2";
}
impl InsnOpcode for SADDW2_Vd_Vn_Vm {
    const OPCODE: u32 = SADDW2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SADDW2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SADDW2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45004000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddwb";
}
impl InsnOpcode for SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45004400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "saddwt";
}
impl InsnOpcode for SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SB {
    #[bits(32)]
    pub _op_0: u32,
}
impl SB {
    const OPCODE: u32 = 0xd50330ff;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "sb";
}
impl InsnOpcode for SB {
    const OPCODE: u32 = SB::OPCODE;
    const MASK: u32 = SB::MASK;
    const MNEMONIC: &'static str = SB::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBC_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SBC_Rd_Rn_Rm {
    const OPCODE: u32 = 0x5a000000;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "sbc";
}
impl InsnOpcode for SBC_Rd_Rn_Rm {
    const OPCODE: u32 = SBC_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = SBC_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SBC_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4580d000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sbclb";
}
impl InsnOpcode for SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4580d400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sbclt";
}
impl InsnOpcode for SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBCS_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SBCS_Rd_Rn_Rm {
    const OPCODE: u32 = 0x7a000000;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "sbcs";
}
impl InsnOpcode for SBCS_Rd_Rn_Rm {
    const OPCODE: u32 = SBCS_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = SBCS_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SBCS_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SBFM_Rd_Rn_IMMR_IMMS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl SBFM_Rd_Rn_IMMR_IMMS {
    const OPCODE: u32 = 0x13000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "sbfm";
}
impl InsnOpcode for SBFM_Rd_Rn_IMMR_IMMS {
    const OPCODE: u32 = SBFM_Rd_Rn_IMMR_IMMS::OPCODE;
    const MASK: u32 = SBFM_Rd_Rn_IMMR_IMMS::MASK;
    const MNEMONIC: &'static str = SBFM_Rd_Rn_IMMR_IMMS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120c400;
    const MASK: u32 = 0xff20fc01;
    const MNEMONIC: &'static str = "sclamp";
}
impl InsnOpcode for SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120cc00;
    const MASK: u32 = 0xff20fc03;
    const MNEMONIC: &'static str = "sclamp";
}
impl InsnOpcode for SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4400c000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sclamp";
}
impl InsnOpcode for SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc122e000;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = SCVTF_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = SCVTF_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SCVTF_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc132e000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = SCVTF_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = SCVTF_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = SCVTF_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65d0a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x6594a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x6554a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65d4a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x6552a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x6556a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65d6a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Fd_Rn_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl SCVTF_Fd_Rn_FBITS {
    const OPCODE: u32 = 0x1e020000;
    const MASK: u32 = 0x7f3f0000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Fd_Rn_FBITS {
    const OPCODE: u32 = SCVTF_Fd_Rn_FBITS::OPCODE;
    const MASK: u32 = SCVTF_Fd_Rn_FBITS::MASK;
    const MNEMONIC: &'static str = SCVTF_Fd_Rn_FBITS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32 {
    const OPCODE: u32 = 0x1ec20000;
    const MASK: u32 = 0x7fff0000;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32 {
    const OPCODE: u32 = SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::OPCODE;
    const MASK: u32 = SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::MASK;
    const MNEMONIC: &'static str = SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Vd_Vn {
    const OPCODE: u32 = 0xe21d800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Vd_Vn {
    const OPCODE: u32 = SCVTF_Vd_Vn::OPCODE;
    const MASK: u32 = SCVTF_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SCVTF_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0xe79d800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = SCVTF_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = SCVTF_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = SCVTF_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Fd_Rn {
    const OPCODE: u32 = 0x1e220000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Fd_Rn {
    const OPCODE: u32 = SCVTF_Fd_Rn::OPCODE;
    const MASK: u32 = SCVTF_Fd_Rn::MASK;
    const MNEMONIC: &'static str = SCVTF_Fd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Fd_S_H_Rn_W {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Fd_S_H_Rn_W {
    const OPCODE: u32 = 0x1ee20000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Fd_S_H_Rn_W {
    const OPCODE: u32 = SCVTF_Fd_S_H_Rn_W::OPCODE;
    const MASK: u32 = SCVTF_Fd_S_H_Rn_W::MASK;
    const MNEMONIC: &'static str = SCVTF_Fd_S_H_Rn_W::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Sd_Sn {
    const OPCODE: u32 = 0x5e21d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Sd_Sn {
    const OPCODE: u32 = SCVTF_Sd_Sn::OPCODE;
    const MASK: u32 = SCVTF_Sd_Sn::MASK;
    const MNEMONIC: &'static str = SCVTF_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x5e79d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = SCVTF_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = SCVTF_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = SCVTF_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf00e400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SCVTF_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SCVTF_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SCVTF_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = 0xf10e400;
    const MASK: u32 = 0xbf90fc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::OPCODE;
    const MASK: u32 = SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MASK;
    const MNEMONIC: &'static str = SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f00e400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SCVTF_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SCVTF_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SCVTF_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = 0x5f10e400;
    const MASK: u32 = 0xff90fc00;
    const MNEMONIC: &'static str = "scvtf";
}
impl InsnOpcode for SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::OPCODE;
    const MASK: u32 = SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MASK;
    const MNEMONIC: &'static str = SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDIV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDIV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac00c00;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "sdiv";
}
impl InsnOpcode for SDIV_Rd_Rn_Rm {
    const OPCODE: u32 = SDIV_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = SDIV_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SDIV_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4940000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "sdiv";
}
impl InsnOpcode for SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4960000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "sdivr";
}
impl InsnOpcode for SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501000;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = 0xc1501020;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B::MASK;
    const MNEMONIC: &'static str =
        SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509000;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = 0xc1509020;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B::MASK;
    const MNEMONIC: &'static str =
        SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d00008;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08008;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201400;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1301400;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01400;
    const MASK: u32 = 0xffa19c38;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11400;
    const MASK: u32 = 0xffa39c78;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1601408;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408 {
    const OPCODE: u32 = 0xc1701408;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408 {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408::MASK;
    const MNEMONIC: &'static str =
        SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H {
    const OPCODE: u32 = 0xc1e01408;
    const MASK: u32 = 0xffe19c38;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H {
    const OPCODE: u32 = 0xc1e11408;
    const MASK: u32 = 0xffe39c78;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H {
    const OPCODE: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H::OPCODE;
    const MASK: u32 = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H::MASK;
    const MNEMONIC: &'static str = SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44800000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = 0x4400c800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H::OPCODE;
    const MASK: u32 = SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H::MASK;
    const MNEMONIC: &'static str = SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub imm2_19: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = 0x4480c800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::OPCODE;
    const MASK: u32 = SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::MASK;
    const MNEMONIC: &'static str = SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe009400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_Vd_Vn_Vm {
    const OPCODE: u32 = SDOT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SDOT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SDOT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SDOT_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SDOT_Vd_Vn_Em {
    const OPCODE: u32 = 0xf00e000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "sdot";
}
impl InsnOpcode for SDOT_Vd_Vn_Em {
    const OPCODE: u32 = SDOT_Vd_Vn_Em::OPCODE;
    const MASK: u32 = SDOT_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = SDOT_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(4)]
    pub _op_13: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1208000;
    const MASK: u32 = 0xff21e021;
    const MNEMONIC: &'static str = "sel";
}
impl InsnOpcode for SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(5)]
    pub _op_13: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1218000;
    const MASK: u32 = 0xff23e063;
    const MNEMONIC: &'static str = "sel";
}
impl InsnOpcode for SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x520c000;
    const MASK: u32 = 0xff20c000;
    const MNEMONIC: &'static str = "sel";
}
impl InsnOpcode for SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(1)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pg4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x25004210;
    const MASK: u32 = 0xfff0c210;
    const MNEMONIC: &'static str = "sel";
}
impl InsnOpcode for SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c08400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sete";
}
impl InsnOpcode for SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c0a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "seten";
}
impl InsnOpcode for SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c09400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setet";
}
impl InsnOpcode for SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c0b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setetn";
}
impl InsnOpcode for SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETF16_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SETF16_Rn {
    const OPCODE: u32 = 0x3a00480d;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "setf16";
}
impl InsnOpcode for SETF16_Rn {
    const OPCODE: u32 = SETF16_Rn::OPCODE;
    const MASK: u32 = SETF16_Rn::MASK;
    const MNEMONIC: &'static str = SETF16_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETF8_Rn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SETF8_Rn {
    const OPCODE: u32 = 0x3a00080d;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "setf8";
}
impl InsnOpcode for SETF8_Rn {
    const OPCODE: u32 = SETF8_Rn::OPCODE;
    const MASK: u32 = SETF8_Rn::MASK;
    const MNEMONIC: &'static str = SETF8_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETFFR {
    #[bits(32)]
    pub _op_0: u32,
}
impl SETFFR {
    const OPCODE: u32 = 0x252c9000;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "setffr";
}
impl InsnOpcode for SETFFR {
    const OPCODE: u32 = SETFFR::OPCODE;
    const MASK: u32 = SETFFR::MASK;
    const MNEMONIC: &'static str = SETFFR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc08400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setge";
}
impl InsnOpcode for SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc0a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgen";
}
impl InsnOpcode for SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc09400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setget";
}
impl InsnOpcode for SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc0b400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgetn";
}
impl InsnOpcode for SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc04400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgm";
}
impl InsnOpcode for SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc06400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgmn";
}
impl InsnOpcode for SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc05400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgmt";
}
impl InsnOpcode for SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc07400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgmtn";
}
impl InsnOpcode for SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgp";
}
impl InsnOpcode for SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc02400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgpn";
}
impl InsnOpcode for SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc01400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgpt";
}
impl InsnOpcode for SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x1dc03400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setgptn";
}
impl InsnOpcode for SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c04400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setm";
}
impl InsnOpcode for SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c06400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setmn";
}
impl InsnOpcode for SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c05400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setmt";
}
impl InsnOpcode for SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c07400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setmtn";
}
impl InsnOpcode for SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setp";
}
impl InsnOpcode for SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c02400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setpn";
}
impl InsnOpcode for SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c01400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setpt";
}
impl InsnOpcode for SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = 0x19c03400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "setptn";
}
impl InsnOpcode for SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm {
    const OPCODE: u32 = SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::OPCODE;
    const MASK: u32 = SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1C_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA1C_Fd_Fn_Vm {
    const OPCODE: u32 = 0x5e000000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha1c";
}
impl InsnOpcode for SHA1C_Fd_Fn_Vm {
    const OPCODE: u32 = SHA1C_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA1C_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA1C_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1H_Fd_Fn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHA1H_Fd_Fn {
    const OPCODE: u32 = 0x5e280800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "sha1h";
}
impl InsnOpcode for SHA1H_Fd_Fn {
    const OPCODE: u32 = SHA1H_Fd_Fn::OPCODE;
    const MASK: u32 = SHA1H_Fd_Fn::MASK;
    const MNEMONIC: &'static str = SHA1H_Fd_Fn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1M_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA1M_Fd_Fn_Vm {
    const OPCODE: u32 = 0x5e002000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha1m";
}
impl InsnOpcode for SHA1M_Fd_Fn_Vm {
    const OPCODE: u32 = SHA1M_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA1M_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA1M_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1P_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA1P_Fd_Fn_Vm {
    const OPCODE: u32 = 0x5e001000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha1p";
}
impl InsnOpcode for SHA1P_Fd_Fn_Vm {
    const OPCODE: u32 = SHA1P_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA1P_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA1P_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1SU0_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA1SU0_Vd_Vn_Vm {
    const OPCODE: u32 = 0x5e003000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha1su0";
}
impl InsnOpcode for SHA1SU0_Vd_Vn_Vm {
    const OPCODE: u32 = SHA1SU0_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SHA1SU0_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SHA1SU0_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA1SU1_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHA1SU1_Vd_Vn {
    const OPCODE: u32 = 0x5e281800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "sha1su1";
}
impl InsnOpcode for SHA1SU1_Vd_Vn {
    const OPCODE: u32 = SHA1SU1_Vd_Vn::OPCODE;
    const MASK: u32 = SHA1SU1_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SHA1SU1_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256H_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA256H_Fd_Fn_Vm {
    const OPCODE: u32 = 0x5e004000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha256h";
}
impl InsnOpcode for SHA256H_Fd_Fn_Vm {
    const OPCODE: u32 = SHA256H_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA256H_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA256H_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256H2_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA256H2_Fd_Fn_Vm {
    const OPCODE: u32 = 0x5e005000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha256h2";
}
impl InsnOpcode for SHA256H2_Fd_Fn_Vm {
    const OPCODE: u32 = SHA256H2_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA256H2_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA256H2_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256SU0_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHA256SU0_Vd_Vn {
    const OPCODE: u32 = 0x5e282800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "sha256su0";
}
impl InsnOpcode for SHA256SU0_Vd_Vn {
    const OPCODE: u32 = SHA256SU0_Vd_Vn::OPCODE;
    const MASK: u32 = SHA256SU0_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SHA256SU0_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA256SU1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA256SU1_Vd_Vn_Vm {
    const OPCODE: u32 = 0x5e006000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha256su1";
}
impl InsnOpcode for SHA256SU1_Vd_Vn_Vm {
    const OPCODE: u32 = SHA256SU1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SHA256SU1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SHA256SU1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512H_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA512H_Fd_Fn_Vm {
    const OPCODE: u32 = 0xce608000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha512h";
}
impl InsnOpcode for SHA512H_Fd_Fn_Vm {
    const OPCODE: u32 = SHA512H_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA512H_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA512H_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512H2_Fd_Fn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA512H2_Fd_Fn_Vm {
    const OPCODE: u32 = 0xce608400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha512h2";
}
impl InsnOpcode for SHA512H2_Fd_Fn_Vm {
    const OPCODE: u32 = SHA512H2_Fd_Fn_Vm::OPCODE;
    const MASK: u32 = SHA512H2_Fd_Fn_Vm::MASK;
    const MNEMONIC: &'static str = SHA512H2_Fd_Fn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512SU0_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHA512SU0_Vd_Vn {
    const OPCODE: u32 = 0xcec08000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "sha512su0";
}
impl InsnOpcode for SHA512SU0_Vd_Vn {
    const OPCODE: u32 = SHA512SU0_Vd_Vn::OPCODE;
    const MASK: u32 = SHA512SU0_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SHA512SU0_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHA512SU1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHA512SU1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xce608800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sha512su1";
}
impl InsnOpcode for SHA512SU1_Vd_Vn_Vm {
    const OPCODE: u32 = SHA512SU1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SHA512SU1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SHA512SU1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44108000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "shadd";
}
impl InsnOpcode for SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe200400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "shadd";
}
impl InsnOpcode for SHADD_Vd_Vn_Vm {
    const OPCODE: u32 = SHADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SHADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SHADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHL_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0xf005400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "shl";
}
impl InsnOpcode for SHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = SHL_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = SHL_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SHL_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHL_Sd_Sn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHL_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = 0x5f005400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "shl";
}
impl InsnOpcode for SHL_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = SHL_Sd_Sn_IMM_VLSL::OPCODE;
    const MASK: u32 = SHL_Sd_Sn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SHL_Sd_Sn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHLL_Vd_Vn_SHLL_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHLL_Vd_Vn_SHLL_IMM {
    const OPCODE: u32 = 0x2e213800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "shll";
}
impl InsnOpcode for SHLL_Vd_Vn_SHLL_IMM {
    const OPCODE: u32 = SHLL_Vd_Vn_SHLL_IMM::OPCODE;
    const MASK: u32 = SHLL_Vd_Vn_SHLL_IMM::MASK;
    const MNEMONIC: &'static str = SHLL_Vd_Vn_SHLL_IMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHLL2_Vd_Vn_SHLL_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHLL2_Vd_Vn_SHLL_IMM {
    const OPCODE: u32 = 0x6e213800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "shll2";
}
impl InsnOpcode for SHLL2_Vd_Vn_SHLL_IMM {
    const OPCODE: u32 = SHLL2_Vd_Vn_SHLL_IMM::OPCODE;
    const MASK: u32 = SHLL2_Vd_Vn_SHLL_IMM::MASK;
    const MNEMONIC: &'static str = SHLL2_Vd_Vn_SHLL_IMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf008400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "shrn";
}
impl InsnOpcode for SHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SHRN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SHRN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SHRN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x4f008400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "shrn2";
}
impl InsnOpcode for SHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SHRN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SHRN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SHRN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45201000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "shrnb";
}
impl InsnOpcode for SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45201400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "shrnt";
}
impl InsnOpcode for SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44128000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "shsub";
}
impl InsnOpcode for SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SHSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe202400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "shsub";
}
impl InsnOpcode for SHSUB_Vd_Vn_Vm {
    const OPCODE: u32 = SHSUB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SHSUB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SHSUB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44168000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "shsubr";
}
impl InsnOpcode for SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED {
    const OPCODE: u32 = 0x4500f400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sli";
}
impl InsnOpcode for SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED {
    const OPCODE: u32 = SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED::OPCODE;
    const MASK: u32 = SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SLI_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SLI_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x2f005400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "sli";
}
impl InsnOpcode for SLI_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = SLI_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = SLI_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SLI_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SLI_Sd_Sn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SLI_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = 0x7f005400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sli";
}
impl InsnOpcode for SLI_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = SLI_Sd_Sn_IMM_VLSL::OPCODE;
    const MASK: u32 = SLI_Sd_Sn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SLI_Sd_Sn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3PARTW1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3PARTW1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xce60c000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sm3partw1";
}
impl InsnOpcode for SM3PARTW1_Vd_Vn_Vm {
    const OPCODE: u32 = SM3PARTW1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SM3PARTW1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SM3PARTW1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3PARTW2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3PARTW2_Vd_Vn_Vm {
    const OPCODE: u32 = 0xce60c400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sm3partw2";
}
impl InsnOpcode for SM3PARTW2_Vd_Vn_Vm {
    const OPCODE: u32 = SM3PARTW2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SM3PARTW2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SM3PARTW2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3SS1_Vd_Vn_Vm_Va {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3SS1_Vd_Vn_Vm_Va {
    const OPCODE: u32 = 0xce400000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "sm3ss1";
}
impl InsnOpcode for SM3SS1_Vd_Vn_Vm_Va {
    const OPCODE: u32 = SM3SS1_Vd_Vn_Vm_Va::OPCODE;
    const MASK: u32 = SM3SS1_Vd_Vn_Vm_Va::MASK;
    const MNEMONIC: &'static str = SM3SS1_Vd_Vn_Vm_Va::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT1A_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3TT1A_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408000;
    const MASK: u32 = 0xffe0cc00;
    const MNEMONIC: &'static str = "sm3tt1a";
}
impl InsnOpcode for SM3TT1A_Vd_Vn_Em {
    const OPCODE: u32 = SM3TT1A_Vd_Vn_Em::OPCODE;
    const MASK: u32 = SM3TT1A_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = SM3TT1A_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT1B_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3TT1B_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408400;
    const MASK: u32 = 0xffe0cc00;
    const MNEMONIC: &'static str = "sm3tt1b";
}
impl InsnOpcode for SM3TT1B_Vd_Vn_Em {
    const OPCODE: u32 = SM3TT1B_Vd_Vn_Em::OPCODE;
    const MASK: u32 = SM3TT1B_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = SM3TT1B_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT2A_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3TT2A_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408800;
    const MASK: u32 = 0xffe0cc00;
    const MNEMONIC: &'static str = "sm3tt2a";
}
impl InsnOpcode for SM3TT2A_Vd_Vn_Em {
    const OPCODE: u32 = SM3TT2A_Vd_Vn_Em::OPCODE;
    const MASK: u32 = SM3TT2A_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = SM3TT2A_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM3TT2B_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM3TT2B_Vd_Vn_Em {
    const OPCODE: u32 = 0xce408c00;
    const MASK: u32 = 0xffe0cc00;
    const MNEMONIC: &'static str = "sm3tt2b";
}
impl InsnOpcode for SM3TT2B_Vd_Vn_Em {
    const OPCODE: u32 = SM3TT2B_Vd_Vn_Em::OPCODE;
    const MASK: u32 = SM3TT2B_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = SM3TT2B_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4E_SVE_Zd_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SM4E_SVE_Zd_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4523e000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "sm4e";
}
impl InsnOpcode for SM4E_SVE_Zd_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SM4E_SVE_Zd_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SM4E_SVE_Zd_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SM4E_SVE_Zd_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4E_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SM4E_Vd_Vn {
    const OPCODE: u32 = 0xcec08400;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "sm4e";
}
impl InsnOpcode for SM4E_Vd_Vn {
    const OPCODE: u32 = SM4E_Vd_Vn::OPCODE;
    const MASK: u32 = SM4E_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SM4E_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4520f000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sm4ekey";
}
impl InsnOpcode for SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SM4EKEY_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SM4EKEY_Vd_Vn_Vm {
    const OPCODE: u32 = 0xce60c800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sm4ekey";
}
impl InsnOpcode for SM4EKEY_Vd_Vn_Vm {
    const OPCODE: u32 = SM4EKEY_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SM4EKEY_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SM4EKEY_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMADDL_Rd_Rn_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMADDL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = 0x9b200000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "smaddl";
}
impl InsnOpcode for SMADDL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = SMADDL_Rd_Rn_Rm_Ra::OPCODE;
    const MASK: u32 = SMADDL_Rd_Rn_Rm_Ra::MASK;
    const MNEMONIC: &'static str = SMADDL_Rd_Rn_Rm_Ra::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a000;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b000;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a800;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b800;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_Rd_Rn_CSSC_SIMM8 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl SMAX_Rd_Rn_CSSC_SIMM8 {
    const OPCODE: u32 = 0x11c00000;
    const MASK: u32 = 0x7ffc0000;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_Rd_Rn_CSSC_SIMM8 {
    const OPCODE: u32 = SMAX_Rd_Rn_CSSC_SIMM8::OPCODE;
    const MASK: u32 = SMAX_Rd_Rn_CSSC_SIMM8::MASK;
    const MNEMONIC: &'static str = SMAX_Rd_Rn_CSSC_SIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMAX_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06000;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_Rd_Rn_Rm {
    const OPCODE: u32 = SMAX_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = SMAX_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SMAX_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4080000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = 0x2528c000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8::OPCODE;
    const MASK: u32 = SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8::MASK;
    const MNEMONIC: &'static str = SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAX_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMAX_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe206400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "smax";
}
impl InsnOpcode for SMAX_Vd_Vn_Vm {
    const OPCODE: u32 = SMAX_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMAX_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMAX_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4414a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smaxp";
}
impl InsnOpcode for SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20a400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "smaxp";
}
impl InsnOpcode for SMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = SMAXP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMAXP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMAXP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40c2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smaxqv";
}
impl InsnOpcode for SMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SMAXQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SMAXQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SMAXQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4082000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smaxv";
}
impl InsnOpcode for SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMAXV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SMAXV_Fd_Vn {
    const OPCODE: u32 = 0xe30a800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "smaxv";
}
impl InsnOpcode for SMAXV_Fd_Vn {
    const OPCODE: u32 = SMAXV_Fd_Vn::OPCODE;
    const MASK: u32 = SMAXV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = SMAXV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMC_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMC_EXCEPTION {
    const OPCODE: u32 = 0xd4000003;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "smc";
}
impl InsnOpcode for SMC_EXCEPTION {
    const OPCODE: u32 = SMC_EXCEPTION::OPCODE;
    const MASK: u32 = SMC_EXCEPTION::MASK;
    const MNEMONIC: &'static str = SMC_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a020;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b020;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a820;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b820;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_Rd_Rn_CSSC_SIMM8 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl SMIN_Rd_Rn_CSSC_SIMM8 {
    const OPCODE: u32 = 0x11c80000;
    const MASK: u32 = 0x7ffc0000;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_Rd_Rn_CSSC_SIMM8 {
    const OPCODE: u32 = SMIN_Rd_Rn_CSSC_SIMM8::OPCODE;
    const MASK: u32 = SMIN_Rd_Rn_CSSC_SIMM8::MASK;
    const MNEMONIC: &'static str = SMIN_Rd_Rn_CSSC_SIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMIN_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06800;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_Rd_Rn_Rm {
    const OPCODE: u32 = SMIN_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = SMIN_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SMIN_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x40a0000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = 0x252ac000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8 {
    const OPCODE: u32 = SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8::OPCODE;
    const MASK: u32 = SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8::MASK;
    const MNEMONIC: &'static str = SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMIN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMIN_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe206c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "smin";
}
impl InsnOpcode for SMIN_Vd_Vn_Vm {
    const OPCODE: u32 = SMIN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMIN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMIN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4416a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sminp";
}
impl InsnOpcode for SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMINP_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20ac00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sminp";
}
impl InsnOpcode for SMINP_Vd_Vn_Vm {
    const OPCODE: u32 = SMINP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMINP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMINP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40e2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sminqv";
}
impl InsnOpcode for SMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SMINQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SMINQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SMINQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40a2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sminv";
}
impl InsnOpcode for SMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SMINV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SMINV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SMINV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMINV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SMINV_Fd_Vn {
    const OPCODE: u32 = 0xe31a800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "sminv";
}
impl InsnOpcode for SMINV_Fd_Vn {
    const OPCODE: u32 = SMINV_Fd_Vn::OPCODE;
    const MASK: u32 = SMINV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = SMINV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01000;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d01000;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d09000;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1600800;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1700800;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e00800;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10800;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1600c00;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe208000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = SMLAL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMLAL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMLAL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf002000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "smlal";
}
impl InsnOpcode for SMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = SMLAL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SMLAL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SMLAL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e208000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlal2";
}
impl InsnOpcode for SMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = SMLAL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMLAL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMLAL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLAL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f002000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "smlal2";
}
impl InsnOpcode for SMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = SMLAL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SMLAL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SMLAL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a08000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlalb";
}
impl InsnOpcode for SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e08000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlalb";
}
impl InsnOpcode for SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44004000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlalb";
}
impl InsnOpcode for SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000000;
    const MASK: u32 = 0xfff0001c;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100000;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108000;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1800000;
    const MASK: u32 = 0xfff0101c;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1900000;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1908000;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200000;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1300000;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00000;
    const MASK: u32 = 0xffa19c3e;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10000;
    const MASK: u32 = 0xffa39c7e;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200400;
    const MASK: u32 = 0xffb09c1c;
    const MNEMONIC: &'static str = "smlall";
}
impl InsnOpcode for SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a08400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlalt";
}
impl InsnOpcode for SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e08400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlalt";
}
impl InsnOpcode for SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44004400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlalt";
}
impl InsnOpcode for SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01008;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d01008;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d09008;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1600808;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1700808;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e00808;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10808;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1600c08;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20a000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = SMLSL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMLSL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMLSL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf006000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "smlsl";
}
impl InsnOpcode for SMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = SMLSL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SMLSL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SMLSL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20a000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlsl2";
}
impl InsnOpcode for SMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = SMLSL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMLSL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMLSL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f006000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "smlsl2";
}
impl InsnOpcode for SMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = SMLSL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SMLSL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SMLSL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44005000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlslb";
}
impl InsnOpcode for SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0a000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlslb";
}
impl InsnOpcode for SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0a000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlslb";
}
impl InsnOpcode for SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000008;
    const MASK: u32 = 0xfff0001c;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100008;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108008;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1800008;
    const MASK: u32 = 0xfff0101c;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1900008;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1908008;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200008;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1300008;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00008;
    const MASK: u32 = 0xffa19c3e;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10008;
    const MASK: u32 = 0xffa39c7e;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200408;
    const MASK: u32 = 0xffb09c1c;
    const MNEMONIC: &'static str = "smlsll";
}
impl InsnOpcode for SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44005400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smlslt";
}
impl InsnOpcode for SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0a400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlslt";
}
impl InsnOpcode for SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0a400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smlslt";
}
impl InsnOpcode for SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45009800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "smmla";
}
impl InsnOpcode for SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMMLA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e80a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "smmla";
}
impl InsnOpcode for SMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = SMMLA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMMLA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMMLA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0800000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "smopa";
}
impl InsnOpcode for SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = 0xa0800008;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "smopa";
}
impl InsnOpcode for SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 =
        SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::OPCODE;
    const MASK: u32 = SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MASK;
    const MNEMONIC: &'static str =
        SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0c00000;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "smopa";
}
impl InsnOpcode for SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0800010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "smops";
}
impl InsnOpcode for SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = 0xa0800018;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "smops";
}
impl InsnOpcode for SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 =
        SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::OPCODE;
    const MASK: u32 = SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MASK;
    const MNEMONIC: &'static str =
        SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0c00010;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "smops";
}
impl InsnOpcode for SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMOV_Rd_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SMOV_Rd_En {
    const OPCODE: u32 = 0xe002c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "smov";
}
impl InsnOpcode for SMOV_Rd_En {
    const OPCODE: u32 = SMOV_Rd_En::OPCODE;
    const MASK: u32 = SMOV_Rd_En::MASK;
    const MNEMONIC: &'static str = SMOV_Rd_En::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTART {
    #[bits(32)]
    pub _op_0: u32,
}
impl SMSTART {
    const OPCODE: u32 = 0xd503477f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "smstart";
}
impl InsnOpcode for SMSTART {
    const OPCODE: u32 = SMSTART::OPCODE;
    const MASK: u32 = SMSTART::MASK;
    const MNEMONIC: &'static str = SMSTART::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTART_SME_SM_ZA {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl SMSTART_SME_SM_ZA {
    const OPCODE: u32 = 0xd503417f;
    const MASK: u32 = 0xfffff1ff;
    const MNEMONIC: &'static str = "smstart";
}
impl InsnOpcode for SMSTART_SME_SM_ZA {
    const OPCODE: u32 = SMSTART_SME_SM_ZA::OPCODE;
    const MASK: u32 = SMSTART_SME_SM_ZA::MASK;
    const MNEMONIC: &'static str = SMSTART_SME_SM_ZA::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTOP {
    #[bits(32)]
    pub _op_0: u32,
}
impl SMSTOP {
    const OPCODE: u32 = 0xd503467f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "smstop";
}
impl InsnOpcode for SMSTOP {
    const OPCODE: u32 = SMSTOP::OPCODE;
    const MASK: u32 = SMSTOP::MASK;
    const MNEMONIC: &'static str = SMSTOP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSTOP_SME_SM_ZA {
    #[bits(8)]
    pub _op_0: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(20)]
    pub _op_12: u32,
}
impl SMSTOP_SME_SM_ZA {
    const OPCODE: u32 = 0xd503407f;
    const MASK: u32 = 0xfffff1ff;
    const MNEMONIC: &'static str = "smstop";
}
impl InsnOpcode for SMSTOP_SME_SM_ZA {
    const OPCODE: u32 = SMSTOP_SME_SM_ZA::OPCODE;
    const MASK: u32 = SMSTOP_SME_SM_ZA::MASK;
    const MNEMONIC: &'static str = SMSTOP_SME_SM_ZA::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMSUBL_Rd_Rn_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMSUBL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = 0x9b208000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "smsubl";
}
impl InsnOpcode for SMSUBL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = SMSUBL_Rd_Rn_Rm_Ra::OPCODE;
    const MASK: u32 = SMSUBL_Rd_Rn_Rm_Ra::MASK;
    const MNEMONIC: &'static str = SMSUBL_Rd_Rn_Rm_Ra::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULH_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULH_Rd_Rn_Rm {
    const OPCODE: u32 = 0x9b407c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "smulh";
}
impl InsnOpcode for SMULH_Rd_Rn_Rm {
    const OPCODE: u32 = SMULH_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = SMULH_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = SMULH_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4120000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "smulh";
}
impl InsnOpcode for SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4206800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smulh";
}
impl InsnOpcode for SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20c000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smull";
}
impl InsnOpcode for SMULL_Vd_Vn_Vm {
    const OPCODE: u32 = SMULL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMULL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMULL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf00a000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "smull";
}
impl InsnOpcode for SMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = SMULL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SMULL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SMULL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20c000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smull2";
}
impl InsnOpcode for SMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = SMULL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SMULL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SMULL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f00a000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "smull2";
}
impl InsnOpcode for SMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = SMULL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SMULL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SMULL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0c000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smullb";
}
impl InsnOpcode for SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0c000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smullb";
}
impl InsnOpcode for SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45007000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smullb";
}
impl InsnOpcode for SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0c400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smullt";
}
impl InsnOpcode for SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0c400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "smullt";
}
impl InsnOpcode for SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45007400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "smullt";
}
impl InsnOpcode for SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x52c8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "splice";
}
impl InsnOpcode for SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN {
    const OPCODE: u32 = 0x52d8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "splice";
}
impl InsnOpcode for SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN {
    const OPCODE: u32 = SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN::OPCODE;
    const MASK: u32 = SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN::MASK;
    const MNEMONIC: &'static str = SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4408a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqabs";
}
impl InsnOpcode for SQABS_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SQABS_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SQABS_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQABS_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQABS_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQABS_Vd_Vn {
    const OPCODE: u32 = 0xe207800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "sqabs";
}
impl InsnOpcode for SQABS_Vd_Vn {
    const OPCODE: u32 = SQABS_Vd_Vn::OPCODE;
    const MASK: u32 = SQABS_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SQABS_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQABS_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQABS_Sd_Sn {
    const OPCODE: u32 = 0x5e207800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqabs";
}
impl InsnOpcode for SQABS_Sd_Sn {
    const OPCODE: u32 = SQABS_Sd_Sn::OPCODE;
    const MASK: u32 = SQABS_Sd_Sn::MASK;
    const MNEMONIC: &'static str = SQABS_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4201000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqadd";
}
impl InsnOpcode for SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44188000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqadd";
}
impl InsnOpcode for SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl SQADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2524c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "sqadd";
}
impl InsnOpcode for SQADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = SQADD_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = SQADD_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = SQADD_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe200c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqadd";
}
impl InsnOpcode for SQADD_Vd_Vn_Vm {
    const OPCODE: u32 = SQADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQADD_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQADD_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e200c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqadd";
}
impl InsnOpcode for SQADD_Sd_Sn_Sm {
    const OPCODE: u32 = SQADD_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQADD_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQADD_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub sve_rot3: u32,
    #[bits(21)]
    pub _op_11: u32,
}
impl SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    const OPCODE: u32 = 0x4501d800;
    const MASK: u32 = 0xff3ff800;
    const MNEMONIC: &'static str = "sqcadd";
}
impl InsnOpcode for SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 {
    const OPCODE: u32 = SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3::OPCODE;
    const MASK: u32 = SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3::MASK;
    const MNEMONIC: &'static str = SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc123e000;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "sqcvt";
}
impl InsnOpcode for SQCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = SQCVT_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = SQCVT_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SQCVT_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVT_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVT_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc133e000;
    const MASK: u32 = 0xff7ffc60;
    const MNEMONIC: &'static str = "sqcvt";
}
impl InsnOpcode for SQCVT_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = SQCVT_SVE_Zd_SME_Znx4::OPCODE;
    const MASK: u32 = SQCVT_SVE_Zd_SME_Znx4::MASK;
    const MNEMONIC: &'static str = SQCVT_SVE_Zd_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTN_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVTN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc133e040;
    const MASK: u32 = 0xff7ffc60;
    const MNEMONIC: &'static str = "sqcvtn";
}
impl InsnOpcode for SQCVTN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = SQCVTN_SVE_Zd_SME_Znx4::OPCODE;
    const MASK: u32 = SQCVTN_SVE_Zd_SME_Znx4::MASK;
    const MNEMONIC: &'static str = SQCVTN_SVE_Zd_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0x45314000;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "sqcvtn";
}
impl InsnOpcode for SQCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = SQCVTN_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = SQCVTN_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SQCVTN_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTU_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVTU_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc163e000;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "sqcvtu";
}
impl InsnOpcode for SQCVTU_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = SQCVTU_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = SQCVTU_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SQCVTU_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTU_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVTU_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc173e000;
    const MASK: u32 = 0xff7ffc60;
    const MNEMONIC: &'static str = "sqcvtu";
}
impl InsnOpcode for SQCVTU_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = SQCVTU_SVE_Zd_SME_Znx4::OPCODE;
    const MASK: u32 = SQCVTU_SVE_Zd_SME_Znx4::MASK;
    const MNEMONIC: &'static str = SQCVTU_SVE_Zd_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTUN_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVTUN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc173e040;
    const MASK: u32 = 0xff7ffc60;
    const MNEMONIC: &'static str = "sqcvtun";
}
impl InsnOpcode for SQCVTUN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = SQCVTUN_SVE_Zd_SME_Znx4::OPCODE;
    const MASK: u32 = SQCVTUN_SVE_Zd_SME_Znx4::MASK;
    const MNEMONIC: &'static str = SQCVTUN_SVE_Zd_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQCVTUN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQCVTUN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0x45315000;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "sqcvtun";
}
impl InsnOpcode for SQCVTUN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = SQCVTUN_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = SQCVTUN_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SQCVTUN_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECB_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECB_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecb";
}
impl InsnOpcode for SQDECB_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECB_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECB_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECB_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecb";
}
impl InsnOpcode for SQDECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0c800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecd";
}
impl InsnOpcode for SQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECD_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECD_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECD_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECD_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECD_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecd";
}
impl InsnOpcode for SQDECD_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECD_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECD_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECD_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecd";
}
impl InsnOpcode for SQDECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460c800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdech";
}
impl InsnOpcode for SQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECH_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECH_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECH_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECH_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECH_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdech";
}
impl InsnOpcode for SQDECH_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECH_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECH_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECH_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdech";
}
impl InsnOpcode for SQDECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl SQDECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252a8000;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "sqdecp";
}
impl InsnOpcode for SQDECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = SQDECP_SVE_Zd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = SQDECP_SVE_Zd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = SQDECP_SVE_Zd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECP_Rd_SVE_Pg4_5_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl SQDECP_Rd_SVE_Pg4_5_Rd {
    const OPCODE: u32 = 0x252a8800;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "sqdecp";
}
impl InsnOpcode for SQDECP_Rd_SVE_Pg4_5_Rd {
    const OPCODE: u32 = SQDECP_Rd_SVE_Pg4_5_Rd::OPCODE;
    const MASK: u32 = SQDECP_Rd_SVE_Pg4_5_Rd::MASK;
    const MNEMONIC: &'static str = SQDECP_Rd_SVE_Pg4_5_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl SQDECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252a8c00;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "sqdecp";
}
impl InsnOpcode for SQDECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = SQDECP_Rd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = SQDECP_Rd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = SQDECP_Rd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0c800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecw";
}
impl InsnOpcode for SQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECW_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECW_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECW_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECW_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECW_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecw";
}
impl InsnOpcode for SQDECW_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECW_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECW_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECW_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDECW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQDECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0f800;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqdecw";
}
impl InsnOpcode for SQDECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQDECW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQDECW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQDECW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe209000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlal";
}
impl InsnOpcode for SQDMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMLAL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMLAL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMLAL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLAL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e209000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlal";
}
impl InsnOpcode for SQDMLAL_Sd_Sn_Sm {
    const OPCODE: u32 = SQDMLAL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQDMLAL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQDMLAL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf003000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmlal";
}
impl InsnOpcode for SQDMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMLAL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMLAL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMLAL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLAL_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f003000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmlal";
}
impl InsnOpcode for SQDMLAL_Sd_Sn_Em16 {
    const OPCODE: u32 = SQDMLAL_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQDMLAL_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMLAL_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e209000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlal2";
}
impl InsnOpcode for SQDMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMLAL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMLAL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMLAL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLAL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f003000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmlal2";
}
impl InsnOpcode for SQDMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMLAL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMLAL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMLAL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a02000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlalb";
}
impl InsnOpcode for SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e02000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlalb";
}
impl InsnOpcode for SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44006000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlalb";
}
impl InsnOpcode for SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44000800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlalbt";
}
impl InsnOpcode for SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a02400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlalt";
}
impl InsnOpcode for SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e02400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlalt";
}
impl InsnOpcode for SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44006400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlalt";
}
impl InsnOpcode for SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20b000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlsl";
}
impl InsnOpcode for SQDMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMLSL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMLSL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMLSL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e20b000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlsl";
}
impl InsnOpcode for SQDMLSL_Sd_Sn_Sm {
    const OPCODE: u32 = SQDMLSL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQDMLSL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQDMLSL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf007000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmlsl";
}
impl InsnOpcode for SQDMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMLSL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMLSL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMLSL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSL_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f007000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmlsl";
}
impl InsnOpcode for SQDMLSL_Sd_Sn_Em16 {
    const OPCODE: u32 = SQDMLSL_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQDMLSL_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMLSL_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20b000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlsl2";
}
impl InsnOpcode for SQDMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMLSL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMLSL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMLSL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f007000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmlsl2";
}
impl InsnOpcode for SQDMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMLSL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMLSL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMLSL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a03000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlslb";
}
impl InsnOpcode for SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e03000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlslb";
}
impl InsnOpcode for SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44006800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlslb";
}
impl InsnOpcode for SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44000c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlslbt";
}
impl InsnOpcode for SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a03400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlslt";
}
impl InsnOpcode for SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e03400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmlslt";
}
impl InsnOpcode for SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44006c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmlslt";
}
impl InsnOpcode for SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a400;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b400;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120ac00;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120bc00;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x4420f000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a0f000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e0f000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20b400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMULH_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMULH_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMULH_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e20b400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_Sd_Sn_Sm {
    const OPCODE: u32 = SQDMULH_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQDMULH_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQDMULH_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf00c000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMULH_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMULH_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMULH_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULH_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULH_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f00c000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmulh";
}
impl InsnOpcode for SQDMULH_Sd_Sn_Em16 {
    const OPCODE: u32 = SQDMULH_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQDMULH_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMULH_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe20d000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmull";
}
impl InsnOpcode for SQDMULL_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMULL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMULL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMULL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e20d000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmull";
}
impl InsnOpcode for SQDMULL_Sd_Sn_Sm {
    const OPCODE: u32 = SQDMULL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQDMULL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQDMULL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf00b000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmull";
}
impl InsnOpcode for SQDMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMULL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMULL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMULL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULL_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f00b000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmull";
}
impl InsnOpcode for SQDMULL_Sd_Sn_Em16 {
    const OPCODE: u32 = SQDMULL_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQDMULL_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMULL_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e20d000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmull2";
}
impl InsnOpcode for SQDMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = SQDMULL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQDMULL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQDMULL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x4f00b000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqdmull2";
}
impl InsnOpcode for SQDMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = SQDMULL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQDMULL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQDMULL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0e000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmullb";
}
impl InsnOpcode for SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0e000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmullb";
}
impl InsnOpcode for SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmullb";
}
impl InsnOpcode for SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0e400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmullt";
}
impl InsnOpcode for SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0e400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "sqdmullt";
}
impl InsnOpcode for SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45006400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqdmullt";
}
impl InsnOpcode for SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCB_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCB_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincb";
}
impl InsnOpcode for SQINCB_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCB_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCB_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCB_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincb";
}
impl InsnOpcode for SQINCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0c000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincd";
}
impl InsnOpcode for SQINCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCD_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCD_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCD_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCD_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCD_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincd";
}
impl InsnOpcode for SQINCD_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCD_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCD_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCD_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincd";
}
impl InsnOpcode for SQINCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460c000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqinch";
}
impl InsnOpcode for SQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCH_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCH_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCH_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCH_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCH_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqinch";
}
impl InsnOpcode for SQINCH_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCH_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCH_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCH_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqinch";
}
impl InsnOpcode for SQINCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl SQINCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x25288000;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "sqincp";
}
impl InsnOpcode for SQINCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = SQINCP_SVE_Zd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = SQINCP_SVE_Zd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = SQINCP_SVE_Zd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCP_Rd_SVE_Pg4_5_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl SQINCP_Rd_SVE_Pg4_5_Rd {
    const OPCODE: u32 = 0x25288800;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "sqincp";
}
impl InsnOpcode for SQINCP_Rd_SVE_Pg4_5_Rd {
    const OPCODE: u32 = SQINCP_Rd_SVE_Pg4_5_Rd::OPCODE;
    const MASK: u32 = SQINCP_Rd_SVE_Pg4_5_Rd::MASK;
    const MNEMONIC: &'static str = SQINCP_Rd_SVE_Pg4_5_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl SQINCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x25288c00;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "sqincp";
}
impl InsnOpcode for SQINCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = SQINCP_Rd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = SQINCP_Rd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = SQINCP_Rd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0c000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincw";
}
impl InsnOpcode for SQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCW_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCW_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCW_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCW_Rd_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCW_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincw";
}
impl InsnOpcode for SQINCW_Rd_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCW_Rd_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCW_Rd_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCW_Rd_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQINCW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQINCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0f000;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "sqincw";
}
impl InsnOpcode for SQINCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = SQINCW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = SQINCW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = SQINCW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4409a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqneg";
}
impl InsnOpcode for SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQNEG_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQNEG_Vd_Vn {
    const OPCODE: u32 = 0x2e207800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "sqneg";
}
impl InsnOpcode for SQNEG_Vd_Vn {
    const OPCODE: u32 = SQNEG_Vd_Vn::OPCODE;
    const MASK: u32 = SQNEG_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SQNEG_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQNEG_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQNEG_Sd_Sn {
    const OPCODE: u32 = 0x7e207800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqneg";
}
impl InsnOpcode for SQNEG_Sd_Sn {
    const OPCODE: u32 = SQNEG_Sd_Sn::OPCODE;
    const MASK: u32 = SQNEG_Sd_Sn::MASK;
    const MNEMONIC: &'static str = SQNEG_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44003000;
    const MASK: u32 = 0xff20f000;
    const MNEMONIC: &'static str = "sqrdcmlah";
}
impl InsnOpcode for SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 {
    const OPCODE: u32 = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44a07000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "sqrdcmlah";
}
impl InsnOpcode for SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub sve_rot2: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = 0x44e07000;
    const MASK: u32 = 0xffe0f000;
    const MNEMONIC: &'static str = "sqrdcmlah";
}
impl InsnOpcode for SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 {
    const OPCODE: u32 = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::OPCODE;
    const MASK: u32 = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MASK;
    const MNEMONIC: &'static str = SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x44201000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e01000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44007000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e008400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_Vd_Vn_Vm {
    const OPCODE: u32 = SQRDMLAH_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQRDMLAH_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e008400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_Sd_Sn_Sm {
    const OPCODE: u32 = SQRDMLAH_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQRDMLAH_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f00d000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_Vd_Vn_Em16 {
    const OPCODE: u32 = SQRDMLAH_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQRDMLAH_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLAH_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLAH_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x7f00d000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqrdmlah";
}
impl InsnOpcode for SQRDMLAH_Sd_Sn_Em16 {
    const OPCODE: u32 = SQRDMLAH_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQRDMLAH_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQRDMLAH_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x44201400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a01400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e01400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44007400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e008c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_Vd_Vn_Vm {
    const OPCODE: u32 = SQRDMLSH_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQRDMLSH_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e008c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_Sd_Sn_Sm {
    const OPCODE: u32 = SQRDMLSH_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQRDMLSH_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f00f000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_Vd_Vn_Em16 {
    const OPCODE: u32 = SQRDMLSH_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQRDMLSH_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMLSH_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMLSH_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x7f00f000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqrdmlsh";
}
impl InsnOpcode for SQRDMLSH_Sd_Sn_Em16 {
    const OPCODE: u32 = SQRDMLSH_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQRDMLSH_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQRDMLSH_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4207400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_i3h: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = 0x4420f400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX {
    const OPCODE: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::OPCODE;
    const MASK: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a0f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e0f400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20b400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_Vd_Vn_Vm {
    const OPCODE: u32 = SQRDMULH_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQRDMULH_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQRDMULH_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e20b400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_Sd_Sn_Sm {
    const OPCODE: u32 = SQRDMULH_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQRDMULH_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQRDMULH_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_Vd_Vn_Em16 {
    const OPCODE: u32 = 0xf00d000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_Vd_Vn_Em16 {
    const OPCODE: u32 = SQRDMULH_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = SQRDMULH_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = SQRDMULH_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRDMULH_Sd_Sn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRDMULH_Sd_Sn_Em16 {
    const OPCODE: u32 = 0x5f00d000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "sqrdmulh";
}
impl InsnOpcode for SQRDMULH_Sd_Sn_Em16 {
    const OPCODE: u32 = SQRDMULH_Sd_Sn_Em16::OPCODE;
    const MASK: u32 = SQRDMULH_Sd_Sn_Em16::MASK;
    const MNEMONIC: &'static str = SQRDMULH_Sd_Sn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440a8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqrshl";
}
impl InsnOpcode for SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe205c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqrshl";
}
impl InsnOpcode for SQRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = SQRSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQRSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQRSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e205c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqrshl";
}
impl InsnOpcode for SQRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = SQRSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQRSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQRSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440e8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqrshlr";
}
impl InsnOpcode for SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120d800;
    const MASK: u32 = 0xff20fc60;
    const MNEMONIC: &'static str = "sqrshr";
}
impl InsnOpcode for SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5::OPCODE;
    const MASK: u32 = SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5::MASK;
    const MNEMONIC: &'static str = SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0xc1e0d400;
    const MASK: u32 = 0xfff0fc20;
    const MNEMONIC: &'static str = "sqrshr";
}
impl InsnOpcode for SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4::OPCODE;
    const MASK: u32 = SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4::MASK;
    const MNEMONIC: &'static str = SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120dc00;
    const MASK: u32 = 0xff20fc60;
    const MNEMONIC: &'static str = "sqrshrn";
}
impl InsnOpcode for SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5::OPCODE;
    const MASK: u32 = SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5::MASK;
    const MNEMONIC: &'static str = SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0x45b02800;
    const MASK: u32 = 0xfff0fc20;
    const MNEMONIC: &'static str = "sqrshrn";
}
impl InsnOpcode for SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4::OPCODE;
    const MASK: u32 = SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4::MASK;
    const MNEMONIC: &'static str = SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQRSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf009c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqrshrn";
}
impl InsnOpcode for SQRSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQRSHRN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQRSHRN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQRSHRN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQRSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f009c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqrshrn";
}
impl InsnOpcode for SQRSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SQRSHRN_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQRSHRN_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQRSHRN_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQRSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x4f009c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqrshrn2";
}
impl InsnOpcode for SQRSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQRSHRN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQRSHRN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQRSHRN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45202800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrshrnb";
}
impl InsnOpcode for SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45202c00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrshrnt";
}
impl InsnOpcode for SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120d840;
    const MASK: u32 = 0xff20fc60;
    const MNEMONIC: &'static str = "sqrshru";
}
impl InsnOpcode for SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5::OPCODE;
    const MASK: u32 = SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5::MASK;
    const MNEMONIC: &'static str = SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0xc1f0d400;
    const MASK: u32 = 0xfff0fc20;
    const MNEMONIC: &'static str = "sqrshru";
}
impl InsnOpcode for SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4::OPCODE;
    const MASK: u32 = SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4::MASK;
    const MNEMONIC: &'static str = SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120dc40;
    const MASK: u32 = 0xff20fc60;
    const MNEMONIC: &'static str = "sqrshrun";
}
impl InsnOpcode for SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5::OPCODE;
    const MASK: u32 = SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5::MASK;
    const MNEMONIC: &'static str = SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0x45b00800;
    const MASK: u32 = 0xfff0fc20;
    const MNEMONIC: &'static str = "sqrshrun";
}
impl InsnOpcode for SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4::OPCODE;
    const MASK: u32 = SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4::MASK;
    const MNEMONIC: &'static str = SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQRSHRUN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f008c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqrshrun";
}
impl InsnOpcode for SQRSHRUN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQRSHRUN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQRSHRUN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQRSHRUN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQRSHRUN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f008c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqrshrun";
}
impl InsnOpcode for SQRSHRUN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SQRSHRUN_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQRSHRUN_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQRSHRUN_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQRSHRUN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x6f008c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqrshrun2";
}
impl InsnOpcode for SQRSHRUN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQRSHRUN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQRSHRUN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQRSHRUN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45200800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrshrunb";
}
impl InsnOpcode for SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45200c00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqrshrunt";
}
impl InsnOpcode for SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44088000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqshl";
}
impl InsnOpcode for SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = 0x4068000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqshl";
}
impl InsnOpcode for SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::OPCODE;
    const MASK: u32 = SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MASK;
    const MNEMONIC: &'static str = SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe204c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqshl";
}
impl InsnOpcode for SQSHL_Vd_Vn_Vm {
    const OPCODE: u32 = SQSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e204c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqshl";
}
impl InsnOpcode for SQSHL_Sd_Sn_Sm {
    const OPCODE: u32 = SQSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0xf007400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "sqshl";
}
impl InsnOpcode for SQSHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = SQSHL_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = SQSHL_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SQSHL_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHL_Sd_Sn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHL_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = 0x5f007400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshl";
}
impl InsnOpcode for SQSHL_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = SQSHL_Sd_Sn_IMM_VLSL::OPCODE;
    const MASK: u32 = SQSHL_Sd_Sn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SQSHL_Sd_Sn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440c8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqshlr";
}
impl InsnOpcode for SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = 0x40f8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqshlu";
}
impl InsnOpcode for SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::OPCODE;
    const MASK: u32 = SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MASK;
    const MNEMONIC: &'static str = SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLU_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHLU_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x2f006400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "sqshlu";
}
impl InsnOpcode for SQSHLU_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = SQSHLU_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = SQSHLU_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SQSHLU_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHLU_Sd_Sn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHLU_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = 0x7f006400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshlu";
}
impl InsnOpcode for SQSHLU_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = SQSHLU_Sd_Sn_IMM_VLSL::OPCODE;
    const MASK: u32 = SQSHLU_Sd_Sn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SQSHLU_Sd_Sn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf009400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshrn";
}
impl InsnOpcode for SQSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQSHRN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQSHRN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQSHRN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f009400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshrn";
}
impl InsnOpcode for SQSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SQSHRN_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQSHRN_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQSHRN_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x4f009400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshrn2";
}
impl InsnOpcode for SQSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQSHRN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQSHRN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQSHRN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45202000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqshrnb";
}
impl InsnOpcode for SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45202400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqshrnt";
}
impl InsnOpcode for SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHRUN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f008400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshrun";
}
impl InsnOpcode for SQSHRUN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQSHRUN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQSHRUN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQSHRUN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHRUN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f008400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshrun";
}
impl InsnOpcode for SQSHRUN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SQSHRUN_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQSHRUN_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQSHRUN_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQSHRUN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x6f008400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sqshrun2";
}
impl InsnOpcode for SQSHRUN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SQSHRUN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SQSHRUN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SQSHRUN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45200000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqshrunb";
}
impl InsnOpcode for SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45200400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sqshrunt";
}
impl InsnOpcode for SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4201800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqsub";
}
impl InsnOpcode for SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441a8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqsub";
}
impl InsnOpcode for SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2526c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "sqsub";
}
impl InsnOpcode for SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe202c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sqsub";
}
impl InsnOpcode for SQSUB_Vd_Vn_Vm {
    const OPCODE: u32 = SQSUB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SQSUB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SQSUB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUB_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SQSUB_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5e202c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sqsub";
}
impl InsnOpcode for SQSUB_Sd_Sn_Sm {
    const OPCODE: u32 = SQSUB_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SQSUB_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SQSUB_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441e8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sqsubr";
}
impl InsnOpcode for SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTN_Vd_Vn {
    const OPCODE: u32 = 0xe214800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqxtn";
}
impl InsnOpcode for SQXTN_Vd_Vn {
    const OPCODE: u32 = SQXTN_Vd_Vn::OPCODE;
    const MASK: u32 = SQXTN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SQXTN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTN_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTN_Sd_Sn {
    const OPCODE: u32 = 0x5e214800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqxtn";
}
impl InsnOpcode for SQXTN_Sd_Sn {
    const OPCODE: u32 = SQXTN_Sd_Sn::OPCODE;
    const MASK: u32 = SQXTN_Sd_Sn::MASK;
    const MNEMONIC: &'static str = SQXTN_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTN2_Vd_Vn {
    const OPCODE: u32 = 0x4e214800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqxtn2";
}
impl InsnOpcode for SQXTN2_Vd_Vn {
    const OPCODE: u32 = SQXTN2_Vd_Vn::OPCODE;
    const MASK: u32 = SQXTN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SQXTN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTNB_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45204000;
    const MASK: u32 = 0xffa7fc00;
    const MNEMONIC: &'static str = "sqxtnb";
}
impl InsnOpcode for SQXTNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQXTNB_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQXTNB_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQXTNB_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTNT_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45204400;
    const MASK: u32 = 0xffa7fc00;
    const MNEMONIC: &'static str = "sqxtnt";
}
impl InsnOpcode for SQXTNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQXTNT_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQXTNT_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQXTNT_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTUN_Vd_Vn {
    const OPCODE: u32 = 0x2e212800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqxtun";
}
impl InsnOpcode for SQXTUN_Vd_Vn {
    const OPCODE: u32 = SQXTUN_Vd_Vn::OPCODE;
    const MASK: u32 = SQXTUN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SQXTUN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUN_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTUN_Sd_Sn {
    const OPCODE: u32 = 0x7e212800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqxtun";
}
impl InsnOpcode for SQXTUN_Sd_Sn {
    const OPCODE: u32 = SQXTUN_Sd_Sn::OPCODE;
    const MASK: u32 = SQXTUN_Sd_Sn::MASK;
    const MNEMONIC: &'static str = SQXTUN_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTUN2_Vd_Vn {
    const OPCODE: u32 = 0x6e212800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sqxtun2";
}
impl InsnOpcode for SQXTUN2_Vd_Vn {
    const OPCODE: u32 = SQXTUN2_Vd_Vn::OPCODE;
    const MASK: u32 = SQXTUN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SQXTUN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUNB_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTUNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45205000;
    const MASK: u32 = 0xffa7fc00;
    const MNEMONIC: &'static str = "sqxtunb";
}
impl InsnOpcode for SQXTUNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQXTUNB_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQXTUNB_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQXTUNB_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SQXTUNT_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SQXTUNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45205400;
    const MASK: u32 = 0xffa7fc00;
    const MNEMONIC: &'static str = "sqxtunt";
}
impl InsnOpcode for SQXTUNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SQXTUNT_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SQXTUNT_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SQXTUNT_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44148000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "srhadd";
}
impl InsnOpcode for SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRHADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SRHADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe201400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "srhadd";
}
impl InsnOpcode for SRHADD_Vd_Vn_Vm {
    const OPCODE: u32 = SRHADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SRHADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SRHADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500f000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sri";
}
impl InsnOpcode for SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRI_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SRI_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f004400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "sri";
}
impl InsnOpcode for SRI_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SRI_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SRI_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SRI_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRI_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SRI_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f004400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sri";
}
impl InsnOpcode for SRI_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SRI_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SRI_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SRI_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a220;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b220;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120aa20;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120ba20;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44028000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe205400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = SRSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SRSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SRSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee05400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "srshl";
}
impl InsnOpcode for SRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = SRSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SRSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SRSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44068000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "srshlr";
}
impl InsnOpcode for SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = 0x40c8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "srshr";
}
impl InsnOpcode for SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::OPCODE;
    const MASK: u32 = SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MASK;
    const MNEMONIC: &'static str = SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHR_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SRSHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf002400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "srshr";
}
impl InsnOpcode for SRSHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SRSHR_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SRSHR_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SRSHR_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSHR_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SRSHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f002400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "srshr";
}
impl InsnOpcode for SRSHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SRSHR_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SRSHR_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SRSHR_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500e800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "srsra";
}
impl InsnOpcode for SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSRA_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SRSRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf003400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "srsra";
}
impl InsnOpcode for SRSRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SRSRA_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SRSRA_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SRSRA_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SRSRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SRSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f003400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "srsra";
}
impl InsnOpcode for SRSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SRSRA_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SRSRA_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SRSRA_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe204400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sshl";
}
impl InsnOpcode for SSHL_Vd_Vn_Vm {
    const OPCODE: u32 = SSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x5ee04400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sshl";
}
impl InsnOpcode for SSHL_Sd_Sn_Sm {
    const OPCODE: u32 = SSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLL_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SSHLL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0xf00a400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sshll";
}
impl InsnOpcode for SSHLL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = SSHLL_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = SSHLL_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SSHLL_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLL2_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SSHLL2_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x4f00a400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sshll2";
}
impl InsnOpcode for SSHLL2_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = SSHLL2_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = SSHLL2_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = SSHLL2_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = 0x4500a000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sshllb";
}
impl InsnOpcode for SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = 0x4500a400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "sshllt";
}
impl InsnOpcode for SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::OPCODE;
    const MASK: u32 = SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHR_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SSHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf000400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "sshr";
}
impl InsnOpcode for SSHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SSHR_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SSHR_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SSHR_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSHR_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SSHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f000400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "sshr";
}
impl InsnOpcode for SSHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SSHR_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SSHR_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SSHR_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500e000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssra";
}
impl InsnOpcode for SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSRA_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SSRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0xf001400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "ssra";
}
impl InsnOpcode for SSRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = SSRA_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = SSRA_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SSRA_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x5f001400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "ssra";
}
impl InsnOpcode for SSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = SSRA_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = SSRA_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = SSRA_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBL_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe202000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubl";
}
impl InsnOpcode for SSUBL_Vd_Vn_Vm {
    const OPCODE: u32 = SSUBL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SSUBL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SSUBL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e202000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubl2";
}
impl InsnOpcode for SSUBL2_Vd_Vn_Vm {
    const OPCODE: u32 = SSUBL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SSUBL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SSUBL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45001000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssublb";
}
impl InsnOpcode for SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45008800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssublbt";
}
impl InsnOpcode for SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45001400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssublt";
}
impl InsnOpcode for SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45008c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubltb";
}
impl InsnOpcode for SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBW_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBW_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe203000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubw";
}
impl InsnOpcode for SSUBW_Vd_Vn_Vm {
    const OPCODE: u32 = SSUBW_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SSUBW_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SSUBW_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBW2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBW2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e203000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubw2";
}
impl InsnOpcode for SSUBW2_Vd_Vn_Vm {
    const OPCODE: u32 = SSUBW2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SSUBW2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SSUBW2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45005000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubwb";
}
impl InsnOpcode for SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45005400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ssubwt";
}
impl InsnOpcode for SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST1_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "st1";
}
impl InsnOpcode for ST1_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST1_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST1_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST1_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd000000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "st1";
}
impl InsnOpcode for ST1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST1_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST1_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST1_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST1_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "st1";
}
impl InsnOpcode for ST1_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST1_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST1_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST1_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST1_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xd800000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "st1";
}
impl InsnOpcode for ST1_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST1_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST1_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST1_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0200000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0208000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xe0200000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR {
    const OPCODE: u32 = ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0200000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0600000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa0608000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1200000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1208000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1600000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa1608000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4004000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4404000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe4008000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe4408000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xe400a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0xe440a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe400e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe440e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4204000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4604000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = 0xe460a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5 {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe420e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe460e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1b";
}
impl InsnOpcode for ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa0206000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa020e000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0606000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060e000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xe0e00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0e00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa1206000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa120e000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1606000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160e000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5e04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe5808000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xe580a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = 0xe5c0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14 {
    const OPCODE: u32 = 0xe5a08000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14 {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = 0xe5a0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe5e0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1d";
}
impl InsnOpcode for ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa0202000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa020a000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0602000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060a000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xe0600000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0600000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa1202000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa120a000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1602000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160a000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4c04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe4808000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe4c08000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xe480a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xe4c0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe4c0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4a04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4e04000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 {
    const OPCODE: u32 = 0xe4a08000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 {
    const OPCODE: u32 = 0xe4e08000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = 0xe4a0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = 0xe4e0a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2 {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe4a0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe4e0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1h";
}
impl InsnOpcode for ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe1e00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1q";
}
impl InsnOpcode for ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe1e00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1q";
}
impl InsnOpcode for ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe4202000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1q";
}
impl InsnOpcode for ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa0204000;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa020c000;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xe0a00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub sme_v: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sme_size_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = 0xe0a00000;
    const MASK: u32 = 0xffe00010;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R {
    const OPCODE: u32 = ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::OPCODE;
    const MASK: u32 = ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MASK;
    const MNEMONIC: &'static str = ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0604000;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060c000;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa1204000;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa120c000;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1604000;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160c000;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5404000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5604000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe5008000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = 0xe5408000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = 0xe500a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xe540a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe540e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 {
    const OPCODE: u32 = 0xe5208000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(1)]
    pub _op_13: u32,
    #[bits(1)]
    pub sve_xs_14: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 {
    const OPCODE: u32 = 0xe5608000;
    const MASK: u32 = 0xffe0a000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = 0xe520a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = 0xe560a000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 {
    const OPCODE: u32 = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe560e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st1w";
}
impl InsnOpcode for ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST2_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "st2";
}
impl InsnOpcode for ST2_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST2_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST2_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST2_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST2_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd200000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "st2";
}
impl InsnOpcode for ST2_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST2_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST2_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST2_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST2_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "st2";
}
impl InsnOpcode for ST2_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST2_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST2_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST2_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST2_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xda00000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "st2";
}
impl InsnOpcode for ST2_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST2_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST2_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST2_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4206000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st2b";
}
impl InsnOpcode for ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe430e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st2b";
}
impl InsnOpcode for ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5a06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st2d";
}
impl InsnOpcode for ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe5b0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st2d";
}
impl InsnOpcode for ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2G_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2G_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9a00800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "st2g";
}
impl InsnOpcode for ST2G_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = ST2G_Rt_SP_ADDR_SIMM13::OPCODE;
    const MASK: u32 = ST2G_Rt_SP_ADDR_SIMM13::MASK;
    const MNEMONIC: &'static str = ST2G_Rt_SP_ADDR_SIMM13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = 0xd9a00400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "st2g";
}
impl InsnOpcode for ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag::OPCODE;
    const MASK: u32 = ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag::MASK;
    const MNEMONIC: &'static str = ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4a06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st2h";
}
impl InsnOpcode for ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe4b0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st2h";
}
impl InsnOpcode for ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe4400000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st2q";
}
impl InsnOpcode for ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe4600000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st2q";
}
impl InsnOpcode for ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5206000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st2w";
}
impl InsnOpcode for ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe530e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st2w";
}
impl InsnOpcode for ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST3_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "st3";
}
impl InsnOpcode for ST3_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST3_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST3_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST3_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST3_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd002000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "st3";
}
impl InsnOpcode for ST3_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST3_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST3_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST3_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST3_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "st3";
}
impl InsnOpcode for ST3_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST3_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST3_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST3_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST3_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xd802000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "st3";
}
impl InsnOpcode for ST3_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST3_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST3_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST3_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4406000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st3b";
}
impl InsnOpcode for ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xe450e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st3b";
}
impl InsnOpcode for ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5c06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st3d";
}
impl InsnOpcode for ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xe5d0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st3d";
}
impl InsnOpcode for ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4c06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st3h";
}
impl InsnOpcode for ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xe4d0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st3h";
}
impl InsnOpcode for ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe4800000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st3q";
}
impl InsnOpcode for ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe4a00000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st3q";
}
impl InsnOpcode for ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5406000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st3w";
}
impl InsnOpcode for ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = 0xe550e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st3w";
}
impl InsnOpcode for ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL {
    const OPCODE: u32 = ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::OPCODE;
    const MASK: u32 = ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MASK;
    const MNEMONIC: &'static str = ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LVt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST4_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xc000000;
    const MASK: u32 = 0xbfff0000;
    const MNEMONIC: &'static str = "st4";
}
impl InsnOpcode for ST4_LVt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST4_LVt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST4_LVt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST4_LVt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST4_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd202000;
    const MASK: u32 = 0xbfff2000;
    const MNEMONIC: &'static str = "st4";
}
impl InsnOpcode for ST4_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = ST4_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST4_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST4_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LVt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST4_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xc800000;
    const MASK: u32 = 0xbfe00000;
    const MNEMONIC: &'static str = "st4";
}
impl InsnOpcode for ST4_LVt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST4_LVt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST4_LVt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST4_LVt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4_LEt_SIMD_ADDR_POST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ST4_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = 0xda02000;
    const MASK: u32 = 0xbfe02000;
    const MNEMONIC: &'static str = "st4";
}
impl InsnOpcode for ST4_LEt_SIMD_ADDR_POST {
    const OPCODE: u32 = ST4_LEt_SIMD_ADDR_POST::OPCODE;
    const MASK: u32 = ST4_LEt_SIMD_ADDR_POST::MASK;
    const MNEMONIC: &'static str = ST4_LEt_SIMD_ADDR_POST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4606000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st4b";
}
impl InsnOpcode for ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe470e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st4b";
}
impl InsnOpcode for ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5e06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st4d";
}
impl InsnOpcode for ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe5f0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st4d";
}
impl InsnOpcode for ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4e06000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st4h";
}
impl InsnOpcode for ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe4f0e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st4h";
}
impl InsnOpcode for ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xe4c00000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st4q";
}
impl InsnOpcode for ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = 0xe4e00000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st4q";
}
impl InsnOpcode for ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 {
    const OPCODE: u32 = ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4::OPCODE;
    const MASK: u32 = ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4::MASK;
    const MNEMONIC: &'static str = ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5606000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "st4w";
}
impl InsnOpcode for ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xe570e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "st4w";
}
impl InsnOpcode for ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST64B_Rt_LS64_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl ST64B_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf83f9000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "st64b";
}
impl InsnOpcode for ST64B_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = ST64B_Rt_LS64_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST64B_Rt_LS64_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST64B_Rt_LS64_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST64BV_Rs_Rt_LS64_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST64BV_Rs_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf820b000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "st64bv";
}
impl InsnOpcode for ST64BV_Rs_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = ST64BV_Rs_Rt_LS64_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST64BV_Rs_Rt_LS64_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST64BV_Rs_Rt_LS64_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = 0xf820a000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "st64bv0";
}
impl InsnOpcode for ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE {
    const OPCODE: u32 = ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STG_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STG_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9200800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stg";
}
impl InsnOpcode for STG_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = STG_Rt_SP_ADDR_SIMM13::OPCODE;
    const MASK: u32 = STG_Rt_SP_ADDR_SIMM13::MASK;
    const MNEMONIC: &'static str = STG_Rt_SP_ADDR_SIMM13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = 0xd9200400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "stg";
}
impl InsnOpcode for STG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = STG_Rt_SP_X_ADDR_SIMM13_imm_tag::OPCODE;
    const MASK: u32 = STG_Rt_SP_X_ADDR_SIMM13_imm_tag::MASK;
    const MNEMONIC: &'static str = STG_Rt_SP_X_ADDR_SIMM13_imm_tag::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STGM_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd9a00000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "stgm";
}
impl InsnOpcode for STGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STGM_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STGM_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STGM_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STGP_Rt_Rt2_ADDR_SIMM11 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STGP_Rt_Rt2_ADDR_SIMM11 {
    const OPCODE: u32 = 0x69000000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "stgp";
}
impl InsnOpcode for STGP_Rt_Rt2_ADDR_SIMM11 {
    const OPCODE: u32 = STGP_Rt_Rt2_ADDR_SIMM11::OPCODE;
    const MASK: u32 = STGP_Rt_Rt2_ADDR_SIMM11::MASK;
    const MNEMONIC: &'static str = STGP_Rt_Rt2_ADDR_SIMM11::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag {
    const OPCODE: u32 = 0x68800000;
    const MASK: u32 = 0xfec00000;
    const MNEMONIC: &'static str = "stgp";
}
impl InsnOpcode for STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag {
    const OPCODE: u32 = STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag::OPCODE;
    const MASK: u32 = STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag::MASK;
    const MNEMONIC: &'static str = STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB {
    #[bits(5)]
    pub rt: u32,
    #[bits(7)]
    pub _op_5: u32,
    #[bits(4)]
    pub opc2: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB {
    const OPCODE: u32 = 0x19000800;
    const MASK: u32 = 0x3fe0ec00;
    const MNEMONIC: &'static str = "stilp";
}
impl InsnOpcode for STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB {
    const OPCODE: u32 = STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB::OPCODE;
    const MASK: u32 = STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB::MASK;
    const MNEMONIC: &'static str = STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STL1_LEt_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl STL1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd018400;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "stl1";
}
impl InsnOpcode for STL1_LEt_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = STL1_LEt_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STL1_LEt_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STL1_LEt_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLLR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLLR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x889f7c00;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "stllr";
}
impl InsnOpcode for STLLR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLLR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLLR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLLR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLLRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLLRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x89f7c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "stllrb";
}
impl InsnOpcode for STLLRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLLRB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLLRB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLLRB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLLRH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLLRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x489f7c00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "stllrh";
}
impl InsnOpcode for STLLRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLLRH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLLRH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLLRH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLR_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x889ffc00;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "stlr";
}
impl InsnOpcode for STLR_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLR_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLR_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLR_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLR_Rt_RCPC3_ADDR_PREIND_WB {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLR_Rt_RCPC3_ADDR_PREIND_WB {
    const OPCODE: u32 = 0x19800800;
    const MASK: u32 = 0x3ffffc00;
    const MNEMONIC: &'static str = "stlr";
}
impl InsnOpcode for STLR_Rt_RCPC3_ADDR_PREIND_WB {
    const OPCODE: u32 = STLR_Rt_RCPC3_ADDR_PREIND_WB::OPCODE;
    const MASK: u32 = STLR_Rt_RCPC3_ADDR_PREIND_WB::MASK;
    const MNEMONIC: &'static str = STLR_Rt_RCPC3_ADDR_PREIND_WB::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLRB_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x89ffc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "stlrb";
}
impl InsnOpcode for STLRB_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLRB_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLRB_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLRB_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLRH_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STLRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x489ffc00;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "stlrh";
}
impl InsnOpcode for STLRH_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLRH_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLRH_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLRH_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLUR_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLUR_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x99000000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stlur";
}
impl InsnOpcode for STLUR_Rt_ADDR_OFFSET {
    const OPCODE: u32 = STLUR_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = STLUR_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = STLUR_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLUR_Rt_X_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLUR_Rt_X_ADDR_OFFSET {
    const OPCODE: u32 = 0xd9000000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stlur";
}
impl InsnOpcode for STLUR_Rt_X_ADDR_OFFSET {
    const OPCODE: u32 = STLUR_Rt_X_ADDR_OFFSET::OPCODE;
    const MASK: u32 = STLUR_Rt_X_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = STLUR_Rt_X_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLUR_Ft_RCPC3_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(2)]
    pub _op_10: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLUR_Ft_RCPC3_ADDR_OFFSET {
    const OPCODE: u32 = 0x1d000800;
    const MASK: u32 = 0x3f600c00;
    const MNEMONIC: &'static str = "stlur";
}
impl InsnOpcode for STLUR_Ft_RCPC3_ADDR_OFFSET {
    const OPCODE: u32 = STLUR_Ft_RCPC3_ADDR_OFFSET::OPCODE;
    const MASK: u32 = STLUR_Ft_RCPC3_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = STLUR_Ft_RCPC3_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLURB_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLURB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x19000000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stlurb";
}
impl InsnOpcode for STLURB_Rt_ADDR_OFFSET {
    const OPCODE: u32 = STLURB_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = STLURB_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = STLURB_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLURH_Rt_ADDR_OFFSET {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLURH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = 0x59000000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stlurh";
}
impl InsnOpcode for STLURH_Rt_ADDR_OFFSET {
    const OPCODE: u32 = STLURH_Rt_ADDR_OFFSET::OPCODE;
    const MASK: u32 = STLURH_Rt_ADDR_OFFSET::MASK;
    const MNEMONIC: &'static str = STLURH_Rt_ADDR_OFFSET::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXP_Rs_Rt_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLXP_Rs_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88208000;
    const MASK: u32 = 0xbfe08000;
    const MNEMONIC: &'static str = "stlxp";
}
impl InsnOpcode for STLXP_Rs_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = STLXP_Rs_Rt_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLXP_Rs_Rt_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLXP_Rs_Rt_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLXR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8800fc00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "stlxr";
}
impl InsnOpcode for STLXR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLXR_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLXR_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLXR_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXRB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLXRB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x800fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "stlxrb";
}
impl InsnOpcode for STLXRB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLXRB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLXRB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLXRB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STLXRH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STLXRH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x4800fc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "stlxrh";
}
impl InsnOpcode for STLXRH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STLXRH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STLXRH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STLXRH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNP_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STNP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x28000000;
    const MASK: u32 = 0x7fc00000;
    const MNEMONIC: &'static str = "stnp";
}
impl InsnOpcode for STNP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = STNP_Rt_Rt2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = STNP_Rt_Rt2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = STNP_Rt_Rt2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNP_Ft_Ft2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STNP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x2c000000;
    const MASK: u32 = 0x3fc00000;
    const MNEMONIC: &'static str = "stnp";
}
impl InsnOpcode for STNP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = STNP_Ft_Ft2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = STNP_Ft_Ft2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = STNP_Ft_Ft2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0200001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa0208001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0600001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa0608001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1200008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = 0xa1208008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR {
    const OPCODE: u32 = STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::OPCODE;
    const MASK: u32 = STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1600008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa1608008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe4002000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe4402000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = 0xe4006000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX {
    const OPCODE: u32 = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::OPCODE;
    const MASK: u32 = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MASK;
    const MNEMONIC: &'static str = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe410e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "stnt1b";
}
impl InsnOpcode for STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa0206001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa020e001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0606001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060e001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa1206008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = 0xa120e008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 {
    const OPCODE: u32 = STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::OPCODE;
    const MASK: u32 = STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1606008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160e008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe5802000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = 0xe5806000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 {
    const OPCODE: u32 = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::OPCODE;
    const MASK: u32 = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MASK;
    const MNEMONIC: &'static str = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe590e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "stnt1d";
}
impl InsnOpcode for STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa0202001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa020a001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0602001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060a001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa1202008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = 0xa120a008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 {
    const OPCODE: u32 = STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::OPCODE;
    const MASK: u32 = STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1602008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160a008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe4802000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe4c02000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = 0xe4806000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 {
    const OPCODE: u32 = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::OPCODE;
    const MASK: u32 = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MASK;
    const MNEMONIC: &'static str = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe490e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "stnt1h";
}
impl InsnOpcode for STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa0204001;
    const MASK: u32 = 0xffe0e001;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa020c001;
    const MASK: u32 = 0xffe0e003;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa0604001;
    const MASK: u32 = 0xfff0e001;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa060c001;
    const MASK: u32 = 0xfff0e003;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa1204008;
    const MASK: u32 = 0xffe0e008;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = 0xa120c008;
    const MASK: u32 = 0xffe0e00c;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 {
    const OPCODE: u32 = STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::OPCODE;
    const MASK: u32 = STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    #[bits(3)]
    pub sme_zt3: u32,
    #[bits(1)]
    pub _op_3: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = 0xa1604008;
    const MASK: u32 = 0xfff0e008;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL {
    const OPCODE: u32 = STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::OPCODE;
    const MASK: u32 = STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    #[bits(2)]
    pub sme_zt2: u32,
    #[bits(2)]
    pub _op_2: u32,
    #[bits(1)]
    pub sme_ztt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = 0xa160c008;
    const MASK: u32 = 0xfff0e00c;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL {
    const OPCODE: u32 = STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::OPCODE;
    const MASK: u32 = STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MASK;
    const MNEMONIC: &'static str = STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe5002000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = 0xe5402000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX {
    const OPCODE: u32 = STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::OPCODE;
    const MASK: u32 = STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::MASK;
    const MNEMONIC: &'static str = STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub _op_13: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = 0xe5006000;
    const MASK: u32 = 0xffe0e000;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 {
    const OPCODE: u32 = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::OPCODE;
    const MASK: u32 = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MASK;
    const MNEMONIC: &'static str = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = 0xe510e000;
    const MASK: u32 = 0xfff0e000;
    const MNEMONIC: &'static str = "stnt1w";
}
impl InsnOpcode for STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL {
    const OPCODE: u32 = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::OPCODE;
    const MASK: u32 = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MASK;
    const MNEMONIC: &'static str = STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Rt_Rt2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x29000000;
    const MASK: u32 = 0x7fc00000;
    const MNEMONIC: &'static str = "stp";
}
impl InsnOpcode for STP_Rt_Rt2_ADDR_SIMM7 {
    const OPCODE: u32 = STP_Rt_Rt2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = STP_Rt_Rt2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = STP_Rt_Rt2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S {
    const OPCODE: u32 = 0x28800000;
    const MASK: u32 = 0x7ec00000;
    const MNEMONIC: &'static str = "stp";
}
impl InsnOpcode for STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S {
    const OPCODE: u32 = STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::OPCODE;
    const MASK: u32 = STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::MASK;
    const MNEMONIC: &'static str = STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Ft_Ft2_ADDR_SIMM7 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = 0x2d000000;
    const MASK: u32 = 0x3fc00000;
    const MNEMONIC: &'static str = "stp";
}
impl InsnOpcode for STP_Ft_Ft2_ADDR_SIMM7 {
    const OPCODE: u32 = STP_Ft_Ft2_ADDR_SIMM7::OPCODE;
    const MASK: u32 = STP_Ft_Ft2_ADDR_SIMM7::MASK;
    const MNEMONIC: &'static str = STP_Ft_Ft2_ADDR_SIMM7::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(7)]
    pub imm7: u32,
    #[bits(2)]
    pub _op_22: u32,
    #[bits(1)]
    pub index2: u32,
    #[bits(7)]
    pub _op_25: u32,
}
impl STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    const OPCODE: u32 = 0x2c800000;
    const MASK: u32 = 0x3ec00000;
    const MNEMONIC: &'static str = "stp";
}
impl InsnOpcode for STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S {
    const OPCODE: u32 = STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::OPCODE;
    const MASK: u32 = STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::MASK;
    const MNEMONIC: &'static str = STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL {
    #[bits(4)]
    pub imm4_0: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL {
    const OPCODE: u32 = 0xe1200000;
    const MASK: u32 = 0xffff9c10;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL {
    const OPCODE: u32 = STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL::OPCODE;
    const MASK: u32 = STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL::MASK;
    const MNEMONIC: &'static str = STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SME_ZT0_SIMD_ADDR_SIMPLE {
    #[bits(32)]
    pub _op_0: u32,
}
impl STR_SME_ZT0_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = 0xe13f8000;
    const MASK: u32 = 0xfffffc1f;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_SME_ZT0_SIMD_ADDR_SIMPLE {
    const OPCODE: u32 = STR_SME_ZT0_SIMD_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STR_SME_ZT0_SIMD_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STR_SME_ZT0_SIMD_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STR_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0xb8200800;
    const MASK: u32 = 0xbfe00c00;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_Rt_ADDR_REGOFF {
    const OPCODE: u32 = STR_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = STR_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = STR_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8000400;
    const MASK: u32 = 0xbfe00400;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STR_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STR_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STR_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl STR_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0xb9000000;
    const MASK: u32 = 0xbfc00000;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = STR_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = STR_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = STR_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl STR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0xe5800000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_SVE_Pt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = STR_SVE_Pt_SVE_ADDR_RI_S9xVL::OPCODE;
    const MASK: u32 = STR_SVE_Pt_SVE_ADDR_RI_S9xVL::MASK;
    const MNEMONIC: &'static str = STR_SVE_Pt_SVE_ADDR_RI_S9xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SVE_PNt_SVE_ADDR_RI_S9xVL {
    #[bits(4)]
    pub sve_pt: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl STR_SVE_PNt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0xe5800000;
    const MASK: u32 = 0xffc0e010;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_SVE_PNt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = STR_SVE_PNt_SVE_ADDR_RI_S9xVL::OPCODE;
    const MASK: u32 = STR_SVE_PNt_SVE_ADDR_RI_S9xVL::MASK;
    const MNEMONIC: &'static str = STR_SVE_PNt_SVE_ADDR_RI_S9xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    #[bits(5)]
    pub sve_zt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl STR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = 0xe5804000;
    const MASK: u32 = 0xffc0e000;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_SVE_Zt_SVE_ADDR_RI_S9xVL {
    const OPCODE: u32 = STR_SVE_Zt_SVE_ADDR_RI_S9xVL::OPCODE;
    const MASK: u32 = STR_SVE_Zt_SVE_ADDR_RI_S9xVL::MASK;
    const MNEMONIC: &'static str = STR_SVE_Zt_SVE_ADDR_RI_S9xVL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Ft_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STR_Ft_ADDR_REGOFF {
    const OPCODE: u32 = 0x3c200800;
    const MASK: u32 = 0x3f600c00;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_Ft_ADDR_REGOFF {
    const OPCODE: u32 = STR_Ft_ADDR_REGOFF::OPCODE;
    const MASK: u32 = STR_Ft_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = STR_Ft_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Ft_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = 0x3c000400;
    const MASK: u32 = 0x3f600400;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = STR_Ft_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STR_Ft_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STR_Ft_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STR_Ft_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl STR_Ft_ADDR_UIMM12 {
    const OPCODE: u32 = 0x3d000000;
    const MASK: u32 = 0x3f400000;
    const MNEMONIC: &'static str = "str";
}
impl InsnOpcode for STR_Ft_ADDR_UIMM12 {
    const OPCODE: u32 = STR_Ft_ADDR_UIMM12::OPCODE;
    const MASK: u32 = STR_Ft_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = STR_Ft_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRB_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STRB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x38200800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "strb";
}
impl InsnOpcode for STRB_Rt_ADDR_REGOFF {
    const OPCODE: u32 = STRB_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = STRB_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = STRB_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38000400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "strb";
}
impl InsnOpcode for STRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STRB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STRB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STRB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRB_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl STRB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x39000000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "strb";
}
impl InsnOpcode for STRB_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = STRB_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = STRB_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = STRB_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRH_Rt_ADDR_REGOFF {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STRH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = 0x78200800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "strh";
}
impl InsnOpcode for STRH_Rt_ADDR_REGOFF {
    const OPCODE: u32 = STRH_Rt_ADDR_REGOFF::OPCODE;
    const MASK: u32 = STRH_Rt_ADDR_REGOFF::MASK;
    const MNEMONIC: &'static str = STRH_Rt_ADDR_REGOFF::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78000400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "strh";
}
impl InsnOpcode for STRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STRH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STRH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STRH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STRH_Rt_ADDR_UIMM12 {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl STRH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = 0x79000000;
    const MASK: u32 = 0xffc00000;
    const MNEMONIC: &'static str = "strh";
}
impl InsnOpcode for STRH_Rt_ADDR_UIMM12 {
    const OPCODE: u32 = STRH_Rt_ADDR_UIMM12::OPCODE;
    const MASK: u32 = STRH_Rt_ADDR_UIMM12::MASK;
    const MNEMONIC: &'static str = STRH_Rt_ADDR_UIMM12::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STTR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STTR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8000800;
    const MASK: u32 = 0xbfe00c00;
    const MNEMONIC: &'static str = "sttr";
}
impl InsnOpcode for STTR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STTR_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STTR_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STTR_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STTRB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STTRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38000800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "sttrb";
}
impl InsnOpcode for STTRB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STTRB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STTRB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STTRB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STTRH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STTRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78000800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "sttrh";
}
impl InsnOpcode for STTRH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STTRH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STTRH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STTRH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STUR_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STUR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0xb8000000;
    const MASK: u32 = 0xbfe00c00;
    const MNEMONIC: &'static str = "stur";
}
impl InsnOpcode for STUR_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STUR_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STUR_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STUR_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STUR_Ft_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STUR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = 0x3c000000;
    const MASK: u32 = 0x3f600c00;
    const MNEMONIC: &'static str = "stur";
}
impl InsnOpcode for STUR_Ft_ADDR_SIMM9 {
    const OPCODE: u32 = STUR_Ft_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STUR_Ft_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STUR_Ft_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STURB_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STURB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x38000000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "sturb";
}
impl InsnOpcode for STURB_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STURB_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STURB_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STURB_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STURH_Rt_ADDR_SIMM9 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STURH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = 0x78000000;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "sturh";
}
impl InsnOpcode for STURH_Rt_ADDR_SIMM9 {
    const OPCODE: u32 = STURH_Rt_ADDR_SIMM9::OPCODE;
    const MASK: u32 = STURH_Rt_ADDR_SIMM9::MASK;
    const MNEMONIC: &'static str = STURH_Rt_ADDR_SIMM9::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXP_Rs_Rt_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(5)]
    pub _op_5: u32,
    #[bits(5)]
    pub rt2: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STXP_Rs_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88200000;
    const MASK: u32 = 0xbfe08000;
    const MNEMONIC: &'static str = "stxp";
}
impl InsnOpcode for STXP_Rs_Rt_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = STXP_Rs_Rt_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STXP_Rs_Rt_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STXP_Rs_Rt_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXR_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STXR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x88007c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "stxr";
}
impl InsnOpcode for STXR_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STXR_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STXR_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STXR_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXRB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STXRB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x8007c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "stxrb";
}
impl InsnOpcode for STXRB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STXRB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STXRB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STXRB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STXRH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STXRH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x48007c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "stxrh";
}
impl InsnOpcode for STXRH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STXRH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STXRH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STXRH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZ2G_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STZ2G_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9e00800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stz2g";
}
impl InsnOpcode for STZ2G_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = STZ2G_Rt_SP_ADDR_SIMM13::OPCODE;
    const MASK: u32 = STZ2G_Rt_SP_ADDR_SIMM13::MASK;
    const MNEMONIC: &'static str = STZ2G_Rt_SP_ADDR_SIMM13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = 0xd9e00400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "stz2g";
}
impl InsnOpcode for STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag::OPCODE;
    const MASK: u32 = STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag::MASK;
    const MNEMONIC: &'static str = STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZG_Rt_SP_ADDR_SIMM13 {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STZG_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = 0xd9600800;
    const MASK: u32 = 0xffe00c00;
    const MNEMONIC: &'static str = "stzg";
}
impl InsnOpcode for STZG_Rt_SP_ADDR_SIMM13 {
    const OPCODE: u32 = STZG_Rt_SP_ADDR_SIMM13::OPCODE;
    const MASK: u32 = STZG_Rt_SP_ADDR_SIMM13::MASK;
    const MNEMONIC: &'static str = STZG_Rt_SP_ADDR_SIMM13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    #[bits(5)]
    pub rt: u32,
    #[bits(6)]
    pub _op_5: u32,
    #[bits(1)]
    pub index: u32,
    #[bits(9)]
    pub imm9: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl STZG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = 0xd9600400;
    const MASK: u32 = 0xffe00400;
    const MNEMONIC: &'static str = "stzg";
}
impl InsnOpcode for STZG_Rt_SP_X_ADDR_SIMM13_imm_tag {
    const OPCODE: u32 = STZG_Rt_SP_X_ADDR_SIMM13_imm_tag::OPCODE;
    const MASK: u32 = STZG_Rt_SP_X_ADDR_SIMM13_imm_tag::MASK;
    const MNEMONIC: &'static str = STZG_Rt_SP_X_ADDR_SIMM13_imm_tag::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct STZGM_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl STZGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xd9200000;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "stzgm";
}
impl InsnOpcode for STZGM_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = STZGM_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = STZGM_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = STZGM_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201818;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = 0xc1301818;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S {
    const OPCODE: u32 = SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::OPCODE;
    const MASK: u32 = SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MASK;
    const MNEMONIC: &'static str = SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01818;
    const MASK: u32 = 0xffa19c38;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11818;
    const MASK: u32 = 0xffa39c78;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SME_Znx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl SUB_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = 0xc1a01c18;
    const MASK: u32 = 0xffbf9c38;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SME_Znx2 {
    const OPCODE: u32 = SUB_SME_ZA_array_off3_0_SME_Znx2::OPCODE;
    const MASK: u32 = SUB_SME_ZA_array_off3_0_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SUB_SME_ZA_array_off3_0_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SME_ZA_array_off3_0_SME_Znx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(17)]
    pub _op_15: u32,
}
impl SUB_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = 0xc1a11c18;
    const MASK: u32 = 0xffbf9c78;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SME_ZA_array_off3_0_SME_Znx4 {
    const OPCODE: u32 = SUB_SME_ZA_array_off3_0_SME_Znx4::OPCODE;
    const MASK: u32 = SUB_SME_ZA_array_off3_0_SME_Znx4::MASK;
    const MNEMONIC: &'static str = SUB_SME_ZA_array_off3_0_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Rd_SP_Rn_SP_AIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SUB_Rd_SP_Rn_SP_AIMM {
    const OPCODE: u32 = 0x51000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_Rd_SP_Rn_SP_AIMM {
    const OPCODE: u32 = SUB_Rd_SP_Rn_SP_AIMM::OPCODE;
    const MASK: u32 = SUB_Rd_SP_Rn_SP_AIMM::MASK;
    const MNEMONIC: &'static str = SUB_Rd_SP_Rn_SP_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUB_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x4b000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = SUB_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = SUB_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = SUB_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Rd_SP_Rn_SP_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUB_Rd_SP_Rn_SP_Rm_EXT {
    const OPCODE: u32 = 0x4b200000;
    const MASK: u32 = 0x7fe00000;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_Rd_SP_Rn_SP_Rm_EXT {
    const OPCODE: u32 = SUB_Rd_SP_Rn_SP_Rm_EXT::OPCODE;
    const MASK: u32 = SUB_Rd_SP_Rn_SP_Rm_EXT::MASK;
    const MNEMONIC: &'static str = SUB_Rd_SP_Rn_SP_Rm_EXT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4010000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4200400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl SUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2521c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = SUB_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = SUB_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = SUB_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e208400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_Vd_Vn_Vm {
    const OPCODE: u32 = SUB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SUB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SUB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUB_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUB_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee08400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sub";
}
impl InsnOpcode for SUB_Sd_Sn_Sm {
    const OPCODE: u32 = SUB_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = SUB_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = SUB_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(4)]
    pub imm4_10: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG {
    const OPCODE: u32 = 0xd1800000;
    const MASK: u32 = 0xffc0c000;
    const MNEMONIC: &'static str = "subg";
}
impl InsnOpcode for SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG {
    const OPCODE: u32 = SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::OPCODE;
    const MASK: u32 = SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::MASK;
    const MNEMONIC: &'static str = SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUBHN_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "subhn";
}
impl InsnOpcode for SUBHN_Vd_Vn_Vm {
    const OPCODE: u32 = SUBHN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SUBHN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SUBHN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUBHN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "subhn2";
}
impl InsnOpcode for SUBHN2_Vd_Vn_Vm {
    const OPCODE: u32 = SUBHN2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = SUBHN2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = SUBHN2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "subhnb";
}
impl InsnOpcode for SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45207400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "subhnt";
}
impl InsnOpcode for SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBP_Rd_Rn_SP_Rm_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUBP_Rd_Rn_SP_Rm_SP {
    const OPCODE: u32 = 0x9ac00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "subp";
}
impl InsnOpcode for SUBP_Rd_Rn_SP_Rm_SP {
    const OPCODE: u32 = SUBP_Rd_Rn_SP_Rm_SP::OPCODE;
    const MASK: u32 = SUBP_Rd_Rn_SP_Rm_SP::MASK;
    const MNEMONIC: &'static str = SUBP_Rd_Rn_SP_Rm_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBPS_Rd_Rn_SP_Rm_SP {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUBPS_Rd_Rn_SP_Rm_SP {
    const OPCODE: u32 = 0xbac00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "subps";
}
impl InsnOpcode for SUBPS_Rd_Rn_SP_Rm_SP {
    const OPCODE: u32 = SUBPS_Rd_Rn_SP_Rm_SP::OPCODE;
    const MASK: u32 = SUBPS_Rd_Rn_SP_Rm_SP::MASK;
    const MNEMONIC: &'static str = SUBPS_Rd_Rn_SP_Rm_SP::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4030000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "subr";
}
impl InsnOpcode for SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBR_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl SUBR_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2523c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "subr";
}
impl InsnOpcode for SUBR_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = SUBR_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = SUBR_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = SUBR_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBS_Rd_Rn_SP_AIMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(12)]
    pub imm12: u32,
    #[bits(2)]
    pub shift: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl SUBS_Rd_Rn_SP_AIMM {
    const OPCODE: u32 = 0x71000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "subs";
}
impl InsnOpcode for SUBS_Rd_Rn_SP_AIMM {
    const OPCODE: u32 = SUBS_Rd_Rn_SP_AIMM::OPCODE;
    const MASK: u32 = SUBS_Rd_Rn_SP_AIMM::MASK;
    const MNEMONIC: &'static str = SUBS_Rd_Rn_SP_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBS_Rd_Rn_Rm_SFT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUBS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = 0x6b000000;
    const MASK: u32 = 0x7f200000;
    const MNEMONIC: &'static str = "subs";
}
impl InsnOpcode for SUBS_Rd_Rn_Rm_SFT {
    const OPCODE: u32 = SUBS_Rd_Rn_Rm_SFT::OPCODE;
    const MASK: u32 = SUBS_Rd_Rn_Rm_SFT::MASK;
    const MNEMONIC: &'static str = SUBS_Rd_Rn_Rm_SFT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUBS_Rd_Rn_SP_Rm_EXT {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUBS_Rd_Rn_SP_Rm_EXT {
    const OPCODE: u32 = 0x6b200000;
    const MASK: u32 = 0x7fe00000;
    const MNEMONIC: &'static str = "subs";
}
impl InsnOpcode for SUBS_Rd_Rn_SP_Rm_EXT {
    const OPCODE: u32 = SUBS_Rd_Rn_SP_Rm_EXT::OPCODE;
    const MASK: u32 = SUBS_Rd_Rn_SP_Rm_EXT::MASK;
    const MNEMONIC: &'static str = SUBS_Rd_Rn_SP_Rm_EXT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501038;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "sudot";
}
impl InsnOpcode for SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509038;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "sudot";
}
impl InsnOpcode for SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201418;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "sudot";
}
impl InsnOpcode for SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1301418;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "sudot";
}
impl InsnOpcode for SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a01c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "sudot";
}
impl InsnOpcode for SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUDOT_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUDOT_Vd_Vn_Em {
    const OPCODE: u32 = 0xf00f000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "sudot";
}
impl InsnOpcode for SUDOT_Vd_Vn_Em {
    const OPCODE: u32 = SUDOT_Vd_Vn_Em::OPCODE;
    const MASK: u32 = SUDOT_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = SUDOT_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000014;
    const MASK: u32 = 0xfff0001c;
    const MNEMONIC: &'static str = "sumlall";
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::OPCODE;
    const MASK: u32 = SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MASK;
    const MNEMONIC: &'static str = SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100030;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "sumlall";
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108030;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "sumlall";
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200014;
    const MASK: u32 = 0xfff09c1e;
    const MNEMONIC: &'static str = "sumlall";
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1300014;
    const MASK: u32 = 0xfff09c1e;
    const MNEMONIC: &'static str = "sumlall";
}
impl InsnOpcode for SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str =
        SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0a00000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "sumopa";
}
impl InsnOpcode for SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0e00000;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "sumopa";
}
impl InsnOpcode for SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0a00010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "sumops";
}
impl InsnOpcode for SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa0e00010;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "sumops";
}
impl InsnOpcode for SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPK_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUNPK_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc125e000;
    const MASK: u32 = 0xff3ffc01;
    const MNEMONIC: &'static str = "sunpk";
}
impl InsnOpcode for SUNPK_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = SUNPK_SME_Zdnx2_SVE_Zn::OPCODE;
    const MASK: u32 = SUNPK_SME_Zdnx2_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SUNPK_SME_Zdnx2_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPK_SME_Zdnx4_SME_Znx2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUNPK_SME_Zdnx4_SME_Znx2 {
    const OPCODE: u32 = 0xc135e000;
    const MASK: u32 = 0xff3ffc23;
    const MNEMONIC: &'static str = "sunpk";
}
impl InsnOpcode for SUNPK_SME_Zdnx4_SME_Znx2 {
    const OPCODE: u32 = SUNPK_SME_Zdnx4_SME_Znx2::OPCODE;
    const MASK: u32 = SUNPK_SME_Zdnx4_SME_Znx2::MASK;
    const MNEMONIC: &'static str = SUNPK_SME_Zdnx4_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPKHI_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUNPKHI_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5313800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sunpkhi";
}
impl InsnOpcode for SUNPKHI_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SUNPKHI_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SUNPKHI_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SUNPKHI_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUNPKLO_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUNPKLO_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5303800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "sunpklo";
}
impl InsnOpcode for SUNPKLO_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SUNPKLO_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SUNPKLO_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SUNPKLO_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441c8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "suqadd";
}
impl InsnOpcode for SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUQADD_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUQADD_Vd_Vn {
    const OPCODE: u32 = 0xe203800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "suqadd";
}
impl InsnOpcode for SUQADD_Vd_Vn {
    const OPCODE: u32 = SUQADD_Vd_Vn::OPCODE;
    const MASK: u32 = SUQADD_Vd_Vn::MASK;
    const MNEMONIC: &'static str = SUQADD_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUQADD_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl SUQADD_Sd_Sn {
    const OPCODE: u32 = 0x5e203800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "suqadd";
}
impl InsnOpcode for SUQADD_Sd_Sn {
    const OPCODE: u32 = SUQADD_Sd_Sn::OPCODE;
    const MASK: u32 = SUQADD_Sd_Sn::MASK;
    const MNEMONIC: &'static str = SUQADD_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508038;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "suvdot";
}
impl InsnOpcode for SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVC_EXCEPTION {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SVC_EXCEPTION {
    const OPCODE: u32 = 0xd4000001;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "svc";
}
impl InsnOpcode for SVC_EXCEPTION {
    const OPCODE: u32 = SVC_EXCEPTION::OPCODE;
    const MASK: u32 = SVC_EXCEPTION::MASK;
    const MNEMONIC: &'static str = SVC_EXCEPTION::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500020;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "svdot";
}
impl InsnOpcode for SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508020;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "svdot";
}
impl InsnOpcode for SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08808;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "svdot";
}
impl InsnOpcode for SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWP_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWP_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8208000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "swp";
}
impl InsnOpcode for SWP_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWP_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWP_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWP_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPA_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8a08000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "swpa";
}
impl InsnOpcode for SWPA_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPA_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPA_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPA_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPAB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38a08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swpab";
}
impl InsnOpcode for SWPAB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPAB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPAB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPAB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPAH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78a08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swpah";
}
impl InsnOpcode for SWPAH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPAH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPAH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPAH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPAL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8e08000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "swpal";
}
impl InsnOpcode for SWPAL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPAL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPAL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPAL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPALB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38e08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swpalb";
}
impl InsnOpcode for SWPALB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPALB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPALB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPALB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPALH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78e08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swpalh";
}
impl InsnOpcode for SWPALH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPALH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPALH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPALH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38208000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swpb";
}
impl InsnOpcode for SWPB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78208000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swph";
}
impl InsnOpcode for SWPH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPL_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0xb8608000;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "swpl";
}
impl InsnOpcode for SWPL_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPL_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPL_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPL_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPLB_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x38608000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swplb";
}
impl InsnOpcode for SWPLB_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPLB_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPLB_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPLB_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPLH_Rs_Rt_ADDR_SIMPLE {
    #[bits(5)]
    pub rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub rs: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = 0x78608000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swplh";
}
impl InsnOpcode for SWPLH_Rs_Rt_ADDR_SIMPLE {
    const OPCODE: u32 = SWPLH_Rs_Rt_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPLH_Rs_Rt_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPLH_Rs_Rt_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19208000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swpp";
}
impl InsnOpcode for SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19a08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swppa";
}
impl InsnOpcode for SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19e08000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swppal";
}
impl InsnOpcode for SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    #[bits(5)]
    pub lse128_rt: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(5)]
    pub lse128_rt2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = 0x19608000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "swppl";
}
impl InsnOpcode for SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE {
    const OPCODE: u32 = SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::OPCODE;
    const MASK: u32 = SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MASK;
    const MNEMONIC: &'static str = SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x410a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "sxtb";
}
impl InsnOpcode for SXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SXTB_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SXTB_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SXTB_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SXTH_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SXTH_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x492a000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "sxth";
}
impl InsnOpcode for SXTH_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SXTH_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SXTH_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SXTH_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SXTW_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl SXTW_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4d4a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "sxtw";
}
impl InsnOpcode for SXTW_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = SXTW_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = SXTW_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = SXTW_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt {
    #[bits(5)]
    pub rt: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(4)]
    pub crn: u32,
    #[bits(3)]
    pub op1: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt {
    const OPCODE: u32 = 0xd5080000;
    const MASK: u32 = 0xfff80000;
    const MNEMONIC: &'static str = "sys";
}
impl InsnOpcode for SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt {
    const OPCODE: u32 = SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt::OPCODE;
    const MASK: u32 = SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt::MASK;
    const MNEMONIC: &'static str = SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2 {
    #[bits(5)]
    pub rt: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(4)]
    pub crn: u32,
    #[bits(3)]
    pub op1: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2 {
    const OPCODE: u32 = 0xd5280000;
    const MASK: u32 = 0xfff80000;
    const MNEMONIC: &'static str = "sysl";
}
impl InsnOpcode for SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2 {
    const OPCODE: u32 = SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2::OPCODE;
    const MASK: u32 = SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2::MASK;
    const MNEMONIC: &'static str = SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR {
    #[bits(5)]
    pub rt: u32,
    #[bits(3)]
    pub op2: u32,
    #[bits(4)]
    pub crm: u32,
    #[bits(4)]
    pub crn: u32,
    #[bits(3)]
    pub op1: u32,
    #[bits(13)]
    pub _op_19: u32,
}
impl SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR {
    const OPCODE: u32 = 0xd5480000;
    const MASK: u32 = 0xfff80000;
    const MNEMONIC: &'static str = "sysp";
}
impl InsnOpcode for SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR {
    const OPCODE: u32 = SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR::OPCODE;
    const MASK: u32 = SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR::MASK;
    const MNEMONIC: &'static str = SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 {
    const OPCODE: u32 = 0x5203000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "tbl";
}
impl InsnOpcode for TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 {
    const OPCODE: u32 = TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16::OPCODE;
    const MASK: u32 = TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5202800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "tbl";
}
impl InsnOpcode for TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBL_Vd_LVn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TBL_Vd_LVn_Vm {
    const OPCODE: u32 = 0xe000000;
    const MASK: u32 = 0xbfe09c00;
    const MNEMONIC: &'static str = "tbl";
}
impl InsnOpcode for TBL_Vd_LVn_Vm {
    const OPCODE: u32 = TBL_Vd_LVn_Vm::OPCODE;
    const MASK: u32 = TBL_Vd_LVn_Vm::MASK;
    const MNEMONIC: &'static str = TBL_Vd_LVn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBNZ_Rt_BIT_NUM_ADDR_PCREL14 {
    #[bits(5)]
    pub rt: u32,
    #[bits(14)]
    pub imm14: u32,
    #[bits(5)]
    pub b40: u32,
    #[bits(7)]
    pub _op_24: u32,
    #[bits(1)]
    pub b5: u32,
}
impl TBNZ_Rt_BIT_NUM_ADDR_PCREL14 {
    const OPCODE: u32 = 0x37000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "tbnz";
}
impl InsnOpcode for TBNZ_Rt_BIT_NUM_ADDR_PCREL14 {
    const OPCODE: u32 = TBNZ_Rt_BIT_NUM_ADDR_PCREL14::OPCODE;
    const MASK: u32 = TBNZ_Rt_BIT_NUM_ADDR_PCREL14::MASK;
    const MNEMONIC: &'static str = TBNZ_Rt_BIT_NUM_ADDR_PCREL14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBX_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TBX_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5202c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "tbx";
}
impl InsnOpcode for TBX_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = TBX_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = TBX_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = TBX_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBX_Vd_LVn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TBX_Vd_LVn_Vm {
    const OPCODE: u32 = 0xe001000;
    const MASK: u32 = 0xbfe09c00;
    const MNEMONIC: &'static str = "tbx";
}
impl InsnOpcode for TBX_Vd_LVn_Vm {
    const OPCODE: u32 = TBX_Vd_LVn_Vm::OPCODE;
    const MASK: u32 = TBX_Vd_LVn_Vm::MASK;
    const MNEMONIC: &'static str = TBX_Vd_LVn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TBZ_Rt_BIT_NUM_ADDR_PCREL14 {
    #[bits(5)]
    pub rt: u32,
    #[bits(14)]
    pub imm14: u32,
    #[bits(5)]
    pub b40: u32,
    #[bits(7)]
    pub _op_24: u32,
    #[bits(1)]
    pub b5: u32,
}
impl TBZ_Rt_BIT_NUM_ADDR_PCREL14 {
    const OPCODE: u32 = 0x36000000;
    const MASK: u32 = 0x7f000000;
    const MNEMONIC: &'static str = "tbz";
}
impl InsnOpcode for TBZ_Rt_BIT_NUM_ADDR_PCREL14 {
    const OPCODE: u32 = TBZ_Rt_BIT_NUM_ADDR_PCREL14::OPCODE;
    const MASK: u32 = TBZ_Rt_BIT_NUM_ADDR_PCREL14::MASK;
    const MNEMONIC: &'static str = TBZ_Rt_BIT_NUM_ADDR_PCREL14::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TCANCEL_TME_UIMM16 {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(16)]
    pub imm16_5: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TCANCEL_TME_UIMM16 {
    const OPCODE: u32 = 0xd4600000;
    const MASK: u32 = 0xffe0001f;
    const MNEMONIC: &'static str = "tcancel";
}
impl InsnOpcode for TCANCEL_TME_UIMM16 {
    const OPCODE: u32 = TCANCEL_TME_UIMM16::OPCODE;
    const MASK: u32 = TCANCEL_TME_UIMM16::MASK;
    const MNEMONIC: &'static str = TCANCEL_TME_UIMM16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TCOMMIT {
    #[bits(32)]
    pub _op_0: u32,
}
impl TCOMMIT {
    const OPCODE: u32 = 0xd503307f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "tcommit";
}
impl InsnOpcode for TCOMMIT {
    const OPCODE: u32 = TCOMMIT::OPCODE;
    const MASK: u32 = TCOMMIT::MASK;
    const MNEMONIC: &'static str = TCOMMIT::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a01800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "trn1";
}
impl InsnOpcode for TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl TRN1_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5205000;
    const MASK: u32 = 0xff30fe10;
    const MNEMONIC: &'static str = "trn1";
}
impl InsnOpcode for TRN1_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = TRN1_SVE_Pd_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = TRN1_SVE_Pd_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = TRN1_SVE_Pd_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "trn1";
}
impl InsnOpcode for TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TRN1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe002800;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "trn1";
}
impl InsnOpcode for TRN1_Vd_Vn_Vm {
    const OPCODE: u32 = TRN1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = TRN1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = TRN1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a01c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "trn2";
}
impl InsnOpcode for TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl TRN2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5205400;
    const MASK: u32 = 0xff30fe10;
    const MNEMONIC: &'static str = "trn2";
}
impl InsnOpcode for TRN2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = TRN2_SVE_Pd_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = TRN2_SVE_Pd_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = TRN2_SVE_Pd_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5207400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "trn2";
}
impl InsnOpcode for TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TRN2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl TRN2_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe006800;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "trn2";
}
impl InsnOpcode for TRN2_Vd_Vn_Vm {
    const OPCODE: u32 = TRN2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = TRN2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = TRN2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TSTART_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl TSTART_Rd {
    const OPCODE: u32 = 0xd5233060;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "tstart";
}
impl InsnOpcode for TSTART_Rd {
    const OPCODE: u32 = TSTART_Rd::OPCODE;
    const MASK: u32 = TSTART_Rd::MASK;
    const MNEMONIC: &'static str = TSTART_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct TTEST_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl TTEST_Rd {
    const OPCODE: u32 = 0xd5233160;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "ttest";
}
impl InsnOpcode for TTEST_Rd {
    const OPCODE: u32 = TTEST_Rd::OPCODE;
    const MASK: u32 = TTEST_Rd::MASK;
    const MNEMONIC: &'static str = TTEST_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500fc00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaba";
}
impl InsnOpcode for UABA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UABA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UABA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UABA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABA_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e207c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uaba";
}
impl InsnOpcode for UABA_Vd_Vn_Vm {
    const OPCODE: u32 = UABA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UABA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UABA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e205000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabal";
}
impl InsnOpcode for UABAL_Vd_Vn_Vm {
    const OPCODE: u32 = UABAL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UABAL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UABAL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e205000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabal2";
}
impl InsnOpcode for UABAL2_Vd_Vn_Vm {
    const OPCODE: u32 = UABAL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UABAL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UABAL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500c800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabalb";
}
impl InsnOpcode for UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4500cc00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabalt";
}
impl InsnOpcode for UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x40d0000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uabd";
}
impl InsnOpcode for UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABD_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e207400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uabd";
}
impl InsnOpcode for UABD_Vd_Vn_Vm {
    const OPCODE: u32 = UABD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UABD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UABD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABDL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabdl";
}
impl InsnOpcode for UABDL_Vd_Vn_Vm {
    const OPCODE: u32 = UABDL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UABDL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UABDL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABDL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e207000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabdl2";
}
impl InsnOpcode for UABDL2_Vd_Vn_Vm {
    const OPCODE: u32 = UABDL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UABDL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UABDL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabdlb";
}
impl InsnOpcode for UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45003c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uabdlt";
}
impl InsnOpcode for UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4405a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uadalp";
}
impl InsnOpcode for UADALP_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UADALP_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UADALP_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UADALP_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADALP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UADALP_Vd_Vn {
    const OPCODE: u32 = 0x2e206800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "uadalp";
}
impl InsnOpcode for UADALP_Vd_Vn {
    const OPCODE: u32 = UADALP_Vd_Vn::OPCODE;
    const MASK: u32 = UADALP_Vd_Vn::MASK;
    const MNEMONIC: &'static str = UADALP_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e200000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddl";
}
impl InsnOpcode for UADDL_Vd_Vn_Vm {
    const OPCODE: u32 = UADDL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UADDL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UADDL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e200000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddl2";
}
impl InsnOpcode for UADDL2_Vd_Vn_Vm {
    const OPCODE: u32 = UADDL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UADDL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UADDL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45000800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddlb";
}
impl InsnOpcode for UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLP_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UADDLP_Vd_Vn {
    const OPCODE: u32 = 0x2e202800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "uaddlp";
}
impl InsnOpcode for UADDLP_Vd_Vn {
    const OPCODE: u32 = UADDLP_Vd_Vn::OPCODE;
    const MASK: u32 = UADDLP_Vd_Vn::MASK;
    const MNEMONIC: &'static str = UADDLP_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45000c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddlt";
}
impl InsnOpcode for UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDLV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UADDLV_Fd_Vn {
    const OPCODE: u32 = 0x2e303800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "uaddlv";
}
impl InsnOpcode for UADDLV_Fd_Vn {
    const OPCODE: u32 = UADDLV_Fd_Vn::OPCODE;
    const MASK: u32 = UADDLV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = UADDLV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4012000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uaddv";
}
impl InsnOpcode for UADDV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UADDV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UADDV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UADDV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDW_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDW_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e201000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddw";
}
impl InsnOpcode for UADDW_Vd_Vn_Vm {
    const OPCODE: u32 = UADDW_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UADDW_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UADDW_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDW2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDW2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e201000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddw2";
}
impl InsnOpcode for UADDW2_Vd_Vn_Vm {
    const OPCODE: u32 = UADDW2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UADDW2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UADDW2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45004800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddwb";
}
impl InsnOpcode for UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45004c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uaddwt";
}
impl InsnOpcode for UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UBFM_Rd_Rn_IMMR_IMMS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(6)]
    pub immr: u32,
    #[bits(10)]
    pub _op_22: u32,
}
impl UBFM_Rd_Rn_IMMR_IMMS {
    const OPCODE: u32 = 0x53000000;
    const MASK: u32 = 0x7f800000;
    const MNEMONIC: &'static str = "ubfm";
}
impl InsnOpcode for UBFM_Rd_Rn_IMMR_IMMS {
    const OPCODE: u32 = UBFM_Rd_Rn_IMMR_IMMS::OPCODE;
    const MASK: u32 = UBFM_Rd_Rn_IMMR_IMMS::MASK;
    const MNEMONIC: &'static str = UBFM_Rd_Rn_IMMR_IMMS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120c401;
    const MASK: u32 = 0xff20fc01;
    const MNEMONIC: &'static str = "uclamp";
}
impl InsnOpcode for UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120cc01;
    const MASK: u32 = 0xff20fc03;
    const MNEMONIC: &'static str = "uclamp";
}
impl InsnOpcode for UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4400c400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uclamp";
}
impl InsnOpcode for UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SME_Zdnx2_SME_Znx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = 0xc122e020;
    const MASK: u32 = 0xfffffc21;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SME_Zdnx2_SME_Znx2 {
    const OPCODE: u32 = UCVTF_SME_Zdnx2_SME_Znx2::OPCODE;
    const MASK: u32 = UCVTF_SME_Zdnx2_SME_Znx2::MASK;
    const MNEMONIC: &'static str = UCVTF_SME_Zdnx2_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc132e020;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = UCVTF_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = UCVTF_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = UCVTF_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x65d1a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x6595a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = 0x6555a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S {
    const OPCODE: u32 = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65d5a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = 0x6553a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H {
    const OPCODE: u32 = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x6557a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = 0x65d7a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D {
    const OPCODE: u32 = UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::OPCODE;
    const MASK: u32 = UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MASK;
    const MNEMONIC: &'static str = UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Fd_Rn_FBITS {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl UCVTF_Fd_Rn_FBITS {
    const OPCODE: u32 = 0x1e030000;
    const MASK: u32 = 0x7f3f0000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Fd_Rn_FBITS {
    const OPCODE: u32 = UCVTF_Fd_Rn_FBITS::OPCODE;
    const MASK: u32 = UCVTF_Fd_Rn_FBITS::MASK;
    const MNEMONIC: &'static str = UCVTF_Fd_Rn_FBITS::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub scale: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32 {
    const OPCODE: u32 = 0x1ec30000;
    const MASK: u32 = 0x7fff0000;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32 {
    const OPCODE: u32 = UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::OPCODE;
    const MASK: u32 = UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::MASK;
    const MNEMONIC: &'static str = UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Vd_Vn {
    const OPCODE: u32 = 0x2e21d800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Vd_Vn {
    const OPCODE: u32 = UCVTF_Vd_Vn::OPCODE;
    const MASK: u32 = UCVTF_Vd_Vn::MASK;
    const MNEMONIC: &'static str = UCVTF_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vd_V_4H_Vn_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = 0x2e79d800;
    const MASK: u32 = 0xbffffc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Vd_V_4H_Vn_V_4H {
    const OPCODE: u32 = UCVTF_Vd_V_4H_Vn_V_4H::OPCODE;
    const MASK: u32 = UCVTF_Vd_V_4H_Vn_V_4H::MASK;
    const MNEMONIC: &'static str = UCVTF_Vd_V_4H_Vn_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Fd_Rn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Fd_Rn {
    const OPCODE: u32 = 0x1e230000;
    const MASK: u32 = 0x7f3ffc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Fd_Rn {
    const OPCODE: u32 = UCVTF_Fd_Rn::OPCODE;
    const MASK: u32 = UCVTF_Fd_Rn::MASK;
    const MNEMONIC: &'static str = UCVTF_Fd_Rn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Fd_S_H_Rn_W {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Fd_S_H_Rn_W {
    const OPCODE: u32 = 0x1ee30000;
    const MASK: u32 = 0x7ffffc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Fd_S_H_Rn_W {
    const OPCODE: u32 = UCVTF_Fd_S_H_Rn_W::OPCODE;
    const MASK: u32 = UCVTF_Fd_S_H_Rn_W::MASK;
    const MNEMONIC: &'static str = UCVTF_Fd_S_H_Rn_W::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Sd_Sn {
    const OPCODE: u32 = 0x7e21d800;
    const MASK: u32 = 0xffbffc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Sd_Sn {
    const OPCODE: u32 = UCVTF_Sd_Sn::OPCODE;
    const MASK: u32 = UCVTF_Sd_Sn::MASK;
    const MNEMONIC: &'static str = UCVTF_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_S_H_Sn_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = 0x7e79d800;
    const MASK: u32 = 0xfffffc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Sd_S_H_Sn_S_H {
    const OPCODE: u32 = UCVTF_Sd_S_H_Sn_S_H::OPCODE;
    const MASK: u32 = UCVTF_Sd_S_H_Sn_S_H::MASK;
    const MNEMONIC: &'static str = UCVTF_Sd_S_H_Sn_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f00e400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = UCVTF_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = UCVTF_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UCVTF_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = 0x2f10e400;
    const MASK: u32 = 0xbf90fc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H {
    const OPCODE: u32 = UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::OPCODE;
    const MASK: u32 = UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MASK;
    const MNEMONIC: &'static str = UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f00e400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = UCVTF_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = UCVTF_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UCVTF_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = 0x7f10e400;
    const MASK: u32 = 0xff90fc00;
    const MNEMONIC: &'static str = "ucvtf";
}
impl InsnOpcode for UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H {
    const OPCODE: u32 = UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::OPCODE;
    const MASK: u32 = UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MASK;
    const MNEMONIC: &'static str = UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDF_UNDEFINED {
    #[bits(16)]
    pub imm16_0: u32,
    #[bits(16)]
    pub _op_16: u32,
}
impl UDF_UNDEFINED {
    const OPCODE: u32 = 0x000000;
    const MASK: u32 = 0xffff0000;
    const MNEMONIC: &'static str = "udf";
}
impl InsnOpcode for UDF_UNDEFINED {
    const OPCODE: u32 = UDF_UNDEFINED::OPCODE;
    const MASK: u32 = UDF_UNDEFINED::MASK;
    const MNEMONIC: &'static str = UDF_UNDEFINED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDIV_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDIV_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac00800;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "udiv";
}
impl InsnOpcode for UDIV_Rd_Rn_Rm {
    const OPCODE: u32 = UDIV_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = UDIV_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = UDIV_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4950000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "udiv";
}
impl InsnOpcode for UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4970000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "udivr";
}
impl InsnOpcode for UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501010;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = 0xc1501030;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B::MASK;
    const MNEMONIC: &'static str =
        UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509010;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = 0xc1509030;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B::MASK;
    const MNEMONIC: &'static str =
        UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d00018;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08018;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201410;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1301410;
    const MASK: u32 = 0xffb09c18;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01410;
    const MASK: u32 = 0xffa19c38;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11410;
    const MASK: u32 = 0xffa39c78;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1601418;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418 {
    const OPCODE: u32 = 0xc1701418;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418 {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418::MASK;
    const MNEMONIC: &'static str =
        UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H {
    const OPCODE: u32 = 0xc1e01418;
    const MASK: u32 = 0xffe19c38;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H {
    const OPCODE: u32 = 0xc1e11418;
    const MASK: u32 = 0xffe39c78;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H {
    const OPCODE: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H::OPCODE;
    const MASK: u32 = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H::MASK;
    const MNEMONIC: &'static str = UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44800400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = 0x44e00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX {
    const OPCODE: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::OPCODE;
    const MASK: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MASK;
    const MNEMONIC: &'static str = UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = 0x4400cc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H {
    const OPCODE: u32 = UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H::OPCODE;
    const MASK: u32 = UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H::MASK;
    const MNEMONIC: &'static str = UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub imm2_19: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = 0x4480cc00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX {
    const OPCODE: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::OPCODE;
    const MASK: u32 = UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::MASK;
    const MNEMONIC: &'static str = UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e009400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_Vd_Vn_Vm {
    const OPCODE: u32 = UDOT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UDOT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UDOT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UDOT_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UDOT_Vd_Vn_Em {
    const OPCODE: u32 = 0x2f00e000;
    const MASK: u32 = 0xbf00f400;
    const MNEMONIC: &'static str = "udot";
}
impl InsnOpcode for UDOT_Vd_Vn_Em {
    const OPCODE: u32 = UDOT_Vd_Vn_Em::OPCODE;
    const MASK: u32 = UDOT_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = UDOT_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44118000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uhadd";
}
impl InsnOpcode for UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UHADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e200400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uhadd";
}
impl InsnOpcode for UHADD_Vd_Vn_Vm {
    const OPCODE: u32 = UHADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UHADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UHADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44138000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uhsub";
}
impl InsnOpcode for UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UHSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e202400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uhsub";
}
impl InsnOpcode for UHSUB_Vd_Vn_Vm {
    const OPCODE: u32 = UHSUB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UHSUB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UHSUB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44178000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uhsubr";
}
impl InsnOpcode for UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMADDL_Rd_Rn_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMADDL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = 0x9ba00000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "umaddl";
}
impl InsnOpcode for UMADDL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = UMADDL_Rd_Rn_Rm_Ra::OPCODE;
    const MASK: u32 = UMADDL_Rd_Rn_Rm_Ra::MASK;
    const MNEMONIC: &'static str = UMADDL_Rd_Rn_Rm_Ra::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a001;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b001;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a801;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b801;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_Rd_Rn_CSSC_UIMM8 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl UMAX_Rd_Rn_CSSC_UIMM8 {
    const OPCODE: u32 = 0x11c40000;
    const MASK: u32 = 0x7ffc0000;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_Rd_Rn_CSSC_UIMM8 {
    const OPCODE: u32 = UMAX_Rd_Rn_CSSC_UIMM8::OPCODE;
    const MASK: u32 = UMAX_Rd_Rn_CSSC_UIMM8::MASK;
    const MNEMONIC: &'static str = UMAX_Rd_Rn_CSSC_UIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMAX_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06400;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_Rd_Rn_Rm {
    const OPCODE: u32 = UMAX_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = UMAX_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = UMAX_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4090000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8 {
    const OPCODE: u32 = 0x2529c000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8 {
    const OPCODE: u32 = UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8::OPCODE;
    const MASK: u32 = UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8::MASK;
    const MNEMONIC: &'static str = UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAX_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMAX_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e206400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "umax";
}
impl InsnOpcode for UMAX_Vd_Vn_Vm {
    const OPCODE: u32 = UMAX_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMAX_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMAX_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4415a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umaxp";
}
impl InsnOpcode for UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20a400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "umaxp";
}
impl InsnOpcode for UMAXP_Vd_Vn_Vm {
    const OPCODE: u32 = UMAXP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMAXP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMAXP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40d2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umaxqv";
}
impl InsnOpcode for UMAXQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UMAXQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UMAXQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UMAXQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4092000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umaxv";
}
impl InsnOpcode for UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMAXV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UMAXV_Fd_Vn {
    const OPCODE: u32 = 0x2e30a800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "umaxv";
}
impl InsnOpcode for UMAXV_Fd_Vn {
    const OPCODE: u32 = UMAXV_Fd_Vn::OPCODE;
    const MASK: u32 = UMAXV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = UMAXV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a021;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b021;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120a821;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120b821;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_Rd_Rn_CSSC_UIMM8 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(8)]
    pub cssc_imm8: u32,
    #[bits(14)]
    pub _op_18: u32,
}
impl UMIN_Rd_Rn_CSSC_UIMM8 {
    const OPCODE: u32 = 0x11cc0000;
    const MASK: u32 = 0x7ffc0000;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_Rd_Rn_CSSC_UIMM8 {
    const OPCODE: u32 = UMIN_Rd_Rn_CSSC_UIMM8::OPCODE;
    const MASK: u32 = UMIN_Rd_Rn_CSSC_UIMM8::MASK;
    const MNEMONIC: &'static str = UMIN_Rd_Rn_CSSC_UIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMIN_Rd_Rn_Rm {
    const OPCODE: u32 = 0x1ac06c00;
    const MASK: u32 = 0x7fe0fc00;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_Rd_Rn_Rm {
    const OPCODE: u32 = UMIN_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = UMIN_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = UMIN_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x40b0000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(8)]
    pub sve_imm8: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8 {
    const OPCODE: u32 = 0x252bc000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8 {
    const OPCODE: u32 = UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8::OPCODE;
    const MASK: u32 = UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8::MASK;
    const MNEMONIC: &'static str = UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMIN_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMIN_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e206c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "umin";
}
impl InsnOpcode for UMIN_Vd_Vn_Vm {
    const OPCODE: u32 = UMIN_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMIN_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMIN_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x4417a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uminp";
}
impl InsnOpcode for UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINP_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMINP_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20ac00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uminp";
}
impl InsnOpcode for UMINP_Vd_Vn_Vm {
    const OPCODE: u32 = UMINP_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMINP_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMINP_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINQV_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40f2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uminqv";
}
impl InsnOpcode for UMINQV_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UMINQV_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UMINQV_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UMINQV_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_vd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x40b2000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uminv";
}
impl InsnOpcode for UMINV_SVE_Vd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UMINV_SVE_Vd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UMINV_SVE_Vd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UMINV_SVE_Vd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMINV_Fd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UMINV_Fd_Vn {
    const OPCODE: u32 = 0x2e31a800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "uminv";
}
impl InsnOpcode for UMINV_Fd_Vn {
    const OPCODE: u32 = UMINV_Fd_Vn::OPCODE;
    const MASK: u32 = UMINV_Fd_Vn::MASK;
    const MNEMONIC: &'static str = UMINV_Fd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01010;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d01010;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d09010;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1600810;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1700810;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e00810;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10810;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1600c10;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e208000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_Vd_Vn_Vm {
    const OPCODE: u32 = UMLAL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMLAL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMLAL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f002000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "umlal";
}
impl InsnOpcode for UMLAL_Vd_Vn_Em16 {
    const OPCODE: u32 = UMLAL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = UMLAL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = UMLAL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e208000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlal2";
}
impl InsnOpcode for UMLAL2_Vd_Vn_Vm {
    const OPCODE: u32 = UMLAL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMLAL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMLAL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLAL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x6f002000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "umlal2";
}
impl InsnOpcode for UMLAL2_Vd_Vn_Em16 {
    const OPCODE: u32 = UMLAL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = UMLAL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = UMLAL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a09000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlalb";
}
impl InsnOpcode for UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e09000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlalb";
}
impl InsnOpcode for UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44004800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlalb";
}
impl InsnOpcode for UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000010;
    const MASK: u32 = 0xfff0001c;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100010;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108010;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1800010;
    const MASK: u32 = 0xfff0101c;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1900010;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1908010;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200010;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1300010;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00010;
    const MASK: u32 = 0xffa19c3e;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10010;
    const MASK: u32 = 0xffa39c7e;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200410;
    const MASK: u32 = 0xffb09c1c;
    const MNEMONIC: &'static str = "umlall";
}
impl InsnOpcode for UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a09400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlalt";
}
impl InsnOpcode for UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e09400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlalt";
}
impl InsnOpcode for UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44004c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlalt";
}
impl InsnOpcode for UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1c01018;
    const MASK: u32 = 0xfff01018;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d01018;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(1)]
    pub imm1_2: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = 0xc1d09018;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1600818;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = 0xc1700818;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(4)]
    pub _op_2: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1e00818;
    const MASK: u32 = 0xffe19c3c;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(5)]
    pub _op_2: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1e10818;
    const MASK: u32 = 0xffe39c7c;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1600c18;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm {
    const OPCODE: u32 = UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20a000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_Vd_Vn_Vm {
    const OPCODE: u32 = UMLSL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMLSL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMLSL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f006000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "umlsl";
}
impl InsnOpcode for UMLSL_Vd_Vn_Em16 {
    const OPCODE: u32 = UMLSL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = UMLSL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = UMLSL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e20a000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlsl2";
}
impl InsnOpcode for UMLSL2_Vd_Vn_Vm {
    const OPCODE: u32 = UMLSL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMLSL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMLSL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x6f006000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "umlsl2";
}
impl InsnOpcode for UMLSL2_Vd_Vn_Em16 {
    const OPCODE: u32 = UMLSL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = UMLSL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = UMLSL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44005800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlslb";
}
impl InsnOpcode for UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0b000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlslb";
}
impl InsnOpcode for UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0b000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlslb";
}
impl InsnOpcode for UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000018;
    const MASK: u32 = 0xfff0001c;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100018;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108018;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = 0xc1800018;
    const MASK: u32 = 0xfff0101c;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1900018;
    const MASK: u32 = 0xfff09838;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = 0xc1908018;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200018;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1300018;
    const MASK: u32 = 0xffb09c1e;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00018;
    const MASK: u32 = 0xffa19c3e;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10018;
    const MASK: u32 = 0xffa39c7e;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200418;
    const MASK: u32 = 0xffb09c1c;
    const MNEMONIC: &'static str = "umlsll";
}
impl InsnOpcode for UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44005c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umlslt";
}
impl InsnOpcode for UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0b400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlslt";
}
impl InsnOpcode for UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0b400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umlslt";
}
impl InsnOpcode for UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45c09800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ummla";
}
impl InsnOpcode for UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMMLA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e80a400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ummla";
}
impl InsnOpcode for UMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = UMMLA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMMLA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMMLA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1800008;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "umopa";
}
impl InsnOpcode for UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0xa1a00000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "umopa";
}
impl InsnOpcode for UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 =
        UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str =
        UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1e00000;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "umopa";
}
impl InsnOpcode for UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1800018;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "umops";
}
impl InsnOpcode for UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0xa1a00010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "umops";
}
impl InsnOpcode for UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 =
        UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str =
        UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1e00010;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "umops";
}
impl InsnOpcode for UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMOV_Rd_En {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UMOV_Rd_En {
    const OPCODE: u32 = 0xe003c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "umov";
}
impl InsnOpcode for UMOV_Rd_En {
    const OPCODE: u32 = UMOV_Rd_En::OPCODE;
    const MASK: u32 = UMOV_Rd_En::MASK;
    const MNEMONIC: &'static str = UMOV_Rd_En::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMSUBL_Rd_Rn_Rm_Ra {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(5)]
    pub ra: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMSUBL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = 0x9ba08000;
    const MASK: u32 = 0xffe08000;
    const MNEMONIC: &'static str = "umsubl";
}
impl InsnOpcode for UMSUBL_Rd_Rn_Rm_Ra {
    const OPCODE: u32 = UMSUBL_Rd_Rn_Rm_Ra::OPCODE;
    const MASK: u32 = UMSUBL_Rd_Rn_Rm_Ra::MASK;
    const MNEMONIC: &'static str = UMSUBL_Rd_Rn_Rm_Ra::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULH_Rd_Rn_Rm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULH_Rd_Rn_Rm {
    const OPCODE: u32 = 0x9bc07c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "umulh";
}
impl InsnOpcode for UMULH_Rd_Rn_Rm {
    const OPCODE: u32 = UMULH_Rd_Rn_Rm::OPCODE;
    const MASK: u32 = UMULH_Rd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = UMULH_Rd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zm_5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = 0x4130000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "umulh";
}
impl InsnOpcode for UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 {
    const OPCODE: u32 = UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::OPCODE;
    const MASK: u32 = UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MASK;
    const MNEMONIC: &'static str = UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4206c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umulh";
}
impl InsnOpcode for UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e20c000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umull";
}
impl InsnOpcode for UMULL_Vd_Vn_Vm {
    const OPCODE: u32 = UMULL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMULL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMULL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x2f00a000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "umull";
}
impl InsnOpcode for UMULL_Vd_Vn_Em16 {
    const OPCODE: u32 = UMULL_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = UMULL_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = UMULL_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e20c000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umull2";
}
impl InsnOpcode for UMULL2_Vd_Vn_Vm {
    const OPCODE: u32 = UMULL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UMULL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UMULL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULL2_Vd_Vn_Em16 {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = 0x6f00a000;
    const MASK: u32 = 0xff00f400;
    const MNEMONIC: &'static str = "umull2";
}
impl InsnOpcode for UMULL2_Vd_Vn_Em16 {
    const OPCODE: u32 = UMULL2_Vd_Vn_Em16::OPCODE;
    const MASK: u32 = UMULL2_Vd_Vn_Em16::MASK;
    const MNEMONIC: &'static str = UMULL2_Vd_Vn_Em16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0d000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umullb";
}
impl InsnOpcode for UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0d000;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umullb";
}
impl InsnOpcode for UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45007800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umullb";
}
impl InsnOpcode for UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_i3h2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = 0x44a0d400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umullt";
}
impl InsnOpcode for UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX {
    const OPCODE: u32 = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::OPCODE;
    const MASK: u32 = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(1)]
    pub _op_10: u32,
    #[bits(1)]
    pub sve_i3l: u32,
    #[bits(4)]
    pub _op_12: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(1)]
    pub sve_i2h: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = 0x44e0d400;
    const MASK: u32 = 0xffe0f400;
    const MNEMONIC: &'static str = "umullt";
}
impl InsnOpcode for UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX {
    const OPCODE: u32 = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::OPCODE;
    const MASK: u32 = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MASK;
    const MNEMONIC: &'static str = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45007c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "umullt";
}
impl InsnOpcode for UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4201400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uqadd";
}
impl InsnOpcode for UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44198000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqadd";
}
impl InsnOpcode for UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl UQADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2525c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "uqadd";
}
impl InsnOpcode for UQADD_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = UQADD_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = UQADD_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = UQADD_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e200c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uqadd";
}
impl InsnOpcode for UQADD_Vd_Vn_Vm {
    const OPCODE: u32 = UQADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UQADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UQADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQADD_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQADD_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e200c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uqadd";
}
impl InsnOpcode for UQADD_Sd_Sn_Sm {
    const OPCODE: u32 = UQADD_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = UQADD_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = UQADD_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVT_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0xc123e020;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "uqcvt";
}
impl InsnOpcode for UQCVT_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = UQCVT_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = UQCVT_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = UQCVT_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVT_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQCVT_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc133e020;
    const MASK: u32 = 0xff7ffc60;
    const MNEMONIC: &'static str = "uqcvt";
}
impl InsnOpcode for UQCVT_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = UQCVT_SVE_Zd_SME_Znx4::OPCODE;
    const MASK: u32 = UQCVT_SVE_Zd_SME_Znx4::MASK;
    const MNEMONIC: &'static str = UQCVT_SVE_Zd_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVTN_SVE_Zd_SME_Znx4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQCVTN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = 0xc133e060;
    const MASK: u32 = 0xff7ffc60;
    const MNEMONIC: &'static str = "uqcvtn";
}
impl InsnOpcode for UQCVTN_SVE_Zd_SME_Znx4 {
    const OPCODE: u32 = UQCVTN_SVE_Zd_SME_Znx4::OPCODE;
    const MASK: u32 = UQCVTN_SVE_Zd_SME_Znx4::MASK;
    const MNEMONIC: &'static str = UQCVTN_SVE_Zd_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQCVTN_SVE_Zd_SME_Znx2 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = 0x45314800;
    const MASK: u32 = 0xfffffc20;
    const MNEMONIC: &'static str = "uqcvtn";
}
impl InsnOpcode for UQCVTN_SVE_Zd_SME_Znx2 {
    const OPCODE: u32 = UQCVTN_SVE_Zd_SME_Znx2::OPCODE;
    const MASK: u32 = UQCVTN_SVE_Zd_SME_Znx2::MASK;
    const MNEMONIC: &'static str = UQCVTN_SVE_Zd_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecb";
}
impl InsnOpcode for UQDECB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECB_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECB_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecb";
}
impl InsnOpcode for UQDECB_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECB_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECB_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECB_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0cc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecd";
}
impl InsnOpcode for UQDECD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECD_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECD_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECD_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecd";
}
impl InsnOpcode for UQDECD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECD_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECD_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecd";
}
impl InsnOpcode for UQDECD_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECD_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECD_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECD_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460cc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdech";
}
impl InsnOpcode for UQDECH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECH_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECH_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECH_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdech";
}
impl InsnOpcode for UQDECH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECH_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECH_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdech";
}
impl InsnOpcode for UQDECH_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECH_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECH_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECH_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl UQDECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252b8000;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "uqdecp";
}
impl InsnOpcode for UQDECP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = UQDECP_SVE_Zd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = UQDECP_SVE_Zd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = UQDECP_SVE_Zd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl UQDECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x252b8800;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "uqdecp";
}
impl InsnOpcode for UQDECP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = UQDECP_Rd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = UQDECP_Rd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = UQDECP_Rd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECP_Rd_X_SVE_Pg4_5_S_B {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl UQDECP_Rd_X_SVE_Pg4_5_S_B {
    const OPCODE: u32 = 0x252b8c00;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "uqdecp";
}
impl InsnOpcode for UQDECP_Rd_X_SVE_Pg4_5_S_B {
    const OPCODE: u32 = UQDECP_Rd_X_SVE_Pg4_5_S_B::OPCODE;
    const MASK: u32 = UQDECP_Rd_X_SVE_Pg4_5_S_B::MASK;
    const MNEMONIC: &'static str = UQDECP_Rd_X_SVE_Pg4_5_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0cc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecw";
}
impl InsnOpcode for UQDECW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECW_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECW_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECW_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecw";
}
impl InsnOpcode for UQDECW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQDECW_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQDECW_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0fc00;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqdecw";
}
impl InsnOpcode for UQDECW_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQDECW_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQDECW_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQDECW_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCB_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x420f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincb";
}
impl InsnOpcode for UQINCB_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCB_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCB_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCB_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCB_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCB_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x430f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincb";
}
impl InsnOpcode for UQINCB_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCB_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCB_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCB_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCD_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0c400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincd";
}
impl InsnOpcode for UQINCD_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCD_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCD_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCD_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCD_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4e0f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincd";
}
impl InsnOpcode for UQINCD_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCD_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCD_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCD_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCD_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCD_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4f0f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincd";
}
impl InsnOpcode for UQINCD_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCD_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCD_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCD_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460c400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqinch";
}
impl InsnOpcode for UQINCH_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCH_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCH_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCH_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCH_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x460f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqinch";
}
impl InsnOpcode for UQINCH_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCH_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCH_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCH_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCH_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCH_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x470f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqinch";
}
impl InsnOpcode for UQINCH_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCH_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCH_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCH_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCP_SVE_Zd_SVE_Pg4_5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl UQINCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x25298000;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "uqincp";
}
impl InsnOpcode for UQINCP_SVE_Zd_SVE_Pg4_5 {
    const OPCODE: u32 = UQINCP_SVE_Zd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = UQINCP_SVE_Zd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = UQINCP_SVE_Zd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCP_Rd_SVE_Pg4_5 {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl UQINCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = 0x25298800;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "uqincp";
}
impl InsnOpcode for UQINCP_Rd_SVE_Pg4_5 {
    const OPCODE: u32 = UQINCP_Rd_SVE_Pg4_5::OPCODE;
    const MASK: u32 = UQINCP_Rd_SVE_Pg4_5::MASK;
    const MNEMONIC: &'static str = UQINCP_Rd_SVE_Pg4_5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCP_Rd_X_SVE_Pg4_5_S_B {
    #[bits(5)]
    pub rd: u32,
    #[bits(4)]
    pub sve_pg4_5: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl UQINCP_Rd_X_SVE_Pg4_5_S_B {
    const OPCODE: u32 = 0x25298c00;
    const MASK: u32 = 0xff3ffe00;
    const MNEMONIC: &'static str = "uqincp";
}
impl InsnOpcode for UQINCP_Rd_X_SVE_Pg4_5_S_B {
    const OPCODE: u32 = UQINCP_Rd_X_SVE_Pg4_5_S_B::OPCODE;
    const MASK: u32 = UQINCP_Rd_X_SVE_Pg4_5_S_B::MASK;
    const MNEMONIC: &'static str = UQINCP_Rd_X_SVE_Pg4_5_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0c400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincw";
}
impl InsnOpcode for UQINCW_SVE_Zd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCW_SVE_Zd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCW_SVE_Zd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCW_SVE_Zd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCW_Rd_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4a0f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincw";
}
impl InsnOpcode for UQINCW_Rd_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCW_Rd_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCW_Rd_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCW_Rd_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQINCW_Rd_X_SVE_PATTERN_SCALED {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub sve_pattern: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQINCW_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = 0x4b0f400;
    const MASK: u32 = 0xfff0fc00;
    const MNEMONIC: &'static str = "uqincw";
}
impl InsnOpcode for UQINCW_Rd_X_SVE_PATTERN_SCALED {
    const OPCODE: u32 = UQINCW_Rd_X_SVE_PATTERN_SCALED::OPCODE;
    const MASK: u32 = UQINCW_Rd_X_SVE_PATTERN_SCALED::MASK;
    const MNEMONIC: &'static str = UQINCW_Rd_X_SVE_PATTERN_SCALED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440b8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqrshl";
}
impl InsnOpcode for UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e205c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uqrshl";
}
impl InsnOpcode for UQRSHL_Vd_Vn_Vm {
    const OPCODE: u32 = UQRSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UQRSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UQRSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e205c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uqrshl";
}
impl InsnOpcode for UQRSHL_Sd_Sn_Sm {
    const OPCODE: u32 = UQRSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = UQRSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = UQRSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440f8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqrshlr";
}
impl InsnOpcode for UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120d820;
    const MASK: u32 = 0xff20fc60;
    const MNEMONIC: &'static str = "uqrshr";
}
impl InsnOpcode for UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5::OPCODE;
    const MASK: u32 = UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5::MASK;
    const MNEMONIC: &'static str = UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0xc1e0d420;
    const MASK: u32 = 0xfff0fc20;
    const MNEMONIC: &'static str = "uqrshr";
}
impl InsnOpcode for UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4::OPCODE;
    const MASK: u32 = UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4::MASK;
    const MNEMONIC: &'static str = UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_imm5b: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = 0xc120dc20;
    const MASK: u32 = 0xff20fc60;
    const MNEMONIC: &'static str = "uqrshrn";
}
impl InsnOpcode for UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 {
    const OPCODE: u32 = UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5::OPCODE;
    const MASK: u32 = UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5::MASK;
    const MNEMONIC: &'static str = UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(4)]
    pub sve_imm4: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = 0x45b03800;
    const MASK: u32 = 0xfff0fc20;
    const MNEMONIC: &'static str = "uqrshrn";
}
impl InsnOpcode for UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 {
    const OPCODE: u32 = UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4::OPCODE;
    const MASK: u32 = UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4::MASK;
    const MNEMONIC: &'static str = UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQRSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f009c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqrshrn";
}
impl InsnOpcode for UQRSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = UQRSHRN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = UQRSHRN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UQRSHRN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQRSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f009c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqrshrn";
}
impl InsnOpcode for UQRSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = UQRSHRN_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = UQRSHRN_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UQRSHRN_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQRSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x6f009c00;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqrshrn2";
}
impl InsnOpcode for UQRSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = UQRSHRN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = UQRSHRN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UQRSHRN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45203800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "uqrshrnb";
}
impl InsnOpcode for UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45203c00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "uqrshrnt";
}
impl InsnOpcode for UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44098000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqshl";
}
impl InsnOpcode for UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = 0x4078000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqshl";
}
impl InsnOpcode for UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED {
    const OPCODE: u32 = UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::OPCODE;
    const MASK: u32 = UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MASK;
    const MNEMONIC: &'static str = UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e204c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uqshl";
}
impl InsnOpcode for UQSHL_Vd_Vn_Vm {
    const OPCODE: u32 = UQSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UQSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UQSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e204c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uqshl";
}
impl InsnOpcode for UQSHL_Sd_Sn_Sm {
    const OPCODE: u32 = UQSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = UQSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = UQSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQSHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x2f007400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "uqshl";
}
impl InsnOpcode for UQSHL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = UQSHL_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = UQSHL_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = UQSHL_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHL_Sd_Sn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQSHL_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = 0x7f007400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqshl";
}
impl InsnOpcode for UQSHL_Sd_Sn_IMM_VLSL {
    const OPCODE: u32 = UQSHL_Sd_Sn_IMM_VLSL::OPCODE;
    const MASK: u32 = UQSHL_Sd_Sn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = UQSHL_Sd_Sn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x440d8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqshlr";
}
impl InsnOpcode for UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRN_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f009400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqshrn";
}
impl InsnOpcode for UQSHRN_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = UQSHRN_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = UQSHRN_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UQSHRN_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRN_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f009400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqshrn";
}
impl InsnOpcode for UQSHRN_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = UQSHRN_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = UQSHRN_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UQSHRN_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRN2_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x6f009400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "uqshrn2";
}
impl InsnOpcode for UQSHRN2_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = UQSHRN2_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = UQSHRN2_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = UQSHRN2_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45203000;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "uqshrnb";
}
impl InsnOpcode for UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = 0x45203400;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "uqshrnt";
}
impl InsnOpcode for UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 {
    const OPCODE: u32 = UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::OPCODE;
    const MASK: u32 = UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x4201c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uqsub";
}
impl InsnOpcode for UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441b8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqsub";
}
impl InsnOpcode for UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(9)]
    pub sve_imm9: u32,
    #[bits(18)]
    pub _op_14: u32,
}
impl UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = 0x2527c000;
    const MASK: u32 = 0xff3fc000;
    const MNEMONIC: &'static str = "uqsub";
}
impl InsnOpcode for UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM {
    const OPCODE: u32 = UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM::OPCODE;
    const MASK: u32 = UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM::MASK;
    const MNEMONIC: &'static str = UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQSUB_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e202c00;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uqsub";
}
impl InsnOpcode for UQSUB_Vd_Vn_Vm {
    const OPCODE: u32 = UQSUB_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UQSUB_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UQSUB_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUB_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UQSUB_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7e202c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uqsub";
}
impl InsnOpcode for UQSUB_Sd_Sn_Sm {
    const OPCODE: u32 = UQSUB_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = UQSUB_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = UQSUB_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441f8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uqsubr";
}
impl InsnOpcode for UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQXTN_Vd_Vn {
    const OPCODE: u32 = 0x2e214800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "uqxtn";
}
impl InsnOpcode for UQXTN_Vd_Vn {
    const OPCODE: u32 = UQXTN_Vd_Vn::OPCODE;
    const MASK: u32 = UQXTN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = UQXTN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTN_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQXTN_Sd_Sn {
    const OPCODE: u32 = 0x7e214800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "uqxtn";
}
impl InsnOpcode for UQXTN_Sd_Sn {
    const OPCODE: u32 = UQXTN_Sd_Sn::OPCODE;
    const MASK: u32 = UQXTN_Sd_Sn::MASK;
    const MNEMONIC: &'static str = UQXTN_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQXTN2_Vd_Vn {
    const OPCODE: u32 = 0x6e214800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "uqxtn2";
}
impl InsnOpcode for UQXTN2_Vd_Vn {
    const OPCODE: u32 = UQXTN2_Vd_Vn::OPCODE;
    const MASK: u32 = UQXTN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = UQXTN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTNB_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQXTNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45204800;
    const MASK: u32 = 0xffa7fc00;
    const MNEMONIC: &'static str = "uqxtnb";
}
impl InsnOpcode for UQXTNB_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQXTNB_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQXTNB_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQXTNB_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UQXTNT_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UQXTNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x45204c00;
    const MASK: u32 = 0xffa7fc00;
    const MNEMONIC: &'static str = "uqxtnt";
}
impl InsnOpcode for UQXTNT_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UQXTNT_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UQXTNT_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UQXTNT_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URECPE_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl URECPE_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4480a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "urecpe";
}
impl InsnOpcode for URECPE_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = URECPE_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = URECPE_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = URECPE_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URECPE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl URECPE_Vd_Vn {
    const OPCODE: u32 = 0xea1c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "urecpe";
}
impl InsnOpcode for URECPE_Vd_Vn {
    const OPCODE: u32 = URECPE_Vd_Vn::OPCODE;
    const MASK: u32 = URECPE_Vd_Vn::MASK;
    const MNEMONIC: &'static str = URECPE_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44158000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "urhadd";
}
impl InsnOpcode for URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URHADD_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl URHADD_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e201400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "urhadd";
}
impl InsnOpcode for URHADD_Vd_Vn_Vm {
    const OPCODE: u32 = URHADD_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = URHADD_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = URHADD_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = 0xc120a221;
    const MASK: u32 = 0xff30ffe1;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm {
    const OPCODE: u32 = URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm::OPCODE;
    const MASK: u32 = URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm::MASK;
    const MNEMONIC: &'static str = URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(12)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc120b221;
    const MASK: u32 = 0xff21ffe1;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 {
    const OPCODE: u32 = URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::OPCODE;
    const MASK: u32 = URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(11)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = 0xc120aa21;
    const MASK: u32 = 0xff30ffe3;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm {
    const OPCODE: u32 = URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm::OPCODE;
    const MASK: u32 = URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm::MASK;
    const MNEMONIC: &'static str = URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(13)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc120ba21;
    const MASK: u32 = 0xff23ffe3;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 {
    const OPCODE: u32 = URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::OPCODE;
    const MASK: u32 = URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44038000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl URSHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e205400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_Vd_Vn_Vm {
    const OPCODE: u32 = URSHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = URSHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = URSHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl URSHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee05400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "urshl";
}
impl InsnOpcode for URSHL_Sd_Sn_Sm {
    const OPCODE: u32 = URSHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = URSHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = URSHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x44078000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "urshlr";
}
impl InsnOpcode for URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_imm5: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(9)]
    pub _op_13: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = 0x40d8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "urshr";
}
impl InsnOpcode for URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED {
    const OPCODE: u32 = URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::OPCODE;
    const MASK: u32 = URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MASK;
    const MNEMONIC: &'static str = URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHR_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl URSHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f002400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "urshr";
}
impl InsnOpcode for URSHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = URSHR_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = URSHR_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = URSHR_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSHR_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl URSHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f002400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "urshr";
}
impl InsnOpcode for URSHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = URSHR_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = URSHR_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = URSHR_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4481a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "ursqrte";
}
impl InsnOpcode for URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSQRTE_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl URSQRTE_Vd_Vn {
    const OPCODE: u32 = 0x2ea1c800;
    const MASK: u32 = 0xbfbffc00;
    const MNEMONIC: &'static str = "ursqrte";
}
impl InsnOpcode for URSQRTE_Vd_Vn {
    const OPCODE: u32 = URSQRTE_Vd_Vn::OPCODE;
    const MASK: u32 = URSQRTE_Vd_Vn::MASK;
    const MNEMONIC: &'static str = URSQRTE_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500ec00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "ursra";
}
impl InsnOpcode for URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSRA_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl URSRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f003400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "ursra";
}
impl InsnOpcode for URSRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = URSRA_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = URSRA_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = URSRA_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct URSRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl URSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f003400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "ursra";
}
impl InsnOpcode for URSRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = URSRA_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = URSRA_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = URSRA_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1501028;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1509028;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1201408;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1301408;
    const MASK: u32 = 0xfff09c18;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str = USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a01408;
    const MASK: u32 = 0xffe19c38;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a11408;
    const MASK: u32 = 0xffe39c78;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = 0x44a01800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX {
    const OPCODE: u32 = USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::OPCODE;
    const MASK: u32 = USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MASK;
    const MNEMONIC: &'static str = USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x44807800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USDOT_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe809c00;
    const MASK: u32 = 0xbfe0fc00;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_Vd_Vn_Vm {
    const OPCODE: u32 = USDOT_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USDOT_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USDOT_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USDOT_Vd_Vn_Em {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USDOT_Vd_Vn_Em {
    const OPCODE: u32 = 0xf80f000;
    const MASK: u32 = 0xbfc0f400;
    const MNEMONIC: &'static str = "usdot";
}
impl InsnOpcode for USDOT_Vd_Vn_Em {
    const OPCODE: u32 = USDOT_Vd_Vn_Em::OPCODE;
    const MASK: u32 = USDOT_Vd_Vn_Em::MASK;
    const MNEMONIC: &'static str = USDOT_Vd_Vn_Em::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USHL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e204400;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "ushl";
}
impl InsnOpcode for USHL_Vd_Vn_Vm {
    const OPCODE: u32 = USHL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USHL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USHL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHL_Sd_Sn_Sm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USHL_Sd_Sn_Sm {
    const OPCODE: u32 = 0x7ee04400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "ushl";
}
impl InsnOpcode for USHL_Sd_Sn_Sm {
    const OPCODE: u32 = USHL_Sd_Sn_Sm::OPCODE;
    const MASK: u32 = USHL_Sd_Sn_Sm::MASK;
    const MNEMONIC: &'static str = USHL_Sd_Sn_Sm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLL_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USHLL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x2f00a400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "ushll";
}
impl InsnOpcode for USHLL_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = USHLL_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = USHLL_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = USHLL_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLL2_Vd_Vn_IMM_VLSL {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USHLL2_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = 0x6f00a400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "ushll2";
}
impl InsnOpcode for USHLL2_Vd_Vn_IMM_VLSL {
    const OPCODE: u32 = USHLL2_Vd_Vn_IMM_VLSL::OPCODE;
    const MASK: u32 = USHLL2_Vd_Vn_IMM_VLSL::MASK;
    const MNEMONIC: &'static str = USHLL2_Vd_Vn_IMM_VLSL::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = 0x4500a800;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "ushllb";
}
impl InsnOpcode for USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::OPCODE;
    const MASK: u32 = USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(3)]
    pub sve_imm3: u32,
    #[bits(2)]
    pub sve_tszl_19: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(1)]
    pub sve_sz: u32,
    #[bits(9)]
    pub _op_23: u32,
}
impl USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = 0x4500ac00;
    const MASK: u32 = 0xffa0fc00;
    const MNEMONIC: &'static str = "ushllt";
}
impl InsnOpcode for USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 {
    const OPCODE: u32 = USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::OPCODE;
    const MASK: u32 = USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MASK;
    const MNEMONIC: &'static str = USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHR_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f000400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "ushr";
}
impl InsnOpcode for USHR_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = USHR_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = USHR_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = USHR_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USHR_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f000400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "ushr";
}
impl InsnOpcode for USHR_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = USHR_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = USHR_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = USHR_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub imm3_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub imm1_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = 0xc1000004;
    const MASK: u32 = 0xfff0001c;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1100020;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(2)]
    pub imm2_1: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = 0xc1108020;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = 0xc1200004;
    const MASK: u32 = 0xfff09c1e;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(4)]
    pub _op_1: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = 0xc1300004;
    const MASK: u32 = 0xfff09c1e;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MASK;
    const MNEMONIC: &'static str =
        USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(5)]
    pub _op_1: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(2)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm2: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = 0xc1a00004;
    const MASK: u32 = 0xffe19c3e;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    #[bits(1)]
    pub imm1_0: u32,
    #[bits(6)]
    pub _op_1: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(3)]
    pub _op_15: u32,
    #[bits(3)]
    pub sme_zm4: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = 0xc1a10004;
    const MASK: u32 = 0xffe39c7e;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    #[bits(2)]
    pub imm2_0: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = 0xc1200404;
    const MASK: u32 = 0xfff09c1c;
    const MNEMONIC: &'static str = "usmlall";
}
impl InsnOpcode for USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm {
    const OPCODE: u32 = USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::OPCODE;
    const MASK: u32 = USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MASK;
    const MNEMONIC: &'static str = USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45809800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "usmmla";
}
impl InsnOpcode for USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMMLA_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = 0x4e80ac00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "usmmla";
}
impl InsnOpcode for USMMLA_Vd_Vn_Vm {
    const OPCODE: u32 = USMMLA_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USMMLA_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USMMLA_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1800000;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "usmopa";
}
impl InsnOpcode for USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1c00000;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "usmopa";
}
impl InsnOpcode for USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(2)]
    pub sme_zada_2b: u32,
    #[bits(3)]
    pub _op_2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1800010;
    const MASK: u32 = 0xffe0001c;
    const MNEMONIC: &'static str = "usmops";
}
impl InsnOpcode for USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    #[bits(3)]
    pub sme_zada_3b: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(3)]
    pub sme_pm: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xa1c00010;
    const MASK: u32 = 0xffe00018;
    const MNEMONIC: &'static str = "usmops";
}
impl InsnOpcode for USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x441d8000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "usqadd";
}
impl InsnOpcode for USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USQADD_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USQADD_Vd_Vn {
    const OPCODE: u32 = 0x2e203800;
    const MASK: u32 = 0xbf3ffc00;
    const MNEMONIC: &'static str = "usqadd";
}
impl InsnOpcode for USQADD_Vd_Vn {
    const OPCODE: u32 = USQADD_Vd_Vn::OPCODE;
    const MASK: u32 = USQADD_Vd_Vn::MASK;
    const MNEMONIC: &'static str = USQADD_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USQADD_Sd_Sn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USQADD_Sd_Sn {
    const OPCODE: u32 = 0x7e203800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "usqadd";
}
impl InsnOpcode for USQADD_Sd_Sn {
    const OPCODE: u32 = USQADD_Sd_Sn::OPCODE;
    const MASK: u32 = USQADD_Sd_Sn::MASK;
    const MNEMONIC: &'static str = USQADD_Sd_Sn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4500e400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usra";
}
impl InsnOpcode for USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USRA_Vd_Vn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = 0x2f001400;
    const MASK: u32 = 0xbf80fc00;
    const MNEMONIC: &'static str = "usra";
}
impl InsnOpcode for USRA_Vd_Vn_IMM_VLSR {
    const OPCODE: u32 = USRA_Vd_Vn_IMM_VLSR::OPCODE;
    const MASK: u32 = USRA_Vd_Vn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = USRA_Vd_Vn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USRA_Sd_Sn_IMM_VLSR {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl USRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = 0x7f001400;
    const MASK: u32 = 0xff80fc00;
    const MNEMONIC: &'static str = "usra";
}
impl InsnOpcode for USRA_Sd_Sn_IMM_VLSR {
    const OPCODE: u32 = USRA_Sd_Sn_IMM_VLSR::OPCODE;
    const MASK: u32 = USRA_Sd_Sn_IMM_VLSR::MASK;
    const MNEMONIC: &'static str = USRA_Sd_Sn_IMM_VLSR::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBL_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBL_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e202000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usubl";
}
impl InsnOpcode for USUBL_Vd_Vn_Vm {
    const OPCODE: u32 = USUBL_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USUBL_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USUBL_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBL2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBL2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e202000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usubl2";
}
impl InsnOpcode for USUBL2_Vd_Vn_Vm {
    const OPCODE: u32 = USUBL2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USUBL2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USUBL2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45001800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usublb";
}
impl InsnOpcode for USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45001c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usublt";
}
impl InsnOpcode for USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBW_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBW_Vd_Vn_Vm {
    const OPCODE: u32 = 0x2e203000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usubw";
}
impl InsnOpcode for USUBW_Vd_Vn_Vm {
    const OPCODE: u32 = USUBW_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USUBW_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USUBW_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBW2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBW2_Vd_Vn_Vm {
    const OPCODE: u32 = 0x6e203000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usubw2";
}
impl InsnOpcode for USUBW2_Vd_Vn_Vm {
    const OPCODE: u32 = USUBW2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = USUBW2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = USUBW2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45005800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usubwb";
}
impl InsnOpcode for USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x45005c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "usubwt";
}
impl InsnOpcode for USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508028;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "usvdot";
}
impl InsnOpcode for USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPK_SME_Zdnx2_SVE_Zn {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UUNPK_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = 0xc125e001;
    const MASK: u32 = 0xff3ffc01;
    const MNEMONIC: &'static str = "uunpk";
}
impl InsnOpcode for UUNPK_SME_Zdnx2_SVE_Zn {
    const OPCODE: u32 = UUNPK_SME_Zdnx2_SVE_Zn::OPCODE;
    const MASK: u32 = UUNPK_SME_Zdnx2_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UUNPK_SME_Zdnx2_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPK_SME_Zdnx4_SME_Znx2 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(1)]
    pub _op_5: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UUNPK_SME_Zdnx4_SME_Znx2 {
    const OPCODE: u32 = 0xc135e001;
    const MASK: u32 = 0xff3ffc23;
    const MNEMONIC: &'static str = "uunpk";
}
impl InsnOpcode for UUNPK_SME_Zdnx4_SME_Znx2 {
    const OPCODE: u32 = UUNPK_SME_Zdnx4_SME_Znx2::OPCODE;
    const MASK: u32 = UUNPK_SME_Zdnx4_SME_Znx2::MASK;
    const MNEMONIC: &'static str = UUNPK_SME_Zdnx4_SME_Znx2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPKHI_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UUNPKHI_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5333800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "uunpkhi";
}
impl InsnOpcode for UUNPKHI_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UUNPKHI_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UUNPKHI_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UUNPKHI_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UUNPKLO_SVE_Zd_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UUNPKLO_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = 0x5323800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "uunpklo";
}
impl InsnOpcode for UUNPKLO_SVE_Zd_SVE_Zn {
    const OPCODE: u32 = UUNPKLO_SVE_Zd_SVE_Zn::OPCODE;
    const MASK: u32 = UUNPKLO_SVE_Zd_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UUNPKLO_SVE_Zd_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(3)]
    pub _op_3: u32,
    #[bits(4)]
    pub sme_zn2: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1500030;
    const MASK: u32 = 0xfff09038;
    const MNEMONIC: &'static str = "uvdot";
}
impl InsnOpcode for UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 {
    const OPCODE: u32 = UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(2)]
    pub imm2_10: u32,
    #[bits(1)]
    pub _op_12: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = 0xc1508030;
    const MASK: u32 = 0xfff09078;
    const MNEMONIC: &'static str = "uvdot";
}
impl InsnOpcode for UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 {
    const OPCODE: u32 = UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::OPCODE;
    const MASK: u32 = UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MASK;
    const MNEMONIC: &'static str = UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    #[bits(3)]
    pub imm3_0: u32,
    #[bits(4)]
    pub _op_3: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(1)]
    pub imm1_10: u32,
    #[bits(2)]
    pub _op_11: u32,
    #[bits(2)]
    pub sme_rv: u32,
    #[bits(1)]
    pub _op_15: u32,
    #[bits(4)]
    pub sme_zm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = 0xc1d08818;
    const MASK: u32 = 0xfff09878;
    const MNEMONIC: &'static str = "uvdot";
}
impl InsnOpcode for UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 {
    const OPCODE: u32 = UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::OPCODE;
    const MASK: u32 = UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MASK;
    const MNEMONIC: &'static str = UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x411a000;
    const MASK: u32 = 0xff3fe000;
    const MNEMONIC: &'static str = "uxtb";
}
impl InsnOpcode for UXTB_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UXTB_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UXTB_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UXTB_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UXTH_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UXTH_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x493a000;
    const MASK: u32 = 0xffbfe000;
    const MNEMONIC: &'static str = "uxth";
}
impl InsnOpcode for UXTH_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UXTH_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UXTH_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UXTH_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UXTW_SVE_Zd_SVE_Pg3_SVE_Zn {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(3)]
    pub sve_pg3: u32,
    #[bits(19)]
    pub _op_13: u32,
}
impl UXTW_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = 0x4d5a000;
    const MASK: u32 = 0xffffe000;
    const MNEMONIC: &'static str = "uxtw";
}
impl InsnOpcode for UXTW_SVE_Zd_SVE_Pg3_SVE_Zn {
    const OPCODE: u32 = UXTW_SVE_Zd_SVE_Pg3_SVE_Zn::OPCODE;
    const MASK: u32 = UXTW_SVE_Zd_SVE_Pg3_SVE_Zn::MASK;
    const MNEMONIC: &'static str = UXTW_SVE_Zd_SVE_Pg3_SVE_Zn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120d001;
    const MASK: u32 = 0xff20fc01;
    const MNEMONIC: &'static str = "uzp";
}
impl InsnOpcode for UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q {
    const OPCODE: u32 = 0xc120d401;
    const MASK: u32 = 0xffe0fc01;
    const MNEMONIC: &'static str = "uzp";
}
impl InsnOpcode for UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q {
    const OPCODE: u32 = UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q::OPCODE;
    const MASK: u32 = UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q::MASK;
    const MNEMONIC: &'static str = UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UZP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc136e002;
    const MASK: u32 = 0xff3ffc63;
    const MNEMONIC: &'static str = "uzp";
}
impl InsnOpcode for UZP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = UZP_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = UZP_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = UZP_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    const OPCODE: u32 = 0xc137e002;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "uzp";
}
impl InsnOpcode for UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    const OPCODE: u32 = UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q::OPCODE;
    const MASK: u32 = UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q::MASK;
    const MNEMONIC: &'static str = UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a00800;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "uzp1";
}
impl InsnOpcode for UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UZP1_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5204800;
    const MASK: u32 = 0xff30fe10;
    const MNEMONIC: &'static str = "uzp1";
}
impl InsnOpcode for UZP1_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = UZP1_SVE_Pd_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = UZP1_SVE_Pd_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = UZP1_SVE_Pd_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5206800;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uzp1";
}
impl InsnOpcode for UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe001800;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uzp1";
}
impl InsnOpcode for UZP1_Vd_Vn_Vm {
    const OPCODE: u32 = UZP1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UZP1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UZP1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a00c00;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "uzp2";
}
impl InsnOpcode for UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl UZP2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5204c00;
    const MASK: u32 = 0xff30fe10;
    const MNEMONIC: &'static str = "uzp2";
}
impl InsnOpcode for UZP2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = UZP2_SVE_Pd_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = UZP2_SVE_Pd_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = UZP2_SVE_Pd_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5206c00;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "uzp2";
}
impl InsnOpcode for UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct UZP2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl UZP2_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe005800;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "uzp2";
}
impl InsnOpcode for UZP2_Vd_Vn_Vm {
    const OPCODE: u32 = UZP2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = UZP2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = UZP2_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WFET_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl WFET_Rd {
    const OPCODE: u32 = 0xd5031000;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "wfet";
}
impl InsnOpcode for WFET_Rd {
    const OPCODE: u32 = WFET_Rd::OPCODE;
    const MASK: u32 = WFET_Rd::MASK;
    const MNEMONIC: &'static str = WFET_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WFIT_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl WFIT_Rd {
    const OPCODE: u32 = 0xd5031020;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "wfit";
}
impl InsnOpcode for WFIT_Rd {
    const OPCODE: u32 = WFIT_Rd::OPCODE;
    const MASK: u32 = WFIT_Rd::MASK;
    const MNEMONIC: &'static str = WFIT_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGE_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200000;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilege";
}
impl InsnOpcode for WHILEGE_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILEGE_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEGE_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEGE_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201000;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilege";
}
impl InsnOpcode for WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204010;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilege";
}
impl InsnOpcode for WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGE_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGE_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205010;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilege";
}
impl InsnOpcode for WHILEGE_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILEGE_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEGE_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEGE_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGT_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200010;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilegt";
}
impl InsnOpcode for WHILEGT_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILEGT_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEGT_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEGT_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201010;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilegt";
}
impl InsnOpcode for WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204018;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilegt";
}
impl InsnOpcode for WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEGT_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEGT_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205011;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilegt";
}
impl InsnOpcode for WHILEGT_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILEGT_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEGT_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEGT_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHI_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200810;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilehi";
}
impl InsnOpcode for WHILEHI_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILEHI_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEHI_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEHI_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201810;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilehi";
}
impl InsnOpcode for WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204818;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilehi";
}
impl InsnOpcode for WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHI_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHI_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205811;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilehi";
}
impl InsnOpcode for WHILEHI_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILEHI_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEHI_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEHI_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHS_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200800;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilehs";
}
impl InsnOpcode for WHILEHS_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILEHS_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEHS_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEHS_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201800;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilehs";
}
impl InsnOpcode for WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204810;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilehs";
}
impl InsnOpcode for WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEHS_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEHS_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205810;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilehs";
}
impl InsnOpcode for WHILEHS_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILEHS_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEHS_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEHS_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELE_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200410;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilele";
}
impl InsnOpcode for WHILELE_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILELE_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELE_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELE_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELE_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201410;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilele";
}
impl InsnOpcode for WHILELE_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILELE_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILELE_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILELE_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204418;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilele";
}
impl InsnOpcode for WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELE_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELE_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205411;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilele";
}
impl InsnOpcode for WHILELE_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILELE_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELE_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELE_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELO_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200c00;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilelo";
}
impl InsnOpcode for WHILELO_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILELO_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELO_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELO_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELO_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201c00;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilelo";
}
impl InsnOpcode for WHILELO_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILELO_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILELO_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILELO_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204c10;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilelo";
}
impl InsnOpcode for WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELO_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELO_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205c10;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilelo";
}
impl InsnOpcode for WHILELO_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILELO_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELO_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELO_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELS_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200c10;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilels";
}
impl InsnOpcode for WHILELS_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILELS_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELS_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELS_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELS_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201c10;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilels";
}
impl InsnOpcode for WHILELS_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILELS_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILELS_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILELS_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204c18;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilels";
}
impl InsnOpcode for WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELS_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELS_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205c11;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilels";
}
impl InsnOpcode for WHILELS_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILELS_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELS_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELS_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELT_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25200400;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilelt";
}
impl InsnOpcode for WHILELT_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILELT_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELT_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELT_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_SVE_Pd_S_B_Rn_X_Rm_X {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELT_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = 0x25201400;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilelt";
}
impl InsnOpcode for WHILELT_SVE_Pd_S_B_Rn_X_Rm_X {
    const OPCODE: u32 = WHILELT_SVE_Pd_S_B_Rn_X_Rm_X::OPCODE;
    const MASK: u32 = WHILELT_SVE_Pd_S_B_Rn_X_Rm_X::MASK;
    const MNEMONIC: &'static str = WHILELT_SVE_Pd_S_B_Rn_X_Rm_X::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    #[bits(3)]
    pub sme_pnd3: u32,
    #[bits(2)]
    pub _op_3: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(3)]
    pub _op_10: u32,
    #[bits(1)]
    pub sme_vl_13: u32,
    #[bits(2)]
    pub _op_14: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = 0x25204410;
    const MASK: u32 = 0xff20dc18;
    const MNEMONIC: &'static str = "whilelt";
}
impl InsnOpcode for WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13 {
    const OPCODE: u32 = WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13::OPCODE;
    const MASK: u32 = WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13::MASK;
    const MNEMONIC: &'static str = WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILELT_SME_Pdx2_Rn_Rm {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_pdx2: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILELT_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = 0x25205410;
    const MASK: u32 = 0xff20fc11;
    const MNEMONIC: &'static str = "whilelt";
}
impl InsnOpcode for WHILELT_SME_Pdx2_Rn_Rm {
    const OPCODE: u32 = WHILELT_SME_Pdx2_Rn_Rm::OPCODE;
    const MASK: u32 = WHILELT_SME_Pdx2_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILELT_SME_Pdx2_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILERW_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILERW_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25203010;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilerw";
}
impl InsnOpcode for WHILERW_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILERW_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILERW_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILERW_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WHILEWR_SVE_Pd_Rn_Rm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl WHILEWR_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = 0x25203000;
    const MASK: u32 = 0xff20fc10;
    const MNEMONIC: &'static str = "whilewr";
}
impl InsnOpcode for WHILEWR_SVE_Pd_Rn_Rm {
    const OPCODE: u32 = WHILEWR_SVE_Pd_Rn_Rm::OPCODE;
    const MASK: u32 = WHILEWR_SVE_Pd_Rn_Rm::MASK;
    const MNEMONIC: &'static str = WHILEWR_SVE_Pd_Rn_Rm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct WRFFR_SVE_Pn {
    #[bits(5)]
    pub _op_0: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(23)]
    pub _op_9: u32,
}
impl WRFFR_SVE_Pn {
    const OPCODE: u32 = 0x25289000;
    const MASK: u32 = 0xfffffe1f;
    const MNEMONIC: &'static str = "wrffr";
}
impl InsnOpcode for WRFFR_SVE_Pn {
    const OPCODE: u32 = WRFFR_SVE_Pn::OPCODE;
    const MASK: u32 = WRFFR_SVE_Pn::MASK;
    const MNEMONIC: &'static str = WRFFR_SVE_Pn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XAFLAG {
    #[bits(32)]
    pub _op_0: u32,
}
impl XAFLAG {
    const OPCODE: u32 = 0xd500403f;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "xaflag";
}
impl InsnOpcode for XAFLAG {
    const OPCODE: u32 = XAFLAG::OPCODE;
    const MASK: u32 = XAFLAG::MASK;
    const MNEMONIC: &'static str = XAFLAG::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub imm5: u32,
    #[bits(1)]
    pub _op_21: u32,
    #[bits(2)]
    pub sve_tszh: u32,
    #[bits(8)]
    pub _op_24: u32,
}
impl XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = 0x4203400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "xar";
}
impl InsnOpcode for XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED {
    const OPCODE: u32 = XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::OPCODE;
    const MASK: u32 = XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MASK;
    const MNEMONIC: &'static str = XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XAR_Vd_Vn_Vm_IMM {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub imm6_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl XAR_Vd_Vn_Vm_IMM {
    const OPCODE: u32 = 0xce800000;
    const MASK: u32 = 0xffe00000;
    const MNEMONIC: &'static str = "xar";
}
impl InsnOpcode for XAR_Vd_Vn_Vm_IMM {
    const OPCODE: u32 = XAR_Vd_Vn_Vm_IMM::OPCODE;
    const MASK: u32 = XAR_Vd_Vn_Vm_IMM::MASK;
    const MNEMONIC: &'static str = XAR_Vd_Vn_Vm_IMM::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XPACD_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl XPACD_Rd {
    const OPCODE: u32 = 0xdac147e0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "xpacd";
}
impl InsnOpcode for XPACD_Rd {
    const OPCODE: u32 = XPACD_Rd::OPCODE;
    const MASK: u32 = XPACD_Rd::MASK;
    const MNEMONIC: &'static str = XPACD_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XPACI_Rd {
    #[bits(5)]
    pub rd: u32,
    #[bits(27)]
    pub _op_5: u32,
}
impl XPACI_Rd {
    const OPCODE: u32 = 0xdac143e0;
    const MASK: u32 = 0xffffffe0;
    const MNEMONIC: &'static str = "xpaci";
}
impl InsnOpcode for XPACI_Rd {
    const OPCODE: u32 = XPACI_Rd::OPCODE;
    const MASK: u32 = XPACI_Rd::MASK;
    const MNEMONIC: &'static str = XPACI_Rd::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XTN_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl XTN_Vd_Vn {
    const OPCODE: u32 = 0xe212800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "xtn";
}
impl InsnOpcode for XTN_Vd_Vn {
    const OPCODE: u32 = XTN_Vd_Vn::OPCODE;
    const MASK: u32 = XTN_Vd_Vn::MASK;
    const MNEMONIC: &'static str = XTN_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct XTN2_Vd_Vn {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl XTN2_Vd_Vn {
    const OPCODE: u32 = 0x4e212800;
    const MASK: u32 = 0xff3ffc00;
    const MNEMONIC: &'static str = "xtn2";
}
impl InsnOpcode for XTN2_Vd_Vn {
    const OPCODE: u32 = XTN2_Vd_Vn::OPCODE;
    const MASK: u32 = XTN2_Vd_Vn::MASK;
    const MNEMONIC: &'static str = XTN2_Vd_Vn::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZERO_SME_list_of_64bit_tiles {
    #[bits(8)]
    pub sme_zero_mask: u32,
    #[bits(24)]
    pub _op_8: u32,
}
impl ZERO_SME_list_of_64bit_tiles {
    const OPCODE: u32 = 0xc0080000;
    const MASK: u32 = 0xffffff00;
    const MNEMONIC: &'static str = "zero";
}
impl InsnOpcode for ZERO_SME_list_of_64bit_tiles {
    const OPCODE: u32 = ZERO_SME_list_of_64bit_tiles::OPCODE;
    const MASK: u32 = ZERO_SME_list_of_64bit_tiles::MASK;
    const MNEMONIC: &'static str = ZERO_SME_list_of_64bit_tiles::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZERO_SME_ZT0_LIST {
    #[bits(32)]
    pub _op_0: u32,
}
impl ZERO_SME_ZT0_LIST {
    const OPCODE: u32 = 0xc0480001;
    const MASK: u32 = 0xffffffff;
    const MNEMONIC: &'static str = "zero";
}
impl InsnOpcode for ZERO_SME_ZT0_LIST {
    const OPCODE: u32 = ZERO_SME_ZT0_LIST::OPCODE;
    const MASK: u32 = ZERO_SME_ZT0_LIST::MASK;
    const MNEMONIC: &'static str = ZERO_SME_ZT0_LIST::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0xc120d000;
    const MASK: u32 = 0xff20fc01;
    const MNEMONIC: &'static str = "zip";
}
impl InsnOpcode for ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q {
    #[bits(1)]
    pub _op_0: u32,
    #[bits(4)]
    pub sme_zdn2: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q {
    const OPCODE: u32 = 0xc120d400;
    const MASK: u32 = 0xffe0fc01;
    const MNEMONIC: &'static str = "zip";
}
impl InsnOpcode for ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q {
    const OPCODE: u32 = ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q::OPCODE;
    const MASK: u32 = ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q::MASK;
    const MNEMONIC: &'static str = ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx4_SME_Znx4 {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ZIP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = 0xc136e000;
    const MASK: u32 = 0xff3ffc63;
    const MNEMONIC: &'static str = "zip";
}
impl InsnOpcode for ZIP_SME_Zdnx4_SME_Znx4 {
    const OPCODE: u32 = ZIP_SME_Zdnx4_SME_Znx4::OPCODE;
    const MASK: u32 = ZIP_SME_Zdnx4_SME_Znx4::MASK;
    const MNEMONIC: &'static str = ZIP_SME_Zdnx4_SME_Znx4::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    #[bits(2)]
    pub _op_0: u32,
    #[bits(3)]
    pub sme_zdn4: u32,
    #[bits(2)]
    pub _op_5: u32,
    #[bits(3)]
    pub sme_zn4: u32,
    #[bits(22)]
    pub _op_10: u32,
}
impl ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    const OPCODE: u32 = 0xc137e000;
    const MASK: u32 = 0xfffffc63;
    const MNEMONIC: &'static str = "zip";
}
impl InsnOpcode for ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q {
    const OPCODE: u32 = ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q::OPCODE;
    const MASK: u32 = ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q::MASK;
    const MNEMONIC: &'static str = ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a00000;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "zip1";
}
impl InsnOpcode for ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ZIP1_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5204000;
    const MASK: u32 = 0xff30fe10;
    const MNEMONIC: &'static str = "zip1";
}
impl InsnOpcode for ZIP1_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ZIP1_SVE_Pd_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ZIP1_SVE_Pd_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ZIP1_SVE_Pd_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5206000;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "zip1";
}
impl InsnOpcode for ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP1_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP1_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe003800;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "zip1";
}
impl InsnOpcode for ZIP1_Vd_Vn_Vm {
    const OPCODE: u32 = ZIP1_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ZIP1_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ZIP1_Vd_Vn_Vm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = 0x5a00400;
    const MASK: u32 = 0xffe0fc00;
    const MNEMONIC: &'static str = "zip2";
}
impl InsnOpcode for ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16 {
    const OPCODE: u32 = ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16::OPCODE;
    const MASK: u32 = ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16::MASK;
    const MNEMONIC: &'static str = ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_SVE_Pd_SVE_Pn_SVE_Pm {
    #[bits(4)]
    pub sve_pd: u32,
    #[bits(1)]
    pub _op_4: u32,
    #[bits(4)]
    pub sve_pn: u32,
    #[bits(7)]
    pub _op_9: u32,
    #[bits(4)]
    pub sve_pm: u32,
    #[bits(12)]
    pub _op_20: u32,
}
impl ZIP2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = 0x5204400;
    const MASK: u32 = 0xff30fe10;
    const MNEMONIC: &'static str = "zip2";
}
impl InsnOpcode for ZIP2_SVE_Pd_SVE_Pn_SVE_Pm {
    const OPCODE: u32 = ZIP2_SVE_Pd_SVE_Pn_SVE_Pm::OPCODE;
    const MASK: u32 = ZIP2_SVE_Pd_SVE_Pn_SVE_Pm::MASK;
    const MNEMONIC: &'static str = ZIP2_SVE_Pd_SVE_Pn_SVE_Pm::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    #[bits(5)]
    pub sve_zd: u32,
    #[bits(5)]
    pub sve_zn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub sve_zm_16: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = 0x5206400;
    const MASK: u32 = 0xff20fc00;
    const MNEMONIC: &'static str = "zip2";
}
impl InsnOpcode for ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B {
    const OPCODE: u32 = ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::OPCODE;
    const MASK: u32 = ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MASK;
    const MNEMONIC: &'static str = ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B::MNEMONIC;
}
#[bitfield(u32)]
#[derive(PartialEq, Eq)]
pub struct ZIP2_Vd_Vn_Vm {
    #[bits(5)]
    pub rd: u32,
    #[bits(5)]
    pub rn: u32,
    #[bits(6)]
    pub _op_10: u32,
    #[bits(5)]
    pub rm: u32,
    #[bits(11)]
    pub _op_21: u32,
}
impl ZIP2_Vd_Vn_Vm {
    const OPCODE: u32 = 0xe007800;
    const MASK: u32 = 0xbf20fc00;
    const MNEMONIC: &'static str = "zip2";
}
impl InsnOpcode for ZIP2_Vd_Vn_Vm {
    const OPCODE: u32 = ZIP2_Vd_Vn_Vm::OPCODE;
    const MASK: u32 = ZIP2_Vd_Vn_Vm::MASK;
    const MNEMONIC: &'static str = ZIP2_Vd_Vn_Vm::MNEMONIC;
}
#[derive(Debug, PartialEq, Eq, Copy, Clone)]
pub enum Opcode {
    ABS_Rd_Rn(ABS_Rd_Rn),
    ABS_SVE_Zd_SVE_Pg3_SVE_Zn(ABS_SVE_Zd_SVE_Pg3_SVE_Zn),
    ABS_Sd_Sn(ABS_Sd_Sn),
    ABS_Vd_Vn(ABS_Vd_Vn),
    ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16(ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16(ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ADCS_Rd_Rn_Rm(ADCS_Rd_Rn_Rm),
    ADC_Rd_Rn_Rm(ADC_Rd_Rn_Rm),
    ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG(ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG),
    ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn(ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn),
    ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn(ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn),
    ADDHN2_Vd_Vn_Vm(ADDHN2_Vd_Vn_Vm),
    ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16(ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16(ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ADDHN_Vd_Vn_Vm(ADDHN_Vd_Vn_Vm),
    ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6(ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6),
    ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    ADDP_Sd_Vn(ADDP_Sd_Vn),
    ADDP_Vd_Vn_Vm(ADDP_Vd_Vn_Vm),
    ADDQV_Vd_SVE_Pg3_SVE_Zn(ADDQV_Vd_SVE_Pg3_SVE_Zn),
    ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6(ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6),
    ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6(ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6),
    ADDS_Rd_Rn_Rm_SFT(ADDS_Rd_Rn_Rm_SFT),
    ADDS_Rd_Rn_SP_AIMM(ADDS_Rd_Rn_SP_AIMM),
    ADDS_Rd_Rn_SP_Rm_EXT(ADDS_Rd_Rn_SP_Rm_EXT),
    ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn(ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn),
    ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn(ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn),
    ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6(ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6),
    ADDV_Fd_Vn(ADDV_Fd_Vn),
    ADD_Rd_Rn_Rm_SFT(ADD_Rd_Rn_Rm_SFT),
    ADD_Rd_SP_Rn_SP_AIMM(ADD_Rd_SP_Rn_SP_AIMM),
    ADD_Rd_SP_Rn_SP_Rm_EXT(ADD_Rd_SP_Rn_SP_Rm_EXT),
    ADD_SME_ZA_array_off3_0_SME_Znx2(ADD_SME_ZA_array_off3_0_SME_Znx2),
    ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    ADD_SME_ZA_array_off3_0_SME_Znx4(ADD_SME_ZA_array_off3_0_SME_Znx4),
    ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S(
        ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S,
    ),
    ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm(ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm(ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    ADD_SVE_Zd_SVE_Zd_SVE_AIMM(ADD_SVE_Zd_SVE_Zd_SVE_AIMM),
    ADD_SVE_Zd_SVE_Zn_SVE_Zm_16(ADD_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ADD_Sd_Sn_Sm(ADD_Sd_Sn_Sm),
    ADD_Vd_Vn_Vm(ADD_Vd_Vn_Vm),
    ADRP_Rd_ADDR_ADRP(ADRP_Rd_ADDR_ADRP),
    ADR_Rd_ADDR_PCREL21(ADR_Rd_ADDR_PCREL21),
    ADR_SVE_Zd_SVE_ADDR_ZZ_LSL(ADR_SVE_Zd_SVE_ADDR_ZZ_LSL),
    ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW(ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW),
    ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW(ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW),
    AESD_SVE_Zd_SVE_Zd_SVE_Zn(AESD_SVE_Zd_SVE_Zd_SVE_Zn),
    AESD_Vd_Vn(AESD_Vd_Vn),
    AESE_SVE_Zd_SVE_Zd_SVE_Zn(AESE_SVE_Zd_SVE_Zd_SVE_Zn),
    AESE_Vd_Vn(AESE_Vd_Vn),
    AESIMC_SVE_Zd_SVE_Zd(AESIMC_SVE_Zd_SVE_Zd),
    AESIMC_Vd_Vn(AESIMC_Vd_Vn),
    AESMC_SVE_Zd_SVE_Zd(AESMC_SVE_Zd_SVE_Zd),
    AESMC_Vd_Vn(AESMC_Vd_Vn),
    ANDQV_Vd_SVE_Pg3_SVE_Zn(ANDQV_Vd_SVE_Pg3_SVE_Zn),
    ANDS_Rd_Rn_LIMM(ANDS_Rd_Rn_LIMM),
    ANDS_Rd_Rn_Rm_SFT(ANDS_Rd_Rn_Rm_SFT),
    ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    ANDV_SVE_Vd_SVE_Pg3_SVE_Zn(ANDV_SVE_Vd_SVE_Pg3_SVE_Zn),
    AND_Rd_Rn_Rm_SFT(AND_Rd_Rn_Rm_SFT),
    AND_Rd_SP_Rn_LIMM(AND_Rd_SP_Rn_LIMM),
    AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    AND_SVE_Zd_SVE_Zd_SVE_LIMM(AND_SVE_Zd_SVE_Zd_SVE_LIMM),
    AND_SVE_Zd_SVE_Zn_SVE_Zm_16(AND_SVE_Zd_SVE_Zn_SVE_Zm_16),
    AND_Vd_Vn_Vm(AND_Vd_Vn_Vm),
    ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED(ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED),
    ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    ASRV_Rd_Rn_Rm(ASRV_Rd_Rn_Rm),
    ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED(ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED),
    ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    ASR_SVE_Zd_SVE_Zn_SVE_Zm_16(ASR_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D(
        ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D,
    ),
    AUTDA_Rd_Rn_SP(AUTDA_Rd_Rn_SP),
    AUTDB_Rd_Rn_SP(AUTDB_Rd_Rn_SP),
    AUTDZA_Rd(AUTDZA_Rd),
    AUTDZB_Rd(AUTDZB_Rd),
    AUTIA_Rd_Rn_SP(AUTIA_Rd_Rn_SP),
    AUTIB_Rd_Rn_SP(AUTIB_Rd_Rn_SP),
    AUTIZA_Rd(AUTIZA_Rd),
    AUTIZB_Rd(AUTIZB_Rd),
    AXFLAG(AXFLAG),
    BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn(BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BCAX_Vd_Vn_Vm_Va(BCAX_Vd_Vn_Vm_Va),
    BC_C_ADDR_PCREL19(BC_C_ADDR_PCREL19),
    BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16(BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16(BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16(BFADD_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16(BFCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFCVTN2_Vd_Vn(BFCVTN2_Vd_Vn),
    BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn(BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn),
    BFCVTN_SVE_Zd_SME_Znx2(BFCVTN_SVE_Zd_SME_Znx2),
    BFCVTN_Vd_Vn(BFCVTN_Vd_Vn),
    BFCVT_Fd_Fn(BFCVT_Fd_Fn),
    BFCVT_SVE_Zd_SME_Znx2(BFCVT_SVE_Zd_SME_Znx2),
    BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn(BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn),
    BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFDOT_Vd_Vn_Em(BFDOT_Vd_Vn_Em),
    BFDOT_Vd_Vn_Vm(BFDOT_Vd_Vn_Vm),
    BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFMLALB_Vd_Vn_Em16(BFMLALB_Vd_Vn_Em16),
    BFMLALB_Vd_Vn_Vm(BFMLALB_Vd_Vn_Vm),
    BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFMLALT_Vd_Vn_Em16(BFMLALT_Vd_Vn_Em16),
    BFMLALT_Vd_Vn_Vm(BFMLALT_Vd_Vn_Vm),
    BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(BFMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(BFMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFMMLA_Vd_Vn_Vm(BFMMLA_Vd_Vn_Vm),
    BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16(BFMUL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFM_Rd_Rn_IMMR_IMMS(BFM_Rd_Rn_IMMR_IMMS),
    BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BFSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16(BFSUB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16(BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BICS_Rd_Rn_Rm_SFT(BICS_Rd_Rn_Rm_SFT),
    BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BIC_Rd_Rn_Rm_SFT(BIC_Rd_Rn_Rm_SFT),
    BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    BIC_SVE_Zd_SVE_Zn_SVE_Zm_16(BIC_SVE_Zd_SVE_Zn_SVE_Zm_16),
    BIC_Vd_SIMD_IMM_SFT(BIC_Vd_SIMD_IMM_SFT),
    BIC_Vd_V_4H_SIMD_IMM_SFT_LSL(BIC_Vd_V_4H_SIMD_IMM_SFT_LSL),
    BIC_Vd_Vn_Vm(BIC_Vd_Vn_Vm),
    BIF_Vd_Vn_Vm(BIF_Vd_Vn_Vm),
    BIT_Vd_Vn_Vm(BIT_Vd_Vn_Vm),
    BLRAAZ_Rn(BLRAAZ_Rn),
    BLRAA_Rn_Rd_SP(BLRAA_Rn_Rd_SP),
    BLRABZ_Rn(BLRABZ_Rn),
    BLRAB_Rn_Rd_SP(BLRAB_Rn_Rd_SP),
    BLR_Rn(BLR_Rn),
    BL_ADDR_PCREL26(BL_ADDR_PCREL26),
    BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    BRAAZ_Rn(BRAAZ_Rn),
    BRAA_Rn_Rd_SP(BRAA_Rn_Rd_SP),
    BRABZ_Rn(BRABZ_Rn),
    BRAB_Rn_Rd_SP(BRAB_Rn_Rd_SP),
    BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn(BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn),
    BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn(BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn),
    BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn(BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn),
    BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn(BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn),
    BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd(BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd),
    BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd(BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd),
    BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    BRK_EXCEPTION(BRK_EXCEPTION),
    BR_Rn(BR_Rn),
    BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn(BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn(BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn(BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn),
    BSL_Vd_Vn_Vm(BSL_Vd_Vn_Vm),
    B_ADDR_PCREL26(B_ADDR_PCREL26),
    B_C_ADDR_PCREL19(B_C_ADDR_PCREL19),
    CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3(CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3),
    CASAB_Rs_Rt_ADDR_SIMPLE(CASAB_Rs_Rt_ADDR_SIMPLE),
    CASAH_Rs_Rt_ADDR_SIMPLE(CASAH_Rs_Rt_ADDR_SIMPLE),
    CASALB_Rs_Rt_ADDR_SIMPLE(CASALB_Rs_Rt_ADDR_SIMPLE),
    CASALH_Rs_Rt_ADDR_SIMPLE(CASALH_Rs_Rt_ADDR_SIMPLE),
    CASAL_Rs_Rt_ADDR_SIMPLE(CASAL_Rs_Rt_ADDR_SIMPLE),
    CASA_Rs_Rt_ADDR_SIMPLE(CASA_Rs_Rt_ADDR_SIMPLE),
    CASB_Rs_Rt_ADDR_SIMPLE(CASB_Rs_Rt_ADDR_SIMPLE),
    CASH_Rs_Rt_ADDR_SIMPLE(CASH_Rs_Rt_ADDR_SIMPLE),
    CASLB_Rs_Rt_ADDR_SIMPLE(CASLB_Rs_Rt_ADDR_SIMPLE),
    CASLH_Rs_Rt_ADDR_SIMPLE(CASLH_Rs_Rt_ADDR_SIMPLE),
    CASL_Rs_Rt_ADDR_SIMPLE(CASL_Rs_Rt_ADDR_SIMPLE),
    CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    CAS_Rs_Rt_ADDR_SIMPLE(CAS_Rs_Rt_ADDR_SIMPLE),
    CBNZ_Rt_ADDR_PCREL19(CBNZ_Rt_ADDR_PCREL19),
    CBZ_Rt_ADDR_PCREL19(CBZ_Rt_ADDR_PCREL19),
    CCMN_Rn_CCMP_IMM_NZCV_COND(CCMN_Rn_CCMP_IMM_NZCV_COND),
    CCMN_Rn_Rm_NZCV_COND(CCMN_Rn_Rm_NZCV_COND),
    CCMP_Rn_CCMP_IMM_NZCV_COND(CCMP_Rn_CCMP_IMM_NZCV_COND),
    CCMP_Rn_Rm_NZCV_COND(CCMP_Rn_Rm_NZCV_COND),
    CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2(CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2),
    CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2(CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2),
    CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2(CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2),
    CFINV(CFINV),
    CHKFEAT_X16(CHKFEAT_X16),
    CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5(CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5),
    CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5(CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5),
    CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5(CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5),
    CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5(CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5),
    CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    CLREX_UIMM4(CLREX_UIMM4),
    CLS_Rd_Rn(CLS_Rd_Rn),
    CLS_SVE_Zd_SVE_Pg3_SVE_Zn(CLS_SVE_Zd_SVE_Pg3_SVE_Zn),
    CLS_Vd_Vn(CLS_Vd_Vn),
    CLZ_Rd_Rn(CLZ_Rd_Rn),
    CLZ_SVE_Zd_SVE_Pg3_SVE_Zn(CLZ_SVE_Zd_SVE_Pg3_SVE_Zn),
    CLZ_Vd_Vn(CLZ_Vd_Vn),
    CMEQ_Sd_Sn_IMM0(CMEQ_Sd_Sn_IMM0),
    CMEQ_Sd_Sn_Sm(CMEQ_Sd_Sn_Sm),
    CMEQ_Vd_Vn_IMM0(CMEQ_Vd_Vn_IMM0),
    CMEQ_Vd_Vn_Vm(CMEQ_Vd_Vn_Vm),
    CMGE_Sd_Sn_IMM0(CMGE_Sd_Sn_IMM0),
    CMGE_Sd_Sn_Sm(CMGE_Sd_Sn_Sm),
    CMGE_Vd_Vn_IMM0(CMGE_Vd_Vn_IMM0),
    CMGE_Vd_Vn_Vm(CMGE_Vd_Vn_Vm),
    CMGT_Sd_Sn_IMM0(CMGT_Sd_Sn_IMM0),
    CMGT_Sd_Sn_Sm(CMGT_Sd_Sn_Sm),
    CMGT_Vd_Vn_IMM0(CMGT_Vd_Vn_IMM0),
    CMGT_Vd_Vn_Vm(CMGT_Vd_Vn_Vm),
    CMHI_Sd_Sn_Sm(CMHI_Sd_Sn_Sm),
    CMHI_Vd_Vn_Vm(CMHI_Vd_Vn_Vm),
    CMHS_Sd_Sn_Sm(CMHS_Sd_Sn_Sm),
    CMHS_Vd_Vn_Vm(CMHS_Vd_Vn_Vm),
    CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2(CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2),
    CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2(CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2),
    CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2(CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2),
    CMLE_Sd_Sn_IMM0(CMLE_Sd_Sn_IMM0),
    CMLE_Vd_Vn_IMM0(CMLE_Vd_Vn_IMM0),
    CMLT_Sd_Sn_IMM0(CMLT_Sd_Sn_IMM0),
    CMLT_Vd_Vn_IMM0(CMLT_Vd_Vn_IMM0),
    CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5),
    CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B(
        CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B,
    ),
    CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5),
    CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B(
        CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B,
    ),
    CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5),
    CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B(
        CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B,
    ),
    CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7),
    CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D(
        CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D,
    ),
    CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7),
    CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D(
        CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D,
    ),
    CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5),
    CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7),
    CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7),
    CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5),
    CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5),
    CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B(
        CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B,
    ),
    CMTST_Sd_Sn_Sm(CMTST_Sd_Sn_Sm),
    CMTST_Vd_Vn_Vm(CMTST_Vd_Vn_Vm),
    CNOT_SVE_Zd_SVE_Pg3_SVE_Zn(CNOT_SVE_Zd_SVE_Pg3_SVE_Zn),
    CNTB_Rd_SVE_PATTERN_SCALED(CNTB_Rd_SVE_PATTERN_SCALED),
    CNTD_Rd_SVE_PATTERN_SCALED(CNTD_Rd_SVE_PATTERN_SCALED),
    CNTH_Rd_SVE_PATTERN_SCALED(CNTH_Rd_SVE_PATTERN_SCALED),
    CNTP_Rd_SME_PNn_SME_VLxN_10(CNTP_Rd_SME_PNn_SME_VLxN_10),
    CNTP_Rd_SVE_Pg4_10_SVE_Pn(CNTP_Rd_SVE_Pg4_10_SVE_Pn),
    CNTW_Rd_SVE_PATTERN_SCALED(CNTW_Rd_SVE_PATTERN_SCALED),
    CNT_Rd_Rn(CNT_Rd_Rn),
    CNT_SVE_Zd_SVE_Pg3_SVE_Zn(CNT_SVE_Zd_SVE_Pg3_SVE_Zn),
    CNT_Vd_Vn(CNT_Vd_Vn),
    COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn(COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn),
    CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn(CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn),
    CPY_SVE_Zd_SVE_Pg3_Rn_SP(CPY_SVE_Zd_SVE_Pg3_Rn_SP),
    CPY_SVE_Zd_SVE_Pg3_SVE_Vn(CPY_SVE_Zd_SVE_Pg3_SVE_Vn),
    CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM(CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM),
    CRC32B_Rd_Rn_Rm(CRC32B_Rd_Rn_Rm),
    CRC32CB_Rd_Rn_Rm(CRC32CB_Rd_Rn_Rm),
    CRC32CH_Rd_Rn_Rm(CRC32CH_Rd_Rn_Rm),
    CRC32CW_Rd_Rn_Rm(CRC32CW_Rd_Rn_Rm),
    CRC32CX_Rd_Rn_Rm(CRC32CX_Rd_Rn_Rm),
    CRC32H_Rd_Rn_Rm(CRC32H_Rd_Rn_Rm),
    CRC32W_Rd_Rn_Rm(CRC32W_Rd_Rn_Rm),
    CRC32X_Rd_Rn_Rm(CRC32X_Rd_Rn_Rm),
    CSEL_Rd_Rn_Rm_COND(CSEL_Rd_Rn_Rm_COND),
    CSINC_Rd_Rn_Rm_COND(CSINC_Rd_Rn_Rm_COND),
    CSINV_Rd_Rn_Rm_COND(CSINV_Rd_Rn_Rm_COND),
    CSNEG_Rd_Rn_Rm_COND(CSNEG_Rd_Rn_Rm_COND),
    CTERMEQ_Rn_Rm(CTERMEQ_Rn_Rm),
    CTERMNE_Rn_Rm(CTERMNE_Rn_Rm),
    CTZ_Rd_Rn(CTZ_Rd_Rn),
    DCPS1_EXCEPTION(DCPS1_EXCEPTION),
    DCPS2_EXCEPTION(DCPS2_EXCEPTION),
    DCPS3_EXCEPTION(DCPS3_EXCEPTION),
    DECB_Rd_SVE_PATTERN_SCALED(DECB_Rd_SVE_PATTERN_SCALED),
    DECD_Rd_SVE_PATTERN_SCALED(DECD_Rd_SVE_PATTERN_SCALED),
    DECD_SVE_Zd_SVE_PATTERN_SCALED(DECD_SVE_Zd_SVE_PATTERN_SCALED),
    DECH_Rd_SVE_PATTERN_SCALED(DECH_Rd_SVE_PATTERN_SCALED),
    DECH_SVE_Zd_SVE_PATTERN_SCALED(DECH_SVE_Zd_SVE_PATTERN_SCALED),
    DECP_Rd_SVE_Pg4_5(DECP_Rd_SVE_Pg4_5),
    DECP_SVE_Zd_SVE_Pg4_5(DECP_SVE_Zd_SVE_Pg4_5),
    DECW_Rd_SVE_PATTERN_SCALED(DECW_Rd_SVE_PATTERN_SCALED),
    DECW_SVE_Zd_SVE_PATTERN_SCALED(DECW_SVE_Zd_SVE_PATTERN_SCALED),
    DGH(DGH),
    DMB_BARRIER(DMB_BARRIER),
    DRPS(DRPS),
    DSB_BARRIER(DSB_BARRIER),
    DSB_BARRIER_DSB_NXS(DSB_BARRIER_DSB_NXS),
    DUPM_SVE_Zd_SVE_LIMM(DUPM_SVE_Zd_SVE_LIMM),
    DUPQ_SVE_Zd_SVE_Zn_5_INDEX(DUPQ_SVE_Zd_SVE_Zn_5_INDEX),
    DUP_SVE_Zd_Rn_SP(DUP_SVE_Zd_Rn_SP),
    DUP_SVE_Zd_SVE_ASIMM(DUP_SVE_Zd_SVE_ASIMM),
    DUP_SVE_Zd_SVE_Zn_INDEX(DUP_SVE_Zd_SVE_Zn_INDEX),
    DUP_Sd_En(DUP_Sd_En),
    DUP_Vd_En(DUP_Vd_En),
    DUP_Vd_Rn(DUP_Vd_Rn),
    EON_Rd_Rn_Rm_SFT(EON_Rd_Rn_Rm_SFT),
    EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn(EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn),
    EOR3_Vd_Vn_Vm_Va(EOR3_Vd_Vn_Vm_Va),
    EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16(EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    EORQV_Vd_SVE_Pg3_SVE_Zn(EORQV_Vd_SVE_Pg3_SVE_Zn),
    EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16(EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    EORV_SVE_Vd_SVE_Pg3_SVE_Zn(EORV_SVE_Vd_SVE_Pg3_SVE_Zn),
    EOR_Rd_Rn_Rm_SFT(EOR_Rd_Rn_Rm_SFT),
    EOR_Rd_SP_Rn_LIMM(EOR_Rd_SP_Rn_LIMM),
    EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    EOR_SVE_Zd_SVE_Zd_SVE_LIMM(EOR_SVE_Zd_SVE_Zd_SVE_LIMM),
    EOR_SVE_Zd_SVE_Zn_SVE_Zm_16(EOR_SVE_Zd_SVE_Zn_SVE_Zm_16),
    EOR_Vd_Vn_Vm(EOR_Vd_Vn_Vm),
    ERET(ERET),
    ERETAA(ERETAA),
    ERETAB(ERETAB),
    EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4(EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4),
    EXTR_Rd_Rn_Rm_IMMS(EXTR_Rd_Rn_Rm_IMMS),
    EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53(EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53),
    EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53(EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53),
    EXT_Vd_Vn_Vm_IDX(EXT_Vd_Vn_Vm_IDX),
    FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FABD_Sd_S_S_Sn_S_S_Sm_S_S(FABD_Sd_S_S_Sn_S_S_Sm_S_S),
    FABD_Sd_Sn_Sm(FABD_Sd_Sn_Sm),
    FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S(FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FABD_Vd_Vn_Vm(FABD_Vd_Vn_Vm),
    FABS_Fd_Fn(FABS_Fd_Fn),
    FABS_Fd_S_H_Fn_S_H(FABS_Fd_S_H_Fn_S_H),
    FABS_SVE_Zd_SVE_Pg3_SVE_Zn(FABS_SVE_Zd_SVE_Pg3_SVE_Zn),
    FABS_Vd_V_4H_Vn_V_4H(FABS_Vd_V_4H_Vn_V_4H),
    FABS_Vd_Vn(FABS_Vd_Vn),
    FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FACGE_Sd_S_S_Sn_S_S_Sm_S_S(FACGE_Sd_S_S_Sn_S_S_Sm_S_S),
    FACGE_Sd_Sn_Sm(FACGE_Sd_Sn_Sm),
    FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S(FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FACGE_Vd_Vn_Vm(FACGE_Vd_Vn_Vm),
    FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FACGT_Sd_S_S_Sn_S_S_Sm_S_S(FACGT_Sd_S_S_Sn_S_S_Sm_S_S),
    FACGT_Sd_Sn_Sm(FACGT_Sd_Sn_Sm),
    FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S(FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FACGT_Vd_Vn_Vm(FACGT_Vd_Vn_Vm),
    FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5(FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5),
    FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    FADDP_Sd_S_S_Vn_V_2S(FADDP_Sd_S_S_Vn_V_2S),
    FADDP_Sd_Vn(FADDP_Sd_Vn),
    FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S(FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FADDP_Vd_Vn_Vm(FADDP_Vd_Vn_Vm),
    FADDQV_Vd_SVE_Pg3_SVE_Zn(FADDQV_Vd_SVE_Pg3_SVE_Zn),
    FADDV_SVE_Vd_SVE_Pg3_SVE_Zn(FADDV_SVE_Vd_SVE_Pg3_SVE_Zn),
    FADD_Fd_Fn_Fm(FADD_Fd_Fn_Fm),
    FADD_Fd_S_H_Fn_S_H_Fm_S_H(FADD_Fd_S_H_Fn_S_H_Fm_S_H),
    FADD_SME_ZA_array_off3_0_SME_Znx2(FADD_SME_ZA_array_off3_0_SME_Znx2),
    FADD_SME_ZA_array_off3_0_SME_Znx4(FADD_SME_ZA_array_off3_0_SME_Znx4),
    FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE(FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE),
    FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FADD_SVE_Zd_SVE_Zn_SVE_Zm_16(FADD_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S(FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FADD_Vd_Vn_Vm(FADD_Vd_Vn_Vm),
    FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1(
        FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1,
    ),
    FCADD_Vd_Vn_Vm_IMM_ROT3(FCADD_Vd_Vn_Vm_IMM_ROT3),
    FCCMPE_Fn_Fm_NZCV_COND(FCCMPE_Fn_Fm_NZCV_COND),
    FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND(FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND),
    FCCMP_Fn_Fm_NZCV_COND(FCCMP_Fn_Fm_NZCV_COND),
    FCCMP_Fn_S_H_Fm_S_H_NZCV_COND(FCCMP_Fn_S_H_Fm_S_H_NZCV_COND),
    FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16(FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16),
    FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16(FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0(FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0),
    FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FCMEQ_Sd_S_H_Sn_S_H_FPIMM0(FCMEQ_Sd_S_H_Sn_S_H_FPIMM0),
    FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S(FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S),
    FCMEQ_Sd_Sn_FPIMM0(FCMEQ_Sd_Sn_FPIMM0),
    FCMEQ_Sd_Sn_Sm(FCMEQ_Sd_Sn_Sm),
    FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S(FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0(FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0),
    FCMEQ_Vd_Vn_FPIMM0(FCMEQ_Vd_Vn_FPIMM0),
    FCMEQ_Vd_Vn_Vm(FCMEQ_Vd_Vn_Vm),
    FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0(FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0),
    FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FCMGE_Sd_S_H_Sn_S_H_FPIMM0(FCMGE_Sd_S_H_Sn_S_H_FPIMM0),
    FCMGE_Sd_S_S_Sn_S_S_Sm_S_S(FCMGE_Sd_S_S_Sn_S_S_Sm_S_S),
    FCMGE_Sd_Sn_FPIMM0(FCMGE_Sd_Sn_FPIMM0),
    FCMGE_Sd_Sn_Sm(FCMGE_Sd_Sn_Sm),
    FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S(FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0(FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0),
    FCMGE_Vd_Vn_FPIMM0(FCMGE_Vd_Vn_FPIMM0),
    FCMGE_Vd_Vn_Vm(FCMGE_Vd_Vn_Vm),
    FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0(FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0),
    FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FCMGT_Sd_S_H_Sn_S_H_FPIMM0(FCMGT_Sd_S_H_Sn_S_H_FPIMM0),
    FCMGT_Sd_S_S_Sn_S_S_Sm_S_S(FCMGT_Sd_S_S_Sn_S_S_Sm_S_S),
    FCMGT_Sd_Sn_FPIMM0(FCMGT_Sd_Sn_FPIMM0),
    FCMGT_Sd_Sn_Sm(FCMGT_Sd_Sn_Sm),
    FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S(FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0(FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0),
    FCMGT_Vd_Vn_FPIMM0(FCMGT_Vd_Vn_FPIMM0),
    FCMGT_Vd_Vn_Vm(FCMGT_Vd_Vn_Vm),
    FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2(FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2),
    FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2(FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2),
    FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2(FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2),
    FCMLA_Vd_Vn_Em_IMM_ROT2(FCMLA_Vd_Vn_Em_IMM_ROT2),
    FCMLA_Vd_Vn_Vm_IMM_ROT1(FCMLA_Vd_Vn_Vm_IMM_ROT1),
    FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0(FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0),
    FCMLE_Sd_S_H_Sn_S_H_FPIMM0(FCMLE_Sd_S_H_Sn_S_H_FPIMM0),
    FCMLE_Sd_Sn_FPIMM0(FCMLE_Sd_Sn_FPIMM0),
    FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0(FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0),
    FCMLE_Vd_Vn_FPIMM0(FCMLE_Vd_Vn_FPIMM0),
    FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0(FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0),
    FCMLT_Sd_S_H_Sn_S_H_FPIMM0(FCMLT_Sd_S_H_Sn_S_H_FPIMM0),
    FCMLT_Sd_Sn_FPIMM0(FCMLT_Sd_Sn_FPIMM0),
    FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0(FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0),
    FCMLT_Vd_Vn_FPIMM0(FCMLT_Vd_Vn_FPIMM0),
    FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0(FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0),
    FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FCMPE_Fn_FPIMM0(FCMPE_Fn_FPIMM0),
    FCMPE_Fn_Fm(FCMPE_Fn_Fm),
    FCMPE_Fn_S_H_FPIMM0_S_H(FCMPE_Fn_S_H_FPIMM0_S_H),
    FCMPE_Fn_S_H_Fm_S_H(FCMPE_Fn_S_H_Fm_S_H),
    FCMP_Fn_FPIMM0(FCMP_Fn_FPIMM0),
    FCMP_Fn_Fm(FCMP_Fn_Fm),
    FCMP_Fn_S_H_FPIMM0_S_H(FCMP_Fn_S_H_FPIMM0_S_H),
    FCMP_Fn_S_H_Fm_S_H(FCMP_Fn_S_H_Fm_S_H),
    FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8(FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8),
    FCSEL_Fd_Fn_Fm_COND(FCSEL_Fd_Fn_Fm_COND),
    FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND(FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND),
    FCVTAS_Rd_Fn(FCVTAS_Rd_Fn),
    FCVTAS_Rd_W_Fn_S_H(FCVTAS_Rd_W_Fn_S_H),
    FCVTAS_Sd_S_H_Sn_S_H(FCVTAS_Sd_S_H_Sn_S_H),
    FCVTAS_Sd_Sn(FCVTAS_Sd_Sn),
    FCVTAS_Vd_V_4H_Vn_V_4H(FCVTAS_Vd_V_4H_Vn_V_4H),
    FCVTAS_Vd_Vn(FCVTAS_Vd_Vn),
    FCVTAU_Rd_Fn(FCVTAU_Rd_Fn),
    FCVTAU_Rd_W_Fn_S_H(FCVTAU_Rd_W_Fn_S_H),
    FCVTAU_Sd_S_H_Sn_S_H(FCVTAU_Sd_S_H_Sn_S_H),
    FCVTAU_Sd_Sn(FCVTAU_Sd_Sn),
    FCVTAU_Vd_V_4H_Vn_V_4H(FCVTAU_Vd_V_4H_Vn_V_4H),
    FCVTAU_Vd_Vn(FCVTAU_Vd_Vn),
    FCVTL2_Vd_Vn(FCVTL2_Vd_Vn),
    FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S(FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVTL_Vd_Vn(FCVTL_Vd_Vn),
    FCVTMS_Rd_Fn(FCVTMS_Rd_Fn),
    FCVTMS_Rd_W_Fn_S_H(FCVTMS_Rd_W_Fn_S_H),
    FCVTMS_Sd_S_H_Sn_S_H(FCVTMS_Sd_S_H_Sn_S_H),
    FCVTMS_Sd_Sn(FCVTMS_Sd_Sn),
    FCVTMS_Vd_V_4H_Vn_V_4H(FCVTMS_Vd_V_4H_Vn_V_4H),
    FCVTMS_Vd_Vn(FCVTMS_Vd_Vn),
    FCVTMU_Rd_Fn(FCVTMU_Rd_Fn),
    FCVTMU_Rd_W_Fn_S_H(FCVTMU_Rd_W_Fn_S_H),
    FCVTMU_Sd_S_H_Sn_S_H(FCVTMU_Sd_S_H_Sn_S_H),
    FCVTMU_Sd_Sn(FCVTMU_Sd_Sn),
    FCVTMU_Vd_V_4H_Vn_V_4H(FCVTMU_Vd_V_4H_Vn_V_4H),
    FCVTMU_Vd_Vn(FCVTMU_Vd_Vn),
    FCVTN2_Vd_Vn(FCVTN2_Vd_Vn),
    FCVTNS_Rd_Fn(FCVTNS_Rd_Fn),
    FCVTNS_Rd_W_Fn_S_H(FCVTNS_Rd_W_Fn_S_H),
    FCVTNS_Sd_S_H_Sn_S_H(FCVTNS_Sd_S_H_Sn_S_H),
    FCVTNS_Sd_Sn(FCVTNS_Sd_Sn),
    FCVTNS_Vd_V_4H_Vn_V_4H(FCVTNS_Vd_V_4H_Vn_V_4H),
    FCVTNS_Vd_Vn(FCVTNS_Vd_Vn),
    FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D(FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D),
    FCVTNU_Rd_Fn(FCVTNU_Rd_Fn),
    FCVTNU_Rd_W_Fn_S_H(FCVTNU_Rd_W_Fn_S_H),
    FCVTNU_Sd_S_H_Sn_S_H(FCVTNU_Sd_S_H_Sn_S_H),
    FCVTNU_Sd_Sn(FCVTNU_Sd_Sn),
    FCVTNU_Vd_V_4H_Vn_V_4H(FCVTNU_Vd_V_4H_Vn_V_4H),
    FCVTNU_Vd_Vn(FCVTNU_Vd_Vn),
    FCVTN_SVE_Zd_SME_Znx2(FCVTN_SVE_Zd_SME_Znx2),
    FCVTN_Vd_Vn(FCVTN_Vd_Vn),
    FCVTPS_Rd_Fn(FCVTPS_Rd_Fn),
    FCVTPS_Rd_W_Fn_S_H(FCVTPS_Rd_W_Fn_S_H),
    FCVTPS_Sd_S_H_Sn_S_H(FCVTPS_Sd_S_H_Sn_S_H),
    FCVTPS_Sd_Sn(FCVTPS_Sd_Sn),
    FCVTPS_Vd_V_4H_Vn_V_4H(FCVTPS_Vd_V_4H_Vn_V_4H),
    FCVTPS_Vd_Vn(FCVTPS_Vd_Vn),
    FCVTPU_Rd_Fn(FCVTPU_Rd_Fn),
    FCVTPU_Rd_W_Fn_S_H(FCVTPU_Rd_W_Fn_S_H),
    FCVTPU_Sd_S_H_Sn_S_H(FCVTPU_Sd_S_H_Sn_S_H),
    FCVTPU_Sd_Sn(FCVTPU_Sd_Sn),
    FCVTPU_Vd_V_4H_Vn_V_4H(FCVTPU_Vd_V_4H_Vn_V_4H),
    FCVTPU_Vd_Vn(FCVTPU_Vd_Vn),
    FCVTXN2_Vd_Vn(FCVTXN2_Vd_Vn),
    FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTXN_Sd_Sn(FCVTXN_Sd_Sn),
    FCVTXN_Vd_Vn(FCVTXN_Vd_Vn),
    FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTZS_Rd_Fn(FCVTZS_Rd_Fn),
    FCVTZS_Rd_Fn_FBITS(FCVTZS_Rd_Fn_FBITS),
    FCVTZS_Rd_W_Fn_S_H(FCVTZS_Rd_W_Fn_S_H),
    FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32(FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32),
    FCVTZS_SME_Zdnx2_SME_Znx2(FCVTZS_SME_Zdnx2_SME_Znx2),
    FCVTZS_SME_Zdnx4_SME_Znx4(FCVTZS_SME_Zdnx4_SME_Znx4),
    FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D(FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D),
    FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H(FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S(FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H(FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D(FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D),
    FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H(FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVTZS_Sd_S_H_Sn_S_H(FCVTZS_Sd_S_H_Sn_S_H),
    FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H),
    FCVTZS_Sd_Sn(FCVTZS_Sd_Sn),
    FCVTZS_Sd_Sn_IMM_VLSR(FCVTZS_Sd_Sn_IMM_VLSR),
    FCVTZS_Vd_V_4H_Vn_V_4H(FCVTZS_Vd_V_4H_Vn_V_4H),
    FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H(FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H),
    FCVTZS_Vd_Vn(FCVTZS_Vd_Vn),
    FCVTZS_Vd_Vn_IMM_VLSR(FCVTZS_Vd_Vn_IMM_VLSR),
    FCVTZU_Rd_Fn(FCVTZU_Rd_Fn),
    FCVTZU_Rd_Fn_FBITS(FCVTZU_Rd_Fn_FBITS),
    FCVTZU_Rd_W_Fn_S_H(FCVTZU_Rd_W_Fn_S_H),
    FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32(FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32),
    FCVTZU_SME_Zdnx2_SME_Znx2(FCVTZU_SME_Zdnx2_SME_Znx2),
    FCVTZU_SME_Zdnx4_SME_Znx4(FCVTZU_SME_Zdnx4_SME_Znx4),
    FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn(FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D(FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D),
    FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H(FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S(FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H(FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H(FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S(FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVTZU_Sd_S_H_Sn_S_H(FCVTZU_Sd_S_H_Sn_S_H),
    FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H),
    FCVTZU_Sd_Sn(FCVTZU_Sd_Sn),
    FCVTZU_Sd_Sn_IMM_VLSR(FCVTZU_Sd_Sn_IMM_VLSR),
    FCVTZU_Vd_V_4H_Vn_V_4H(FCVTZU_Vd_V_4H_Vn_V_4H),
    FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H(FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H),
    FCVTZU_Vd_Vn(FCVTZU_Vd_Vn),
    FCVTZU_Vd_Vn_IMM_VLSR(FCVTZU_Vd_Vn_IMM_VLSR),
    FCVT_Fd_Fn(FCVT_Fd_Fn),
    FCVT_SVE_Zd_SME_Znx2(FCVT_SVE_Zd_SME_Znx2),
    FCVT_SVE_Zd_SVE_Pg3_SVE_Zn(FCVT_SVE_Zd_SVE_Pg3_SVE_Zn),
    FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H(FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H),
    FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S(FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S),
    FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D(FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D),
    FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D(FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D),
    FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H(FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H),
    FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FDIV_Fd_Fn_Fm(FDIV_Fd_Fn_Fm),
    FDIV_Fd_S_H_Fn_S_H_Fm_S_H(FDIV_Fd_S_H_Fn_S_H_Fm_S_H),
    FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S(FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FDIV_Vd_Vn_Vm(FDIV_Vd_Vn_Vm),
    FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX(FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX),
    FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FDUP_SVE_Zd_SVE_FPIMM8(FDUP_SVE_Zd_SVE_FPIMM8),
    FEXPA_SVE_Zd_SVE_Zn(FEXPA_SVE_Zd_SVE_Zn),
    FJCVTZS_Rd_Fn(FJCVTZS_Rd_Fn),
    FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn(FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn),
    FMADD_Fd_Fn_Fm_Fa(FMADD_Fd_Fn_Fm_Fa),
    FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H),
    FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16(FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16),
    FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    FMAXNMP_Sd_S_S_Vn_V_2S(FMAXNMP_Sd_S_S_Vn_V_2S),
    FMAXNMP_Sd_Vn(FMAXNMP_Sd_Vn),
    FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMAXNMP_Vd_Vn_Vm(FMAXNMP_Vd_Vn_Vm),
    FMAXNMQV_Vd_SVE_Pg3_SVE_Zn(FMAXNMQV_Vd_SVE_Pg3_SVE_Zn),
    FMAXNMV_Fd_S_S_Vn_V_4S(FMAXNMV_Fd_S_S_Vn_V_4S),
    FMAXNMV_Fd_Vn(FMAXNMV_Fd_Vn),
    FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn(FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn),
    FMAXNM_Fd_Fn_Fm(FMAXNM_Fd_Fn_Fm),
    FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H(FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H),
    FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm(FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm(FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE(FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE),
    FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMAXNM_Vd_Vn_Vm(FMAXNM_Vd_Vn_Vm),
    FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    FMAXP_Sd_S_S_Vn_V_2S(FMAXP_Sd_S_S_Vn_V_2S),
    FMAXP_Sd_Vn(FMAXP_Sd_Vn),
    FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMAXP_Vd_Vn_Vm(FMAXP_Vd_Vn_Vm),
    FMAXQV_Vd_SVE_Pg3_SVE_Zn(FMAXQV_Vd_SVE_Pg3_SVE_Zn),
    FMAXV_Fd_S_S_Vn_V_4S(FMAXV_Fd_S_S_Vn_V_4S),
    FMAXV_Fd_Vn(FMAXV_Fd_Vn),
    FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn(FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn),
    FMAX_Fd_Fn_Fm(FMAX_Fd_Fn_Fm),
    FMAX_Fd_S_H_Fn_S_H_Fm_S_H(FMAX_Fd_S_H_Fn_S_H_Fm_S_H),
    FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm(FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm(FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE(FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE),
    FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMAX_Vd_Vn_Vm(FMAX_Vd_Vn_Vm),
    FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    FMINNMP_Sd_S_S_Vn_V_2S(FMINNMP_Sd_S_S_Vn_V_2S),
    FMINNMP_Sd_Vn(FMINNMP_Sd_Vn),
    FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMINNMP_Vd_Vn_Vm(FMINNMP_Vd_Vn_Vm),
    FMINNMQV_Vd_SVE_Pg3_SVE_Zn(FMINNMQV_Vd_SVE_Pg3_SVE_Zn),
    FMINNMV_Fd_S_S_Vn_V_4S(FMINNMV_Fd_S_S_Vn_V_4S),
    FMINNMV_Fd_Vn(FMINNMV_Fd_Vn),
    FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn(FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn),
    FMINNM_Fd_Fn_Fm(FMINNM_Fd_Fn_Fm),
    FMINNM_Fd_S_H_Fn_S_H_Fm_S_H(FMINNM_Fd_S_H_Fn_S_H_Fm_S_H),
    FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm(FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm(FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE(FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE),
    FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMINNM_Vd_Vn_Vm(FMINNM_Vd_Vn_Vm),
    FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    FMINP_Sd_S_S_Vn_V_2S(FMINP_Sd_S_S_Vn_V_2S),
    FMINP_Sd_Vn(FMINP_Sd_Vn),
    FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMINP_Vd_Vn_Vm(FMINP_Vd_Vn_Vm),
    FMINQV_Vd_SVE_Pg3_SVE_Zn(FMINQV_Vd_SVE_Pg3_SVE_Zn),
    FMINV_Fd_S_S_Vn_V_4S(FMINV_Fd_S_S_Vn_V_4S),
    FMINV_Fd_Vn(FMINV_Fd_Vn),
    FMINV_SVE_Vd_SVE_Pg3_SVE_Zn(FMINV_SVE_Vd_SVE_Pg3_SVE_Zn),
    FMIN_Fd_Fn_Fm(FMIN_Fd_Fn_Fm),
    FMIN_Fd_S_H_Fn_S_H_Fm_S_H(FMIN_Fd_S_H_Fn_S_H_Fm_S_H),
    FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm(FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm(FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE(FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE),
    FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMIN_Vd_Vn_Vm(FMIN_Vd_Vn_Vm),
    FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H(FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H),
    FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H(FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H),
    FMLAL2_Vd_Vn_Em16(FMLAL2_Vd_Vn_Em16),
    FMLAL2_Vd_Vn_Vm(FMLAL2_Vd_Vn_Vm),
    FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16(FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H(FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H),
    FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H(FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H),
    FMLAL_Vd_Vn_Em16(FMLAL_Vd_Vn_Em16),
    FMLAL_Vd_Vn_Vm(FMLAL_Vd_Vn_Vm),
    FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1(
        FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1,
    ),
    FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S(
        FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S,
    ),
    FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    FMLA_Sd_Sn_Em(FMLA_Sd_Sn_Em),
    FMLA_Sd_Sn_Em16(FMLA_Sd_Sn_Em16),
    FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMLA_Vd_Vn_Em(FMLA_Vd_Vn_Em),
    FMLA_Vd_Vn_Em16(FMLA_Vd_Vn_Em16),
    FMLA_Vd_Vn_Vm(FMLA_Vd_Vn_Vm),
    FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H(FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H),
    FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H(FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H),
    FMLSL2_Vd_Vn_Em16(FMLSL2_Vd_Vn_Em16),
    FMLSL2_Vd_Vn_Vm(FMLSL2_Vd_Vn_Vm),
    FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16(FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16(FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H(FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H),
    FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H(FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H),
    FMLSL_Vd_Vn_Em16(FMLSL_Vd_Vn_Em16),
    FMLSL_Vd_Vn_Vm(FMLSL_Vd_Vn_Vm),
    FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1(
        FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1,
    ),
    FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S(
        FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S,
    ),
    FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    FMLS_Sd_Sn_Em(FMLS_Sd_Sn_Em),
    FMLS_Sd_Sn_Em16(FMLS_Sd_Sn_Em16),
    FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMLS_Vd_Vn_Em(FMLS_Vd_Vn_Em),
    FMLS_Vd_Vn_Em16(FMLS_Vd_Vn_Em16),
    FMLS_Vd_Vn_Vm(FMLS_Vd_Vn_Vm),
    FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D(FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D),
    FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H(
        FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H,
    ),
    FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H(
        FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H,
    ),
    FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    FMOV_Fd_FPIMM(FMOV_Fd_FPIMM),
    FMOV_Fd_Fn(FMOV_Fd_Fn),
    FMOV_Fd_Rn(FMOV_Fd_Rn),
    FMOV_Fd_S_H_FPIMM(FMOV_Fd_S_H_FPIMM),
    FMOV_Fd_S_H_Fn_S_H(FMOV_Fd_S_H_Fn_S_H),
    FMOV_Fd_S_H_Rn_W(FMOV_Fd_S_H_Rn_W),
    FMOV_Rd_Fn(FMOV_Rd_Fn),
    FMOV_Rd_VnD1(FMOV_Rd_VnD1),
    FMOV_Rd_W_Fn_S_H(FMOV_Rd_W_Fn_S_H),
    FMOV_VdD1_Rn(FMOV_VdD1_Rn),
    FMOV_Vd_SIMD_FPIMM(FMOV_Vd_SIMD_FPIMM),
    FMOV_Vd_V_2D_SIMD_FPIMM(FMOV_Vd_V_2D_SIMD_FPIMM),
    FMOV_Vd_V_4H_SIMD_FPIMM(FMOV_Vd_V_4H_SIMD_FPIMM),
    FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16(FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16),
    FMSUB_Fd_Fn_Fm_Fa(FMSUB_Fd_Fn_Fm_Fa),
    FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H),
    FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMULX_Sd_S_S_Sn_S_S_Sm_S_S(FMULX_Sd_S_S_Sn_S_S_Sm_S_S),
    FMULX_Sd_Sn_Em(FMULX_Sd_Sn_Em),
    FMULX_Sd_Sn_Em16(FMULX_Sd_Sn_Em16),
    FMULX_Sd_Sn_Sm(FMULX_Sd_Sn_Sm),
    FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMULX_Vd_Vn_Em(FMULX_Vd_Vn_Em),
    FMULX_Vd_Vn_Em16(FMULX_Vd_Vn_Em16),
    FMULX_Vd_Vn_Vm(FMULX_Vd_Vn_Vm),
    FMUL_Fd_Fn_Fm(FMUL_Fd_Fn_Fm),
    FMUL_Fd_S_H_Fn_S_H_Fm_S_H(FMUL_Fd_S_H_Fn_S_H_Fm_S_H),
    FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO(FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO),
    FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16(FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FMUL_Sd_Sn_Em(FMUL_Sd_Sn_Em),
    FMUL_Sd_Sn_Em16(FMUL_Sd_Sn_Em16),
    FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S(FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FMUL_Vd_Vn_Em(FMUL_Vd_Vn_Em),
    FMUL_Vd_Vn_Em16(FMUL_Vd_Vn_Em16),
    FMUL_Vd_Vn_Vm(FMUL_Vd_Vn_Vm),
    FNEG_Fd_Fn(FNEG_Fd_Fn),
    FNEG_Fd_S_H_Fn_S_H(FNEG_Fd_S_H_Fn_S_H),
    FNEG_SVE_Zd_SVE_Pg3_SVE_Zn(FNEG_SVE_Zd_SVE_Pg3_SVE_Zn),
    FNEG_Vd_V_4H_Vn_V_4H(FNEG_Vd_V_4H_Vn_V_4H),
    FNEG_Vd_Vn(FNEG_Vd_Vn),
    FNMADD_Fd_Fn_Fm_Fa(FNMADD_Fd_Fn_Fm_Fa),
    FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H),
    FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16(FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16),
    FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16(FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16),
    FNMSUB_Fd_Fn_Fm_Fa(FNMSUB_Fd_Fn_Fm_Fa),
    FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H),
    FNMUL_Fd_Fn_Fm(FNMUL_Fd_Fn_Fm),
    FNMUL_Fd_S_H_Fn_S_H_Fm_S_H(FNMUL_Fd_S_H_Fn_S_H_Fm_S_H),
    FRECPE_SVE_Zd_SVE_Zn(FRECPE_SVE_Zd_SVE_Zn),
    FRECPE_Sd_S_H_Sn_S_H(FRECPE_Sd_S_H_Sn_S_H),
    FRECPE_Sd_Sn(FRECPE_Sd_Sn),
    FRECPE_Vd_V_4H_Vn_V_4H(FRECPE_Vd_V_4H_Vn_V_4H),
    FRECPE_Vd_Vn(FRECPE_Vd_Vn),
    FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16(FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FRECPS_Sd_S_S_Sn_S_S_Sm_S_S(FRECPS_Sd_S_S_Sn_S_S_Sm_S_S),
    FRECPS_Sd_Sn_Sm(FRECPS_Sd_Sn_Sm),
    FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S(FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FRECPS_Vd_Vn_Vm(FRECPS_Vd_Vn_Vm),
    FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn(FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRECPX_Sd_S_H_Sn_S_H(FRECPX_Sd_S_H_Sn_S_H),
    FRECPX_Sd_Sn(FRECPX_Sd_Sn),
    FRINT32X_Fd_Fn(FRINT32X_Fd_Fn),
    FRINT32X_Vd_Vn(FRINT32X_Vd_Vn),
    FRINT32Z_Fd_Fn(FRINT32Z_Fd_Fn),
    FRINT32Z_Vd_Vn(FRINT32Z_Vd_Vn),
    FRINT64X_Fd_Fn(FRINT64X_Fd_Fn),
    FRINT64X_Vd_Vn(FRINT64X_Vd_Vn),
    FRINT64Z_Fd_Fn(FRINT64Z_Fd_Fn),
    FRINT64Z_Vd_Vn(FRINT64Z_Vd_Vn),
    FRINTA_Fd_Fn(FRINTA_Fd_Fn),
    FRINTA_Fd_S_H_Fn_S_H(FRINTA_Fd_S_H_Fn_S_H),
    FRINTA_SME_Zdnx2_SME_Znx2(FRINTA_SME_Zdnx2_SME_Znx2),
    FRINTA_SME_Zdnx4_SME_Znx4(FRINTA_SME_Zdnx4_SME_Znx4),
    FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTA_Vd_V_4H_Vn_V_4H(FRINTA_Vd_V_4H_Vn_V_4H),
    FRINTA_Vd_Vn(FRINTA_Vd_Vn),
    FRINTI_Fd_Fn(FRINTI_Fd_Fn),
    FRINTI_Fd_S_H_Fn_S_H(FRINTI_Fd_S_H_Fn_S_H),
    FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTI_Vd_V_4H_Vn_V_4H(FRINTI_Vd_V_4H_Vn_V_4H),
    FRINTI_Vd_Vn(FRINTI_Vd_Vn),
    FRINTM_Fd_Fn(FRINTM_Fd_Fn),
    FRINTM_Fd_S_H_Fn_S_H(FRINTM_Fd_S_H_Fn_S_H),
    FRINTM_SME_Zdnx2_SME_Znx2(FRINTM_SME_Zdnx2_SME_Znx2),
    FRINTM_SME_Zdnx4_SME_Znx4(FRINTM_SME_Zdnx4_SME_Znx4),
    FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTM_Vd_V_4H_Vn_V_4H(FRINTM_Vd_V_4H_Vn_V_4H),
    FRINTM_Vd_Vn(FRINTM_Vd_Vn),
    FRINTN_Fd_Fn(FRINTN_Fd_Fn),
    FRINTN_Fd_S_H_Fn_S_H(FRINTN_Fd_S_H_Fn_S_H),
    FRINTN_SME_Zdnx2_SME_Znx2(FRINTN_SME_Zdnx2_SME_Znx2),
    FRINTN_SME_Zdnx4_SME_Znx4(FRINTN_SME_Zdnx4_SME_Znx4),
    FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTN_Vd_V_4H_Vn_V_4H(FRINTN_Vd_V_4H_Vn_V_4H),
    FRINTN_Vd_Vn(FRINTN_Vd_Vn),
    FRINTP_Fd_Fn(FRINTP_Fd_Fn),
    FRINTP_Fd_S_H_Fn_S_H(FRINTP_Fd_S_H_Fn_S_H),
    FRINTP_SME_Zdnx2_SME_Znx2(FRINTP_SME_Zdnx2_SME_Znx2),
    FRINTP_SME_Zdnx4_SME_Znx4(FRINTP_SME_Zdnx4_SME_Znx4),
    FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTP_Vd_V_4H_Vn_V_4H(FRINTP_Vd_V_4H_Vn_V_4H),
    FRINTP_Vd_Vn(FRINTP_Vd_Vn),
    FRINTX_Fd_Fn(FRINTX_Fd_Fn),
    FRINTX_Fd_S_H_Fn_S_H(FRINTX_Fd_S_H_Fn_S_H),
    FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTX_Vd_V_4H_Vn_V_4H(FRINTX_Vd_V_4H_Vn_V_4H),
    FRINTX_Vd_Vn(FRINTX_Vd_Vn),
    FRINTZ_Fd_Fn(FRINTZ_Fd_Fn),
    FRINTZ_Fd_S_H_Fn_S_H(FRINTZ_Fd_S_H_Fn_S_H),
    FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn(FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn),
    FRINTZ_Vd_V_4H_Vn_V_4H(FRINTZ_Vd_V_4H_Vn_V_4H),
    FRINTZ_Vd_Vn(FRINTZ_Vd_Vn),
    FRSQRTE_SVE_Zd_SVE_Zn(FRSQRTE_SVE_Zd_SVE_Zn),
    FRSQRTE_Sd_S_H_Sn_S_H(FRSQRTE_Sd_S_H_Sn_S_H),
    FRSQRTE_Sd_Sn(FRSQRTE_Sd_Sn),
    FRSQRTE_Vd_V_4H_Vn_V_4H(FRSQRTE_Vd_V_4H_Vn_V_4H),
    FRSQRTE_Vd_Vn(FRSQRTE_Vd_Vn),
    FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16(FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S(FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S),
    FRSQRTS_Sd_Sn_Sm(FRSQRTS_Sd_Sn_Sm),
    FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S(FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FRSQRTS_Vd_Vn_Vm(FRSQRTS_Vd_Vn_Vm),
    FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FSQRT_Fd_Fn(FSQRT_Fd_Fn),
    FSQRT_Fd_S_H_Fn_S_H(FSQRT_Fd_S_H_Fn_S_H),
    FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn(FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn),
    FSQRT_Vd_V_4H_Vn_V_4H(FSQRT_Vd_V_4H_Vn_V_4H),
    FSQRT_Vd_Vn(FSQRT_Vd_Vn),
    FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE(FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE),
    FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FSUB_Fd_Fn_Fm(FSUB_Fd_Fn_Fm),
    FSUB_Fd_S_H_Fn_S_H_Fm_S_H(FSUB_Fd_S_H_Fn_S_H_Fm_S_H),
    FSUB_SME_ZA_array_off3_0_SME_Znx2(FSUB_SME_ZA_array_off3_0_SME_Znx2),
    FSUB_SME_ZA_array_off3_0_SME_Znx4(FSUB_SME_ZA_array_off3_0_SME_Znx4),
    FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE(FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE),
    FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16(FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S(FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S),
    FSUB_Vd_Vn_Vm(FSUB_Vd_Vn_Vm),
    FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3(FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3),
    FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16(FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16(FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    GCSPOPCX(GCSPOPCX),
    GCSPOPM(GCSPOPM),
    GCSPOPM_Rt(GCSPOPM_Rt),
    GCSPOPX(GCSPOPX),
    GCSPUSHM_Rt(GCSPUSHM_Rt),
    GCSPUSHX(GCSPUSHX),
    GCSSS1_Rt(GCSSS1_Rt),
    GCSSS2_Rt(GCSSS2_Rt),
    GCSSTR_Rt_Rn_SP(GCSSTR_Rt_Rn_SP),
    GCSSTTR_Rt_Rn_SP(GCSSTTR_Rt_Rn_SP),
    GMI_Rd_Rn_SP_Rm(GMI_Rd_Rn_SP_Rm),
    HINT_UIMM7(HINT_UIMM7),
    HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16(HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16),
    HLT_EXCEPTION(HLT_EXCEPTION),
    HVC_EXCEPTION(HVC_EXCEPTION),
    INCB_Rd_SVE_PATTERN_SCALED(INCB_Rd_SVE_PATTERN_SCALED),
    INCD_Rd_SVE_PATTERN_SCALED(INCD_Rd_SVE_PATTERN_SCALED),
    INCD_SVE_Zd_SVE_PATTERN_SCALED(INCD_SVE_Zd_SVE_PATTERN_SCALED),
    INCH_Rd_SVE_PATTERN_SCALED(INCH_Rd_SVE_PATTERN_SCALED),
    INCH_SVE_Zd_SVE_PATTERN_SCALED(INCH_SVE_Zd_SVE_PATTERN_SCALED),
    INCP_Rd_SVE_Pg4_5(INCP_Rd_SVE_Pg4_5),
    INCP_SVE_Zd_SVE_Pg4_5(INCP_SVE_Zd_SVE_Pg4_5),
    INCW_Rd_SVE_PATTERN_SCALED(INCW_Rd_SVE_PATTERN_SCALED),
    INCW_SVE_Zd_SVE_PATTERN_SCALED(INCW_SVE_Zd_SVE_PATTERN_SCALED),
    INDEX_SVE_Zd_Rn_Rm(INDEX_SVE_Zd_Rn_Rm),
    INDEX_SVE_Zd_Rn_SIMM5(INDEX_SVE_Zd_Rn_SIMM5),
    INDEX_SVE_Zd_SVE_SIMM5_Rm(INDEX_SVE_Zd_SVE_SIMM5_Rm),
    INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B(INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B),
    INSR_SVE_Zd_SVE_Rm(INSR_SVE_Zd_SVE_Rm),
    INSR_SVE_Zd_SVE_Vm(INSR_SVE_Zd_SVE_Vm),
    INS_Ed_En(INS_Ed_En),
    INS_Ed_Rn(INS_Ed_Rn),
    IRG_Rd_SP_Rn_SP_Rm(IRG_Rd_SP_Rn_SP_Rm),
    ISB_BARRIER_ISB(ISB_BARRIER_ISB),
    LASTA_Rd_SVE_Pg3_SVE_Zn(LASTA_Rd_SVE_Pg3_SVE_Zn),
    LASTA_SVE_Vd_SVE_Pg3_SVE_Zn(LASTA_SVE_Vd_SVE_Pg3_SVE_Zn),
    LASTB_Rd_SVE_Pg3_SVE_Zn(LASTB_Rd_SVE_Pg3_SVE_Zn),
    LASTB_SVE_Vd_SVE_Pg3_SVE_Zn(LASTB_SVE_Vd_SVE_Pg3_SVE_Zn),
    LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR(LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR),
    LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR(LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR),
    LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR(LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR),
    LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR(LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR),
    LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR(LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX(LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX),
    LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D(
        LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D,
    ),
    LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX(LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX),
    LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX(LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX),
    LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3(
        LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3,
    ),
    LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3(LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3),
    LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3(LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3),
    LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8(LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8),
    LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1(
        LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1,
    ),
    LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1(LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1),
    LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1(LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1),
    LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1(LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1),
    LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D(
        LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D,
    ),
    LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D(
        LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D,
    ),
    LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1(LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1),
    LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4(
        LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4,
    ),
    LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX(LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX),
    LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6(LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6),
    LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6(LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6),
    LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6(LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6),
    LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6(LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6),
    LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8(LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8),
    LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2(LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2),
    LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2(
        LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2,
    ),
    LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2(
        LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2,
    ),
    LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32(LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32),
    LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32(LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32),
    LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32(LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32),
    LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32(LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32),
    LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16(LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16),
    LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16(LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16),
    LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16(LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16),
    LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16(LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16),
    LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6(LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6),
    LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6(LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6),
    LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6(LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6),
    LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2(LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2),
    LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2(
        LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2,
    ),
    LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4(LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4),
    LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4(LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4),
    LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4(
        LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4,
    ),
    LD1R_LVt_AL_SIMD_ADDR_POST(LD1R_LVt_AL_SIMD_ADDR_POST),
    LD1R_LVt_AL_SIMD_ADDR_SIMPLE(LD1R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D(
        LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D,
    ),
    LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX(LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX),
    LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX(LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D(
        LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D,
    ),
    LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D(
        LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D,
    ),
    LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1(
        LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1,
    ),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2(
        LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2,
    ),
    LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2(LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2),
    LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2(LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2),
    LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2(LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D(
        LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D,
    ),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D(
        LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D,
    ),
    LD1_LEt_SIMD_ADDR_POST(LD1_LEt_SIMD_ADDR_POST),
    LD1_LEt_SIMD_ADDR_SIMPLE(LD1_LEt_SIMD_ADDR_SIMPLE),
    LD1_LVt_SIMD_ADDR_POST(LD1_LVt_SIMD_ADDR_POST),
    LD1_LVt_SIMD_ADDR_SIMPLE(LD1_LVt_SIMD_ADDR_SIMPLE),
    LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4(LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4),
    LD2R_LVt_AL_SIMD_ADDR_POST(LD2R_LVt_AL_SIMD_ADDR_POST),
    LD2R_LVt_AL_SIMD_ADDR_SIMPLE(LD2R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD2_LEt_SIMD_ADDR_POST(LD2_LEt_SIMD_ADDR_POST),
    LD2_LEt_SIMD_ADDR_SIMPLE(LD2_LEt_SIMD_ADDR_SIMPLE),
    LD2_LVt_SIMD_ADDR_POST(LD2_LVt_SIMD_ADDR_POST),
    LD2_LVt_SIMD_ADDR_SIMPLE(LD2_LVt_SIMD_ADDR_SIMPLE),
    LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4(LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4),
    LD3R_LVt_AL_SIMD_ADDR_POST(LD3R_LVt_AL_SIMD_ADDR_POST),
    LD3R_LVt_AL_SIMD_ADDR_SIMPLE(LD3R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD3_LEt_SIMD_ADDR_POST(LD3_LEt_SIMD_ADDR_POST),
    LD3_LEt_SIMD_ADDR_SIMPLE(LD3_LEt_SIMD_ADDR_SIMPLE),
    LD3_LVt_SIMD_ADDR_POST(LD3_LVt_SIMD_ADDR_POST),
    LD3_LVt_SIMD_ADDR_SIMPLE(LD3_LVt_SIMD_ADDR_SIMPLE),
    LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4(LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4),
    LD4R_LVt_AL_SIMD_ADDR_POST(LD4R_LVt_AL_SIMD_ADDR_POST),
    LD4R_LVt_AL_SIMD_ADDR_SIMPLE(LD4R_LVt_AL_SIMD_ADDR_SIMPLE),
    LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LD4_LEt_SIMD_ADDR_POST(LD4_LEt_SIMD_ADDR_POST),
    LD4_LEt_SIMD_ADDR_SIMPLE(LD4_LEt_SIMD_ADDR_SIMPLE),
    LD4_LVt_SIMD_ADDR_POST(LD4_LVt_SIMD_ADDR_POST),
    LD4_LVt_SIMD_ADDR_SIMPLE(LD4_LVt_SIMD_ADDR_SIMPLE),
    LD64B_Rt_LS64_ADDR_SIMPLE(LD64B_Rt_LS64_ADDR_SIMPLE),
    LDADDAB_Rs_Rt_ADDR_SIMPLE(LDADDAB_Rs_Rt_ADDR_SIMPLE),
    LDADDAH_Rs_Rt_ADDR_SIMPLE(LDADDAH_Rs_Rt_ADDR_SIMPLE),
    LDADDALB_Rs_Rt_ADDR_SIMPLE(LDADDALB_Rs_Rt_ADDR_SIMPLE),
    LDADDALH_Rs_Rt_ADDR_SIMPLE(LDADDALH_Rs_Rt_ADDR_SIMPLE),
    LDADDAL_Rs_Rt_ADDR_SIMPLE(LDADDAL_Rs_Rt_ADDR_SIMPLE),
    LDADDA_Rs_Rt_ADDR_SIMPLE(LDADDA_Rs_Rt_ADDR_SIMPLE),
    LDADDB_Rs_Rt_ADDR_SIMPLE(LDADDB_Rs_Rt_ADDR_SIMPLE),
    LDADDH_Rs_Rt_ADDR_SIMPLE(LDADDH_Rs_Rt_ADDR_SIMPLE),
    LDADDLB_Rs_Rt_ADDR_SIMPLE(LDADDLB_Rs_Rt_ADDR_SIMPLE),
    LDADDLH_Rs_Rt_ADDR_SIMPLE(LDADDLH_Rs_Rt_ADDR_SIMPLE),
    LDADDL_Rs_Rt_ADDR_SIMPLE(LDADDL_Rs_Rt_ADDR_SIMPLE),
    LDADD_Rs_Rt_ADDR_SIMPLE(LDADD_Rs_Rt_ADDR_SIMPLE),
    LDAP1_LEt_SIMD_ADDR_SIMPLE(LDAP1_LEt_SIMD_ADDR_SIMPLE),
    LDAPRB_Rt_ADDR_SIMPLE(LDAPRB_Rt_ADDR_SIMPLE),
    LDAPRH_Rt_ADDR_SIMPLE(LDAPRH_Rt_ADDR_SIMPLE),
    LDAPR_Rt_ADDR_SIMPLE(LDAPR_Rt_ADDR_SIMPLE),
    LDAPR_Rt_RCPC3_ADDR_POSTIND(LDAPR_Rt_RCPC3_ADDR_POSTIND),
    LDAPURB_Rt_ADDR_OFFSET(LDAPURB_Rt_ADDR_OFFSET),
    LDAPURH_Rt_ADDR_OFFSET(LDAPURH_Rt_ADDR_OFFSET),
    LDAPURSB_Rt_ADDR_OFFSET(LDAPURSB_Rt_ADDR_OFFSET),
    LDAPURSB_Rt_W_ADDR_OFFSET(LDAPURSB_Rt_W_ADDR_OFFSET),
    LDAPURSH_Rt_ADDR_OFFSET(LDAPURSH_Rt_ADDR_OFFSET),
    LDAPURSH_Rt_W_ADDR_OFFSET(LDAPURSH_Rt_W_ADDR_OFFSET),
    LDAPURSW_Rt_ADDR_OFFSET(LDAPURSW_Rt_ADDR_OFFSET),
    LDAPUR_Ft_RCPC3_ADDR_OFFSET(LDAPUR_Ft_RCPC3_ADDR_OFFSET),
    LDAPUR_Rt_ADDR_OFFSET(LDAPUR_Rt_ADDR_OFFSET),
    LDAPUR_Rt_X_ADDR_OFFSET(LDAPUR_Rt_X_ADDR_OFFSET),
    LDARB_Rt_ADDR_SIMPLE(LDARB_Rt_ADDR_SIMPLE),
    LDARH_Rt_ADDR_SIMPLE(LDARH_Rt_ADDR_SIMPLE),
    LDAR_Rt_ADDR_SIMPLE(LDAR_Rt_ADDR_SIMPLE),
    LDAXP_Rt_Rt2_ADDR_SIMPLE(LDAXP_Rt_Rt2_ADDR_SIMPLE),
    LDAXRB_Rt_ADDR_SIMPLE(LDAXRB_Rt_ADDR_SIMPLE),
    LDAXRH_Rt_ADDR_SIMPLE(LDAXRH_Rt_ADDR_SIMPLE),
    LDAXR_Rt_ADDR_SIMPLE(LDAXR_Rt_ADDR_SIMPLE),
    LDCLRAB_Rs_Rt_ADDR_SIMPLE(LDCLRAB_Rs_Rt_ADDR_SIMPLE),
    LDCLRAH_Rs_Rt_ADDR_SIMPLE(LDCLRAH_Rs_Rt_ADDR_SIMPLE),
    LDCLRALB_Rs_Rt_ADDR_SIMPLE(LDCLRALB_Rs_Rt_ADDR_SIMPLE),
    LDCLRALH_Rs_Rt_ADDR_SIMPLE(LDCLRALH_Rs_Rt_ADDR_SIMPLE),
    LDCLRAL_Rs_Rt_ADDR_SIMPLE(LDCLRAL_Rs_Rt_ADDR_SIMPLE),
    LDCLRA_Rs_Rt_ADDR_SIMPLE(LDCLRA_Rs_Rt_ADDR_SIMPLE),
    LDCLRB_Rs_Rt_ADDR_SIMPLE(LDCLRB_Rs_Rt_ADDR_SIMPLE),
    LDCLRH_Rs_Rt_ADDR_SIMPLE(LDCLRH_Rs_Rt_ADDR_SIMPLE),
    LDCLRLB_Rs_Rt_ADDR_SIMPLE(LDCLRLB_Rs_Rt_ADDR_SIMPLE),
    LDCLRLH_Rs_Rt_ADDR_SIMPLE(LDCLRLH_Rs_Rt_ADDR_SIMPLE),
    LDCLRL_Rs_Rt_ADDR_SIMPLE(LDCLRL_Rs_Rt_ADDR_SIMPLE),
    LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDCLR_Rs_Rt_ADDR_SIMPLE(LDCLR_Rs_Rt_ADDR_SIMPLE),
    LDEORAB_Rs_Rt_ADDR_SIMPLE(LDEORAB_Rs_Rt_ADDR_SIMPLE),
    LDEORAH_Rs_Rt_ADDR_SIMPLE(LDEORAH_Rs_Rt_ADDR_SIMPLE),
    LDEORALB_Rs_Rt_ADDR_SIMPLE(LDEORALB_Rs_Rt_ADDR_SIMPLE),
    LDEORALH_Rs_Rt_ADDR_SIMPLE(LDEORALH_Rs_Rt_ADDR_SIMPLE),
    LDEORAL_Rs_Rt_ADDR_SIMPLE(LDEORAL_Rs_Rt_ADDR_SIMPLE),
    LDEORA_Rs_Rt_ADDR_SIMPLE(LDEORA_Rs_Rt_ADDR_SIMPLE),
    LDEORB_Rs_Rt_ADDR_SIMPLE(LDEORB_Rs_Rt_ADDR_SIMPLE),
    LDEORH_Rs_Rt_ADDR_SIMPLE(LDEORH_Rs_Rt_ADDR_SIMPLE),
    LDEORLB_Rs_Rt_ADDR_SIMPLE(LDEORLB_Rs_Rt_ADDR_SIMPLE),
    LDEORLH_Rs_Rt_ADDR_SIMPLE(LDEORLH_Rs_Rt_ADDR_SIMPLE),
    LDEORL_Rs_Rt_ADDR_SIMPLE(LDEORL_Rs_Rt_ADDR_SIMPLE),
    LDEOR_Rs_Rt_ADDR_SIMPLE(LDEOR_Rs_Rt_ADDR_SIMPLE),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR(LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR),
    LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D(
        LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D,
    ),
    LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR(LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR),
    LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR(LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL3),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8(LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1(
        LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1,
    ),
    LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D(
        LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D,
    ),
    LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D(
        LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D,
    ),
    LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1(
        LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1,
    ),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D(
        LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D,
    ),
    LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR(LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RR),
    LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR(LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL1),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D(
        LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D,
    ),
    LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D(
        LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D,
    ),
    LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1(
        LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL1,
    ),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RR_LSL2),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R(LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R),
    LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2(
        LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RR_LSL2,
    ),
    LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D(
        LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D,
    ),
    LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D(
        LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D,
    ),
    LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D(
        LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D,
    ),
    LDGM_Rt_ADDR_SIMPLE(LDGM_Rt_ADDR_SIMPLE),
    LDG_Rt_ADDR_SIMM13(LDG_Rt_ADDR_SIMM13),
    LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND(LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND),
    LDLARB_Rt_ADDR_SIMPLE(LDLARB_Rt_ADDR_SIMPLE),
    LDLARH_Rt_ADDR_SIMPLE(LDLARH_Rt_ADDR_SIMPLE),
    LDLAR_Rt_ADDR_SIMPLE(LDLAR_Rt_ADDR_SIMPLE),
    LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL(
        LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL,
    ),
    LDNP_Ft_Ft2_ADDR_SIMM7(LDNP_Ft_Ft2_ADDR_SIMM7),
    LDNP_Rt_Rt2_ADDR_SIMM7(LDNP_Rt_Rt2_ADDR_SIMM7),
    LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR(LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR),
    LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR(LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR),
    LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR(LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR),
    LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR(LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR),
    LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S(
        LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S,
    ),
    LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3(LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3),
    LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3(LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3),
    LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1(LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1),
    LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1(LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1),
    LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S(
        LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S,
    ),
    LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2(LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2),
    LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2(LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2),
    LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D(
        LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D,
    ),
    LDPSW_Rt_Rt2_ADDR_SIMM7(LDPSW_Rt_Rt2_ADDR_SIMM7),
    LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S(LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S),
    LDP_Ft_Ft2_ADDR_SIMM7(LDP_Ft_Ft2_ADDR_SIMM7),
    LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S(LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S),
    LDP_Rt_Rt2_ADDR_SIMM7(LDP_Rt_Rt2_ADDR_SIMM7),
    LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S(LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S),
    LDRAA_Rt_ADDR_SIMM10(LDRAA_Rt_ADDR_SIMM10),
    LDRAB_Rt_ADDR_SIMM10(LDRAB_Rt_ADDR_SIMM10),
    LDRB_Rt_ADDR_REGOFF(LDRB_Rt_ADDR_REGOFF),
    LDRB_Rt_ADDR_SIMM9(LDRB_Rt_ADDR_SIMM9),
    LDRB_Rt_ADDR_UIMM12(LDRB_Rt_ADDR_UIMM12),
    LDRH_Rt_ADDR_REGOFF(LDRH_Rt_ADDR_REGOFF),
    LDRH_Rt_ADDR_SIMM9(LDRH_Rt_ADDR_SIMM9),
    LDRH_Rt_ADDR_UIMM12(LDRH_Rt_ADDR_UIMM12),
    LDRSB_Rt_ADDR_REGOFF(LDRSB_Rt_ADDR_REGOFF),
    LDRSB_Rt_ADDR_SIMM9(LDRSB_Rt_ADDR_SIMM9),
    LDRSB_Rt_ADDR_UIMM12(LDRSB_Rt_ADDR_UIMM12),
    LDRSH_Rt_ADDR_REGOFF(LDRSH_Rt_ADDR_REGOFF),
    LDRSH_Rt_ADDR_SIMM9(LDRSH_Rt_ADDR_SIMM9),
    LDRSH_Rt_ADDR_UIMM12(LDRSH_Rt_ADDR_UIMM12),
    LDRSW_Rt_ADDR_PCREL19(LDRSW_Rt_ADDR_PCREL19),
    LDRSW_Rt_ADDR_REGOFF(LDRSW_Rt_ADDR_REGOFF),
    LDRSW_Rt_ADDR_SIMM9(LDRSW_Rt_ADDR_SIMM9),
    LDRSW_Rt_ADDR_UIMM12(LDRSW_Rt_ADDR_UIMM12),
    LDR_Ft_ADDR_PCREL19(LDR_Ft_ADDR_PCREL19),
    LDR_Ft_ADDR_REGOFF(LDR_Ft_ADDR_REGOFF),
    LDR_Ft_ADDR_SIMM9(LDR_Ft_ADDR_SIMM9),
    LDR_Ft_ADDR_UIMM12(LDR_Ft_ADDR_UIMM12),
    LDR_Rt_ADDR_PCREL19(LDR_Rt_ADDR_PCREL19),
    LDR_Rt_ADDR_REGOFF(LDR_Rt_ADDR_REGOFF),
    LDR_Rt_ADDR_SIMM9(LDR_Rt_ADDR_SIMM9),
    LDR_Rt_ADDR_UIMM12(LDR_Rt_ADDR_UIMM12),
    LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL(LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL),
    LDR_SME_ZT0_SIMD_ADDR_SIMPLE(LDR_SME_ZT0_SIMD_ADDR_SIMPLE),
    LDR_SVE_PNt_SVE_ADDR_RI_S9xVL(LDR_SVE_PNt_SVE_ADDR_RI_S9xVL),
    LDR_SVE_Pt_SVE_ADDR_RI_S9xVL(LDR_SVE_Pt_SVE_ADDR_RI_S9xVL),
    LDR_SVE_Zt_SVE_ADDR_RI_S9xVL(LDR_SVE_Zt_SVE_ADDR_RI_S9xVL),
    LDSETAB_Rs_Rt_ADDR_SIMPLE(LDSETAB_Rs_Rt_ADDR_SIMPLE),
    LDSETAH_Rs_Rt_ADDR_SIMPLE(LDSETAH_Rs_Rt_ADDR_SIMPLE),
    LDSETALB_Rs_Rt_ADDR_SIMPLE(LDSETALB_Rs_Rt_ADDR_SIMPLE),
    LDSETALH_Rs_Rt_ADDR_SIMPLE(LDSETALH_Rs_Rt_ADDR_SIMPLE),
    LDSETAL_Rs_Rt_ADDR_SIMPLE(LDSETAL_Rs_Rt_ADDR_SIMPLE),
    LDSETA_Rs_Rt_ADDR_SIMPLE(LDSETA_Rs_Rt_ADDR_SIMPLE),
    LDSETB_Rs_Rt_ADDR_SIMPLE(LDSETB_Rs_Rt_ADDR_SIMPLE),
    LDSETH_Rs_Rt_ADDR_SIMPLE(LDSETH_Rs_Rt_ADDR_SIMPLE),
    LDSETLB_Rs_Rt_ADDR_SIMPLE(LDSETLB_Rs_Rt_ADDR_SIMPLE),
    LDSETLH_Rs_Rt_ADDR_SIMPLE(LDSETLH_Rs_Rt_ADDR_SIMPLE),
    LDSETL_Rs_Rt_ADDR_SIMPLE(LDSETL_Rs_Rt_ADDR_SIMPLE),
    LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    LDSET_Rs_Rt_ADDR_SIMPLE(LDSET_Rs_Rt_ADDR_SIMPLE),
    LDSMAXAB_Rs_Rt_ADDR_SIMPLE(LDSMAXAB_Rs_Rt_ADDR_SIMPLE),
    LDSMAXAH_Rs_Rt_ADDR_SIMPLE(LDSMAXAH_Rs_Rt_ADDR_SIMPLE),
    LDSMAXALB_Rs_Rt_ADDR_SIMPLE(LDSMAXALB_Rs_Rt_ADDR_SIMPLE),
    LDSMAXALH_Rs_Rt_ADDR_SIMPLE(LDSMAXALH_Rs_Rt_ADDR_SIMPLE),
    LDSMAXAL_Rs_Rt_ADDR_SIMPLE(LDSMAXAL_Rs_Rt_ADDR_SIMPLE),
    LDSMAXA_Rs_Rt_ADDR_SIMPLE(LDSMAXA_Rs_Rt_ADDR_SIMPLE),
    LDSMAXB_Rs_Rt_ADDR_SIMPLE(LDSMAXB_Rs_Rt_ADDR_SIMPLE),
    LDSMAXH_Rs_Rt_ADDR_SIMPLE(LDSMAXH_Rs_Rt_ADDR_SIMPLE),
    LDSMAXLB_Rs_Rt_ADDR_SIMPLE(LDSMAXLB_Rs_Rt_ADDR_SIMPLE),
    LDSMAXLH_Rs_Rt_ADDR_SIMPLE(LDSMAXLH_Rs_Rt_ADDR_SIMPLE),
    LDSMAXL_Rs_Rt_ADDR_SIMPLE(LDSMAXL_Rs_Rt_ADDR_SIMPLE),
    LDSMAX_Rs_Rt_ADDR_SIMPLE(LDSMAX_Rs_Rt_ADDR_SIMPLE),
    LDSMINAB_Rs_Rt_ADDR_SIMPLE(LDSMINAB_Rs_Rt_ADDR_SIMPLE),
    LDSMINAH_Rs_Rt_ADDR_SIMPLE(LDSMINAH_Rs_Rt_ADDR_SIMPLE),
    LDSMINALB_Rs_Rt_ADDR_SIMPLE(LDSMINALB_Rs_Rt_ADDR_SIMPLE),
    LDSMINALH_Rs_Rt_ADDR_SIMPLE(LDSMINALH_Rs_Rt_ADDR_SIMPLE),
    LDSMINAL_Rs_Rt_ADDR_SIMPLE(LDSMINAL_Rs_Rt_ADDR_SIMPLE),
    LDSMINA_Rs_Rt_ADDR_SIMPLE(LDSMINA_Rs_Rt_ADDR_SIMPLE),
    LDSMINB_Rs_Rt_ADDR_SIMPLE(LDSMINB_Rs_Rt_ADDR_SIMPLE),
    LDSMINH_Rs_Rt_ADDR_SIMPLE(LDSMINH_Rs_Rt_ADDR_SIMPLE),
    LDSMINLB_Rs_Rt_ADDR_SIMPLE(LDSMINLB_Rs_Rt_ADDR_SIMPLE),
    LDSMINLH_Rs_Rt_ADDR_SIMPLE(LDSMINLH_Rs_Rt_ADDR_SIMPLE),
    LDSMINL_Rs_Rt_ADDR_SIMPLE(LDSMINL_Rs_Rt_ADDR_SIMPLE),
    LDSMIN_Rs_Rt_ADDR_SIMPLE(LDSMIN_Rs_Rt_ADDR_SIMPLE),
    LDTRB_Rt_ADDR_SIMM9(LDTRB_Rt_ADDR_SIMM9),
    LDTRH_Rt_ADDR_SIMM9(LDTRH_Rt_ADDR_SIMM9),
    LDTRSB_Rt_ADDR_SIMM9(LDTRSB_Rt_ADDR_SIMM9),
    LDTRSH_Rt_ADDR_SIMM9(LDTRSH_Rt_ADDR_SIMM9),
    LDTRSW_Rt_ADDR_SIMM9(LDTRSW_Rt_ADDR_SIMM9),
    LDTR_Rt_ADDR_SIMM9(LDTR_Rt_ADDR_SIMM9),
    LDUMAXAB_Rs_Rt_ADDR_SIMPLE(LDUMAXAB_Rs_Rt_ADDR_SIMPLE),
    LDUMAXAH_Rs_Rt_ADDR_SIMPLE(LDUMAXAH_Rs_Rt_ADDR_SIMPLE),
    LDUMAXALB_Rs_Rt_ADDR_SIMPLE(LDUMAXALB_Rs_Rt_ADDR_SIMPLE),
    LDUMAXALH_Rs_Rt_ADDR_SIMPLE(LDUMAXALH_Rs_Rt_ADDR_SIMPLE),
    LDUMAXAL_Rs_Rt_ADDR_SIMPLE(LDUMAXAL_Rs_Rt_ADDR_SIMPLE),
    LDUMAXA_Rs_Rt_ADDR_SIMPLE(LDUMAXA_Rs_Rt_ADDR_SIMPLE),
    LDUMAXB_Rs_Rt_ADDR_SIMPLE(LDUMAXB_Rs_Rt_ADDR_SIMPLE),
    LDUMAXH_Rs_Rt_ADDR_SIMPLE(LDUMAXH_Rs_Rt_ADDR_SIMPLE),
    LDUMAXLB_Rs_Rt_ADDR_SIMPLE(LDUMAXLB_Rs_Rt_ADDR_SIMPLE),
    LDUMAXLH_Rs_Rt_ADDR_SIMPLE(LDUMAXLH_Rs_Rt_ADDR_SIMPLE),
    LDUMAXL_Rs_Rt_ADDR_SIMPLE(LDUMAXL_Rs_Rt_ADDR_SIMPLE),
    LDUMAX_Rs_Rt_ADDR_SIMPLE(LDUMAX_Rs_Rt_ADDR_SIMPLE),
    LDUMINAB_Rs_Rt_ADDR_SIMPLE(LDUMINAB_Rs_Rt_ADDR_SIMPLE),
    LDUMINAH_Rs_Rt_ADDR_SIMPLE(LDUMINAH_Rs_Rt_ADDR_SIMPLE),
    LDUMINALB_Rs_Rt_ADDR_SIMPLE(LDUMINALB_Rs_Rt_ADDR_SIMPLE),
    LDUMINALH_Rs_Rt_ADDR_SIMPLE(LDUMINALH_Rs_Rt_ADDR_SIMPLE),
    LDUMINAL_Rs_Rt_ADDR_SIMPLE(LDUMINAL_Rs_Rt_ADDR_SIMPLE),
    LDUMINA_Rs_Rt_ADDR_SIMPLE(LDUMINA_Rs_Rt_ADDR_SIMPLE),
    LDUMINB_Rs_Rt_ADDR_SIMPLE(LDUMINB_Rs_Rt_ADDR_SIMPLE),
    LDUMINH_Rs_Rt_ADDR_SIMPLE(LDUMINH_Rs_Rt_ADDR_SIMPLE),
    LDUMINLB_Rs_Rt_ADDR_SIMPLE(LDUMINLB_Rs_Rt_ADDR_SIMPLE),
    LDUMINLH_Rs_Rt_ADDR_SIMPLE(LDUMINLH_Rs_Rt_ADDR_SIMPLE),
    LDUMINL_Rs_Rt_ADDR_SIMPLE(LDUMINL_Rs_Rt_ADDR_SIMPLE),
    LDUMIN_Rs_Rt_ADDR_SIMPLE(LDUMIN_Rs_Rt_ADDR_SIMPLE),
    LDURB_Rt_ADDR_SIMM9(LDURB_Rt_ADDR_SIMM9),
    LDURH_Rt_ADDR_SIMM9(LDURH_Rt_ADDR_SIMM9),
    LDURSB_Rt_ADDR_SIMM9(LDURSB_Rt_ADDR_SIMM9),
    LDURSH_Rt_ADDR_SIMM9(LDURSH_Rt_ADDR_SIMM9),
    LDURSW_Rt_ADDR_SIMM9(LDURSW_Rt_ADDR_SIMM9),
    LDUR_Ft_ADDR_SIMM9(LDUR_Ft_ADDR_SIMM9),
    LDUR_Rt_ADDR_SIMM9(LDUR_Rt_ADDR_SIMM9),
    LDXP_Rt_Rt2_ADDR_SIMPLE(LDXP_Rt_Rt2_ADDR_SIMPLE),
    LDXRB_Rt_ADDR_SIMPLE(LDXRB_Rt_ADDR_SIMPLE),
    LDXRH_Rt_ADDR_SIMPLE(LDXRH_Rt_ADDR_SIMPLE),
    LDXR_Rt_ADDR_SIMPLE(LDXR_Rt_ADDR_SIMPLE),
    LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    LSLV_Rd_Rn_Rm(LSLV_Rd_Rn_Rm),
    LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED(LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED),
    LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED(LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED),
    LSL_SVE_Zd_SVE_Zn_SVE_Zm_16(LSL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D(
        LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D,
    ),
    LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    LSRV_Rd_Rn_Rm(LSRV_Rd_Rn_Rm),
    LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED(LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED),
    LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    LSR_SVE_Zd_SVE_Zn_SVE_Zm_16(LSR_SVE_Zd_SVE_Zn_SVE_Zm_16),
    LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D(
        LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D,
    ),
    LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15(LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15),
    LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16(LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16),
    LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14(LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14),
    LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15(LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15),
    LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16(LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16),
    LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14(LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14),
    MADD_Rd_Rn_Rm_Ra(MADD_Rd_Rn_Rm_Ra),
    MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5(MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5),
    MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    MLA_Vd_Vn_Em16(MLA_Vd_Vn_Em16),
    MLA_Vd_Vn_Vm(MLA_Vd_Vn_Vm),
    MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    MLS_Vd_Vn_Em16(MLS_Vd_Vn_Em16),
    MLS_Vd_Vn_Vm(MLS_Vd_Vn_Vm),
    MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1(MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1),
    MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1(MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1),
    MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1(MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1),
    MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1(MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2),
    MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2(MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2),
    MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn(MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn),
    MOVA_SME_ZA_HV_idx_destxN_SME_Znx2(MOVA_SME_ZA_HV_idx_destxN_SME_Znx2),
    MOVA_SME_ZA_HV_idx_destxN_SME_Znx4(MOVA_SME_ZA_HV_idx_destxN_SME_Znx4),
    MOVA_SME_ZA_array_off3_0_SME_Znx2(MOVA_SME_ZA_array_off3_0_SME_Znx2),
    MOVA_SME_ZA_array_off3_0_SME_Znx4(MOVA_SME_ZA_array_off3_0_SME_Znx4),
    MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN(MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN),
    MOVA_SME_Zdnx2_SME_ZA_array_off3_5(MOVA_SME_Zdnx2_SME_ZA_array_off3_5),
    MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN(MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN),
    MOVA_SME_Zdnx4_SME_ZA_array_off3_5(MOVA_SME_Zdnx4_SME_ZA_array_off3_5),
    MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src(MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src),
    MOVI_Sd_SIMD_IMM(MOVI_Sd_SIMD_IMM),
    MOVI_Vd_SIMD_IMM(MOVI_Vd_SIMD_IMM),
    MOVI_Vd_SIMD_IMM_SFT(MOVI_Vd_SIMD_IMM_SFT),
    MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL(MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL),
    MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL(MOVI_Vd_V_4H_SIMD_IMM_SFT_LSL),
    MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL(MOVI_Vd_V_8B_SIMD_IMM_SFT_LSL),
    MOVK_Rd_HALF(MOVK_Rd_HALF),
    MOVN_Rd_HALF(MOVN_Rd_HALF),
    MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn(MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn),
    MOVPRFX_SVE_Zd_SVE_Zn(MOVPRFX_SVE_Zd_SVE_Zn),
    MOVT_Rt_SME_ZT0_INDEX(MOVT_Rt_SME_ZT0_INDEX),
    MOVT_SME_ZT0_INDEX_Rt(MOVT_SME_ZT0_INDEX_Rt),
    MOVZ_Rd_HALF(MOVZ_Rd_HALF),
    MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn(MOV_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn),
    MOV_SME_ZA_HV_idx_destxN_SME_Znx2(MOV_SME_ZA_HV_idx_destxN_SME_Znx2),
    MOV_SME_ZA_HV_idx_destxN_SME_Znx4(MOV_SME_ZA_HV_idx_destxN_SME_Znx4),
    MOV_SME_ZA_array_off3_0_SME_Znx2(MOV_SME_ZA_array_off3_0_SME_Znx2),
    MOV_SME_ZA_array_off3_0_SME_Znx4(MOV_SME_ZA_array_off3_0_SME_Znx4),
    MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN(MOV_SME_Zdnx2_SME_ZA_HV_idx_srcxN),
    MOV_SME_Zdnx2_SME_ZA_array_off3_5(MOV_SME_Zdnx2_SME_ZA_array_off3_5),
    MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN(MOV_SME_Zdnx4_SME_ZA_HV_idx_srcxN),
    MOV_SME_Zdnx4_SME_ZA_array_off3_5(MOV_SME_Zdnx4_SME_ZA_array_off3_5),
    MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src(MOV_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src),
    MRRS_Rt_PAIRREG_SYSREG128(MRRS_Rt_PAIRREG_SYSREG128),
    MRS_Rt_SYSREG(MRS_Rt_SYSREG),
    MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5(MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5),
    MSRR_SYSREG128_Rt_PAIRREG(MSRR_SYSREG128_Rt_PAIRREG),
    MSR_PSTATEFIELD_UIMM4(MSR_PSTATEFIELD_UIMM4),
    MSR_SYSREG_Rt(MSR_SYSREG_Rt),
    MSUB_Rd_Rn_Rm_Ra(MSUB_Rd_Rn_Rm_Ra),
    MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    MUL_SVE_Zd_SVE_Zd_SVE_SIMM8(MUL_SVE_Zd_SVE_Zd_SVE_SIMM8),
    MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    MUL_SVE_Zd_SVE_Zn_SVE_Zm_16(MUL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    MUL_Vd_Vn_Em16(MUL_Vd_Vn_Em16),
    MUL_Vd_Vn_Vm(MUL_Vd_Vn_Vm),
    MVNI_Vd_SIMD_IMM_SFT(MVNI_Vd_SIMD_IMM_SFT),
    MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL(MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL),
    MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL(MVNI_Vd_V_4H_SIMD_IMM_SFT_LSL),
    NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn(NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn),
    NEG_SVE_Zd_SVE_Pg3_SVE_Zn(NEG_SVE_Zd_SVE_Pg3_SVE_Zn),
    NEG_Sd_Sn(NEG_Sd_Sn),
    NEG_Vd_Vn(NEG_Vd_Vn),
    NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16(NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16),
    NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    NOT_SVE_Zd_SVE_Pg3_SVE_Zn(NOT_SVE_Zd_SVE_Pg3_SVE_Zn),
    NOT_Vd_Vn(NOT_Vd_Vn),
    ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    ORN_Rd_Rn_Rm_SFT(ORN_Rd_Rn_Rm_SFT),
    ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    ORN_Vd_Vn_Vm(ORN_Vd_Vn_Vm),
    ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    ORR_Rd_Rn_Rm_SFT(ORR_Rd_Rn_Rm_SFT),
    ORR_Rd_SP_Rn_LIMM(ORR_Rd_SP_Rn_LIMM),
    ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    ORR_SVE_Zd_SVE_Zd_SVE_LIMM(ORR_SVE_Zd_SVE_Zd_SVE_LIMM),
    ORR_SVE_Zd_SVE_Zn_SVE_Zm_16(ORR_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ORR_Vd_SIMD_IMM_SFT(ORR_Vd_SIMD_IMM_SFT),
    ORR_Vd_V_4H_SIMD_IMM_SFT_LSL(ORR_Vd_V_4H_SIMD_IMM_SFT_LSL),
    ORR_Vd_Vn_Vm(ORR_Vd_Vn_Vm),
    ORV_SVE_Vd_SVE_Pg3_SVE_Zn(ORV_SVE_Vd_SVE_Pg3_SVE_Zn),
    PACDA_Rd_Rn_SP(PACDA_Rd_Rn_SP),
    PACDB_Rd_Rn_SP(PACDB_Rd_Rn_SP),
    PACDZA_Rd(PACDZA_Rd),
    PACDZB_Rd(PACDZB_Rd),
    PACGA_Rd_Rn_Rm_SP(PACGA_Rd_Rn_Rm_SP),
    PACIA_Rd_Rn_SP(PACIA_Rd_Rn_SP),
    PACIB_Rd_Rn_SP(PACIB_Rd_Rn_SP),
    PACIZA_Rd(PACIZA_Rd),
    PACIZB_Rd(PACIZB_Rd),
    PEXT_SME_PdxN_SME_PNn3_INDEX1(PEXT_SME_PdxN_SME_PNn3_INDEX1),
    PEXT_SVE_Pd_SME_PNn3_INDEX2(PEXT_SVE_Pd_SME_PNn3_INDEX2),
    PFALSE_SVE_PNd(PFALSE_SVE_PNd),
    PFALSE_SVE_Pd(PFALSE_SVE_Pd),
    PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd(PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd),
    PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D(PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D),
    PMULL2_Vd_Vn_Vm(PMULL2_Vd_Vn_Vm),
    PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16(PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B(PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B),
    PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16(PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B(PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B),
    PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D(PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D),
    PMULL_Vd_Vn_Vm(PMULL_Vd_Vn_Vm),
    PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16(PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16),
    PMUL_Vd_Vn_Vm(PMUL_Vd_Vn_Vm),
    PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd(PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000(
        PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000,
    ),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5),
    PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000(PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL(PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3(PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3(PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22(PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000(
        PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000,
    ),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8(PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8),
    PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000(
        PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000,
    ),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000(
        PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000,
    ),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2(PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000(
        PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000,
    ),
    PRFM_PRFOP_ADDR_PCREL19(PRFM_PRFOP_ADDR_PCREL19),
    PRFM_PRFOP_ADDR_REGOFF(PRFM_PRFOP_ADDR_REGOFF),
    PRFM_PRFOP_ADDR_UIMM12(PRFM_PRFOP_ADDR_UIMM12),
    PRFUM_PRFOP_ADDR_SIMM9(PRFUM_PRFOP_ADDR_SIMM9),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL(PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2(PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2(PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22(PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000(
        PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000,
    ),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4(PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000(
        PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000,
    ),
    PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm(PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm),
    PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm(PSEL_SVE_Pd_SVE_Pg4_10_SME_PnT_Wm_imm),
    PTEST_SVE_Pg4_10_SVE_Pn(PTEST_SVE_Pg4_10_SVE_Pn),
    PTRUES_SVE_Pd_SVE_PATTERN(PTRUES_SVE_Pd_SVE_PATTERN),
    PTRUE_SME_PNd3(PTRUE_SME_PNd3),
    PTRUE_SVE_Pd_SVE_PATTERN(PTRUE_SVE_Pd_SVE_PATTERN),
    PUNPKHI_SVE_Pd_SVE_Pn(PUNPKHI_SVE_Pd_SVE_Pn),
    PUNPKLO_SVE_Pd_SVE_Pn(PUNPKLO_SVE_Pd_SVE_Pn),
    RADDHN2_Vd_Vn_Vm(RADDHN2_Vd_Vn_Vm),
    RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16(RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16(RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    RADDHN_Vd_Vn_Vm(RADDHN_Vd_Vn_Vm),
    RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16(RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16),
    RAX1_Vd_Vn_Vm(RAX1_Vd_Vn_Vm),
    RBIT_Rd_Rn(RBIT_Rd_Rn),
    RBIT_SVE_Zd_SVE_Pg3_SVE_Zn(RBIT_SVE_Zd_SVE_Pg3_SVE_Zn),
    RBIT_Vd_Vn(RBIT_Vd_Vn),
    RCWCASAL_Rs_Rt_ADDR_SIMPLE(RCWCASAL_Rs_Rt_ADDR_SIMPLE),
    RCWCASA_Rs_Rt_ADDR_SIMPLE(RCWCASA_Rs_Rt_ADDR_SIMPLE),
    RCWCASL_Rs_Rt_ADDR_SIMPLE(RCWCASL_Rs_Rt_ADDR_SIMPLE),
    RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWCAS_Rs_Rt_ADDR_SIMPLE(RCWCAS_Rs_Rt_ADDR_SIMPLE),
    RCWCLRAL_Rs_Rt_ADDR_SIMPLE(RCWCLRAL_Rs_Rt_ADDR_SIMPLE),
    RCWCLRA_Rs_Rt_ADDR_SIMPLE(RCWCLRA_Rs_Rt_ADDR_SIMPLE),
    RCWCLRL_Rs_Rt_ADDR_SIMPLE(RCWCLRL_Rs_Rt_ADDR_SIMPLE),
    RCWCLRPAL_Rt_Rs_ADDR_SIMPLE(RCWCLRPAL_Rt_Rs_ADDR_SIMPLE),
    RCWCLRPA_Rt_Rs_ADDR_SIMPLE(RCWCLRPA_Rt_Rs_ADDR_SIMPLE),
    RCWCLRPL_Rt_Rs_ADDR_SIMPLE(RCWCLRPL_Rt_Rs_ADDR_SIMPLE),
    RCWCLRP_Rt_Rs_ADDR_SIMPLE(RCWCLRP_Rt_Rs_ADDR_SIMPLE),
    RCWCLR_Rs_Rt_ADDR_SIMPLE(RCWCLR_Rs_Rt_ADDR_SIMPLE),
    RCWSCASAL_Rs_Rt_ADDR_SIMPLE(RCWSCASAL_Rs_Rt_ADDR_SIMPLE),
    RCWSCASA_Rs_Rt_ADDR_SIMPLE(RCWSCASA_Rs_Rt_ADDR_SIMPLE),
    RCWSCASL_Rs_Rt_ADDR_SIMPLE(RCWSCASL_Rs_Rt_ADDR_SIMPLE),
    RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE(RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE),
    RCWSCAS_Rs_Rt_ADDR_SIMPLE(RCWSCAS_Rs_Rt_ADDR_SIMPLE),
    RCWSCLRAL_Rs_Rt_ADDR_SIMPLE(RCWSCLRAL_Rs_Rt_ADDR_SIMPLE),
    RCWSCLRA_Rs_Rt_ADDR_SIMPLE(RCWSCLRA_Rs_Rt_ADDR_SIMPLE),
    RCWSCLRL_Rs_Rt_ADDR_SIMPLE(RCWSCLRL_Rs_Rt_ADDR_SIMPLE),
    RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE(RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSCLRPA_Rt_Rs_ADDR_SIMPLE(RCWSCLRPA_Rt_Rs_ADDR_SIMPLE),
    RCWSCLRPL_Rt_Rs_ADDR_SIMPLE(RCWSCLRPL_Rt_Rs_ADDR_SIMPLE),
    RCWSCLRP_Rt_Rs_ADDR_SIMPLE(RCWSCLRP_Rt_Rs_ADDR_SIMPLE),
    RCWSCLR_Rs_Rt_ADDR_SIMPLE(RCWSCLR_Rs_Rt_ADDR_SIMPLE),
    RCWSETAL_Rs_Rt_ADDR_SIMPLE(RCWSETAL_Rs_Rt_ADDR_SIMPLE),
    RCWSETA_Rs_Rt_ADDR_SIMPLE(RCWSETA_Rs_Rt_ADDR_SIMPLE),
    RCWSETL_Rs_Rt_ADDR_SIMPLE(RCWSETL_Rs_Rt_ADDR_SIMPLE),
    RCWSETPAL_Rt_Rs_ADDR_SIMPLE(RCWSETPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSETPA_Rt_Rs_ADDR_SIMPLE(RCWSETPA_Rt_Rs_ADDR_SIMPLE),
    RCWSETPL_Rt_Rs_ADDR_SIMPLE(RCWSETPL_Rt_Rs_ADDR_SIMPLE),
    RCWSETP_Rt_Rs_ADDR_SIMPLE(RCWSETP_Rt_Rs_ADDR_SIMPLE),
    RCWSET_Rs_Rt_ADDR_SIMPLE(RCWSET_Rs_Rt_ADDR_SIMPLE),
    RCWSSETAL_Rs_Rt_ADDR_SIMPLE(RCWSSETAL_Rs_Rt_ADDR_SIMPLE),
    RCWSSETA_Rs_Rt_ADDR_SIMPLE(RCWSSETA_Rs_Rt_ADDR_SIMPLE),
    RCWSSETL_Rs_Rt_ADDR_SIMPLE(RCWSSETL_Rs_Rt_ADDR_SIMPLE),
    RCWSSETPAL_Rt_Rs_ADDR_SIMPLE(RCWSSETPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSSETPA_Rt_Rs_ADDR_SIMPLE(RCWSSETPA_Rt_Rs_ADDR_SIMPLE),
    RCWSSETPL_Rt_Rs_ADDR_SIMPLE(RCWSSETPL_Rt_Rs_ADDR_SIMPLE),
    RCWSSETP_Rt_Rs_ADDR_SIMPLE(RCWSSETP_Rt_Rs_ADDR_SIMPLE),
    RCWSSET_Rs_Rt_ADDR_SIMPLE(RCWSSET_Rs_Rt_ADDR_SIMPLE),
    RCWSSWPAL_Rs_Rt_ADDR_SIMPLE(RCWSSWPAL_Rs_Rt_ADDR_SIMPLE),
    RCWSSWPA_Rs_Rt_ADDR_SIMPLE(RCWSSWPA_Rs_Rt_ADDR_SIMPLE),
    RCWSSWPL_Rs_Rt_ADDR_SIMPLE(RCWSSWPL_Rs_Rt_ADDR_SIMPLE),
    RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE(RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSSWPPA_Rt_Rs_ADDR_SIMPLE(RCWSSWPPA_Rt_Rs_ADDR_SIMPLE),
    RCWSSWPPL_Rt_Rs_ADDR_SIMPLE(RCWSSWPPL_Rt_Rs_ADDR_SIMPLE),
    RCWSSWPP_Rt_Rs_ADDR_SIMPLE(RCWSSWPP_Rt_Rs_ADDR_SIMPLE),
    RCWSSWP_Rs_Rt_ADDR_SIMPLE(RCWSSWP_Rs_Rt_ADDR_SIMPLE),
    RCWSWPAL_Rs_Rt_ADDR_SIMPLE(RCWSWPAL_Rs_Rt_ADDR_SIMPLE),
    RCWSWPA_Rs_Rt_ADDR_SIMPLE(RCWSWPA_Rs_Rt_ADDR_SIMPLE),
    RCWSWPL_Rs_Rt_ADDR_SIMPLE(RCWSWPL_Rs_Rt_ADDR_SIMPLE),
    RCWSWPPAL_Rt_Rs_ADDR_SIMPLE(RCWSWPPAL_Rt_Rs_ADDR_SIMPLE),
    RCWSWPPA_Rt_Rs_ADDR_SIMPLE(RCWSWPPA_Rt_Rs_ADDR_SIMPLE),
    RCWSWPPL_Rt_Rs_ADDR_SIMPLE(RCWSWPPL_Rt_Rs_ADDR_SIMPLE),
    RCWSWPP_Rt_Rs_ADDR_SIMPLE(RCWSWPP_Rt_Rs_ADDR_SIMPLE),
    RCWSWP_Rs_Rt_ADDR_SIMPLE(RCWSWP_Rs_Rt_ADDR_SIMPLE),
    RDFFRS_SVE_Pd_SVE_Pg4_5(RDFFRS_SVE_Pd_SVE_Pg4_5),
    RDFFR_SVE_Pd(RDFFR_SVE_Pd),
    RDFFR_SVE_Pd_SVE_Pg4_5(RDFFR_SVE_Pd_SVE_Pg4_5),
    RDSVL_Rd_SVE_SIMM6(RDSVL_Rd_SVE_SIMM6),
    RDVL_Rd_SVE_SIMM6(RDVL_Rd_SVE_SIMM6),
    RETAA(RETAA),
    RETAB(RETAB),
    RET_Rn(RET_Rn),
    REV16_Rd_Rn(REV16_Rd_Rn),
    REV16_Vd_Vn(REV16_Vd_Vn),
    REV32_Rd_Rn(REV32_Rd_Rn),
    REV32_Vd_Vn(REV32_Vd_Vn),
    REV64_Vd_Vn(REV64_Vd_Vn),
    REVB_SVE_Zd_SVE_Pg3_SVE_Zn(REVB_SVE_Zd_SVE_Pg3_SVE_Zn),
    REVD_SVE_Zd_SVE_Pg3_SVE_Zn(REVD_SVE_Zd_SVE_Pg3_SVE_Zn),
    REVH_SVE_Zd_SVE_Pg3_SVE_Zn(REVH_SVE_Zd_SVE_Pg3_SVE_Zn),
    REVW_SVE_Zd_SVE_Pg3_SVE_Zn(REVW_SVE_Zd_SVE_Pg3_SVE_Zn),
    REV_Rd_Rn(REV_Rd_Rn),
    REV_Rd_X_Rn_X(REV_Rd_X_Rn_X),
    REV_SVE_Pd_SVE_Pn(REV_SVE_Pd_SVE_Pn),
    REV_SVE_Zd_SVE_Zn(REV_SVE_Zd_SVE_Zn),
    RMIF_Rn_IMM_2_MASK(RMIF_Rn_IMM_2_MASK),
    RORV_Rd_Rn_Rm(RORV_Rd_Rn_Rm),
    RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE(RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE),
    RSHRN2_Vd_Vn_IMM_VLSR(RSHRN2_Vd_Vn_IMM_VLSR),
    RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    RSHRN_Vd_Vn_IMM_VLSR(RSHRN_Vd_Vn_IMM_VLSR),
    RSUBHN2_Vd_Vn_Vm(RSUBHN2_Vd_Vn_Vm),
    RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16(RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16(RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    RSUBHN_Vd_Vn_Vm(RSUBHN_Vd_Vn_Vm),
    SABAL2_Vd_Vn_Vm(SABAL2_Vd_Vn_Vm),
    SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16(SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16(SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABAL_Vd_Vn_Vm(SABAL_Vd_Vn_Vm),
    SABA_SVE_Zd_SVE_Zn_SVE_Zm_16(SABA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABA_Vd_Vn_Vm(SABA_Vd_Vn_Vm),
    SABDL2_Vd_Vn_Vm(SABDL2_Vd_Vn_Vm),
    SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SABDL_Vd_Vn_Vm(SABDL_Vd_Vn_Vm),
    SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SABD_Vd_Vn_Vm(SABD_Vd_Vn_Vm),
    SADALP_SVE_Zd_SVE_Pg3_SVE_Zn(SADALP_SVE_Zd_SVE_Pg3_SVE_Zn),
    SADALP_Vd_Vn(SADALP_Vd_Vn),
    SADDL2_Vd_Vn_Vm(SADDL2_Vd_Vn_Vm),
    SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16(SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SADDLP_Vd_Vn(SADDLP_Vd_Vn),
    SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SADDLV_Fd_Vn(SADDLV_Fd_Vn),
    SADDL_Vd_Vn_Vm(SADDL_Vd_Vn_Vm),
    SADDV_SVE_Vd_SVE_Pg3_SVE_Zn(SADDV_SVE_Vd_SVE_Pg3_SVE_Zn),
    SADDW2_Vd_Vn_Vm(SADDW2_Vd_Vn_Vm),
    SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16(SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16(SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SADDW_Vd_Vn_Vm(SADDW_Vd_Vn_Vm),
    SB(SB),
    SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SBCS_Rd_Rn_Rm(SBCS_Rd_Rn_Rm),
    SBC_Rd_Rn_Rm(SBC_Rd_Rn_Rm),
    SBFM_Rd_Rn_IMMR_IMMS(SBFM_Rd_Rn_IMMR_IMMS),
    SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16(SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16),
    SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16(SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SCVTF_Fd_Rn(SCVTF_Fd_Rn),
    SCVTF_Fd_Rn_FBITS(SCVTF_Fd_Rn_FBITS),
    SCVTF_Fd_S_H_Rn_W(SCVTF_Fd_S_H_Rn_W),
    SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32(SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32),
    SCVTF_SME_Zdnx2_SME_Znx2(SCVTF_SME_Zdnx2_SME_Znx2),
    SCVTF_SME_Zdnx4_SME_Znx4(SCVTF_SME_Zdnx4_SME_Znx4),
    SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn(SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn),
    SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D(SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D),
    SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D(SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D),
    SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H(SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H),
    SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S(SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S),
    SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D(SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D),
    SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S(SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S),
    SCVTF_Sd_S_H_Sn_S_H(SCVTF_Sd_S_H_Sn_S_H),
    SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H),
    SCVTF_Sd_Sn(SCVTF_Sd_Sn),
    SCVTF_Sd_Sn_IMM_VLSR(SCVTF_Sd_Sn_IMM_VLSR),
    SCVTF_Vd_V_4H_Vn_V_4H(SCVTF_Vd_V_4H_Vn_V_4H),
    SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H(SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H),
    SCVTF_Vd_Vn(SCVTF_Vd_Vn),
    SCVTF_Vd_Vn_IMM_VLSR(SCVTF_Vd_Vn_IMM_VLSR),
    SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SDIV_Rd_Rn_Rm(SDIV_Rd_Rn_Rm),
    SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1(
        SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1,
    ),
    SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B(
        SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B,
    ),
    SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H(
        SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H,
    ),
    SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B(
        SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B,
    ),
    SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H(
        SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H,
    ),
    SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408(
        SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408,
    ),
    SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX(SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX),
    SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H(SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H),
    SDOT_Vd_Vn_Em(SDOT_Vd_Vn_Em),
    SDOT_Vd_Vn_Vm(SDOT_Vd_Vn_Vm),
    SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2(SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2),
    SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4(SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4),
    SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm(SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm),
    SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16(SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16),
    SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETF16_Rn(SETF16_Rn),
    SETF8_Rn(SETF8_Rn),
    SETFFR(SETFFR),
    SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm(SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm),
    SHA1C_Fd_Fn_Vm(SHA1C_Fd_Fn_Vm),
    SHA1H_Fd_Fn(SHA1H_Fd_Fn),
    SHA1M_Fd_Fn_Vm(SHA1M_Fd_Fn_Vm),
    SHA1P_Fd_Fn_Vm(SHA1P_Fd_Fn_Vm),
    SHA1SU0_Vd_Vn_Vm(SHA1SU0_Vd_Vn_Vm),
    SHA1SU1_Vd_Vn(SHA1SU1_Vd_Vn),
    SHA256H2_Fd_Fn_Vm(SHA256H2_Fd_Fn_Vm),
    SHA256H_Fd_Fn_Vm(SHA256H_Fd_Fn_Vm),
    SHA256SU0_Vd_Vn(SHA256SU0_Vd_Vn),
    SHA256SU1_Vd_Vn_Vm(SHA256SU1_Vd_Vn_Vm),
    SHA512H2_Fd_Fn_Vm(SHA512H2_Fd_Fn_Vm),
    SHA512H_Fd_Fn_Vm(SHA512H_Fd_Fn_Vm),
    SHA512SU0_Vd_Vn(SHA512SU0_Vd_Vn),
    SHA512SU1_Vd_Vn_Vm(SHA512SU1_Vd_Vn_Vm),
    SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SHADD_Vd_Vn_Vm(SHADD_Vd_Vn_Vm),
    SHLL2_Vd_Vn_SHLL_IMM(SHLL2_Vd_Vn_SHLL_IMM),
    SHLL_Vd_Vn_SHLL_IMM(SHLL_Vd_Vn_SHLL_IMM),
    SHL_Sd_Sn_IMM_VLSL(SHL_Sd_Sn_IMM_VLSL),
    SHL_Vd_Vn_IMM_VLSL(SHL_Vd_Vn_IMM_VLSL),
    SHRN2_Vd_Vn_IMM_VLSR(SHRN2_Vd_Vn_IMM_VLSR),
    SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SHRN_Vd_Vn_IMM_VLSR(SHRN_Vd_Vn_IMM_VLSR),
    SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SHSUB_Vd_Vn_Vm(SHSUB_Vd_Vn_Vm),
    SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED(SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED),
    SLI_Sd_Sn_IMM_VLSL(SLI_Sd_Sn_IMM_VLSL),
    SLI_Vd_Vn_IMM_VLSL(SLI_Vd_Vn_IMM_VLSL),
    SM3PARTW1_Vd_Vn_Vm(SM3PARTW1_Vd_Vn_Vm),
    SM3PARTW2_Vd_Vn_Vm(SM3PARTW2_Vd_Vn_Vm),
    SM3SS1_Vd_Vn_Vm_Va(SM3SS1_Vd_Vn_Vm_Va),
    SM3TT1A_Vd_Vn_Em(SM3TT1A_Vd_Vn_Em),
    SM3TT1B_Vd_Vn_Em(SM3TT1B_Vd_Vn_Em),
    SM3TT2A_Vd_Vn_Em(SM3TT2A_Vd_Vn_Em),
    SM3TT2B_Vd_Vn_Em(SM3TT2B_Vd_Vn_Em),
    SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16(SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SM4EKEY_Vd_Vn_Vm(SM4EKEY_Vd_Vn_Vm),
    SM4E_SVE_Zd_SVE_Zd_SVE_Zn(SM4E_SVE_Zd_SVE_Zd_SVE_Zn),
    SM4E_Vd_Vn(SM4E_Vd_Vn),
    SMADDL_Rd_Rn_Rm_Ra(SMADDL_Rd_Rn_Rm_Ra),
    SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SMAXP_Vd_Vn_Vm(SMAXP_Vd_Vn_Vm),
    SMAXQV_Vd_SVE_Pg3_SVE_Zn(SMAXQV_Vd_SVE_Pg3_SVE_Zn),
    SMAXV_Fd_Vn(SMAXV_Fd_Vn),
    SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn(SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn),
    SMAX_Rd_Rn_CSSC_SIMM8(SMAX_Rd_Rn_CSSC_SIMM8),
    SMAX_Rd_Rn_Rm(SMAX_Rd_Rn_Rm),
    SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm(SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm(SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8(SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8),
    SMAX_Vd_Vn_Vm(SMAX_Vd_Vn_Vm),
    SMC_EXCEPTION(SMC_EXCEPTION),
    SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SMINP_Vd_Vn_Vm(SMINP_Vd_Vn_Vm),
    SMINQV_Vd_SVE_Pg3_SVE_Zn(SMINQV_Vd_SVE_Pg3_SVE_Zn),
    SMINV_Fd_Vn(SMINV_Fd_Vn),
    SMINV_SVE_Vd_SVE_Pg3_SVE_Zn(SMINV_SVE_Vd_SVE_Pg3_SVE_Zn),
    SMIN_Rd_Rn_CSSC_SIMM8(SMIN_Rd_Rn_CSSC_SIMM8),
    SMIN_Rd_Rn_Rm(SMIN_Rd_Rn_Rm),
    SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm(SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm(SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8(SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8),
    SMIN_Vd_Vn_Vm(SMIN_Vd_Vn_Vm),
    SMLAL2_Vd_Vn_Em16(SMLAL2_Vd_Vn_Em16),
    SMLAL2_Vd_Vn_Vm(SMLAL2_Vd_Vn_Vm),
    SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16(SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1(
        SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1,
    ),
    SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2(SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2),
    SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1(
        SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1,
    ),
    SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4(SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4),
    SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm(SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm),
    SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10(
        SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10(
        SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10,
    ),
    SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    SMLAL_Vd_Vn_Em16(SMLAL_Vd_Vn_Em16),
    SMLAL_Vd_Vn_Vm(SMLAL_Vd_Vn_Vm),
    SMLSL2_Vd_Vn_Em16(SMLSL2_Vd_Vn_Em16),
    SMLSL2_Vd_Vn_Vm(SMLSL2_Vd_Vn_Vm),
    SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1(
        SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1,
    ),
    SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2(SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2),
    SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1(
        SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1,
    ),
    SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4(SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4),
    SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm(SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm),
    SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10(
        SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10(
        SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10,
    ),
    SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    SMLSL_Vd_Vn_Em16(SMLSL_Vd_Vn_Em16),
    SMLSL_Vd_Vn_Vm(SMLSL_Vd_Vn_Vm),
    SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMMLA_Vd_Vn_Vm(SMMLA_Vd_Vn_Vm),
    SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H(
        SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H,
    ),
    SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H(
        SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H,
    ),
    SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SMOV_Rd_En(SMOV_Rd_En),
    SMSTART(SMSTART),
    SMSTART_SME_SM_ZA(SMSTART_SME_SM_ZA),
    SMSTOP(SMSTOP),
    SMSTOP_SME_SM_ZA(SMSTOP_SME_SM_ZA),
    SMSUBL_Rd_Rn_Rm_Ra(SMSUBL_Rd_Rn_Rm_Ra),
    SMULH_Rd_Rn_Rm(SMULH_Rd_Rn_Rm),
    SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16(SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMULL2_Vd_Vn_Em16(SMULL2_Vd_Vn_Em16),
    SMULL2_Vd_Vn_Vm(SMULL2_Vd_Vn_Vm),
    SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SMULL_Vd_Vn_Em16(SMULL_Vd_Vn_Em16),
    SMULL_Vd_Vn_Vm(SMULL_Vd_Vn_Vm),
    SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN(SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN),
    SQABS_SVE_Zd_SVE_Pg3_SVE_Zn(SQABS_SVE_Zd_SVE_Pg3_SVE_Zn),
    SQABS_Sd_Sn(SQABS_Sd_Sn),
    SQABS_Vd_Vn(SQABS_Vd_Vn),
    SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQADD_SVE_Zd_SVE_Zd_SVE_AIMM(SQADD_SVE_Zd_SVE_Zd_SVE_AIMM),
    SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16(SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQADD_Sd_Sn_Sm(SQADD_Sd_Sn_Sm),
    SQADD_Vd_Vn_Vm(SQADD_Vd_Vn_Vm),
    SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3(SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3),
    SQCVTN_SVE_Zd_SME_Znx2(SQCVTN_SVE_Zd_SME_Znx2),
    SQCVTN_SVE_Zd_SME_Znx4(SQCVTN_SVE_Zd_SME_Znx4),
    SQCVTUN_SVE_Zd_SME_Znx2(SQCVTUN_SVE_Zd_SME_Znx2),
    SQCVTUN_SVE_Zd_SME_Znx4(SQCVTUN_SVE_Zd_SME_Znx4),
    SQCVTU_SVE_Zd_SME_Znx2(SQCVTU_SVE_Zd_SME_Znx2),
    SQCVTU_SVE_Zd_SME_Znx4(SQCVTU_SVE_Zd_SME_Znx4),
    SQCVT_SVE_Zd_SME_Znx2(SQCVT_SVE_Zd_SME_Znx2),
    SQCVT_SVE_Zd_SME_Znx4(SQCVT_SVE_Zd_SME_Znx4),
    SQDECB_Rd_Rd_SVE_PATTERN_SCALED(SQDECB_Rd_Rd_SVE_PATTERN_SCALED),
    SQDECB_Rd_SVE_PATTERN_SCALED(SQDECB_Rd_SVE_PATTERN_SCALED),
    SQDECD_Rd_Rd_SVE_PATTERN_SCALED(SQDECD_Rd_Rd_SVE_PATTERN_SCALED),
    SQDECD_Rd_SVE_PATTERN_SCALED(SQDECD_Rd_SVE_PATTERN_SCALED),
    SQDECD_SVE_Zd_SVE_PATTERN_SCALED(SQDECD_SVE_Zd_SVE_PATTERN_SCALED),
    SQDECH_Rd_Rd_SVE_PATTERN_SCALED(SQDECH_Rd_Rd_SVE_PATTERN_SCALED),
    SQDECH_Rd_SVE_PATTERN_SCALED(SQDECH_Rd_SVE_PATTERN_SCALED),
    SQDECH_SVE_Zd_SVE_PATTERN_SCALED(SQDECH_SVE_Zd_SVE_PATTERN_SCALED),
    SQDECP_Rd_SVE_Pg4_5(SQDECP_Rd_SVE_Pg4_5),
    SQDECP_Rd_SVE_Pg4_5_Rd(SQDECP_Rd_SVE_Pg4_5_Rd),
    SQDECP_SVE_Zd_SVE_Pg4_5(SQDECP_SVE_Zd_SVE_Pg4_5),
    SQDECW_Rd_Rd_SVE_PATTERN_SCALED(SQDECW_Rd_Rd_SVE_PATTERN_SCALED),
    SQDECW_Rd_SVE_PATTERN_SCALED(SQDECW_Rd_SVE_PATTERN_SCALED),
    SQDECW_SVE_Zd_SVE_PATTERN_SCALED(SQDECW_SVE_Zd_SVE_PATTERN_SCALED),
    SQDMLAL2_Vd_Vn_Em16(SQDMLAL2_Vd_Vn_Em16),
    SQDMLAL2_Vd_Vn_Vm(SQDMLAL2_Vd_Vn_Vm),
    SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMLAL_Sd_Sn_Em16(SQDMLAL_Sd_Sn_Em16),
    SQDMLAL_Sd_Sn_Sm(SQDMLAL_Sd_Sn_Sm),
    SQDMLAL_Vd_Vn_Em16(SQDMLAL_Vd_Vn_Em16),
    SQDMLAL_Vd_Vn_Vm(SQDMLAL_Vd_Vn_Vm),
    SQDMLSL2_Vd_Vn_Em16(SQDMLSL2_Vd_Vn_Em16),
    SQDMLSL2_Vd_Vn_Vm(SQDMLSL2_Vd_Vn_Vm),
    SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMLSL_Sd_Sn_Em16(SQDMLSL_Sd_Sn_Em16),
    SQDMLSL_Sd_Sn_Sm(SQDMLSL_Sd_Sn_Sm),
    SQDMLSL_Vd_Vn_Em16(SQDMLSL_Vd_Vn_Em16),
    SQDMLSL_Vd_Vn_Vm(SQDMLSL_Vd_Vn_Vm),
    SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm(SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm(SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMULH_Sd_Sn_Em16(SQDMULH_Sd_Sn_Em16),
    SQDMULH_Sd_Sn_Sm(SQDMULH_Sd_Sn_Sm),
    SQDMULH_Vd_Vn_Em16(SQDMULH_Vd_Vn_Em16),
    SQDMULH_Vd_Vn_Vm(SQDMULH_Vd_Vn_Vm),
    SQDMULL2_Vd_Vn_Em16(SQDMULL2_Vd_Vn_Em16),
    SQDMULL2_Vd_Vn_Vm(SQDMULL2_Vd_Vn_Vm),
    SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQDMULL_Sd_Sn_Em16(SQDMULL_Sd_Sn_Em16),
    SQDMULL_Sd_Sn_Sm(SQDMULL_Sd_Sn_Sm),
    SQDMULL_Vd_Vn_Em16(SQDMULL_Vd_Vn_Em16),
    SQDMULL_Vd_Vn_Vm(SQDMULL_Vd_Vn_Vm),
    SQINCB_Rd_Rd_SVE_PATTERN_SCALED(SQINCB_Rd_Rd_SVE_PATTERN_SCALED),
    SQINCB_Rd_SVE_PATTERN_SCALED(SQINCB_Rd_SVE_PATTERN_SCALED),
    SQINCD_Rd_Rd_SVE_PATTERN_SCALED(SQINCD_Rd_Rd_SVE_PATTERN_SCALED),
    SQINCD_Rd_SVE_PATTERN_SCALED(SQINCD_Rd_SVE_PATTERN_SCALED),
    SQINCD_SVE_Zd_SVE_PATTERN_SCALED(SQINCD_SVE_Zd_SVE_PATTERN_SCALED),
    SQINCH_Rd_Rd_SVE_PATTERN_SCALED(SQINCH_Rd_Rd_SVE_PATTERN_SCALED),
    SQINCH_Rd_SVE_PATTERN_SCALED(SQINCH_Rd_SVE_PATTERN_SCALED),
    SQINCH_SVE_Zd_SVE_PATTERN_SCALED(SQINCH_SVE_Zd_SVE_PATTERN_SCALED),
    SQINCP_Rd_SVE_Pg4_5(SQINCP_Rd_SVE_Pg4_5),
    SQINCP_Rd_SVE_Pg4_5_Rd(SQINCP_Rd_SVE_Pg4_5_Rd),
    SQINCP_SVE_Zd_SVE_Pg4_5(SQINCP_SVE_Zd_SVE_Pg4_5),
    SQINCW_Rd_Rd_SVE_PATTERN_SCALED(SQINCW_Rd_Rd_SVE_PATTERN_SCALED),
    SQINCW_Rd_SVE_PATTERN_SCALED(SQINCW_Rd_SVE_PATTERN_SCALED),
    SQINCW_SVE_Zd_SVE_PATTERN_SCALED(SQINCW_SVE_Zd_SVE_PATTERN_SCALED),
    SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn(SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn),
    SQNEG_Sd_Sn(SQNEG_Sd_Sn),
    SQNEG_Vd_Vn(SQNEG_Vd_Vn),
    SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2(
        SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2,
    ),
    SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2(
        SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2,
    ),
    SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2(SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2),
    SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16(SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQRDMLAH_Sd_Sn_Em16(SQRDMLAH_Sd_Sn_Em16),
    SQRDMLAH_Sd_Sn_Sm(SQRDMLAH_Sd_Sn_Sm),
    SQRDMLAH_Vd_Vn_Em16(SQRDMLAH_Vd_Vn_Em16),
    SQRDMLAH_Vd_Vn_Vm(SQRDMLAH_Vd_Vn_Vm),
    SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16(SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQRDMLSH_Sd_Sn_Em16(SQRDMLSH_Sd_Sn_Em16),
    SQRDMLSH_Sd_Sn_Sm(SQRDMLSH_Sd_Sn_Sm),
    SQRDMLSH_Vd_Vn_Em16(SQRDMLSH_Vd_Vn_Em16),
    SQRDMLSH_Vd_Vn_Vm(SQRDMLSH_Vd_Vn_Vm),
    SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX(SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX),
    SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16(SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQRDMULH_Sd_Sn_Em16(SQRDMULH_Sd_Sn_Em16),
    SQRDMULH_Sd_Sn_Sm(SQRDMULH_Sd_Sn_Sm),
    SQRDMULH_Vd_Vn_Em16(SQRDMULH_Vd_Vn_Em16),
    SQRDMULH_Vd_Vn_Vm(SQRDMULH_Vd_Vn_Vm),
    SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQRSHL_Sd_Sn_Sm(SQRSHL_Sd_Sn_Sm),
    SQRSHL_Vd_Vn_Vm(SQRSHL_Vd_Vn_Vm),
    SQRSHRN2_Vd_Vn_IMM_VLSR(SQRSHRN2_Vd_Vn_IMM_VLSR),
    SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4(SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5(SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    SQRSHRN_Sd_Sn_IMM_VLSR(SQRSHRN_Sd_Sn_IMM_VLSR),
    SQRSHRN_Vd_Vn_IMM_VLSR(SQRSHRN_Vd_Vn_IMM_VLSR),
    SQRSHRUN2_Vd_Vn_IMM_VLSR(SQRSHRUN2_Vd_Vn_IMM_VLSR),
    SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4(SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5(SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    SQRSHRUN_Sd_Sn_IMM_VLSR(SQRSHRUN_Sd_Sn_IMM_VLSR),
    SQRSHRUN_Vd_Vn_IMM_VLSR(SQRSHRUN_Vd_Vn_IMM_VLSR),
    SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4(SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5(SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4(SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5(SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED(SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED),
    SQSHLU_Sd_Sn_IMM_VLSL(SQSHLU_Sd_Sn_IMM_VLSL),
    SQSHLU_Vd_Vn_IMM_VLSL(SQSHLU_Vd_Vn_IMM_VLSL),
    SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED(SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED),
    SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQSHL_Sd_Sn_IMM_VLSL(SQSHL_Sd_Sn_IMM_VLSL),
    SQSHL_Sd_Sn_Sm(SQSHL_Sd_Sn_Sm),
    SQSHL_Vd_Vn_IMM_VLSL(SQSHL_Vd_Vn_IMM_VLSL),
    SQSHL_Vd_Vn_Vm(SQSHL_Vd_Vn_Vm),
    SQSHRN2_Vd_Vn_IMM_VLSR(SQSHRN2_Vd_Vn_IMM_VLSR),
    SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQSHRN_Sd_Sn_IMM_VLSR(SQSHRN_Sd_Sn_IMM_VLSR),
    SQSHRN_Vd_Vn_IMM_VLSR(SQSHRN_Vd_Vn_IMM_VLSR),
    SQSHRUN2_Vd_Vn_IMM_VLSR(SQSHRUN2_Vd_Vn_IMM_VLSR),
    SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    SQSHRUN_Sd_Sn_IMM_VLSR(SQSHRUN_Sd_Sn_IMM_VLSR),
    SQSHRUN_Vd_Vn_IMM_VLSR(SQSHRUN_Vd_Vn_IMM_VLSR),
    SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM(SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM),
    SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16(SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SQSUB_Sd_Sn_Sm(SQSUB_Sd_Sn_Sm),
    SQSUB_Vd_Vn_Vm(SQSUB_Vd_Vn_Vm),
    SQXTN2_Vd_Vn(SQXTN2_Vd_Vn),
    SQXTNB_SVE_Zd_SVE_Zn(SQXTNB_SVE_Zd_SVE_Zn),
    SQXTNT_SVE_Zd_SVE_Zn(SQXTNT_SVE_Zd_SVE_Zn),
    SQXTN_Sd_Sn(SQXTN_Sd_Sn),
    SQXTN_Vd_Vn(SQXTN_Vd_Vn),
    SQXTUN2_Vd_Vn(SQXTUN2_Vd_Vn),
    SQXTUNB_SVE_Zd_SVE_Zn(SQXTUNB_SVE_Zd_SVE_Zn),
    SQXTUNT_SVE_Zd_SVE_Zn(SQXTUNT_SVE_Zd_SVE_Zn),
    SQXTUN_Sd_Sn(SQXTUN_Sd_Sn),
    SQXTUN_Vd_Vn(SQXTUN_Vd_Vn),
    SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SRHADD_Vd_Vn_Vm(SRHADD_Vd_Vn_Vm),
    SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    SRI_Sd_Sn_IMM_VLSR(SRI_Sd_Sn_IMM_VLSR),
    SRI_Vd_Vn_IMM_VLSR(SRI_Vd_Vn_IMM_VLSR),
    SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm(SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm(SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SRSHL_Sd_Sn_Sm(SRSHL_Sd_Sn_Sm),
    SRSHL_Vd_Vn_Vm(SRSHL_Vd_Vn_Vm),
    SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED(SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED),
    SRSHR_Sd_Sn_IMM_VLSR(SRSHR_Sd_Sn_IMM_VLSR),
    SRSHR_Vd_Vn_IMM_VLSR(SRSHR_Vd_Vn_IMM_VLSR),
    SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    SRSRA_Sd_Sn_IMM_VLSR(SRSRA_Sd_Sn_IMM_VLSR),
    SRSRA_Vd_Vn_IMM_VLSR(SRSRA_Vd_Vn_IMM_VLSR),
    SSHLL2_Vd_Vn_IMM_VLSL(SSHLL2_Vd_Vn_IMM_VLSL),
    SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22(SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22),
    SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22(SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22),
    SSHLL_Vd_Vn_IMM_VLSL(SSHLL_Vd_Vn_IMM_VLSL),
    SSHL_Sd_Sn_Sm(SSHL_Sd_Sn_Sm),
    SSHL_Vd_Vn_Vm(SSHL_Vd_Vn_Vm),
    SSHR_Sd_Sn_IMM_VLSR(SSHR_Sd_Sn_IMM_VLSR),
    SSHR_Vd_Vn_IMM_VLSR(SSHR_Vd_Vn_IMM_VLSR),
    SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    SSRA_Sd_Sn_IMM_VLSR(SSRA_Sd_Sn_IMM_VLSR),
    SSRA_Vd_Vn_IMM_VLSR(SSRA_Vd_Vn_IMM_VLSR),
    SSUBL2_Vd_Vn_Vm(SSUBL2_Vd_Vn_Vm),
    SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16(SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16(SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16(SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16(SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SSUBL_Vd_Vn_Vm(SSUBL_Vd_Vn_Vm),
    SSUBW2_Vd_Vn_Vm(SSUBW2_Vd_Vn_Vm),
    SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16(SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16(SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SSUBW_Vd_Vn_Vm(SSUBW_Vd_Vn_Vm),
    ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR(ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR),
    ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR(ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR),
    ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR(ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR),
    ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR(ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR),
    ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR(ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5(ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5),
    ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX(ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX),
    ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX(ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX),
    ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX(ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX),
    ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5(ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5),
    ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3(
        ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL3,
    ),
    ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3(ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3),
    ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3(ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3),
    ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8(ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8),
    ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1(
        ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL1,
    ),
    ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1(ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1),
    ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1(ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1),
    ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2(ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1(ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1(ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14(ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14),
    ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2(ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2),
    ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4(
        ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL4,
    ),
    ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX(ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX),
    ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R(ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R),
    ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2(
        ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_RR_LSL2,
    ),
    ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2(ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2),
    ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2(ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2),
    ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4(ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL(ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2(ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14(ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14),
    ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14(ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14),
    ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4(ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4),
    ST1_LEt_SIMD_ADDR_POST(ST1_LEt_SIMD_ADDR_POST),
    ST1_LEt_SIMD_ADDR_SIMPLE(ST1_LEt_SIMD_ADDR_SIMPLE),
    ST1_LVt_SIMD_ADDR_POST(ST1_LVt_SIMD_ADDR_POST),
    ST1_LVt_SIMD_ADDR_SIMPLE(ST1_LVt_SIMD_ADDR_SIMPLE),
    ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    ST2G_Rt_SP_ADDR_SIMM13(ST2G_Rt_SP_ADDR_SIMM13),
    ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag(ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag),
    ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4(ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4),
    ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST2_LEt_SIMD_ADDR_POST(ST2_LEt_SIMD_ADDR_POST),
    ST2_LEt_SIMD_ADDR_SIMPLE(ST2_LEt_SIMD_ADDR_SIMPLE),
    ST2_LVt_SIMD_ADDR_POST(ST2_LVt_SIMD_ADDR_POST),
    ST2_LVt_SIMD_ADDR_SIMPLE(ST2_LVt_SIMD_ADDR_SIMPLE),
    ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4(ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4),
    ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL(ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL),
    ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST3_LEt_SIMD_ADDR_POST(ST3_LEt_SIMD_ADDR_POST),
    ST3_LEt_SIMD_ADDR_SIMPLE(ST3_LEt_SIMD_ADDR_SIMPLE),
    ST3_LVt_SIMD_ADDR_POST(ST3_LVt_SIMD_ADDR_POST),
    ST3_LVt_SIMD_ADDR_SIMPLE(ST3_LVt_SIMD_ADDR_SIMPLE),
    ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL(ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL),
    ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4(ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4),
    ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL(ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL),
    ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    ST4_LEt_SIMD_ADDR_POST(ST4_LEt_SIMD_ADDR_POST),
    ST4_LEt_SIMD_ADDR_SIMPLE(ST4_LEt_SIMD_ADDR_SIMPLE),
    ST4_LVt_SIMD_ADDR_POST(ST4_LVt_SIMD_ADDR_POST),
    ST4_LVt_SIMD_ADDR_SIMPLE(ST4_LVt_SIMD_ADDR_SIMPLE),
    ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE(ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE),
    ST64BV_Rs_Rt_LS64_ADDR_SIMPLE(ST64BV_Rs_Rt_LS64_ADDR_SIMPLE),
    ST64B_Rt_LS64_ADDR_SIMPLE(ST64B_Rt_LS64_ADDR_SIMPLE),
    STGM_Rt_ADDR_SIMPLE(STGM_Rt_ADDR_SIMPLE),
    STGP_Rt_Rt2_ADDR_SIMM11(STGP_Rt_Rt2_ADDR_SIMM11),
    STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag(STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag),
    STG_Rt_SP_ADDR_SIMM13(STG_Rt_SP_ADDR_SIMM13),
    STG_Rt_SP_X_ADDR_SIMM13_imm_tag(STG_Rt_SP_X_ADDR_SIMM13_imm_tag),
    STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB(STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB),
    STL1_LEt_SIMD_ADDR_SIMPLE(STL1_LEt_SIMD_ADDR_SIMPLE),
    STLLRB_Rt_ADDR_SIMPLE(STLLRB_Rt_ADDR_SIMPLE),
    STLLRH_Rt_ADDR_SIMPLE(STLLRH_Rt_ADDR_SIMPLE),
    STLLR_Rt_ADDR_SIMPLE(STLLR_Rt_ADDR_SIMPLE),
    STLRB_Rt_ADDR_SIMPLE(STLRB_Rt_ADDR_SIMPLE),
    STLRH_Rt_ADDR_SIMPLE(STLRH_Rt_ADDR_SIMPLE),
    STLR_Rt_ADDR_SIMPLE(STLR_Rt_ADDR_SIMPLE),
    STLR_Rt_RCPC3_ADDR_PREIND_WB(STLR_Rt_RCPC3_ADDR_PREIND_WB),
    STLURB_Rt_ADDR_OFFSET(STLURB_Rt_ADDR_OFFSET),
    STLURH_Rt_ADDR_OFFSET(STLURH_Rt_ADDR_OFFSET),
    STLUR_Ft_RCPC3_ADDR_OFFSET(STLUR_Ft_RCPC3_ADDR_OFFSET),
    STLUR_Rt_ADDR_OFFSET(STLUR_Rt_ADDR_OFFSET),
    STLUR_Rt_X_ADDR_OFFSET(STLUR_Rt_X_ADDR_OFFSET),
    STLXP_Rs_Rt_Rt2_ADDR_SIMPLE(STLXP_Rs_Rt_Rt2_ADDR_SIMPLE),
    STLXRB_Rs_Rt_ADDR_SIMPLE(STLXRB_Rs_Rt_ADDR_SIMPLE),
    STLXRH_Rs_Rt_ADDR_SIMPLE(STLXRH_Rs_Rt_ADDR_SIMPLE),
    STLXR_Rs_Rt_ADDR_SIMPLE(STLXR_Rs_Rt_ADDR_SIMPLE),
    STNP_Ft_Ft2_ADDR_SIMM7(STNP_Ft_Ft2_ADDR_SIMM7),
    STNP_Rt_Rt2_ADDR_SIMM7(STNP_Rt_Rt2_ADDR_SIMM7),
    STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR(STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR),
    STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR(STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR),
    STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR(STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR),
    STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR(STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR),
    STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX(STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX),
    STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX(STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX),
    STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3(STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3),
    STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3(STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3),
    STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3(
        STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3,
    ),
    STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3(STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3),
    STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1(STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1),
    STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1(STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1),
    STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1(
        STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1,
    ),
    STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1(STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1),
    STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX(STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX),
    STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL(STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL),
    STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2(STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2),
    STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL(STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL),
    STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2(STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2),
    STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL(
        STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL,
    ),
    STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL(
        STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL,
    ),
    STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2(
        STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2,
    ),
    STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL(STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL),
    STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2(STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2),
    STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX(STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX),
    STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX(STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX),
    STP_Ft_Ft2_ADDR_SIMM7(STP_Ft_Ft2_ADDR_SIMM7),
    STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S(STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S),
    STP_Rt_Rt2_ADDR_SIMM7(STP_Rt_Rt2_ADDR_SIMM7),
    STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S(STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S),
    STRB_Rt_ADDR_REGOFF(STRB_Rt_ADDR_REGOFF),
    STRB_Rt_ADDR_SIMM9(STRB_Rt_ADDR_SIMM9),
    STRB_Rt_ADDR_UIMM12(STRB_Rt_ADDR_UIMM12),
    STRH_Rt_ADDR_REGOFF(STRH_Rt_ADDR_REGOFF),
    STRH_Rt_ADDR_SIMM9(STRH_Rt_ADDR_SIMM9),
    STRH_Rt_ADDR_UIMM12(STRH_Rt_ADDR_UIMM12),
    STR_Ft_ADDR_REGOFF(STR_Ft_ADDR_REGOFF),
    STR_Ft_ADDR_SIMM9(STR_Ft_ADDR_SIMM9),
    STR_Ft_ADDR_UIMM12(STR_Ft_ADDR_UIMM12),
    STR_Rt_ADDR_REGOFF(STR_Rt_ADDR_REGOFF),
    STR_Rt_ADDR_SIMM9(STR_Rt_ADDR_SIMM9),
    STR_Rt_ADDR_UIMM12(STR_Rt_ADDR_UIMM12),
    STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL(STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL),
    STR_SME_ZT0_SIMD_ADDR_SIMPLE(STR_SME_ZT0_SIMD_ADDR_SIMPLE),
    STR_SVE_PNt_SVE_ADDR_RI_S9xVL(STR_SVE_PNt_SVE_ADDR_RI_S9xVL),
    STR_SVE_Pt_SVE_ADDR_RI_S9xVL(STR_SVE_Pt_SVE_ADDR_RI_S9xVL),
    STR_SVE_Zt_SVE_ADDR_RI_S9xVL(STR_SVE_Zt_SVE_ADDR_RI_S9xVL),
    STTRB_Rt_ADDR_SIMM9(STTRB_Rt_ADDR_SIMM9),
    STTRH_Rt_ADDR_SIMM9(STTRH_Rt_ADDR_SIMM9),
    STTR_Rt_ADDR_SIMM9(STTR_Rt_ADDR_SIMM9),
    STURB_Rt_ADDR_SIMM9(STURB_Rt_ADDR_SIMM9),
    STURH_Rt_ADDR_SIMM9(STURH_Rt_ADDR_SIMM9),
    STUR_Ft_ADDR_SIMM9(STUR_Ft_ADDR_SIMM9),
    STUR_Rt_ADDR_SIMM9(STUR_Rt_ADDR_SIMM9),
    STXP_Rs_Rt_Rt2_ADDR_SIMPLE(STXP_Rs_Rt_Rt2_ADDR_SIMPLE),
    STXRB_Rs_Rt_ADDR_SIMPLE(STXRB_Rs_Rt_ADDR_SIMPLE),
    STXRH_Rs_Rt_ADDR_SIMPLE(STXRH_Rs_Rt_ADDR_SIMPLE),
    STXR_Rs_Rt_ADDR_SIMPLE(STXR_Rs_Rt_ADDR_SIMPLE),
    STZ2G_Rt_SP_ADDR_SIMM13(STZ2G_Rt_SP_ADDR_SIMM13),
    STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag(STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag),
    STZGM_Rt_ADDR_SIMPLE(STZGM_Rt_ADDR_SIMPLE),
    STZG_Rt_SP_ADDR_SIMM13(STZG_Rt_SP_ADDR_SIMM13),
    STZG_Rt_SP_X_ADDR_SIMM13_imm_tag(STZG_Rt_SP_X_ADDR_SIMM13_imm_tag),
    SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG(SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG),
    SUBHN2_Vd_Vn_Vm(SUBHN2_Vd_Vn_Vm),
    SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16(SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16(SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SUBHN_Vd_Vn_Vm(SUBHN_Vd_Vn_Vm),
    SUBPS_Rd_Rn_SP_Rm_SP(SUBPS_Rd_Rn_SP_Rm_SP),
    SUBP_Rd_Rn_SP_Rm_SP(SUBP_Rd_Rn_SP_Rm_SP),
    SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SUBR_SVE_Zd_SVE_Zd_SVE_AIMM(SUBR_SVE_Zd_SVE_Zd_SVE_AIMM),
    SUBS_Rd_Rn_Rm_SFT(SUBS_Rd_Rn_Rm_SFT),
    SUBS_Rd_Rn_SP_AIMM(SUBS_Rd_Rn_SP_AIMM),
    SUBS_Rd_Rn_SP_Rm_EXT(SUBS_Rd_Rn_SP_Rm_EXT),
    SUB_Rd_Rn_Rm_SFT(SUB_Rd_Rn_Rm_SFT),
    SUB_Rd_SP_Rn_SP_AIMM(SUB_Rd_SP_Rn_SP_AIMM),
    SUB_Rd_SP_Rn_SP_Rm_EXT(SUB_Rd_SP_Rn_SP_Rm_EXT),
    SUB_SME_ZA_array_off3_0_SME_Znx2(SUB_SME_ZA_array_off3_0_SME_Znx2),
    SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    SUB_SME_ZA_array_off3_0_SME_Znx4(SUB_SME_ZA_array_off3_0_SME_Znx4),
    SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S(
        SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S,
    ),
    SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    SUB_SVE_Zd_SVE_Zd_SVE_AIMM(SUB_SVE_Zd_SVE_Zd_SVE_AIMM),
    SUB_SVE_Zd_SVE_Zn_SVE_Zm_16(SUB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    SUB_Sd_Sn_Sm(SUB_Sd_Sn_Sm),
    SUB_Vd_Vn_Vm(SUB_Vd_Vn_Vm),
    SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    SUDOT_Vd_Vn_Em(SUDOT_Vd_Vn_Em),
    SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10(
        SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10,
    ),
    SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    SUNPKHI_SVE_Zd_SVE_Zn(SUNPKHI_SVE_Zd_SVE_Zn),
    SUNPKLO_SVE_Zd_SVE_Zn(SUNPKLO_SVE_Zd_SVE_Zn),
    SUNPK_SME_Zdnx2_SVE_Zn(SUNPK_SME_Zdnx2_SVE_Zn),
    SUNPK_SME_Zdnx4_SME_Znx2(SUNPK_SME_Zdnx4_SME_Znx2),
    SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    SUQADD_Sd_Sn(SUQADD_Sd_Sn),
    SUQADD_Vd_Vn(SUQADD_Vd_Vn),
    SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    SVC_EXCEPTION(SVC_EXCEPTION),
    SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    SWPAB_Rs_Rt_ADDR_SIMPLE(SWPAB_Rs_Rt_ADDR_SIMPLE),
    SWPAH_Rs_Rt_ADDR_SIMPLE(SWPAH_Rs_Rt_ADDR_SIMPLE),
    SWPALB_Rs_Rt_ADDR_SIMPLE(SWPALB_Rs_Rt_ADDR_SIMPLE),
    SWPALH_Rs_Rt_ADDR_SIMPLE(SWPALH_Rs_Rt_ADDR_SIMPLE),
    SWPAL_Rs_Rt_ADDR_SIMPLE(SWPAL_Rs_Rt_ADDR_SIMPLE),
    SWPA_Rs_Rt_ADDR_SIMPLE(SWPA_Rs_Rt_ADDR_SIMPLE),
    SWPB_Rs_Rt_ADDR_SIMPLE(SWPB_Rs_Rt_ADDR_SIMPLE),
    SWPH_Rs_Rt_ADDR_SIMPLE(SWPH_Rs_Rt_ADDR_SIMPLE),
    SWPLB_Rs_Rt_ADDR_SIMPLE(SWPLB_Rs_Rt_ADDR_SIMPLE),
    SWPLH_Rs_Rt_ADDR_SIMPLE(SWPLH_Rs_Rt_ADDR_SIMPLE),
    SWPL_Rs_Rt_ADDR_SIMPLE(SWPL_Rs_Rt_ADDR_SIMPLE),
    SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE(SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE),
    SWP_Rs_Rt_ADDR_SIMPLE(SWP_Rs_Rt_ADDR_SIMPLE),
    SXTB_SVE_Zd_SVE_Pg3_SVE_Zn(SXTB_SVE_Zd_SVE_Pg3_SVE_Zn),
    SXTH_SVE_Zd_SVE_Pg3_SVE_Zn(SXTH_SVE_Zd_SVE_Pg3_SVE_Zn),
    SXTW_SVE_Zd_SVE_Pg3_SVE_Zn(SXTW_SVE_Zd_SVE_Pg3_SVE_Zn),
    SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2(SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2),
    SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR(
        SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR,
    ),
    SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt(SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt),
    TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16(TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16),
    TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B(TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B),
    TBL_Vd_LVn_Vm(TBL_Vd_LVn_Vm),
    TBNZ_Rt_BIT_NUM_ADDR_PCREL14(TBNZ_Rt_BIT_NUM_ADDR_PCREL14),
    TBX_SVE_Zd_SVE_Zn_SVE_Zm_16(TBX_SVE_Zd_SVE_Zn_SVE_Zm_16),
    TBX_Vd_LVn_Vm(TBX_Vd_LVn_Vm),
    TBZ_Rt_BIT_NUM_ADDR_PCREL14(TBZ_Rt_BIT_NUM_ADDR_PCREL14),
    TCANCEL_TME_UIMM16(TCANCEL_TME_UIMM16),
    TCOMMIT(TCOMMIT),
    TRN1_SVE_Pd_SVE_Pn_SVE_Pm(TRN1_SVE_Pd_SVE_Pn_SVE_Pm),
    TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16(TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16),
    TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B(TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B),
    TRN1_Vd_Vn_Vm(TRN1_Vd_Vn_Vm),
    TRN2_SVE_Pd_SVE_Pn_SVE_Pm(TRN2_SVE_Pd_SVE_Pn_SVE_Pm),
    TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16(TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16),
    TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B(TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B),
    TRN2_Vd_Vn_Vm(TRN2_Vd_Vn_Vm),
    TSTART_Rd(TSTART_Rd),
    TTEST_Rd(TTEST_Rd),
    UABAL2_Vd_Vn_Vm(UABAL2_Vd_Vn_Vm),
    UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16(UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16(UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UABAL_Vd_Vn_Vm(UABAL_Vd_Vn_Vm),
    UABA_SVE_Zd_SVE_Zn_SVE_Zm_16(UABA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UABA_Vd_Vn_Vm(UABA_Vd_Vn_Vm),
    UABDL2_Vd_Vn_Vm(UABDL2_Vd_Vn_Vm),
    UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16(UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16(UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UABDL_Vd_Vn_Vm(UABDL_Vd_Vn_Vm),
    UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UABD_Vd_Vn_Vm(UABD_Vd_Vn_Vm),
    UADALP_SVE_Zd_SVE_Pg3_SVE_Zn(UADALP_SVE_Zd_SVE_Pg3_SVE_Zn),
    UADALP_Vd_Vn(UADALP_Vd_Vn),
    UADDL2_Vd_Vn_Vm(UADDL2_Vd_Vn_Vm),
    UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16(UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UADDLP_Vd_Vn(UADDLP_Vd_Vn),
    UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16(UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UADDLV_Fd_Vn(UADDLV_Fd_Vn),
    UADDL_Vd_Vn_Vm(UADDL_Vd_Vn_Vm),
    UADDV_SVE_Vd_SVE_Pg3_SVE_Zn(UADDV_SVE_Vd_SVE_Pg3_SVE_Zn),
    UADDW2_Vd_Vn_Vm(UADDW2_Vd_Vn_Vm),
    UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16(UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16(UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UADDW_Vd_Vn_Vm(UADDW_Vd_Vn_Vm),
    UBFM_Rd_Rn_IMMR_IMMS(UBFM_Rd_Rn_IMMR_IMMS),
    UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16(UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16),
    UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16(UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UCVTF_Fd_Rn(UCVTF_Fd_Rn),
    UCVTF_Fd_Rn_FBITS(UCVTF_Fd_Rn_FBITS),
    UCVTF_Fd_S_H_Rn_W(UCVTF_Fd_S_H_Rn_W),
    UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32(UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32),
    UCVTF_SME_Zdnx2_SME_Znx2(UCVTF_SME_Zdnx2_SME_Znx2),
    UCVTF_SME_Zdnx4_SME_Znx4(UCVTF_SME_Zdnx4_SME_Znx4),
    UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn(UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn),
    UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D(UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D),
    UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D(UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D),
    UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H(UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H),
    UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S(UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S),
    UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D(UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D),
    UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S(UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S),
    UCVTF_Sd_S_H_Sn_S_H(UCVTF_Sd_S_H_Sn_S_H),
    UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H),
    UCVTF_Sd_Sn(UCVTF_Sd_Sn),
    UCVTF_Sd_Sn_IMM_VLSR(UCVTF_Sd_Sn_IMM_VLSR),
    UCVTF_Vd_V_4H_Vn_V_4H(UCVTF_Vd_V_4H_Vn_V_4H),
    UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H(UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H),
    UCVTF_Vd_Vn(UCVTF_Vd_Vn),
    UCVTF_Vd_Vn_IMM_VLSR(UCVTF_Vd_Vn_IMM_VLSR),
    UDF_UNDEFINED(UDF_UNDEFINED),
    UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UDIV_Rd_Rn_Rm(UDIV_Rd_Rn_Rm),
    UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1(
        UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1,
    ),
    UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B(
        UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B,
    ),
    UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H(
        UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H,
    ),
    UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B(
        UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B,
    ),
    UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H(
        UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H,
    ),
    UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418(
        UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418,
    ),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX(UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX(UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX),
    UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H(UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H),
    UDOT_Vd_Vn_Em(UDOT_Vd_Vn_Em),
    UDOT_Vd_Vn_Vm(UDOT_Vd_Vn_Vm),
    UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UHADD_Vd_Vn_Vm(UHADD_Vd_Vn_Vm),
    UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UHSUB_Vd_Vn_Vm(UHSUB_Vd_Vn_Vm),
    UMADDL_Rd_Rn_Rm_Ra(UMADDL_Rd_Rn_Rm_Ra),
    UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UMAXP_Vd_Vn_Vm(UMAXP_Vd_Vn_Vm),
    UMAXQV_Vd_SVE_Pg3_SVE_Zn(UMAXQV_Vd_SVE_Pg3_SVE_Zn),
    UMAXV_Fd_Vn(UMAXV_Fd_Vn),
    UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn(UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn),
    UMAX_Rd_Rn_CSSC_UIMM8(UMAX_Rd_Rn_CSSC_UIMM8),
    UMAX_Rd_Rn_Rm(UMAX_Rd_Rn_Rm),
    UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm(UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm(UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8(UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8),
    UMAX_Vd_Vn_Vm(UMAX_Vd_Vn_Vm),
    UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UMINP_Vd_Vn_Vm(UMINP_Vd_Vn_Vm),
    UMINQV_Vd_SVE_Pg3_SVE_Zn(UMINQV_Vd_SVE_Pg3_SVE_Zn),
    UMINV_Fd_Vn(UMINV_Fd_Vn),
    UMINV_SVE_Vd_SVE_Pg3_SVE_Zn(UMINV_SVE_Vd_SVE_Pg3_SVE_Zn),
    UMIN_Rd_Rn_CSSC_UIMM8(UMIN_Rd_Rn_CSSC_UIMM8),
    UMIN_Rd_Rn_Rm(UMIN_Rd_Rn_Rm),
    UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm(UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm(UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8(UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8),
    UMIN_Vd_Vn_Vm(UMIN_Vd_Vn_Vm),
    UMLAL2_Vd_Vn_Em16(UMLAL2_Vd_Vn_Em16),
    UMLAL2_Vd_Vn_Vm(UMLAL2_Vd_Vn_Vm),
    UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16(UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1(
        UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1,
    ),
    UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2(UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2),
    UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1(
        UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1,
    ),
    UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4(UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4),
    UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm(UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm),
    UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10(
        UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10(
        UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10,
    ),
    UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16(UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    UMLAL_Vd_Vn_Em16(UMLAL_Vd_Vn_Em16),
    UMLAL_Vd_Vn_Vm(UMLAL_Vd_Vn_Vm),
    UMLSL2_Vd_Vn_Em16(UMLSL2_Vd_Vn_Em16),
    UMLSL2_Vd_Vn_Vm(UMLSL2_Vd_Vn_Vm),
    UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16(UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1(
        UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1,
    ),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2(UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1(
        UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1,
    ),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4(UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4),
    UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm(UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm),
    UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10(
        UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10(
        UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10,
    ),
    UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16(UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2(
        UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2,
    ),
    UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2(UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2),
    UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2(
        UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2,
    ),
    UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4(UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4),
    UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm(UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm),
    UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H(
        UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H,
    ),
    UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm(UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm),
    UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10(
        UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10,
    ),
    UMLSL_Vd_Vn_Em16(UMLSL_Vd_Vn_Em16),
    UMLSL_Vd_Vn_Vm(UMLSL_Vd_Vn_Vm),
    UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMMLA_Vd_Vn_Vm(UMMLA_Vd_Vn_Vm),
    UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B(
        UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B,
    ),
    UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B(
        UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B,
    ),
    UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    UMOV_Rd_En(UMOV_Rd_En),
    UMSUBL_Rd_Rn_Rm_Ra(UMSUBL_Rd_Rn_Rm_Ra),
    UMULH_Rd_Rn_Rm(UMULH_Rd_Rn_Rm),
    UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5(UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5),
    UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16(UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMULL2_Vd_Vn_Em16(UMULL2_Vd_Vn_Em16),
    UMULL2_Vd_Vn_Vm(UMULL2_Vd_Vn_Vm),
    UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16(UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX(UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX),
    UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX(UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX),
    UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16(UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UMULL_Vd_Vn_Em16(UMULL_Vd_Vn_Em16),
    UMULL_Vd_Vn_Vm(UMULL_Vd_Vn_Vm),
    UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQADD_SVE_Zd_SVE_Zd_SVE_AIMM(UQADD_SVE_Zd_SVE_Zd_SVE_AIMM),
    UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16(UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UQADD_Sd_Sn_Sm(UQADD_Sd_Sn_Sm),
    UQADD_Vd_Vn_Vm(UQADD_Vd_Vn_Vm),
    UQCVTN_SVE_Zd_SME_Znx2(UQCVTN_SVE_Zd_SME_Znx2),
    UQCVTN_SVE_Zd_SME_Znx4(UQCVTN_SVE_Zd_SME_Znx4),
    UQCVT_SVE_Zd_SME_Znx2(UQCVT_SVE_Zd_SME_Znx2),
    UQCVT_SVE_Zd_SME_Znx4(UQCVT_SVE_Zd_SME_Znx4),
    UQDECB_Rd_SVE_PATTERN_SCALED(UQDECB_Rd_SVE_PATTERN_SCALED),
    UQDECB_Rd_X_SVE_PATTERN_SCALED(UQDECB_Rd_X_SVE_PATTERN_SCALED),
    UQDECD_Rd_SVE_PATTERN_SCALED(UQDECD_Rd_SVE_PATTERN_SCALED),
    UQDECD_Rd_X_SVE_PATTERN_SCALED(UQDECD_Rd_X_SVE_PATTERN_SCALED),
    UQDECD_SVE_Zd_SVE_PATTERN_SCALED(UQDECD_SVE_Zd_SVE_PATTERN_SCALED),
    UQDECH_Rd_SVE_PATTERN_SCALED(UQDECH_Rd_SVE_PATTERN_SCALED),
    UQDECH_Rd_X_SVE_PATTERN_SCALED(UQDECH_Rd_X_SVE_PATTERN_SCALED),
    UQDECH_SVE_Zd_SVE_PATTERN_SCALED(UQDECH_SVE_Zd_SVE_PATTERN_SCALED),
    UQDECP_Rd_SVE_Pg4_5(UQDECP_Rd_SVE_Pg4_5),
    UQDECP_Rd_X_SVE_Pg4_5_S_B(UQDECP_Rd_X_SVE_Pg4_5_S_B),
    UQDECP_SVE_Zd_SVE_Pg4_5(UQDECP_SVE_Zd_SVE_Pg4_5),
    UQDECW_Rd_SVE_PATTERN_SCALED(UQDECW_Rd_SVE_PATTERN_SCALED),
    UQDECW_Rd_X_SVE_PATTERN_SCALED(UQDECW_Rd_X_SVE_PATTERN_SCALED),
    UQDECW_SVE_Zd_SVE_PATTERN_SCALED(UQDECW_SVE_Zd_SVE_PATTERN_SCALED),
    UQINCB_Rd_SVE_PATTERN_SCALED(UQINCB_Rd_SVE_PATTERN_SCALED),
    UQINCB_Rd_X_SVE_PATTERN_SCALED(UQINCB_Rd_X_SVE_PATTERN_SCALED),
    UQINCD_Rd_SVE_PATTERN_SCALED(UQINCD_Rd_SVE_PATTERN_SCALED),
    UQINCD_Rd_X_SVE_PATTERN_SCALED(UQINCD_Rd_X_SVE_PATTERN_SCALED),
    UQINCD_SVE_Zd_SVE_PATTERN_SCALED(UQINCD_SVE_Zd_SVE_PATTERN_SCALED),
    UQINCH_Rd_SVE_PATTERN_SCALED(UQINCH_Rd_SVE_PATTERN_SCALED),
    UQINCH_Rd_X_SVE_PATTERN_SCALED(UQINCH_Rd_X_SVE_PATTERN_SCALED),
    UQINCH_SVE_Zd_SVE_PATTERN_SCALED(UQINCH_SVE_Zd_SVE_PATTERN_SCALED),
    UQINCP_Rd_SVE_Pg4_5(UQINCP_Rd_SVE_Pg4_5),
    UQINCP_Rd_X_SVE_Pg4_5_S_B(UQINCP_Rd_X_SVE_Pg4_5_S_B),
    UQINCP_SVE_Zd_SVE_Pg4_5(UQINCP_SVE_Zd_SVE_Pg4_5),
    UQINCW_Rd_SVE_PATTERN_SCALED(UQINCW_Rd_SVE_PATTERN_SCALED),
    UQINCW_Rd_X_SVE_PATTERN_SCALED(UQINCW_Rd_X_SVE_PATTERN_SCALED),
    UQINCW_SVE_Zd_SVE_PATTERN_SCALED(UQINCW_SVE_Zd_SVE_PATTERN_SCALED),
    UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQRSHL_Sd_Sn_Sm(UQRSHL_Sd_Sn_Sm),
    UQRSHL_Vd_Vn_Vm(UQRSHL_Vd_Vn_Vm),
    UQRSHRN2_Vd_Vn_IMM_VLSR(UQRSHRN2_Vd_Vn_IMM_VLSR),
    UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4(UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5(UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    UQRSHRN_Sd_Sn_IMM_VLSR(UQRSHRN_Sd_Sn_IMM_VLSR),
    UQRSHRN_Vd_Vn_IMM_VLSR(UQRSHRN_Vd_Vn_IMM_VLSR),
    UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4(UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4),
    UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5(UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5),
    UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED(UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED),
    UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSHL_Sd_Sn_IMM_VLSL(UQSHL_Sd_Sn_IMM_VLSL),
    UQSHL_Sd_Sn_Sm(UQSHL_Sd_Sn_Sm),
    UQSHL_Vd_Vn_IMM_VLSL(UQSHL_Vd_Vn_IMM_VLSL),
    UQSHL_Vd_Vn_Vm(UQSHL_Vd_Vn_Vm),
    UQSHRN2_Vd_Vn_IMM_VLSR(UQSHRN2_Vd_Vn_IMM_VLSR),
    UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22(UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22),
    UQSHRN_Sd_Sn_IMM_VLSR(UQSHRN_Sd_Sn_IMM_VLSR),
    UQSHRN_Vd_Vn_IMM_VLSR(UQSHRN_Vd_Vn_IMM_VLSR),
    UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM(UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM),
    UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16(UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UQSUB_Sd_Sn_Sm(UQSUB_Sd_Sn_Sm),
    UQSUB_Vd_Vn_Vm(UQSUB_Vd_Vn_Vm),
    UQXTN2_Vd_Vn(UQXTN2_Vd_Vn),
    UQXTNB_SVE_Zd_SVE_Zn(UQXTNB_SVE_Zd_SVE_Zn),
    UQXTNT_SVE_Zd_SVE_Zn(UQXTNT_SVE_Zd_SVE_Zn),
    UQXTN_Sd_Sn(UQXTN_Sd_Sn),
    UQXTN_Vd_Vn(UQXTN_Vd_Vn),
    URECPE_SVE_Zd_SVE_Pg3_SVE_Zn(URECPE_SVE_Zd_SVE_Pg3_SVE_Zn),
    URECPE_Vd_Vn(URECPE_Vd_Vn),
    URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    URHADD_Vd_Vn_Vm(URHADD_Vd_Vn_Vm),
    URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm(URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm),
    URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2(URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2),
    URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm(URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm),
    URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4(URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4),
    URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    URSHL_Sd_Sn_Sm(URSHL_Sd_Sn_Sm),
    URSHL_Vd_Vn_Vm(URSHL_Vd_Vn_Vm),
    URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED(URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED),
    URSHR_Sd_Sn_IMM_VLSR(URSHR_Sd_Sn_IMM_VLSR),
    URSHR_Vd_Vn_IMM_VLSR(URSHR_Vd_Vn_IMM_VLSR),
    URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn(URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn),
    URSQRTE_Vd_Vn(URSQRTE_Vd_Vn),
    URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    URSRA_Sd_Sn_IMM_VLSR(URSRA_Sd_Sn_IMM_VLSR),
    URSRA_Vd_Vn_IMM_VLSR(URSRA_Vd_Vn_IMM_VLSR),
    USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2(USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2),
    USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4(USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4),
    USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm(USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm),
    USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX(USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX),
    USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USDOT_Vd_Vn_Em(USDOT_Vd_Vn_Em),
    USDOT_Vd_Vn_Vm(USDOT_Vd_Vn_Vm),
    USHLL2_Vd_Vn_IMM_VLSL(USHLL2_Vd_Vn_IMM_VLSL),
    USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22(USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22),
    USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22(USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22),
    USHLL_Vd_Vn_IMM_VLSL(USHLL_Vd_Vn_IMM_VLSL),
    USHL_Sd_Sn_Sm(USHL_Sd_Sn_Sm),
    USHL_Vd_Vn_Vm(USHL_Vd_Vn_Vm),
    USHR_Sd_Sn_IMM_VLSR(USHR_Sd_Sn_IMM_VLSR),
    USHR_Vd_Vn_IMM_VLSR(USHR_Vd_Vn_IMM_VLSR),
    USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1(
        USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1,
    ),
    USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2(USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2),
    USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1(
        USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1,
    ),
    USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4(USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4),
    USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm(USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm),
    USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B(
        USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B,
    ),
    USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm(USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm),
    USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10(
        USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10,
    ),
    USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16(USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USMMLA_Vd_Vn_Vm(USMMLA_Vd_Vn_Vm),
    USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16(
        USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16,
    ),
    USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn(USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn),
    USQADD_Sd_Sn(USQADD_Sd_Sn),
    USQADD_Vd_Vn(USQADD_Vd_Vn),
    USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    USRA_Sd_Sn_IMM_VLSR(USRA_Sd_Sn_IMM_VLSR),
    USRA_Vd_Vn_IMM_VLSR(USRA_Vd_Vn_IMM_VLSR),
    USUBL2_Vd_Vn_Vm(USUBL2_Vd_Vn_Vm),
    USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16(USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16(USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USUBL_Vd_Vn_Vm(USUBL_Vd_Vn_Vm),
    USUBW2_Vd_Vn_Vm(USUBW2_Vd_Vn_Vm),
    USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16(USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16(USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16),
    USUBW_Vd_Vn_Vm(USUBW_Vd_Vn_Vm),
    USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    UUNPKHI_SVE_Zd_SVE_Zn(UUNPKHI_SVE_Zd_SVE_Zn),
    UUNPKLO_SVE_Zd_SVE_Zn(UUNPKLO_SVE_Zd_SVE_Zn),
    UUNPK_SME_Zdnx2_SVE_Zn(UUNPK_SME_Zdnx2_SVE_Zn),
    UUNPK_SME_Zdnx4_SME_Znx2(UUNPK_SME_Zdnx4_SME_Znx2),
    UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2(
        UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2,
    ),
    UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1(
        UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1,
    ),
    UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2(
        UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2,
    ),
    UXTB_SVE_Zd_SVE_Pg3_SVE_Zn(UXTB_SVE_Zd_SVE_Pg3_SVE_Zn),
    UXTH_SVE_Zd_SVE_Pg3_SVE_Zn(UXTH_SVE_Zd_SVE_Pg3_SVE_Zn),
    UXTW_SVE_Zd_SVE_Pg3_SVE_Zn(UXTW_SVE_Zd_SVE_Pg3_SVE_Zn),
    UZP1_SVE_Pd_SVE_Pn_SVE_Pm(UZP1_SVE_Pd_SVE_Pn_SVE_Pm),
    UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16(UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B(UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B),
    UZP1_Vd_Vn_Vm(UZP1_Vd_Vn_Vm),
    UZP2_SVE_Pd_SVE_Pn_SVE_Pm(UZP2_SVE_Pd_SVE_Pn_SVE_Pm),
    UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16(UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16),
    UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B(UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B),
    UZP2_Vd_Vn_Vm(UZP2_Vd_Vn_Vm),
    UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q(UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q),
    UZP_SME_Zdnx4_SME_Znx4(UZP_SME_Zdnx4_SME_Znx4),
    UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q(UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q),
    WFET_Rd(WFET_Rd),
    WFIT_Rd(WFIT_Rd),
    WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILEGE_SME_Pdx2_Rn_Rm(WHILEGE_SME_Pdx2_Rn_Rm),
    WHILEGE_SVE_Pd_Rn_Rm(WHILEGE_SVE_Pd_Rn_Rm),
    WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X(WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILEGT_SME_Pdx2_Rn_Rm(WHILEGT_SME_Pdx2_Rn_Rm),
    WHILEGT_SVE_Pd_Rn_Rm(WHILEGT_SVE_Pd_Rn_Rm),
    WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X(WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILEHI_SME_Pdx2_Rn_Rm(WHILEHI_SME_Pdx2_Rn_Rm),
    WHILEHI_SVE_Pd_Rn_Rm(WHILEHI_SVE_Pd_Rn_Rm),
    WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X(WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILEHS_SME_Pdx2_Rn_Rm(WHILEHS_SME_Pdx2_Rn_Rm),
    WHILEHS_SVE_Pd_Rn_Rm(WHILEHS_SVE_Pd_Rn_Rm),
    WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X(WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILELE_SME_Pdx2_Rn_Rm(WHILELE_SME_Pdx2_Rn_Rm),
    WHILELE_SVE_Pd_Rn_Rm(WHILELE_SVE_Pd_Rn_Rm),
    WHILELE_SVE_Pd_S_B_Rn_X_Rm_X(WHILELE_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILELO_SME_Pdx2_Rn_Rm(WHILELO_SME_Pdx2_Rn_Rm),
    WHILELO_SVE_Pd_Rn_Rm(WHILELO_SVE_Pd_Rn_Rm),
    WHILELO_SVE_Pd_S_B_Rn_X_Rm_X(WHILELO_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILELS_SME_Pdx2_Rn_Rm(WHILELS_SME_Pdx2_Rn_Rm),
    WHILELS_SVE_Pd_Rn_Rm(WHILELS_SVE_Pd_Rn_Rm),
    WHILELS_SVE_Pd_S_B_Rn_X_Rm_X(WHILELS_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13(WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13),
    WHILELT_SME_Pdx2_Rn_Rm(WHILELT_SME_Pdx2_Rn_Rm),
    WHILELT_SVE_Pd_Rn_Rm(WHILELT_SVE_Pd_Rn_Rm),
    WHILELT_SVE_Pd_S_B_Rn_X_Rm_X(WHILELT_SVE_Pd_S_B_Rn_X_Rm_X),
    WHILERW_SVE_Pd_Rn_Rm(WHILERW_SVE_Pd_Rn_Rm),
    WHILEWR_SVE_Pd_Rn_Rm(WHILEWR_SVE_Pd_Rn_Rm),
    WRFFR_SVE_Pn(WRFFR_SVE_Pn),
    XAFLAG(XAFLAG),
    XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED(XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED),
    XAR_Vd_Vn_Vm_IMM(XAR_Vd_Vn_Vm_IMM),
    XPACD_Rd(XPACD_Rd),
    XPACI_Rd(XPACI_Rd),
    XTN2_Vd_Vn(XTN2_Vd_Vn),
    XTN_Vd_Vn(XTN_Vd_Vn),
    ZERO_SME_ZT0_LIST(ZERO_SME_ZT0_LIST),
    ZERO_SME_list_of_64bit_tiles(ZERO_SME_list_of_64bit_tiles),
    ZIP1_SVE_Pd_SVE_Pn_SVE_Pm(ZIP1_SVE_Pd_SVE_Pn_SVE_Pm),
    ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16(ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B(ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B),
    ZIP1_Vd_Vn_Vm(ZIP1_Vd_Vn_Vm),
    ZIP2_SVE_Pd_SVE_Pn_SVE_Pm(ZIP2_SVE_Pd_SVE_Pn_SVE_Pm),
    ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16(ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16),
    ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B(ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B),
    ZIP2_Vd_Vn_Vm(ZIP2_Vd_Vn_Vm),
    ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16(ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16),
    ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q(ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q),
    ZIP_SME_Zdnx4_SME_Znx4(ZIP_SME_Zdnx4_SME_Znx4),
    ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q(ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q),
}
pub fn decode(insn: u32) -> Option<Opcode> {
    if insn & 0x4000000 == 0 {
        if insn & 0x2000000 == 0 {
            if insn & 0x8000000 == 0 {
                if insn & 0x1000000 == 0 {
                    if insn & 0x10000000 == 0 {
                        if insn & 0x200000 == 0 {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0xffff0000 == 0x000000 {
                                                return Some(Opcode::UDF_UNDEFINED(
                                                    UDF_UNDEFINED::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x000008 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xffe0001c == 0x80800000 {
                                                        return Some (Opcode :: FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (FMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0001c == 0x80800010 {
                                                        return Some (Opcode :: FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (FMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xffe0001c == 0x80800008 {
                                                        return Some (Opcode :: BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (BMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0001c == 0x80800018 {
                                                        return Some (Opcode :: BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (BMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0xffe00018 == 0x80c00000 {
                                                return Some (Opcode :: FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (FMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe00018 == 0x80c00010 {
                                                return Some (Opcode :: FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (FMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x040000 == 0 {
                                        if insn & 0x020000 == 0 {
                                            if insn & 0x080000 == 0 {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0xff3e0010 == 0xc0000000 {
                                                        return Some (Opcode :: MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn (MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                    }
                                                    if insn & 0xff3e0010 == 0xc0000000 {
                                                        return Some (Opcode :: MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn (MOVA_SME_ZA_HV_idx_dest_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffff001c == 0xc0900000 {
                                                                return Some (Opcode :: ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn (ADDHA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffff0018 == 0xc0d00000 {
                                                                return Some (Opcode :: ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn (ADDHA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffff001c == 0xc0910000 {
                                                                return Some (Opcode :: ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn (ADDVA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffff0018 == 0xc0d10000 {
                                                                return Some (Opcode :: ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn (ADDVA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffffff00 == 0xc0080000 {
                                                        return Some(
                                                            Opcode::ZERO_SME_list_of_64bit_tiles(
                                                                ZERO_SME_list_of_64bit_tiles::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn == 0xc0480001 {
                                                        return Some(Opcode::ZERO_SME_ZT0_LIST(
                                                            ZERO_SME_ZT0_LIST::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x080000 == 0 {
                                                if insn & 0xff3e0200 == 0xc0020000 {
                                                    return Some (Opcode :: MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src (MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src :: from (insn))) ;
                                                }
                                                if insn & 0xff3e0200 == 0xc0020000 {
                                                    return Some (Opcode :: MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src (MOVA_SVE_Zd_SVE_Pg3_SME_ZA_HV_idx_src :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfffecc03 == 0xc08a8000 {
                                                            return Some (Opcode :: LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16 (LUTI4_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX1_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfffe4c01 == 0xc08a4000 {
                                                            return Some (Opcode :: LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15 (LUTI4_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX2_15 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xfffe0c00 == 0xc0ca0000 {
                                                        return Some (Opcode :: LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14 (LUTI4_SVE_Zd_SME_ZT0_SME_Zn_INDEX3_14 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000400 == 0 {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x080000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0xff3f1c38 == 0xc0040000 {
                                                            return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 :: from (insn))) ;
                                                        }
                                                        if insn & 0xff3f1c38 == 0xc0040000 {
                                                            return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x000200 == 0 {
                                                            if insn & 0xff3f1f01 == 0xc0060000 {
                                                                return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN (MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN :: from (insn))) ;
                                                            }
                                                            if insn & 0xff3f1f01 == 0xc0060000 {
                                                                return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN (MOVA_SME_Zdnx2_SME_ZA_HV_idx_srcxN :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0060200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1 (MOVAZ_SME_Zdnx2_SME_ZA_array_vrsb_1 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0860200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1 (MOVAZ_SME_Zdnx2_SME_ZA_array_vrss_1 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0460200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 (MOVAZ_SME_Zdnx2_SME_ZA_array_vrsh_1 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffff1f01
                                                                        == 0xc0c60200
                                                                    {
                                                                        return Some (Opcode :: MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1 (MOVAZ_SME_Zdnx2_SME_ZA_array_vrsd_1 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xfffccc03 == 0xc08c8000 {
                                                                return Some (Opcode :: LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16 (LUTI2_SME_Zdnx4_SME_ZT0_SME_Zn_INDEX2_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffc4c01 == 0xc08c4000 {
                                                                return Some (Opcode :: LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 (LUTI2_SME_Zdnx2_SME_ZT0_SME_Zn_INDEX3_15 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x020000 == 0 {
                                                                if insn & 0xffff8fe0 == 0xc04c03e0 {
                                                                    return Some (Opcode :: MOVT_Rt_SME_ZT0_INDEX (MOVT_Rt_SME_ZT0_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffff8fe0 == 0xc04e03e0 {
                                                                    return Some (Opcode :: MOVT_SME_ZT0_INDEX_Rt (MOVT_SME_ZT0_INDEX_Rt :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xfffc0c00 == 0xc0cc0000 {
                                                                return Some (Opcode :: LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 (LUTI2_SVE_Zd_SME_ZT0_SME_Zn_INDEX4_14 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0xffff9c38 == 0xc0040800 {
                                                        return Some (Opcode :: MOVA_SME_ZA_array_off3_0_SME_Znx2 (MOVA_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9c38 == 0xc0040800 {
                                                        return Some (Opcode :: MOVA_SME_ZA_array_off3_0_SME_Znx2 (MOVA_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffff9f01 == 0xc0060800 {
                                                        return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_array_off3_5 (MOVA_SME_Zdnx2_SME_ZA_array_off3_5 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9f01 == 0xc0060800 {
                                                        return Some (Opcode :: MOVA_SME_Zdnx2_SME_ZA_array_off3_5 (MOVA_SME_Zdnx2_SME_ZA_array_off3_5 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0xff3f1c78 == 0xc0040400 {
                                                        return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 :: from (insn))) ;
                                                    }
                                                    if insn & 0xff3f1c78 == 0xc0040400 {
                                                        return Some (Opcode :: MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 (MOVA_SME_ZA_HV_idx_destxN_SME_Znx4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x000200 == 0 {
                                                        if insn & 0xff3f1f03 == 0xc0060400 {
                                                            return Some (Opcode :: MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN (MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN :: from (insn))) ;
                                                        }
                                                        if insn & 0xff3f1f03 == 0xc0060400 {
                                                            return Some (Opcode :: MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN (MOVA_SME_Zdnx4_SME_ZA_HV_idx_srcxN :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffff1f83 == 0xc0060600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrsb_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffff1f83 == 0xc0860600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrss_2 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffff1f83 == 0xc0460600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrsh_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffff1f03 == 0xc0c60600 {
                                                                    return Some (Opcode :: MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2 (MOVAZ_SME_Zdnx4_SME_ZA_array_vrsd_2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0xffff9c78 == 0xc0040c00 {
                                                        return Some (Opcode :: MOVA_SME_ZA_array_off3_0_SME_Znx4 (MOVA_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9c78 == 0xc0040c00 {
                                                        return Some (Opcode :: MOVA_SME_ZA_array_off3_0_SME_Znx4 (MOVA_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffff9f03 == 0xc0060c00 {
                                                        return Some (Opcode :: MOVA_SME_Zdnx4_SME_ZA_array_off3_5 (MOVA_SME_Zdnx4_SME_ZA_array_off3_5 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffff9f03 == 0xc0060c00 {
                                                        return Some (Opcode :: MOVA_SME_Zdnx4_SME_ZA_array_off3_5 (MOVA_SME_Zdnx4_SME_ZA_array_off3_5 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x400000 == 0 {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x000001 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0000000 {
                                                                return Some (Opcode :: LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR (LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa0008000 {
                                                                return Some (Opcode :: LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR (LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0004000 {
                                                                return Some (Opcode :: LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000c000 {
                                                                return Some (Opcode :: LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0002000 {
                                                                return Some (Opcode :: LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 (LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000a000 {
                                                                return Some (Opcode :: LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 (LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0006000 {
                                                                return Some (Opcode :: LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 (LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000e000 {
                                                                return Some (Opcode :: LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 (LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0000001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR (LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa0008001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR (LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0004001 {
                                                                return Some (Opcode :: LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 (LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000c001 {
                                                                return Some (Opcode :: LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 (LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0002001 {
                                                                return Some (Opcode :: LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 (LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000a001 {
                                                                return Some (Opcode :: LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 (LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0e001 == 0xa0006001 {
                                                                return Some (Opcode :: LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 (LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e003 == 0xa000e001 {
                                                                return Some (Opcode :: LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 (LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0000000 {
                                                return Some (Opcode :: LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0000000 {
                                                return Some (Opcode :: LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x000008 == 0 {
                                                    if insn & 0xffe0001c == 0xa0800000 {
                                                        return Some (Opcode :: SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0001c == 0xa0800008 {
                                                        return Some (Opcode :: SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H (SMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe0800000 {
                                                    return Some (Opcode :: LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe0800000 {
                                                    return Some (Opcode :: LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x000008 == 0 {
                                                if insn & 0xffe0001c == 0xa0800010 {
                                                    return Some (Opcode :: SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa0800018 {
                                                    return Some (Opcode :: SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H (SMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x000001 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0400000 {
                                                                return Some (Opcode :: LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa0408000 {
                                                                return Some (Opcode :: LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0404000 {
                                                                return Some (Opcode :: LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040c000 {
                                                                return Some (Opcode :: LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0402000 {
                                                                return Some (Opcode :: LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040a000 {
                                                                return Some (Opcode :: LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0406000 {
                                                                return Some (Opcode :: LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040e000 {
                                                                return Some (Opcode :: LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0400001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa0408001 {
                                                                return Some (Opcode :: LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0404001 {
                                                                return Some (Opcode :: LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040c001 {
                                                                return Some (Opcode :: LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0402001 {
                                                                return Some (Opcode :: LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040a001 {
                                                                return Some (Opcode :: LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff0e001 == 0xa0406001 {
                                                                return Some (Opcode :: LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e003 == 0xa040e001 {
                                                                return Some (Opcode :: LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0400000 {
                                                return Some (Opcode :: LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0400000 {
                                                return Some (Opcode :: LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe00018 == 0xa0c00000 {
                                                    return Some (Opcode :: SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe0c00000 {
                                                    return Some (Opcode :: LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe0c00000 {
                                                    return Some (Opcode :: LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00018 == 0xa0c00010 {
                                                return Some (Opcode :: SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x400000 == 0 {
                                if insn & 0x800000 == 0 {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x000001 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0200000 {
                                                            return Some (Opcode :: ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR (ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa0208000 {
                                                            return Some (Opcode :: ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR (ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0204000 {
                                                            return Some (Opcode :: ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 (ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020c000 {
                                                            return Some (Opcode :: ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 (ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0202000 {
                                                            return Some (Opcode :: ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 (ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020a000 {
                                                            return Some (Opcode :: ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 (ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0206000 {
                                                            return Some (Opcode :: ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 (ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020e000 {
                                                            return Some (Opcode :: ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 (ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0200001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR (STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa0208001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR (STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0204001 {
                                                            return Some (Opcode :: STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 (STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020c001 {
                                                            return Some (Opcode :: STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 (STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0202001 {
                                                            return Some (Opcode :: STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 (STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020a001 {
                                                            return Some (Opcode :: STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 (STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0e001 == 0xa0206001 {
                                                            return Some (Opcode :: STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 (STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e003 == 0xa020e001 {
                                                            return Some (Opcode :: STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 (STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe00010 == 0xe0200000 {
                                            return Some (Opcode :: ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                        if insn & 0xffe00010 == 0xe0200000 {
                                            return Some (Opcode :: ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1B_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                    }
                                } else {
                                    if insn & 0x000010 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0xffe0001c == 0xa0a00000 {
                                                return Some (Opcode :: SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SUMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0a00000 {
                                                return Some (Opcode :: ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0a00000 {
                                                return Some (Opcode :: ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1W_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe0001c == 0xa0a00010 {
                                            return Some (Opcode :: SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SUMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x800000 == 0 {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x000001 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0600000 {
                                                            return Some (Opcode :: ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa0608000 {
                                                            return Some (Opcode :: ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0604000 {
                                                            return Some (Opcode :: ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060c000 {
                                                            return Some (Opcode :: ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0602000 {
                                                            return Some (Opcode :: ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060a000 {
                                                            return Some (Opcode :: ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0606000 {
                                                            return Some (Opcode :: ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060e000 {
                                                            return Some (Opcode :: ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0600001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1B_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa0608001 {
                                                            return Some (Opcode :: STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1B_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0604001 {
                                                            return Some (Opcode :: STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1W_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060c001 {
                                                            return Some (Opcode :: STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1W_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0602001 {
                                                            return Some (Opcode :: STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1H_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060a001 {
                                                            return Some (Opcode :: STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1H_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e001 == 0xa0606001 {
                                                            return Some (Opcode :: STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1D_SME_Zdnx2_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e003 == 0xa060e001 {
                                                            return Some (Opcode :: STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1D_SME_Zdnx4_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe00010 == 0xe0600000 {
                                            return Some (Opcode :: ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                        if insn & 0xffe00010 == 0xe0600000 {
                                            return Some (Opcode :: ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1H_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                        }
                                    }
                                } else {
                                    if insn & 0x000010 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0xffe00018 == 0xa0e00000 {
                                                return Some (Opcode :: SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SUMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe00010 == 0xe0e00000 {
                                                return Some (Opcode :: ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                            if insn & 0xffe00010 == 0xe0e00000 {
                                                return Some (Opcode :: ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1D_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe00018 == 0xa0e00010 {
                                            return Some (Opcode :: SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (SUMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x80000000 == 0 {
                            if insn & 0x9f000000 == 0x10000000 {
                                return Some(Opcode::ADR_Rd_ADDR_PCREL21(
                                    ADR_Rd_ADDR_PCREL21::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x9f000000 == 0x90000000 {
                                return Some(Opcode::ADRP_Rd_ADDR_ADRP(ADRP_Rd_ADDR_ADRP::from(
                                    insn,
                                )));
                            }
                        }
                    }
                } else {
                    if insn & 0x10000000 == 0 {
                        if insn & 0x200000 == 0 {
                            if insn & 0x400000 == 0 {
                                if insn & 0x800000 == 0 {
                                    if insn & 0x20000000 == 0 {
                                        if insn & 0x000008 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x000004 == 0 {
                                                        if insn & 0xfff0001c == 0xc1000000 {
                                                            return Some (Opcode :: SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 (SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0001c == 0xc1000004 {
                                                            return Some (Opcode :: USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 (USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100000 {
                                                                return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108000 {
                                                                return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100020 {
                                                                return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108020 {
                                                                return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x000004 == 0 {
                                                        if insn & 0xfff0001c == 0xc1000010 {
                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 (UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0001c == 0xc1000014 {
                                                            return Some (Opcode :: SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 (SUMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100010 {
                                                                return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108010 {
                                                                return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1100030 {
                                                                return Some (Opcode :: SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (SUMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1108030 {
                                                                return Some (Opcode :: SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (SUMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0xfff0001c == 0xc1000008 {
                                                        return Some (Opcode :: SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 (SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff09038 == 0xc1100008 {
                                                            return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09078 == 0xc1108008 {
                                                            return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0xfff0001c == 0xc1000018 {
                                                        return Some (Opcode :: UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 (UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX4_10 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff09038 == 0xc1100018 {
                                                            return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 (UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09078 == 0xc1108018 {
                                                            return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 (UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX4_1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x000008 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1000000 {
                                                                return Some (Opcode :: LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR (LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1004000 {
                                                                return Some (Opcode :: LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1002000 {
                                                                return Some (Opcode :: LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1006000 {
                                                                return Some (Opcode :: LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1000008 {
                                                                return Some (Opcode :: LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR (LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1004008 {
                                                                return Some (Opcode :: LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1002008 {
                                                                return Some (Opcode :: LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1006008 {
                                                                return Some (Opcode :: LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffff9c10 == 0xe1000000 {
                                                    return Some (Opcode :: LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL (LDR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x000008 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0e00c == 0xa1008000 {
                                                                return Some (Opcode :: LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR (LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc1f == 0xe11f8000 {
                                                                return Some (Opcode :: LDR_SME_ZT0_SIMD_ADDR_SIMPLE (LDR_SME_ZT0_SIMD_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100c000 {
                                                            return Some (Opcode :: LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0e00c == 0xa100a000 {
                                                            return Some (Opcode :: LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100e000 {
                                                            return Some (Opcode :: LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0e00c == 0xa1008008 {
                                                            return Some (Opcode :: LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR (LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100c008 {
                                                            return Some (Opcode :: LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0e00c == 0xa100a008 {
                                                            return Some (Opcode :: LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa100e008 {
                                                            return Some (Opcode :: LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x000008 == 0 {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0001c == 0x81800000 {
                                                        return Some (Opcode :: BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (BFMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff0101c == 0xc1800000 {
                                                                return Some (Opcode :: SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 (SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xfff09838 == 0xc1900000 {
                                                                    return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 (SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09878 == 0xc1908000 {
                                                                    return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 (SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff01018 == 0xc1801000 {
                                                                return Some (Opcode :: FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xfff09038 == 0xc1901000 {
                                                                    return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09078 == 0xc1909000 {
                                                                    return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800000 {
                                                    return Some (Opcode :: USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (USMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0001c == 0x81800010 {
                                                        return Some (Opcode :: BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (BFMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff0101c == 0xc1800010 {
                                                                return Some (Opcode :: UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 (UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xfff09838 == 0xc1900010 {
                                                                    return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 (UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09878 == 0xc1908010 {
                                                                    return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 (UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff01018 == 0xc1801010 {
                                                                return Some (Opcode :: BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xfff09038 == 0xc1901010 {
                                                                    return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09078 == 0xc1909010 {
                                                                    return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800010 {
                                                    return Some (Opcode :: USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (USMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff0101c == 0xc1800008 {
                                                            return Some (Opcode :: SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 (SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09838 == 0xc1900008 {
                                                                return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 (SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09878 == 0xc1908008 {
                                                                return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 (SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff01018 == 0xc1801008 {
                                                            return Some (Opcode :: FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1901008 {
                                                                return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1909008 {
                                                                return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800008 {
                                                    return Some (Opcode :: UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (UMOPA_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff0101c == 0xc1800018 {
                                                            return Some (Opcode :: UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 (UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09838 == 0xc1900018 {
                                                                return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 (UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09878 == 0xc1908018 {
                                                                return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 (UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zm_INDEX3_1 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff01018 == 0xc1801018 {
                                                            return Some (Opcode :: BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1901018 {
                                                                return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1909018 {
                                                                return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0001c == 0xa1800018 {
                                                    return Some (Opcode :: UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (UMOPS_SME_ZAda_2b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x800000 == 0 {
                                    if insn & 0x000008 == 0 {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x100000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1400000 {
                                                            return Some (Opcode :: LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1404000 {
                                                            return Some (Opcode :: LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1402000 {
                                                            return Some (Opcode :: LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1406000 {
                                                            return Some (Opcode :: LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LD1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500000 {
                                                                return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501000 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500020 {
                                                                return Some (Opcode :: SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (SVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501020 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B (SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500010 {
                                                                return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501010 {
                                                                return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500030 {
                                                                return Some (Opcode :: UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (UVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501030 {
                                                                return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B (UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_B_SME_Zm_INDEX2_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x100000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e00c == 0xa1408000 {
                                                            return Some (Opcode :: LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140c000 {
                                                            return Some (Opcode :: LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e00c == 0xa140a000 {
                                                            return Some (Opcode :: LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140e000 {
                                                            return Some (Opcode :: LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LD1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508000 {
                                                                return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509000 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508020 {
                                                                return Some (Opcode :: SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509020 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B (SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508010 {
                                                                return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509010 {
                                                                return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508030 {
                                                                return Some (Opcode :: UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509030 {
                                                                return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B (UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_B_SME_Zm_INDEX2_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x100000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1400008 {
                                                            return Some (Opcode :: LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1404008 {
                                                            return Some (Opcode :: LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1402008 {
                                                            return Some (Opcode :: LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e008 == 0xa1406008 {
                                                            return Some (Opcode :: LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (LDNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500008 {
                                                                return Some (Opcode :: FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (FVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501008 {
                                                                return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff09038 == 0xc1501028 {
                                                            return Some (Opcode :: USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1500018 {
                                                                return Some (Opcode :: BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (BFVDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09038 == 0xc1501018 {
                                                                return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff09038 == 0xc1501038 {
                                                            return Some (Opcode :: SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 (SUDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x100000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e00c == 0xa1408008 {
                                                            return Some (Opcode :: LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140c008 {
                                                            return Some (Opcode :: LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xfff0e00c == 0xa140a008 {
                                                            return Some (Opcode :: LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa140e008 {
                                                            return Some (Opcode :: LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (LDNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0xfff09078 == 0xc1509008 {
                                                            return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508028 {
                                                                return Some (Opcode :: USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (USVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509028 {
                                                                return Some (Opcode :: USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000020 == 0 {
                                                        if insn & 0xfff09078 == 0xc1509018 {
                                                            return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xfff09078 == 0xc1508038 {
                                                                return Some (Opcode :: SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (SUVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1509038 {
                                                                return Some (Opcode :: SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 (SUDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x000010 == 0 {
                                        if insn & 0x20000000 == 0 {
                                            if insn & 0x000008 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff09838 == 0xc1d00000 {
                                                            return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 (FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08000 {
                                                            return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff01018 == 0xc1c01000 {
                                                            return Some (Opcode :: SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1d01000 {
                                                                return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1d09000 {
                                                                return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09838 == 0xc1d00008 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 (SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09878 == 0xc1d08008 {
                                                                return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08808 {
                                                            return Some (Opcode :: SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (SVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff01018 == 0xc1c01008 {
                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1d01008 {
                                                                return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1d09008 {
                                                                return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe00018 == 0xa1c00000 {
                                                    return Some (Opcode :: USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (USMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe1c00000 {
                                                    return Some (Opcode :: LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe1c00000 {
                                                    return Some (Opcode :: LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (LD1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000008 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff09838 == 0xc1d00010 {
                                                            return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 (FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08010 {
                                                            return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff01018 == 0xc1c01010 {
                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfff09038 == 0xc1d01010 {
                                                                return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff09078 == 0xc1d09010 {
                                                                return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe00018 == 0xa1c00010 {
                                                    return Some (Opcode :: USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (USMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff09838 == 0xc1d00018 {
                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 (UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09878 == 0xc1d08018 {
                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xfff09878 == 0xc1d08818 {
                                                        return Some (Opcode :: UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 (UVDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zm_INDEX1 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0xfff01018 == 0xc1c01018 {
                                                        return Some (Opcode :: UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 (UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm_INDEX3_10 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff09038 == 0xc1d01018 {
                                                            return Some (Opcode :: UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 (UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff09078 == 0xc1d09018 {
                                                            return Some (Opcode :: UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 (UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zm_INDEX3_2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x000010 == 0 {
                                        if insn & 0xffe0001c == 0x81a00000 {
                                            return Some (Opcode :: FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H (FMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H :: from (insn))) ;
                                        }
                                    } else {
                                        if insn & 0xffe0001c == 0x81a00010 {
                                            return Some (Opcode :: FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H (FMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_H_SVE_Zm_16_S_H :: from (insn))) ;
                                        }
                                    }
                                } else {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x000008 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000004 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1200000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (SMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1300000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (SMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffa19c3e
                                                                            == 0xc1a00000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 (SMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffa39c7e
                                                                            == 0xc1a10000
                                                                        {
                                                                            return Some (Opcode :: SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 (SMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1e
                                                                            == 0xc1200004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (USMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1e
                                                                            == 0xc1300004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (USMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3e
                                                                            == 0xc1a00004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 (USMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7e
                                                                            == 0xc1a10004
                                                                        {
                                                                            return Some (Opcode :: USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 (USMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1201000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (FDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1301000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (FDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffe19c38
                                                                        == 0xc1a01000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (FDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe39c78
                                                                        == 0xc1a11000
                                                                    {
                                                                        return Some (Opcode :: FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (FDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (FMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (FMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (FMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10800
                                                                        {
                                                                            return Some (Opcode :: FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (FMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (SMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (SMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (SMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10800
                                                                        {
                                                                            return Some (Opcode :: SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (SMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (FMLA_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S (FMLA_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (FMLA_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11800
                                                                    {
                                                                        return Some (Opcode :: FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (FMLA_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000004 == 0 {
                                                                if insn & 0xffb09c1c == 0xc1200400 {
                                                                    return Some (Opcode :: SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm (SMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c1c == 0xc1200404 {
                                                                    return Some (Opcode :: USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm (USMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (SDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (SDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11400
                                                                    {
                                                                        return Some (Opcode :: SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (SDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c00 {
                                                                    return Some (Opcode :: FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (FMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c00 {
                                                                    return Some (Opcode :: SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (SMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c00 {
                                                                    return Some (Opcode :: FADD_SME_ZA_array_off3_0_SME_Znx2 (FADD_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c00 {
                                                                    return Some (Opcode :: FADD_SME_ZA_array_off3_0_SME_Znx4 (FADD_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000004 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1200010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (UMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffb09c1e
                                                                            == 0xc1300010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (UMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffa19c3e
                                                                            == 0xc1a00010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 (UMLALL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffa39c7e
                                                                            == 0xc1a10010
                                                                        {
                                                                            return Some (Opcode :: UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 (UMLALL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xfff09c1e
                                                                        == 0xc1200014
                                                                    {
                                                                        return Some (Opcode :: SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (SUMLALL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c1e
                                                                        == 0xc1300014
                                                                    {
                                                                        return Some (Opcode :: SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (SUMLALL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1201010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (BFDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1301010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (BFDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffe19c38
                                                                        == 0xc1a01010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (BFDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe39c78
                                                                        == 0xc1a11010
                                                                    {
                                                                        return Some (Opcode :: BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (BFDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (BFMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (BFMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (BFMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10810
                                                                        {
                                                                            return Some (Opcode :: BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (BFMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (UMLAL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (UMLAL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (UMLAL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10810
                                                                        {
                                                                            return Some (Opcode :: UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (UMLAL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (ADD_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S (ADD_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (ADD_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11810
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (ADD_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffb09c1c == 0xc1200410 {
                                                                return Some (Opcode :: UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm (UMLALL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (UDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (UDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11410
                                                                    {
                                                                        return Some (Opcode :: UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (UDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c10 {
                                                                    return Some (Opcode :: BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (BFMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c10 {
                                                                    return Some (Opcode :: UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (UMLAL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c10 {
                                                                    return Some (Opcode :: ADD_SME_ZA_array_off3_0_SME_Znx2 (ADD_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c10 {
                                                                    return Some (Opcode :: ADD_SME_ZA_array_off3_0_SME_Znx4 (ADD_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xffb09c1e == 0xc1200008 {
                                                                    return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (SMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffb09c1e == 0xc1300008 {
                                                                    return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (SMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffa19c3e == 0xc1a00008 {
                                                                    return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 (SMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa39c7e == 0xc1a10008 {
                                                                    return Some (Opcode :: SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 (SMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (FMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (FMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (FMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10808
                                                                        {
                                                                            return Some (Opcode :: FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (FMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (SMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (SMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (SMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10808
                                                                        {
                                                                            return Some (Opcode :: SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (SMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (FMLS_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S (FMLS_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (FMLS_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11808
                                                                    {
                                                                        return Some (Opcode :: FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (FMLS_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffb09c1c == 0xc1200408 {
                                                                return Some (Opcode :: SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm (SMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1201408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (USDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1301408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (USDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c38
                                                                            == 0xc1a01408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (USDOT_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c78
                                                                            == 0xc1a11408
                                                                        {
                                                                            return Some (Opcode :: USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (USDOT_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1601408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1701408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408 (SDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701408 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c38
                                                                            == 0xc1e01408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H (SDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c78
                                                                            == 0xc1e11408
                                                                        {
                                                                            return Some (Opcode :: SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H (SDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c08 {
                                                                    return Some (Opcode :: FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (FMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c08 {
                                                                    return Some (Opcode :: SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (SMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c08 {
                                                                    return Some (Opcode :: FSUB_SME_ZA_array_off3_0_SME_Znx2 (FSUB_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c08 {
                                                                    return Some (Opcode :: FSUB_SME_ZA_array_off3_0_SME_Znx4 (FSUB_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xffb09c1e == 0xc1200018 {
                                                                    return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm (UMLSLL_SME_ZA_array_off1x4_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffb09c1e == 0xc1300018 {
                                                                    return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (UMLSLL_SME_ZA_array_off1x4_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffa19c3e == 0xc1a00018 {
                                                                    return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 (UMLSLL_SME_ZA_array_off1x4_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa39c7e == 0xc1a10018 {
                                                                    return Some (Opcode :: UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 (UMLSLL_SME_ZA_array_off1x4_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1200818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (BFMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1300818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (BFMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1a00818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (BFMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1a10818
                                                                        {
                                                                            return Some (Opcode :: BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (BFMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1600818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm (UMLSL_SME_ZA_array_off2x2_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c1c
                                                                            == 0xc1700818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (UMLSL_SME_ZA_array_off2x2_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c3c
                                                                            == 0xc1e00818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 (UMLSL_SME_ZA_array_off2x2_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c7c
                                                                            == 0xc1e10818
                                                                        {
                                                                            return Some (Opcode :: UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 (UMLSL_SME_ZA_array_off2x2_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1201818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (SUB_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffb09c18
                                                                        == 0xc1301818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S (SUB_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_S_SME_Zm_S_S :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa19c38
                                                                        == 0xc1a01818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 (SUB_SME_ZA_array_off3_0_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffa39c78
                                                                        == 0xc1a11818
                                                                    {
                                                                        return Some (Opcode :: SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 (SUB_SME_ZA_array_off3_0_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffb09c1c == 0xc1200418 {
                                                                return Some (Opcode :: UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm (UMLSLL_SME_ZA_array_off2x4_SVE_Zn_SME_Zm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1201418
                                                                    {
                                                                        return Some (Opcode :: SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm (SUDOT_SME_ZA_array_off3_0_SVE_ZnxN_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff09c18
                                                                        == 0xc1301418
                                                                    {
                                                                        return Some (Opcode :: SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B (SUDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_B_SME_Zm_S_B :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1601418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H (UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff09c18
                                                                            == 0xc1701418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418 (UDOT_SME_ZA_array_off3_0_S_S_SVE_ZnxN_S_H_SME_Zm_S_H_c1701418 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x010000 == 0 {
                                                                        if insn & 0xffe19c38
                                                                            == 0xc1e01418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H (UDOT_SME_ZA_array_off3_0_S_S_SME_Znx2_S_H_SME_Zmx2_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe39c78
                                                                            == 0xc1e11418
                                                                        {
                                                                            return Some (Opcode :: UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H (UDOT_SME_ZA_array_off3_0_S_S_SME_Znx4_S_H_SME_Zmx4_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff09c18 == 0xc1200c18 {
                                                                    return Some (Opcode :: BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (BFMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff09c18 == 0xc1600c18 {
                                                                    return Some (Opcode :: UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm (UMLSL_SME_ZA_array_off3x2_SVE_Zn_SME_Zm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffbf9c38 == 0xc1a01c18 {
                                                                    return Some (Opcode :: SUB_SME_ZA_array_off3_0_SME_Znx2 (SUB_SME_ZA_array_off3_0_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffbf9c78 == 0xc1a11c18 {
                                                                    return Some (Opcode :: SUB_SME_ZA_array_off3_0_SME_Znx4 (SUB_SME_ZA_array_off3_0_SME_Znx4 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0xff21e021 == 0xc1208000 {
                                                        return Some (Opcode :: SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2 (SEL_SME_Zdnx2_SME_PNg3_SME_Znx2_SME_Zmx2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff23e063 == 0xc1218000 {
                                                        return Some (Opcode :: SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4 (SEL_SME_Zdnx4_SME_PNg3_SME_Znx4_SME_Zmx4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x000001 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc01 == 0xc120c000 {
                                                                    return Some (Opcode :: FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (FCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc01 == 0xc120d000 {
                                                                    return Some (Opcode :: ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (ZIP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc01 == 0xc120d001 {
                                                                return Some (Opcode :: UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (UZP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc03 == 0xc120c800 {
                                                                return Some (Opcode :: FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 (FCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x000020 == 0 {
                                                                if insn & 0x000040 == 0 {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120d800
                                                                    {
                                                                        return Some (Opcode :: SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 (SQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120d840
                                                                    {
                                                                        return Some (Opcode :: SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5 (SQRSHRU_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc60 == 0xc120d820 {
                                                                    return Some (Opcode :: UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 (UQRSHR_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000001 == 0 {
                                                                if insn & 0xff20fc01 == 0xc120c400 {
                                                                    return Some (Opcode :: SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (SCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc01 == 0xc120c401 {
                                                                    return Some (Opcode :: UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 (UCLAMP_SME_Zdnx2_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x000001 == 0 {
                                                                    if insn & 0xffe0fc01
                                                                        == 0xc120d400
                                                                    {
                                                                        return Some (Opcode :: ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q (ZIP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc01
                                                                        == 0xc120d401
                                                                    {
                                                                        return Some (Opcode :: UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q (UZP_SME_Zdnx2_S_Q_SVE_Zn_S_Q_SVE_Zm_16_S_Q :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x000020 == 0 {
                                                                    if insn & 0x100000 == 0 {
                                                                        if insn & 0xfff0fc20
                                                                            == 0xc1e0d400
                                                                        {
                                                                            return Some (Opcode :: SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 (SQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc20
                                                                            == 0xc1f0d400
                                                                        {
                                                                            return Some (Opcode :: SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4 (SQRSHRU_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc20
                                                                        == 0xc1e0d420
                                                                    {
                                                                        return Some (Opcode :: UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 (UQRSHR_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000001 == 0 {
                                                                if insn & 0xff20fc03 == 0xc120cc00 {
                                                                    return Some (Opcode :: SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 (SCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc03 == 0xc120cc01 {
                                                                    return Some (Opcode :: UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 (UCLAMP_SME_Zdnx4_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000020 == 0 {
                                                                if insn & 0x000040 == 0 {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120dc00
                                                                    {
                                                                        return Some (Opcode :: SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 (SQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc60
                                                                        == 0xc120dc40
                                                                    {
                                                                        return Some (Opcode :: SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 (SQRSHRUN_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc60 == 0xc120dc20 {
                                                                    return Some (Opcode :: UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 (UQRSHRN_SVE_Zd_SME_Znx4_SME_SHRIMM5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000400 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x000001 == 0 {
                                                                if insn & 0x000020 == 0 {
                                                                    if insn & 0x000100 == 0 {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a000
                                                                        {
                                                                            return Some (Opcode :: SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm (SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0x000200 == 0 {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a100
                                                                            {
                                                                                return Some (Opcode :: FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm (FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a300
                                                                            {
                                                                                return Some (Opcode :: ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm (ADD_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x000100 == 0 {
                                                                        if insn & 0x000200 == 0 {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a020
                                                                            {
                                                                                return Some (Opcode :: SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm (SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a220
                                                                            {
                                                                                return Some (Opcode :: SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm (SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a120
                                                                        {
                                                                            return Some (Opcode :: FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm (FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x000020 == 0 {
                                                                    if insn & 0x000100 == 0 {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a001
                                                                        {
                                                                            return Some (Opcode :: UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm (UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a101
                                                                        {
                                                                            return Some (Opcode :: FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm (FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x000100 == 0 {
                                                                        if insn & 0x000200 == 0 {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a021
                                                                            {
                                                                                return Some (Opcode :: UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm (UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff30ffe1
                                                                                == 0xc120a221
                                                                            {
                                                                                return Some (Opcode :: URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm (URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff30ffe1
                                                                            == 0xc120a121
                                                                        {
                                                                            return Some (Opcode :: FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm (FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x000020 == 0 {
                                                                    if insn & 0x020000 == 0 {
                                                                        if insn & 0x040000 == 0 {
                                                                            if insn & 0x080000 == 0
                                                                            {
                                                                                if insn & 0x400000
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc20 == 0xc120e000 { return Some (Opcode :: FCVT_SVE_Zd_SME_Znx2 (FCVT_SVE_Zd_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc20 == 0xc160e000 { return Some (Opcode :: BFCVT_SVE_Zd_SME_Znx2 (BFCVT_SVE_Zd_SME_Znx2 :: from (insn))) ; }
                                                                                }
                                                                            } else {
                                                                                if insn & 0x100000
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc1a8e000 { return Some (Opcode :: FRINTN_SME_Zdnx2_SME_Znx2 (FRINTN_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc1b8e000 { return Some (Opcode :: FRINTN_SME_Zdnx4_SME_Znx4 (FRINTN_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn & 0x100000 == 0
                                                                            {
                                                                                if insn & 0xfffffc21
                                                                                    == 0xc1ace000
                                                                                {
                                                                                    return Some (Opcode :: FRINTA_SME_Zdnx2_SME_Znx2 (FRINTA_SME_Zdnx2_SME_Znx2 :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xfffffc63
                                                                                    == 0xc1bce000
                                                                                {
                                                                                    return Some (Opcode :: FRINTA_SME_Zdnx4_SME_Znx4 (FRINTA_SME_Zdnx4_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0x040000 == 0 {
                                                                            if insn & 0x080000 == 0
                                                                            {
                                                                                if insn & 0x100000
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc122e000 { return Some (Opcode :: SCVTF_SME_Zdnx2_SME_Znx2 (SCVTF_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc132e000 { return Some (Opcode :: SCVTF_SME_Zdnx4_SME_Znx4 (SCVTF_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            } else {
                                                                                if insn & 0x100000
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc1aae000 { return Some (Opcode :: FRINTM_SME_Zdnx2_SME_Znx2 (FRINTM_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc1bae000 { return Some (Opcode :: FRINTM_SME_Zdnx4_SME_Znx4 (FRINTM_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn & 0x000002 == 0
                                                                            {
                                                                                if insn & 0xff3ffc63
                                                                                    == 0xc136e000
                                                                                {
                                                                                    return Some (Opcode :: ZIP_SME_Zdnx4_SME_Znx4 (ZIP_SME_Zdnx4_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff3ffc63
                                                                                    == 0xc136e002
                                                                                {
                                                                                    return Some (Opcode :: UZP_SME_Zdnx4_SME_Znx4 (UZP_SME_Zdnx4_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x020000 == 0 {
                                                                        if insn & 0x400000 == 0 {
                                                                            if insn & 0xfffffc20
                                                                                == 0xc120e020
                                                                            {
                                                                                return Some (Opcode :: FCVTN_SVE_Zd_SME_Znx2 (FCVTN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xfffffc20
                                                                                == 0xc160e020
                                                                            {
                                                                                return Some (Opcode :: BFCVTN_SVE_Zd_SME_Znx2 (BFCVTN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0x100000 == 0 {
                                                                            if insn & 0xfffffc21
                                                                                == 0xc122e020
                                                                            {
                                                                                return Some (Opcode :: UCVTF_SME_Zdnx2_SME_Znx2 (UCVTF_SME_Zdnx2_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xfffffc63
                                                                                == 0xc132e020
                                                                            {
                                                                                return Some (Opcode :: UCVTF_SME_Zdnx4_SME_Znx4 (UCVTF_SME_Zdnx4_SME_Znx4 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x020000 == 0 {
                                                                    if insn & 0x000001 == 0 {
                                                                        if insn & 0x040000 == 0 {
                                                                            if insn & 0x000020 == 0
                                                                            {
                                                                                if insn & 0x080000
                                                                                    == 0
                                                                                {
                                                                                    if insn
                                                                                        & 0x100000
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xfffffc21 == 0xc121e000 { return Some (Opcode :: FCVTZS_SME_Zdnx2_SME_Znx2 (FCVTZS_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xfffffc63 == 0xc131e000 { return Some (Opcode :: FCVTZS_SME_Zdnx4_SME_Znx4 (FCVTZS_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                } else {
                                                                                    if insn
                                                                                        & 0x100000
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xfffffc21 == 0xc1a9e000 { return Some (Opcode :: FRINTP_SME_Zdnx2_SME_Znx2 (FRINTP_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xfffffc63 == 0xc1b9e000 { return Some (Opcode :: FRINTP_SME_Zdnx4_SME_Znx4 (FRINTP_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if insn & 0x100000
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc21 == 0xc121e020 { return Some (Opcode :: FCVTZU_SME_Zdnx2_SME_Znx2 (FCVTZU_SME_Zdnx2_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc63 == 0xc131e020 { return Some (Opcode :: FCVTZU_SME_Zdnx4_SME_Znx4 (FCVTZU_SME_Zdnx4_SME_Znx4 :: from (insn))) ; }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn & 0x100000 == 0
                                                                            {
                                                                                if insn & 0xff3ffc01
                                                                                    == 0xc125e000
                                                                                {
                                                                                    return Some (Opcode :: SUNPK_SME_Zdnx2_SVE_Zn (SUNPK_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff3ffc23
                                                                                    == 0xc135e000
                                                                                {
                                                                                    return Some (Opcode :: SUNPK_SME_Zdnx4_SME_Znx2 (SUNPK_SME_Zdnx4_SME_Znx2 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0x100000 == 0 {
                                                                            if insn & 0xff3ffc01
                                                                                == 0xc125e001
                                                                            {
                                                                                return Some (Opcode :: UUNPK_SME_Zdnx2_SVE_Zn (UUNPK_SME_Zdnx2_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff3ffc23
                                                                                == 0xc135e001
                                                                            {
                                                                                return Some (Opcode :: UUNPK_SME_Zdnx4_SME_Znx2 (UUNPK_SME_Zdnx4_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x000020 == 0 {
                                                                        if insn & 0x040000 == 0 {
                                                                            if insn & 0x100000 == 0
                                                                            {
                                                                                if insn & 0x400000
                                                                                    == 0
                                                                                {
                                                                                    if insn & 0xfffffc20 == 0xc123e000 { return Some (Opcode :: SQCVT_SVE_Zd_SME_Znx2 (SQCVT_SVE_Zd_SME_Znx2 :: from (insn))) ; }
                                                                                } else {
                                                                                    if insn & 0xfffffc20 == 0xc163e000 { return Some (Opcode :: SQCVTU_SVE_Zd_SME_Znx2 (SQCVTU_SVE_Zd_SME_Znx2 :: from (insn))) ; }
                                                                                }
                                                                            } else {
                                                                                if insn & 0x000040
                                                                                    == 0
                                                                                {
                                                                                    if insn
                                                                                        & 0x400000
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xff7ffc60 == 0xc133e000 { return Some (Opcode :: SQCVT_SVE_Zd_SME_Znx4 (SQCVT_SVE_Zd_SME_Znx4 :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xff7ffc60 == 0xc173e000 { return Some (Opcode :: SQCVTU_SVE_Zd_SME_Znx4 (SQCVTU_SVE_Zd_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                } else {
                                                                                    if insn
                                                                                        & 0x400000
                                                                                        == 0
                                                                                    {
                                                                                        if insn & 0xff7ffc60 == 0xc133e040 { return Some (Opcode :: SQCVTN_SVE_Zd_SME_Znx4 (SQCVTN_SVE_Zd_SME_Znx4 :: from (insn))) ; }
                                                                                    } else {
                                                                                        if insn & 0xff7ffc60 == 0xc173e040 { return Some (Opcode :: SQCVTUN_SVE_Zd_SME_Znx4 (SQCVTUN_SVE_Zd_SME_Znx4 :: from (insn))) ; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn & 0x000002 == 0
                                                                            {
                                                                                if insn & 0xfffffc63
                                                                                    == 0xc137e000
                                                                                {
                                                                                    return Some (Opcode :: ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q (ZIP_SME_Zdnx4_S_Q_SME_Znx4_S_Q :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xfffffc63
                                                                                    == 0xc137e002
                                                                                {
                                                                                    return Some (Opcode :: UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q (UZP_SME_Zdnx4_S_Q_SME_Znx4_S_Q :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0x100000 == 0 {
                                                                            if insn & 0xfffffc20
                                                                                == 0xc123e020
                                                                            {
                                                                                return Some (Opcode :: UQCVT_SVE_Zd_SME_Znx2 (UQCVT_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0x000040 == 0
                                                                            {
                                                                                if insn & 0xff7ffc60
                                                                                    == 0xc133e020
                                                                                {
                                                                                    return Some (Opcode :: UQCVT_SVE_Zd_SME_Znx4 (UQCVT_SVE_Zd_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff7ffc60
                                                                                    == 0xc133e060
                                                                                {
                                                                                    return Some (Opcode :: UQCVTN_SVE_Zd_SME_Znx4 (UQCVTN_SVE_Zd_SME_Znx4 :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000001 == 0 {
                                                            if insn & 0x000020 == 0 {
                                                                if insn & 0x000100 == 0 {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b000
                                                                    {
                                                                        return Some (Opcode :: SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (SMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b100
                                                                    {
                                                                        return Some (Opcode :: FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (FMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x000100 == 0 {
                                                                    if insn & 0x000200 == 0 {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b020
                                                                        {
                                                                            return Some (Opcode :: SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (SMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b220
                                                                        {
                                                                            return Some (Opcode :: SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (SRSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b120
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (FMAXNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000020 == 0 {
                                                                if insn & 0x000100 == 0 {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b001
                                                                    {
                                                                        return Some (Opcode :: UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (UMAX_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b101
                                                                    {
                                                                        return Some (Opcode :: FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (FMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x000100 == 0 {
                                                                    if insn & 0x000200 == 0 {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b021
                                                                        {
                                                                            return Some (Opcode :: UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (UMIN_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff21ffe1
                                                                            == 0xc120b221
                                                                        {
                                                                            return Some (Opcode :: URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (URSHL_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff21ffe1
                                                                        == 0xc120b121
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (FMINNM_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000001 == 0 {
                                                        if insn & 0x000020 == 0 {
                                                            if insn & 0x000100 == 0 {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a800
                                                                    {
                                                                        return Some (Opcode :: SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm (SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b800
                                                                    {
                                                                        return Some (Opcode :: SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (SMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x000200 == 0 {
                                                                    if insn & 0x001000 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120a900
                                                                        {
                                                                            return Some (Opcode :: FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm (FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120b900
                                                                        {
                                                                            return Some (Opcode :: FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (FMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120ab00
                                                                    {
                                                                        return Some (Opcode :: ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm (ADD_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000100 == 0 {
                                                                if insn & 0x000200 == 0 {
                                                                    if insn & 0x001000 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120a820
                                                                        {
                                                                            return Some (Opcode :: SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm (SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120b820
                                                                        {
                                                                            return Some (Opcode :: SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (SMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x001000 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120aa20
                                                                        {
                                                                            return Some (Opcode :: SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm (SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120ba20
                                                                        {
                                                                            return Some (Opcode :: SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (SRSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a920
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm (FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b920
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (FMAXNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000020 == 0 {
                                                            if insn & 0x000100 == 0 {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a801
                                                                    {
                                                                        return Some (Opcode :: UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm (UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b801
                                                                    {
                                                                        return Some (Opcode :: UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (UMAX_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a901
                                                                    {
                                                                        return Some (Opcode :: FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm (FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b901
                                                                    {
                                                                        return Some (Opcode :: FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (FMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000100 == 0 {
                                                                if insn & 0x000200 == 0 {
                                                                    if insn & 0x001000 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120a821
                                                                        {
                                                                            return Some (Opcode :: UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm (UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120b821
                                                                        {
                                                                            return Some (Opcode :: UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (UMIN_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x001000 == 0 {
                                                                        if insn & 0xff30ffe3
                                                                            == 0xc120aa21
                                                                        {
                                                                            return Some (Opcode :: URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm (URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff23ffe3
                                                                            == 0xc120ba21
                                                                        {
                                                                            return Some (Opcode :: URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (URSHL_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xff30ffe3
                                                                        == 0xc120a921
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm (FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff23ffe3
                                                                        == 0xc120b921
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (FMINNM_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0xff30ffe1 == 0xc120a400 {
                                                            return Some (Opcode :: SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm (SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zm :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff21ffe1 == 0xc120b400 {
                                                            return Some (Opcode :: SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 (SQDMULH_SME_Zdnx2_SME_Zdnx2_SME_Zmx2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0xff30ffe3 == 0xc120ac00 {
                                                            return Some (Opcode :: SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm (SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zm :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff23ffe3 == 0xc120bc00 {
                                                            return Some (Opcode :: SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 (SQDMULH_SME_Zdnx4_SME_Zdnx4_SME_Zmx4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x400000 == 0 {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x000008 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1200000 {
                                                                return Some (Opcode :: ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR (ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1204000 {
                                                                return Some (Opcode :: ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1202000 {
                                                                return Some (Opcode :: ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1206000 {
                                                                return Some (Opcode :: ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1200008 {
                                                                return Some (Opcode :: STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR (STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1204008 {
                                                                return Some (Opcode :: STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xffe0e008 == 0xa1202008 {
                                                                return Some (Opcode :: STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0e008 == 0xa1206008 {
                                                                return Some (Opcode :: STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffff9c10 == 0xe1200000 {
                                                    return Some (Opcode :: STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL (STR_SME_ZA_array_off4_SME_ADDR_RI_U4xVL :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x000008 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0e00c == 0xa1208000 {
                                                                return Some (Opcode :: ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR (ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc1f == 0xe13f8000 {
                                                                return Some (Opcode :: STR_SME_ZT0_SIMD_ADDR_SIMPLE (STR_SME_ZT0_SIMD_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120c000 {
                                                            return Some (Opcode :: ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0e00c == 0xa120a000 {
                                                            return Some (Opcode :: ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120e000 {
                                                            return Some (Opcode :: ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0e00c == 0xa1208008 {
                                                            return Some (Opcode :: STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR (STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120c008 {
                                                            return Some (Opcode :: STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 (STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0e00c == 0xa120a008 {
                                                            return Some (Opcode :: STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 (STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e00c == 0xa120e008 {
                                                            return Some (Opcode :: STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 (STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RR_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0xffe0001c == 0xa1a00000 {
                                                return Some (Opcode :: UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B (UMOPA_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0xffe0001c == 0xa1a00010 {
                                                return Some (Opcode :: UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B (UMOPS_SME_ZAda_2b_S_S_SVE_Pg3_P_M_SME_Pm_P_M_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0x000008 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1600000 {
                                                            return Some (Opcode :: ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa1608000 {
                                                            return Some (Opcode :: ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1604000 {
                                                            return Some (Opcode :: ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160c000 {
                                                            return Some (Opcode :: ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1602000 {
                                                            return Some (Opcode :: ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160a000 {
                                                            return Some (Opcode :: ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1606000 {
                                                            return Some (Opcode :: ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (ST1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160e000 {
                                                            return Some (Opcode :: ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (ST1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1600008 {
                                                            return Some (Opcode :: STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1B_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa1608008 {
                                                            return Some (Opcode :: STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1B_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1604008 {
                                                            return Some (Opcode :: STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1W_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160c008 {
                                                            return Some (Opcode :: STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1W_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1602008 {
                                                            return Some (Opcode :: STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1H_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160a008 {
                                                            return Some (Opcode :: STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1H_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xfff0e008 == 0xa1606008 {
                                                            return Some (Opcode :: STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL (STNT1D_SME_Ztx2_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e00c == 0xa160e008 {
                                                            return Some (Opcode :: STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL (STNT1D_SME_Ztx4_STRIDED_SME_PNg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe00018 == 0xa1e00000 {
                                                    return Some (Opcode :: UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (UMOPA_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe00010 == 0xe1e00000 {
                                                    return Some (Opcode :: ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                                if insn & 0xffe00010 == 0xe1e00000 {
                                                    return Some (Opcode :: ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R (ST1Q_SME_ZA_HV_idx_ldstr_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0xffe00018 == 0xa1e00010 {
                                                return Some (Opcode :: UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 (UMOPS_SME_ZAda_3b_SVE_Pg3_SME_Pm_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f000000 == 0x11000000 {
                                    return Some(Opcode::ADD_Rd_SP_Rn_SP_AIMM(
                                        ADD_Rd_SP_Rn_SP_AIMM::from(insn),
                                    ));
                                }
                                if insn & 0xffc0c000 == 0x91800000 {
                                    return Some(Opcode::ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG(
                                        ADDG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11c00000 {
                                    return Some(Opcode::SMAX_Rd_Rn_CSSC_SIMM8(
                                        SMAX_Rd_Rn_CSSC_SIMM8::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11c40000 {
                                    return Some(Opcode::UMAX_Rd_Rn_CSSC_UIMM8(
                                        UMAX_Rd_Rn_CSSC_UIMM8::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11c80000 {
                                    return Some(Opcode::SMIN_Rd_Rn_CSSC_SIMM8(
                                        SMIN_Rd_Rn_CSSC_SIMM8::from(insn),
                                    ));
                                }
                                if insn & 0x7ffc0000 == 0x11cc0000 {
                                    return Some(Opcode::UMIN_Rd_Rn_CSSC_UIMM8(
                                        UMIN_Rd_Rn_CSSC_UIMM8::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f000000 == 0x51000000 {
                                    return Some(Opcode::SUB_Rd_SP_Rn_SP_AIMM(
                                        SUB_Rd_SP_Rn_SP_AIMM::from(insn),
                                    ));
                                }
                                if insn & 0xffc0c000 == 0xd1800000 {
                                    return Some(Opcode::SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG(
                                        SUBG_Rd_SP_Rn_SP_UIMM10_UIMM4_ADDG::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f000000 == 0x31000000 {
                                    return Some(Opcode::ADDS_Rd_Rn_SP_AIMM(
                                        ADDS_Rd_Rn_SP_AIMM::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f000000 == 0x71000000 {
                                    return Some(Opcode::SUBS_Rd_Rn_SP_AIMM(
                                        SUBS_Rd_Rn_SP_AIMM::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            } else {
                if insn & 0x10000000 == 0 {
                    if insn & 0x400000 == 0 {
                        if insn & 0x800000 == 0 {
                            if insn & 0x1000000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x8007c00 {
                                                        return Some(
                                                            Opcode::STXRB_Rs_Rt_ADDR_SIMPLE(
                                                                STXRB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x48007c00 {
                                                        return Some(
                                                            Opcode::STXRH_Rs_Rt_ADDR_SIMPLE(
                                                                STXRH_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe0fc00 == 0x88007c00 {
                                                    return Some(Opcode::STXR_Rs_Rt_ADDR_SIMPLE(
                                                        STXR_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xbfe0fc00 == 0x8207c00 {
                                                    return Some (Opcode :: CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (CASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xbfe08000 == 0x88200000 {
                                                    return Some(
                                                        Opcode::STXP_Rs_Rt_Rt2_ADDR_SIMPLE(
                                                            STXP_Rs_Rt_Rt2_ADDR_SIMPLE::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x800fc00 {
                                                        return Some(
                                                            Opcode::STLXRB_Rs_Rt_ADDR_SIMPLE(
                                                                STLXRB_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x4800fc00 {
                                                        return Some(
                                                            Opcode::STLXRH_Rs_Rt_ADDR_SIMPLE(
                                                                STLXRH_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe0fc00 == 0x8800fc00 {
                                                    return Some(Opcode::STLXR_Rs_Rt_ADDR_SIMPLE(
                                                        STLXR_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xbfe0fc00 == 0x820fc00 {
                                                    return Some (Opcode :: CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (CASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xbfe08000 == 0x88208000 {
                                                    return Some(
                                                        Opcode::STLXP_Rs_Rt_Rt2_ADDR_SIMPLE(
                                                            STLXP_Rs_Rt_Rt2_ADDR_SIMPLE::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x7fc00000 == 0x28000000 {
                                        return Some(Opcode::STNP_Rt_Rt2_ADDR_SIMM7(
                                            STNP_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7fc00000 == 0x29000000 {
                                        return Some(Opcode::STP_Rt_Rt2_ADDR_SIMM7(
                                            STP_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xffc00000 == 0x69000000 {
                                        return Some(Opcode::STGP_Rt_Rt2_ADDR_SIMM11(
                                            STGP_Rt_Rt2_ADDR_SIMM11::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x008000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xfffffc00 == 0x89f7c00 {
                                                    return Some(Opcode::STLLRB_Rt_ADDR_SIMPLE(
                                                        STLLRB_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x489f7c00 {
                                                    return Some(Opcode::STLLRH_Rt_ADDR_SIMPLE(
                                                        STLLRH_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x889f7c00 {
                                                return Some(Opcode::STLLR_Rt_ADDR_SIMPLE(
                                                    STLLR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x8a07c00 {
                                                    return Some(Opcode::CASB_Rs_Rt_ADDR_SIMPLE(
                                                        CASB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48a07c00 {
                                                    return Some(Opcode::CASH_Rs_Rt_ADDR_SIMPLE(
                                                        CASH_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88a07c00 {
                                                return Some(Opcode::CAS_Rs_Rt_ADDR_SIMPLE(
                                                    CAS_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xfffffc00 == 0x89ffc00 {
                                                    return Some(Opcode::STLRB_Rt_ADDR_SIMPLE(
                                                        STLRB_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x489ffc00 {
                                                    return Some(Opcode::STLRH_Rt_ADDR_SIMPLE(
                                                        STLRH_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x889ffc00 {
                                                return Some(Opcode::STLR_Rt_ADDR_SIMPLE(
                                                    STLR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x8a0fc00 {
                                                    return Some(Opcode::CASLB_Rs_Rt_ADDR_SIMPLE(
                                                        CASLB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48a0fc00 {
                                                    return Some(Opcode::CASLH_Rs_Rt_ADDR_SIMPLE(
                                                        CASLH_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88a0fc00 {
                                                return Some(Opcode::CASL_Rs_Rt_ADDR_SIMPLE(
                                                    CASL_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7ec00000 == 0x28800000 {
                                        return Some(Opcode::STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S(
                                            STP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xfec00000 == 0x68800000 {
                                        return Some(Opcode::STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag(
                                            STGP_Rt_X_Rt2_X_ADDR_SIMM11_imm_tag::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x800000 == 0 {
                            if insn & 0x1000000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xfffffc00 == 0x85f7c00 {
                                                        return Some(Opcode::LDXRB_Rt_ADDR_SIMPLE(
                                                            LDXRB_Rt_ADDR_SIMPLE::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0x485f7c00 {
                                                        return Some(Opcode::LDXRH_Rt_ADDR_SIMPLE(
                                                            LDXRH_Rt_ADDR_SIMPLE::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbffffc00 == 0x885f7c00 {
                                                    return Some(Opcode::LDXR_Rt_ADDR_SIMPLE(
                                                        LDXR_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xbfe0fc00 == 0x8607c00 {
                                                    return Some (Opcode :: CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (CASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xbfff8000 == 0x887f0000 {
                                                    return Some(Opcode::LDXP_Rt_Rt2_ADDR_SIMPLE(
                                                        LDXP_Rt_Rt2_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xfffffc00 == 0x85ffc00 {
                                                        return Some(
                                                            Opcode::LDAXRB_Rt_ADDR_SIMPLE(
                                                                LDAXRB_Rt_ADDR_SIMPLE::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0x485ffc00 {
                                                        return Some(
                                                            Opcode::LDAXRH_Rt_ADDR_SIMPLE(
                                                                LDAXRH_Rt_ADDR_SIMPLE::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbffffc00 == 0x885ffc00 {
                                                    return Some(Opcode::LDAXR_Rt_ADDR_SIMPLE(
                                                        LDAXR_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xbfe0fc00 == 0x860fc00 {
                                                    return Some (Opcode :: CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (CASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xbfff8000 == 0x887f8000 {
                                                    return Some(Opcode::LDAXP_Rt_Rt2_ADDR_SIMPLE(
                                                        LDAXP_Rt_Rt2_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x7fc00000 == 0x28400000 {
                                        return Some(Opcode::LDNP_Rt_Rt2_ADDR_SIMM7(
                                            LDNP_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7fc00000 == 0x29400000 {
                                        return Some(Opcode::LDP_Rt_Rt2_ADDR_SIMM7(
                                            LDP_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xffc00000 == 0x69400000 {
                                        return Some(Opcode::LDPSW_Rt_Rt2_ADDR_SIMM7(
                                            LDPSW_Rt_Rt2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x008000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xfffffc00 == 0x8df7c00 {
                                                    return Some(Opcode::LDLARB_Rt_ADDR_SIMPLE(
                                                        LDLARB_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x48df7c00 {
                                                    return Some(Opcode::LDLARH_Rt_ADDR_SIMPLE(
                                                        LDLARH_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x88df7c00 {
                                                return Some(Opcode::LDLAR_Rt_ADDR_SIMPLE(
                                                    LDLAR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x8e07c00 {
                                                    return Some(Opcode::CASAB_Rs_Rt_ADDR_SIMPLE(
                                                        CASAB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48e07c00 {
                                                    return Some(Opcode::CASAH_Rs_Rt_ADDR_SIMPLE(
                                                        CASAH_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88e07c00 {
                                                return Some(Opcode::CASA_Rs_Rt_ADDR_SIMPLE(
                                                    CASA_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xfffffc00 == 0x8dffc00 {
                                                    return Some(Opcode::LDARB_Rt_ADDR_SIMPLE(
                                                        LDARB_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xfffffc00 == 0x48dffc00 {
                                                    return Some(Opcode::LDARH_Rt_ADDR_SIMPLE(
                                                        LDARH_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0x88dffc00 {
                                                return Some(Opcode::LDAR_Rt_ADDR_SIMPLE(
                                                    LDAR_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x8e0fc00 {
                                                    return Some(Opcode::CASALB_Rs_Rt_ADDR_SIMPLE(
                                                        CASALB_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x48e0fc00 {
                                                    return Some(Opcode::CASALH_Rs_Rt_ADDR_SIMPLE(
                                                        CASALH_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbfe0fc00 == 0x88e0fc00 {
                                                return Some(Opcode::CASAL_Rs_Rt_ADDR_SIMPLE(
                                                    CASAL_Rs_Rt_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7ec00000 == 0x28c00000 {
                                        return Some(Opcode::LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S(
                                            LDP_Rt_W_Rt2_W_ADDR_SIMM7_S_S::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xfec00000 == 0x68c00000 {
                                        return Some(Opcode::LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S(
                                            LDPSW_Rt_X_Rt2_X_ADDR_SIMM7_S_S::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn & 0x1000000 == 0 {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x80000000 == 0 {
                                if insn & 0xbf000000 == 0x18000000 {
                                    return Some(Opcode::LDR_Rt_ADDR_PCREL19(
                                        LDR_Rt_ADDR_PCREL19::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0xff000000 == 0x98000000 {
                                        return Some(Opcode::LDRSW_Rt_ADDR_PCREL19(
                                            LDRSW_Rt_ADDR_PCREL19::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xff000000 == 0xd8000000 {
                                        return Some(Opcode::PRFM_PRFOP_ADDR_PCREL19(
                                            PRFM_PRFOP_ADDR_PCREL19::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x000400 == 0 {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x38000000 {
                                                            return Some(
                                                                Opcode::STURB_Rt_ADDR_SIMM9(
                                                                    STURB_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78000000 {
                                                            return Some(
                                                                Opcode::STURH_Rt_ADDR_SIMM9(
                                                                    STURH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8000000 {
                                                        return Some(Opcode::STUR_Rt_ADDR_SIMM9(
                                                            STUR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x38400000 {
                                                            return Some(
                                                                Opcode::LDURB_Rt_ADDR_SIMM9(
                                                                    LDURB_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78400000 {
                                                            return Some(
                                                                Opcode::LDURH_Rt_ADDR_SIMM9(
                                                                    LDURH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8400000 {
                                                        return Some(Opcode::LDUR_Rt_ADDR_SIMM9(
                                                            LDUR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffa00c00 == 0x38800000 {
                                                        return Some(Opcode::LDURSB_Rt_ADDR_SIMM9(
                                                            LDURSB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xb8800000 {
                                                        return Some(Opcode::LDURSW_Rt_ADDR_SIMM9(
                                                            LDURSW_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffa00c00 == 0x78800000 {
                                                        return Some(Opcode::LDURSH_Rt_ADDR_SIMM9(
                                                            LDURSH_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xf8800000 {
                                                        return Some(
                                                            Opcode::PRFUM_PRFOP_ADDR_SIMM9(
                                                                PRFUM_PRFOP_ADDR_SIMM9::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38200000
                                                                        {
                                                                            return Some (Opcode :: LDADDB_Rs_Rt_ADDR_SIMPLE (LDADDB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78200000
                                                                        {
                                                                            return Some (Opcode :: LDADDH_Rs_Rt_ADDR_SIMPLE (LDADDH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8200000
                                                                    {
                                                                        return Some (Opcode :: LDADD_Rs_Rt_ADDR_SIMPLE (LDADD_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a00000
                                                                        {
                                                                            return Some (Opcode :: LDADDAB_Rs_Rt_ADDR_SIMPLE (LDADDAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a00000
                                                                        {
                                                                            return Some (Opcode :: LDADDAH_Rs_Rt_ADDR_SIMPLE (LDADDAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a00000
                                                                    {
                                                                        return Some (Opcode :: LDADDA_Rs_Rt_ADDR_SIMPLE (LDADDA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38600000
                                                                        {
                                                                            return Some (Opcode :: LDADDLB_Rs_Rt_ADDR_SIMPLE (LDADDLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78600000
                                                                        {
                                                                            return Some (Opcode :: LDADDLH_Rs_Rt_ADDR_SIMPLE (LDADDLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8600000
                                                                    {
                                                                        return Some (Opcode :: LDADDL_Rs_Rt_ADDR_SIMPLE (LDADDL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e00000
                                                                        {
                                                                            return Some (Opcode :: LDADDALB_Rs_Rt_ADDR_SIMPLE (LDADDALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e00000
                                                                        {
                                                                            return Some (Opcode :: LDADDALH_Rs_Rt_ADDR_SIMPLE (LDADDALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e00000
                                                                    {
                                                                        return Some (Opcode :: LDADDAL_Rs_Rt_ADDR_SIMPLE (LDADDAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38208000
                                                                        {
                                                                            return Some (Opcode :: SWPB_Rs_Rt_ADDR_SIMPLE (SWPB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78208000
                                                                        {
                                                                            return Some (Opcode :: SWPH_Rs_Rt_ADDR_SIMPLE (SWPH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8208000
                                                                    {
                                                                        return Some (Opcode :: SWP_Rs_Rt_ADDR_SIMPLE (SWP_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a08000
                                                                        {
                                                                            return Some (Opcode :: SWPAB_Rs_Rt_ADDR_SIMPLE (SWPAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a08000
                                                                        {
                                                                            return Some (Opcode :: SWPAH_Rs_Rt_ADDR_SIMPLE (SWPAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a08000
                                                                    {
                                                                        return Some (Opcode :: SWPA_Rs_Rt_ADDR_SIMPLE (SWPA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38608000
                                                                        {
                                                                            return Some (Opcode :: SWPLB_Rs_Rt_ADDR_SIMPLE (SWPLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78608000
                                                                        {
                                                                            return Some (Opcode :: SWPLH_Rs_Rt_ADDR_SIMPLE (SWPLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8608000
                                                                    {
                                                                        return Some (Opcode :: SWPL_Rs_Rt_ADDR_SIMPLE (SWPL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e08000
                                                                        {
                                                                            return Some (Opcode :: SWPALB_Rs_Rt_ADDR_SIMPLE (SWPALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e08000
                                                                        {
                                                                            return Some (Opcode :: SWPALH_Rs_Rt_ADDR_SIMPLE (SWPALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e08000
                                                                    {
                                                                        return Some (Opcode :: SWPAL_Rs_Rt_ADDR_SIMPLE (SWPAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38204000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXB_Rs_Rt_ADDR_SIMPLE (LDSMAXB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78204000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXH_Rs_Rt_ADDR_SIMPLE (LDSMAXH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8204000
                                                                    {
                                                                        return Some (Opcode :: LDSMAX_Rs_Rt_ADDR_SIMPLE (LDSMAX_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXAB_Rs_Rt_ADDR_SIMPLE (LDSMAXAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXAH_Rs_Rt_ADDR_SIMPLE (LDSMAXAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a04000
                                                                    {
                                                                        return Some (Opcode :: LDSMAXA_Rs_Rt_ADDR_SIMPLE (LDSMAXA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38604000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXLB_Rs_Rt_ADDR_SIMPLE (LDSMAXLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78604000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXLH_Rs_Rt_ADDR_SIMPLE (LDSMAXLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8604000
                                                                    {
                                                                        return Some (Opcode :: LDSMAXL_Rs_Rt_ADDR_SIMPLE (LDSMAXL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXALB_Rs_Rt_ADDR_SIMPLE (LDSMAXALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e04000
                                                                        {
                                                                            return Some (Opcode :: LDSMAXALH_Rs_Rt_ADDR_SIMPLE (LDSMAXALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e04000
                                                                    {
                                                                        return Some (Opcode :: LDSMAXAL_Rs_Rt_ADDR_SIMPLE (LDSMAXAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x80000000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x38bfc000 {
                                                                    return Some (Opcode :: LDAPRB_Rt_ADDR_SIMPLE (LDAPRB_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x78bfc000 {
                                                                    return Some (Opcode :: LDAPRH_Rt_ADDR_SIMPLE (LDAPRH_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbffffc00 == 0xb8bfc000 {
                                                                return Some(
                                                                    Opcode::LDAPR_Rt_ADDR_SIMPLE(
                                                                        LDAPR_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38202000
                                                                        {
                                                                            return Some (Opcode :: LDEORB_Rs_Rt_ADDR_SIMPLE (LDEORB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78202000
                                                                        {
                                                                            return Some (Opcode :: LDEORH_Rs_Rt_ADDR_SIMPLE (LDEORH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8202000
                                                                    {
                                                                        return Some (Opcode :: LDEOR_Rs_Rt_ADDR_SIMPLE (LDEOR_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a02000
                                                                        {
                                                                            return Some (Opcode :: LDEORAB_Rs_Rt_ADDR_SIMPLE (LDEORAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a02000
                                                                        {
                                                                            return Some (Opcode :: LDEORAH_Rs_Rt_ADDR_SIMPLE (LDEORAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a02000
                                                                    {
                                                                        return Some (Opcode :: LDEORA_Rs_Rt_ADDR_SIMPLE (LDEORA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38602000
                                                                        {
                                                                            return Some (Opcode :: LDEORLB_Rs_Rt_ADDR_SIMPLE (LDEORLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78602000
                                                                        {
                                                                            return Some (Opcode :: LDEORLH_Rs_Rt_ADDR_SIMPLE (LDEORLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8602000
                                                                    {
                                                                        return Some (Opcode :: LDEORL_Rs_Rt_ADDR_SIMPLE (LDEORL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e02000
                                                                        {
                                                                            return Some (Opcode :: LDEORALB_Rs_Rt_ADDR_SIMPLE (LDEORALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e02000
                                                                        {
                                                                            return Some (Opcode :: LDEORALH_Rs_Rt_ADDR_SIMPLE (LDEORALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e02000
                                                                    {
                                                                        return Some (Opcode :: LDEORAL_Rs_Rt_ADDR_SIMPLE (LDEORAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3820a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWP_Rs_Rt_ADDR_SIMPLE (RCWSWP_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x80000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x7820a000
                                                                        {
                                                                            return Some (Opcode :: RCWSSWP_Rs_Rt_ADDR_SIMPLE (RCWSSWP_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0xf820a000
                                                                        {
                                                                            return Some (Opcode :: ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE (ST64BV0_Rs_Rt_LS64_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWPA_Rs_Rt_ADDR_SIMPLE (RCWSWPA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSSWPA_Rs_Rt_ADDR_SIMPLE (RCWSSWPA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3860a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWPL_Rs_Rt_ADDR_SIMPLE (RCWSWPL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x7860a000
                                                                    {
                                                                        return Some (Opcode :: RCWSSWPL_Rs_Rt_ADDR_SIMPLE (RCWSSWPL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSWPAL_Rs_Rt_ADDR_SIMPLE (RCWSWPAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e0a000
                                                                    {
                                                                        return Some (Opcode :: RCWSSWPAL_Rs_Rt_ADDR_SIMPLE (RCWSSWPAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38206000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXB_Rs_Rt_ADDR_SIMPLE (LDUMAXB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78206000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXH_Rs_Rt_ADDR_SIMPLE (LDUMAXH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8206000 {
                                                                    return Some (Opcode :: LDUMAX_Rs_Rt_ADDR_SIMPLE (LDUMAX_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXAB_Rs_Rt_ADDR_SIMPLE (LDUMAXAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXAH_Rs_Rt_ADDR_SIMPLE (LDUMAXAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8a06000 {
                                                                    return Some (Opcode :: LDUMAXA_Rs_Rt_ADDR_SIMPLE (LDUMAXA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38606000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXLB_Rs_Rt_ADDR_SIMPLE (LDUMAXLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78606000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXLH_Rs_Rt_ADDR_SIMPLE (LDUMAXLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8606000 {
                                                                    return Some (Opcode :: LDUMAXL_Rs_Rt_ADDR_SIMPLE (LDUMAXL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXALB_Rs_Rt_ADDR_SIMPLE (LDUMAXALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e06000
                                                                    {
                                                                        return Some (Opcode :: LDUMAXALH_Rs_Rt_ADDR_SIMPLE (LDUMAXALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8e06000 {
                                                                    return Some (Opcode :: LDUMAXAL_Rs_Rt_ADDR_SIMPLE (LDUMAXAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38201000
                                                                        {
                                                                            return Some (Opcode :: LDCLRB_Rs_Rt_ADDR_SIMPLE (LDCLRB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78201000
                                                                        {
                                                                            return Some (Opcode :: LDCLRH_Rs_Rt_ADDR_SIMPLE (LDCLRH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8201000
                                                                    {
                                                                        return Some (Opcode :: LDCLR_Rs_Rt_ADDR_SIMPLE (LDCLR_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRAB_Rs_Rt_ADDR_SIMPLE (LDCLRAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRAH_Rs_Rt_ADDR_SIMPLE (LDCLRAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a01000
                                                                    {
                                                                        return Some (Opcode :: LDCLRA_Rs_Rt_ADDR_SIMPLE (LDCLRA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38601000
                                                                        {
                                                                            return Some (Opcode :: LDCLRLB_Rs_Rt_ADDR_SIMPLE (LDCLRLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78601000
                                                                        {
                                                                            return Some (Opcode :: LDCLRLH_Rs_Rt_ADDR_SIMPLE (LDCLRLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8601000
                                                                    {
                                                                        return Some (Opcode :: LDCLRL_Rs_Rt_ADDR_SIMPLE (LDCLRL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRALB_Rs_Rt_ADDR_SIMPLE (LDCLRALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e01000
                                                                        {
                                                                            return Some (Opcode :: LDCLRALH_Rs_Rt_ADDR_SIMPLE (LDCLRALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e01000
                                                                    {
                                                                        return Some (Opcode :: LDCLRAL_Rs_Rt_ADDR_SIMPLE (LDCLRAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38209000
                                                                    {
                                                                        return Some (Opcode :: RCWCLR_Rs_Rt_ADDR_SIMPLE (RCWCLR_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x80000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78209000
                                                                        {
                                                                            return Some (Opcode :: RCWSCLR_Rs_Rt_ADDR_SIMPLE (RCWSCLR_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffc00
                                                                            == 0xf83f9000
                                                                        {
                                                                            return Some (Opcode :: ST64B_Rt_LS64_ADDR_SIMPLE (ST64B_Rt_LS64_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a09000
                                                                    {
                                                                        return Some (Opcode :: RCWCLRA_Rs_Rt_ADDR_SIMPLE (RCWCLRA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a09000
                                                                    {
                                                                        return Some (Opcode :: RCWSCLRA_Rs_Rt_ADDR_SIMPLE (RCWSCLRA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38609000
                                                                    {
                                                                        return Some (Opcode :: RCWCLRL_Rs_Rt_ADDR_SIMPLE (RCWCLRL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78609000
                                                                    {
                                                                        return Some (Opcode :: RCWSCLRL_Rs_Rt_ADDR_SIMPLE (RCWSCLRL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e09000
                                                                    {
                                                                        return Some (Opcode :: RCWCLRAL_Rs_Rt_ADDR_SIMPLE (RCWCLRAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e09000
                                                                    {
                                                                        return Some (Opcode :: RCWSCLRAL_Rs_Rt_ADDR_SIMPLE (RCWSCLRAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38205000
                                                                        {
                                                                            return Some (Opcode :: LDSMINB_Rs_Rt_ADDR_SIMPLE (LDSMINB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78205000
                                                                        {
                                                                            return Some (Opcode :: LDSMINH_Rs_Rt_ADDR_SIMPLE (LDSMINH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8205000
                                                                    {
                                                                        return Some (Opcode :: LDSMIN_Rs_Rt_ADDR_SIMPLE (LDSMIN_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINAB_Rs_Rt_ADDR_SIMPLE (LDSMINAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINAH_Rs_Rt_ADDR_SIMPLE (LDSMINAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a05000
                                                                    {
                                                                        return Some (Opcode :: LDSMINA_Rs_Rt_ADDR_SIMPLE (LDSMINA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38605000
                                                                        {
                                                                            return Some (Opcode :: LDSMINLB_Rs_Rt_ADDR_SIMPLE (LDSMINLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78605000
                                                                        {
                                                                            return Some (Opcode :: LDSMINLH_Rs_Rt_ADDR_SIMPLE (LDSMINLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8605000
                                                                    {
                                                                        return Some (Opcode :: LDSMINL_Rs_Rt_ADDR_SIMPLE (LDSMINL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINALB_Rs_Rt_ADDR_SIMPLE (LDSMINALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e05000
                                                                        {
                                                                            return Some (Opcode :: LDSMINALH_Rs_Rt_ADDR_SIMPLE (LDSMINALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e05000
                                                                    {
                                                                        return Some (Opcode :: LDSMINAL_Rs_Rt_ADDR_SIMPLE (LDSMINAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xf83fd000 {
                                                            return Some(
                                                                Opcode::LD64B_Rt_LS64_ADDR_SIMPLE(
                                                                    LD64B_Rt_LS64_ADDR_SIMPLE::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38203000
                                                                        {
                                                                            return Some (Opcode :: LDSETB_Rs_Rt_ADDR_SIMPLE (LDSETB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78203000
                                                                        {
                                                                            return Some (Opcode :: LDSETH_Rs_Rt_ADDR_SIMPLE (LDSETH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8203000
                                                                    {
                                                                        return Some (Opcode :: LDSET_Rs_Rt_ADDR_SIMPLE (LDSET_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38a03000
                                                                        {
                                                                            return Some (Opcode :: LDSETAB_Rs_Rt_ADDR_SIMPLE (LDSETAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78a03000
                                                                        {
                                                                            return Some (Opcode :: LDSETAH_Rs_Rt_ADDR_SIMPLE (LDSETAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8a03000
                                                                    {
                                                                        return Some (Opcode :: LDSETA_Rs_Rt_ADDR_SIMPLE (LDSETA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38603000
                                                                        {
                                                                            return Some (Opcode :: LDSETLB_Rs_Rt_ADDR_SIMPLE (LDSETLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78603000
                                                                        {
                                                                            return Some (Opcode :: LDSETLH_Rs_Rt_ADDR_SIMPLE (LDSETLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8603000
                                                                    {
                                                                        return Some (Opcode :: LDSETL_Rs_Rt_ADDR_SIMPLE (LDSETL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x38e03000
                                                                        {
                                                                            return Some (Opcode :: LDSETALB_Rs_Rt_ADDR_SIMPLE (LDSETALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x78e03000
                                                                        {
                                                                            return Some (Opcode :: LDSETALH_Rs_Rt_ADDR_SIMPLE (LDSETALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xb8e03000
                                                                    {
                                                                        return Some (Opcode :: LDSETAL_Rs_Rt_ADDR_SIMPLE (LDSETAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3820b000
                                                                    {
                                                                        return Some (Opcode :: RCWSET_Rs_Rt_ADDR_SIMPLE (RCWSET_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x80000000 == 0 {
                                                                        if insn & 0xffe0fc00
                                                                            == 0x7820b000
                                                                        {
                                                                            return Some (Opcode :: RCWSSET_Rs_Rt_ADDR_SIMPLE (RCWSSET_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffe0fc00
                                                                            == 0xf820b000
                                                                        {
                                                                            return Some (Opcode :: ST64BV_Rs_Rt_LS64_ADDR_SIMPLE (ST64BV_Rs_Rt_LS64_ADDR_SIMPLE :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSETA_Rs_Rt_ADDR_SIMPLE (RCWSETA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSSETA_Rs_Rt_ADDR_SIMPLE (RCWSSETA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x3860b000
                                                                    {
                                                                        return Some (Opcode :: RCWSETL_Rs_Rt_ADDR_SIMPLE (RCWSETL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x7860b000
                                                                    {
                                                                        return Some (Opcode :: RCWSSETL_Rs_Rt_ADDR_SIMPLE (RCWSSETL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSETAL_Rs_Rt_ADDR_SIMPLE (RCWSETAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e0b000
                                                                    {
                                                                        return Some (Opcode :: RCWSSETAL_Rs_Rt_ADDR_SIMPLE (RCWSSETAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38207000
                                                                    {
                                                                        return Some (Opcode :: LDUMINB_Rs_Rt_ADDR_SIMPLE (LDUMINB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78207000
                                                                    {
                                                                        return Some (Opcode :: LDUMINH_Rs_Rt_ADDR_SIMPLE (LDUMINH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8207000 {
                                                                    return Some (Opcode :: LDUMIN_Rs_Rt_ADDR_SIMPLE (LDUMIN_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38a07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINAB_Rs_Rt_ADDR_SIMPLE (LDUMINAB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78a07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINAH_Rs_Rt_ADDR_SIMPLE (LDUMINAH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8a07000 {
                                                                    return Some (Opcode :: LDUMINA_Rs_Rt_ADDR_SIMPLE (LDUMINA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38607000
                                                                    {
                                                                        return Some (Opcode :: LDUMINLB_Rs_Rt_ADDR_SIMPLE (LDUMINLB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78607000
                                                                    {
                                                                        return Some (Opcode :: LDUMINLH_Rs_Rt_ADDR_SIMPLE (LDUMINLH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8607000 {
                                                                    return Some (Opcode :: LDUMINL_Rs_Rt_ADDR_SIMPLE (LDUMINL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x38e07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINALB_Rs_Rt_ADDR_SIMPLE (LDUMINALB_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x78e07000
                                                                    {
                                                                        return Some (Opcode :: LDUMINALH_Rs_Rt_ADDR_SIMPLE (LDUMINALH_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0xb8e07000 {
                                                                    return Some (Opcode :: LDUMINAL_Rs_Rt_ADDR_SIMPLE (LDUMINAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x38000800 {
                                                            return Some(
                                                                Opcode::STTRB_Rt_ADDR_SIMM9(
                                                                    STTRB_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78000800 {
                                                            return Some(
                                                                Opcode::STTRH_Rt_ADDR_SIMM9(
                                                                    STTRH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8000800 {
                                                        return Some(Opcode::STTR_Rt_ADDR_SIMM9(
                                                            STTR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x38400800 {
                                                            return Some(
                                                                Opcode::LDTRB_Rt_ADDR_SIMM9(
                                                                    LDTRB_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78400800 {
                                                            return Some(
                                                                Opcode::LDTRH_Rt_ADDR_SIMM9(
                                                                    LDTRH_Rt_ADDR_SIMM9::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8400800 {
                                                        return Some(Opcode::LDTR_Rt_ADDR_SIMM9(
                                                            LDTR_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffa00c00 == 0x38800800 {
                                                        return Some(Opcode::LDTRSB_Rt_ADDR_SIMM9(
                                                            LDTRSB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xb8800800 {
                                                        return Some(Opcode::LDTRSW_Rt_ADDR_SIMM9(
                                                            LDTRSW_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa00c00 == 0x78800800 {
                                                    return Some(Opcode::LDTRSH_Rt_ADDR_SIMM9(
                                                        LDTRSH_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x38200800 {
                                                            return Some(
                                                                Opcode::STRB_Rt_ADDR_REGOFF(
                                                                    STRB_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78200800 {
                                                            return Some(
                                                                Opcode::STRH_Rt_ADDR_REGOFF(
                                                                    STRH_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8200800 {
                                                        return Some(Opcode::STR_Rt_ADDR_REGOFF(
                                                            STR_Rt_ADDR_REGOFF::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x38600800 {
                                                            return Some(
                                                                Opcode::LDRB_Rt_ADDR_REGOFF(
                                                                    LDRB_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x78600800 {
                                                            return Some(
                                                                Opcode::LDRH_Rt_ADDR_REGOFF(
                                                                    LDRH_Rt_ADDR_REGOFF::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbfe00c00 == 0xb8600800 {
                                                        return Some(Opcode::LDR_Rt_ADDR_REGOFF(
                                                            LDR_Rt_ADDR_REGOFF::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffa00c00 == 0x38a00800 {
                                                        return Some(Opcode::LDRSB_Rt_ADDR_REGOFF(
                                                            LDRSB_Rt_ADDR_REGOFF::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xb8a00800 {
                                                        return Some(Opcode::LDRSW_Rt_ADDR_REGOFF(
                                                            LDRSW_Rt_ADDR_REGOFF::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffa00c00 == 0x78a00800 {
                                                        return Some(Opcode::LDRSH_Rt_ADDR_REGOFF(
                                                            LDRSH_Rt_ADDR_REGOFF::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0xf8a00800 {
                                                        return Some(
                                                            Opcode::PRFM_PRFOP_ADDR_REGOFF(
                                                                PRFM_PRFOP_ADDR_REGOFF::from(insn),
                                                            ),
                                                        );
                                                    }
                                                    if insn & 0xffe04c18 == 0xf8a04818 {
                                                        return Some (Opcode :: RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE (RPRFM_RPRFMOP_Rm_SIMD_ADDR_SIMPLE :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x200000 == 0 {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe00400 == 0x38000400 {
                                                        return Some(Opcode::STRB_Rt_ADDR_SIMM9(
                                                            STRB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0x78000400 {
                                                        return Some(Opcode::STRH_Rt_ADDR_SIMM9(
                                                            STRH_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe00400 == 0xb8000400 {
                                                    return Some(Opcode::STR_Rt_ADDR_SIMM9(
                                                        STR_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe00400 == 0x38400400 {
                                                        return Some(Opcode::LDRB_Rt_ADDR_SIMM9(
                                                            LDRB_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0x78400400 {
                                                        return Some(Opcode::LDRH_Rt_ADDR_SIMM9(
                                                            LDRH_Rt_ADDR_SIMM9::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbfe00400 == 0xb8400400 {
                                                    return Some(Opcode::LDR_Rt_ADDR_SIMM9(
                                                        LDR_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xffa00400 == 0x38800400 {
                                                    return Some(Opcode::LDRSB_Rt_ADDR_SIMM9(
                                                        LDRSB_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe00400 == 0xb8800400 {
                                                    return Some(Opcode::LDRSW_Rt_ADDR_SIMM9(
                                                        LDRSW_Rt_ADDR_SIMM9::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xffa00400 == 0x78800400 {
                                                return Some(Opcode::LDRSH_Rt_ADDR_SIMM9(
                                                    LDRSH_Rt_ADDR_SIMM9::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0xffa00400 == 0xf8200400 {
                                            return Some(Opcode::LDRAA_Rt_ADDR_SIMM10(
                                                LDRAA_Rt_ADDR_SIMM10::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffa00400 == 0xf8a00400 {
                                            return Some(Opcode::LDRAB_Rt_ADDR_SIMM10(
                                                LDRAB_Rt_ADDR_SIMM10::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x800000 == 0 {
                            if insn & 0x400000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x19000000 {
                                                            return Some(
                                                                Opcode::STLURB_Rt_ADDR_OFFSET(
                                                                    STLURB_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x99000000 {
                                                            return Some(
                                                                Opcode::STLUR_Rt_ADDR_OFFSET(
                                                                    STLUR_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x59000000 {
                                                            return Some(
                                                                Opcode::STLURH_Rt_ADDR_OFFSET(
                                                                    STLURH_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9000000 {
                                                            return Some(
                                                                Opcode::STLUR_Rt_X_ADDR_OFFSET(
                                                                    STLUR_Rt_X_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xfffffc00 == 0xd9200000 {
                                                                return Some(
                                                                    Opcode::STZGM_Rt_ADDR_SIMPLE(
                                                                        STZGM_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19208000 {
                                                                return Some (Opcode :: SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (SWPP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1920a000 {
                                                                return Some (Opcode :: RCWSWPP_Rt_Rs_ADDR_SIMPLE (RCWSWPP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x5920a000 {
                                                                return Some (Opcode :: RCWSSWPP_Rt_Rs_ADDR_SIMPLE (RCWSSWPP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19201000 {
                                                                return Some (Opcode :: LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19209000 {
                                                                    return Some (Opcode :: RCWCLRP_Rt_Rs_ADDR_SIMPLE (RCWCLRP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59209000 {
                                                                    return Some (Opcode :: RCWSCLRP_Rt_Rs_ADDR_SIMPLE (RCWSCLRP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19203000 {
                                                                return Some (Opcode :: LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDSETP_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x1920b000 {
                                                                    return Some (Opcode :: RCWSETP_Rt_Rs_ADDR_SIMPLE (RCWSETP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x5920b000 {
                                                                    return Some (Opcode :: RCWSSETP_Rt_Rs_ADDR_SIMPLE (RCWSSETP_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x3fe0ec00 == 0x19000800 {
                                                    return Some (Opcode :: STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB (STILP_Rt_Rs_RCPC3_ADDR_OPT_PREIND_WB :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19200800 {
                                                        return Some(
                                                            Opcode::RCWCAS_Rs_Rt_ADDR_SIMPLE(
                                                                RCWCAS_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59200800 {
                                                            return Some(
                                                                Opcode::RCWSCAS_Rs_Rt_ADDR_SIMPLE(
                                                                    RCWSCAS_Rs_Rt_ADDR_SIMPLE::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9200800 {
                                                            return Some(
                                                                Opcode::STG_Rt_SP_ADDR_SIMM13(
                                                                    STG_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19000400 {
                                                                    return Some (Opcode :: CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x19008400 {
                                                                    return Some (Opcode :: CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19004400 {
                                                                    return Some (Opcode :: CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900c400 {
                                                                    return Some (Opcode :: CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19002400 {
                                                                    return Some (Opcode :: CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900a400 {
                                                                    return Some (Opcode :: CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19006400 {
                                                                    return Some (Opcode :: CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900e400 {
                                                                    return Some (Opcode :: CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19001400 {
                                                                    return Some (Opcode :: CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x19009400 {
                                                                    return Some (Opcode :: CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19005400 {
                                                                    return Some (Opcode :: CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900d400 {
                                                                    return Some (Opcode :: CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19003400 {
                                                                    return Some (Opcode :: CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900b400 {
                                                                    return Some (Opcode :: CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19007400 {
                                                                    return Some (Opcode :: CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1900f400 {
                                                                    return Some (Opcode :: CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0xfffffc00 == 0xd91f0c00 {
                                                        return Some(Opcode::GCSSTR_Rt_Rn_SP(
                                                            GCSSTR_Rt_Rn_SP::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0xd91f1c00 {
                                                        return Some(Opcode::GCSSTTR_Rt_Rn_SP(
                                                            GCSSTTR_Rt_Rn_SP::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x19200c00 {
                                                    return Some (Opcode :: RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59200c00 {
                                                        return Some (Opcode :: RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWSCASP_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9200400 {
                                                        return Some (Opcode :: STG_Rt_SP_X_ADDR_SIMM13_imm_tag (STG_Rt_SP_X_ADDR_SIMM13_imm_tag :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0xffc00000 == 0x39000000 {
                                                return Some(Opcode::STRB_Rt_ADDR_UIMM12(
                                                    STRB_Rt_ADDR_UIMM12::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffc00000 == 0x79000000 {
                                                return Some(Opcode::STRH_Rt_ADDR_UIMM12(
                                                    STRH_Rt_ADDR_UIMM12::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0xbfc00000 == 0xb9000000 {
                                            return Some(Opcode::STR_Rt_ADDR_UIMM12(
                                                STR_Rt_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x19400000 {
                                                            return Some(
                                                                Opcode::LDAPURB_Rt_ADDR_OFFSET(
                                                                    LDAPURB_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x99400000 {
                                                            return Some(
                                                                Opcode::LDAPUR_Rt_ADDR_OFFSET(
                                                                    LDAPUR_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x59400000 {
                                                            return Some(
                                                                Opcode::LDAPURH_Rt_ADDR_OFFSET(
                                                                    LDAPURH_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9400000 {
                                                            return Some(
                                                                Opcode::LDAPUR_Rt_X_ADDR_OFFSET(
                                                                    LDAPUR_Rt_X_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x002000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19608000 {
                                                                return Some (Opcode :: SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (SWPPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1960a000 {
                                                                return Some (Opcode :: RCWSWPPL_Rt_Rs_ADDR_SIMPLE (RCWSWPPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x002000 == 0 {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19601000 {
                                                                    return Some (Opcode :: LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x19609000 {
                                                                    return Some (Opcode :: RCWCLRPL_Rt_Rs_ADDR_SIMPLE (RCWCLRPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x008000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19603000 {
                                                                    return Some (Opcode :: LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDSETPL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x1960b000 {
                                                                    return Some (Opcode :: RCWSETPL_Rt_Rs_ADDR_SIMPLE (RCWSETPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x5960a000 {
                                                                return Some (Opcode :: RCWSSWPPL_Rt_Rs_ADDR_SIMPLE (RCWSSWPPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x002000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x59609000 {
                                                                    return Some (Opcode :: RCWSCLRPL_Rt_Rs_ADDR_SIMPLE (RCWSCLRPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x5960b000 {
                                                                    return Some (Opcode :: RCWSSETPL_Rt_Rs_ADDR_SIMPLE (RCWSSETPL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9600000 {
                                                            return Some(
                                                                Opcode::LDG_Rt_ADDR_SIMM13(
                                                                    LDG_Rt_ADDR_SIMM13::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x3fe0ec00 == 0x19400800 {
                                                    return Some (Opcode :: LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND (LDIAPP_Rt_Rs_RCPC3_ADDR_OPT_POSTIND :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19600800 {
                                                        return Some(
                                                            Opcode::RCWCASL_Rs_Rt_ADDR_SIMPLE(
                                                                RCWCASL_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59600800 {
                                                            return Some (Opcode :: RCWSCASL_Rs_Rt_ADDR_SIMPLE (RCWSCASL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9600800 {
                                                            return Some(
                                                                Opcode::STZG_Rt_SP_ADDR_SIMM13(
                                                                    STZG_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19400400 {
                                                                return Some (Opcode :: CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19408400 {
                                                                return Some (Opcode :: CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19404400 {
                                                                return Some (Opcode :: CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940c400 {
                                                                return Some (Opcode :: CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19402400 {
                                                                return Some (Opcode :: CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940a400 {
                                                                return Some (Opcode :: CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19406400 {
                                                                return Some (Opcode :: CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940e400 {
                                                                return Some (Opcode :: CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19401400 {
                                                                return Some (Opcode :: CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19409400 {
                                                                return Some (Opcode :: CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19405400 {
                                                                return Some (Opcode :: CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940d400 {
                                                                return Some (Opcode :: CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19403400 {
                                                                return Some (Opcode :: CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940b400 {
                                                                return Some (Opcode :: CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19407400 {
                                                                return Some (Opcode :: CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x1940f400 {
                                                                return Some (Opcode :: CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x19600c00 {
                                                    return Some (Opcode :: RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59600c00 {
                                                        return Some (Opcode :: RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWSCASPL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9600400 {
                                                        return Some (Opcode :: STZG_Rt_SP_X_ADDR_SIMM13_imm_tag (STZG_Rt_SP_X_ADDR_SIMM13_imm_tag :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0xffc00000 == 0x39400000 {
                                                return Some(Opcode::LDRB_Rt_ADDR_UIMM12(
                                                    LDRB_Rt_ADDR_UIMM12::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffc00000 == 0x79400000 {
                                                return Some(Opcode::LDRH_Rt_ADDR_UIMM12(
                                                    LDRH_Rt_ADDR_UIMM12::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0xbfc00000 == 0xb9400000 {
                                            return Some(Opcode::LDR_Rt_ADDR_UIMM12(
                                                LDR_Rt_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x000400 == 0 {
                                    if insn & 0x000800 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe00c00 == 0x19800000 {
                                                            return Some(
                                                                Opcode::LDAPURSB_Rt_ADDR_OFFSET(
                                                                    LDAPURSB_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0x99800000 {
                                                            return Some(
                                                                Opcode::LDAPURSW_Rt_ADDR_OFFSET(
                                                                    LDAPURSW_Rt_ADDR_OFFSET::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0x59800000 {
                                                        return Some(
                                                            Opcode::LDAPURSH_Rt_ADDR_OFFSET(
                                                                LDAPURSH_Rt_ADDR_OFFSET::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe00c00 == 0x19c00000 {
                                                        return Some(
                                                            Opcode::LDAPURSB_Rt_W_ADDR_OFFSET(
                                                                LDAPURSB_Rt_W_ADDR_OFFSET::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffe00c00 == 0x59c00000 {
                                                        return Some(
                                                            Opcode::LDAPURSH_Rt_W_ADDR_OFFSET(
                                                                LDAPURSH_Rt_W_ADDR_OFFSET::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xfffffc00 == 0xd9a00000 {
                                                                return Some(
                                                                    Opcode::STGM_Rt_ADDR_SIMPLE(
                                                                        STGM_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0xd9e00000 {
                                                                return Some(
                                                                    Opcode::LDGM_Rt_ADDR_SIMPLE(
                                                                        LDGM_Rt_ADDR_SIMPLE::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a08000 {
                                                                return Some (Opcode :: SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (SWPPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19e08000 {
                                                                return Some (Opcode :: SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (SWPPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a0a000 {
                                                                return Some (Opcode :: RCWSWPPA_Rt_Rs_ADDR_SIMPLE (RCWSWPPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x59a0a000 {
                                                                return Some (Opcode :: RCWSSWPPA_Rt_Rs_ADDR_SIMPLE (RCWSSWPPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19e0a000 {
                                                                return Some (Opcode :: RCWSWPPAL_Rt_Rs_ADDR_SIMPLE (RCWSWPPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x59e0a000 {
                                                                return Some (Opcode :: RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE (RCWSSWPPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a01000 {
                                                                return Some (Opcode :: LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19e01000 {
                                                                return Some (Opcode :: LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDCLRPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19a09000 {
                                                                    return Some (Opcode :: RCWCLRPA_Rt_Rs_ADDR_SIMPLE (RCWCLRPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59a09000 {
                                                                    return Some (Opcode :: RCWSCLRPA_Rt_Rs_ADDR_SIMPLE (RCWSCLRPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19e09000 {
                                                                    return Some (Opcode :: RCWCLRPAL_Rt_Rs_ADDR_SIMPLE (RCWCLRPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59e09000 {
                                                                    return Some (Opcode :: RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE (RCWSCLRPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19a03000 {
                                                                return Some (Opcode :: LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDSETPA_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19e03000 {
                                                                return Some (Opcode :: LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE (LDSETPAL_LSE128_Rt_LSE128_Rt2_ADDR_SIMPLE :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19a0b000 {
                                                                    return Some (Opcode :: RCWSETPA_Rt_Rs_ADDR_SIMPLE (RCWSETPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59a0b000 {
                                                                    return Some (Opcode :: RCWSSETPA_Rt_Rs_ADDR_SIMPLE (RCWSSETPA_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x19e0b000 {
                                                                    return Some (Opcode :: RCWSETPAL_Rt_Rs_ADDR_SIMPLE (RCWSETPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x59e0b000 {
                                                                    return Some (Opcode :: RCWSSETPAL_Rt_Rs_ADDR_SIMPLE (RCWSSETPAL_Rt_Rs_ADDR_SIMPLE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x3ffffc00 == 0x19800800 {
                                                    return Some(
                                                        Opcode::STLR_Rt_RCPC3_ADDR_PREIND_WB(
                                                            STLR_Rt_RCPC3_ADDR_PREIND_WB::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x3ffffc00 == 0x19c00800 {
                                                    return Some(
                                                        Opcode::LDAPR_Rt_RCPC3_ADDR_POSTIND(
                                                            LDAPR_Rt_RCPC3_ADDR_POSTIND::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19a00800 {
                                                        return Some(
                                                            Opcode::RCWCASA_Rs_Rt_ADDR_SIMPLE(
                                                                RCWCASA_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59a00800 {
                                                            return Some (Opcode :: RCWSCASA_Rs_Rt_ADDR_SIMPLE (RCWSCASA_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9a00800 {
                                                            return Some(
                                                                Opcode::ST2G_Rt_SP_ADDR_SIMM13(
                                                                    ST2G_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x19e00800 {
                                                        return Some(
                                                            Opcode::RCWCASAL_Rs_Rt_ADDR_SIMPLE(
                                                                RCWCASAL_Rs_Rt_ADDR_SIMPLE::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x59e00800 {
                                                            return Some (Opcode :: RCWSCASAL_Rs_Rt_ADDR_SIMPLE (RCWSCASAL_Rs_Rt_ADDR_SIMPLE :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe00c00 == 0xd9e00800 {
                                                            return Some(
                                                                Opcode::STZ2G_Rt_SP_ADDR_SIMM13(
                                                                    STZ2G_Rt_SP_ADDR_SIMM13::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19800400 {
                                                                return Some (Opcode :: CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c00400 {
                                                                return Some (Opcode :: SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19808400 {
                                                                return Some (Opcode :: CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c08400 {
                                                                return Some (Opcode :: SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19804400 {
                                                                return Some (Opcode :: CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c04400 {
                                                                return Some (Opcode :: SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980c400 {
                                                            return Some (Opcode :: CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19802400 {
                                                                return Some (Opcode :: CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c02400 {
                                                                return Some (Opcode :: SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1980a400 {
                                                                return Some (Opcode :: CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c0a400 {
                                                                return Some (Opcode :: SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19806400 {
                                                                return Some (Opcode :: CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c06400 {
                                                                return Some (Opcode :: SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980e400 {
                                                            return Some (Opcode :: CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19801400 {
                                                                return Some (Opcode :: CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c01400 {
                                                                return Some (Opcode :: SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19809400 {
                                                                return Some (Opcode :: CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c09400 {
                                                                return Some (Opcode :: SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19805400 {
                                                                return Some (Opcode :: CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c05400 {
                                                                return Some (Opcode :: SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980d400 {
                                                            return Some (Opcode :: CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19803400 {
                                                                return Some (Opcode :: CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c03400 {
                                                                return Some (Opcode :: SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1980b400 {
                                                                return Some (Opcode :: CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c0b400 {
                                                                return Some (Opcode :: SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x19807400 {
                                                                return Some (Opcode :: CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x19c07400 {
                                                                return Some (Opcode :: SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1980f400 {
                                                            return Some (Opcode :: CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYFETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x19a00c00 {
                                                    return Some (Opcode :: RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59a00c00 {
                                                        return Some (Opcode :: RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWSCASPA_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9a00400 {
                                                        return Some (Opcode :: ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag (ST2G_Rt_SP_X_ADDR_SIMM13_imm_tag :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xffe0fc00 == 0x19e00c00 {
                                                    return Some (Opcode :: RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x59e00c00 {
                                                        return Some (Opcode :: RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE (RCWSCASPAL_Rs_PAIRREG_Rt_PAIRREG_ADDR_SIMPLE :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe00400 == 0xd9e00400 {
                                                        return Some (Opcode :: STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag (STZ2G_Rt_SP_X_ADDR_SIMM13_imm_tag :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0xff800000 == 0x39800000 {
                                            return Some(Opcode::LDRSB_Rt_ADDR_UIMM12(
                                                LDRSB_Rt_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffc00000 == 0xb9800000 {
                                            return Some(Opcode::LDRSW_Rt_ADDR_UIMM12(
                                                LDRSW_Rt_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0xff800000 == 0x79800000 {
                                            return Some(Opcode::LDRSH_Rt_ADDR_UIMM12(
                                                LDRSH_Rt_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffc00000 == 0xf9800000 {
                                            return Some(Opcode::PRFM_PRFOP_ADDR_UIMM12(
                                                PRFM_PRFOP_ADDR_UIMM12::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if insn & 0x1000000 == 0 {
                if insn & 0x8000000 == 0 {
                    if insn & 0x800000 == 0 {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f800000 == 0x12000000 {
                                    return Some(Opcode::AND_Rd_SP_Rn_LIMM(
                                        AND_Rd_SP_Rn_LIMM::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x52000000 {
                                    return Some(Opcode::EOR_Rd_SP_Rn_LIMM(
                                        EOR_Rd_SP_Rn_LIMM::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f800000 == 0x32000000 {
                                    return Some(Opcode::ORR_Rd_SP_Rn_LIMM(
                                        ORR_Rd_SP_Rn_LIMM::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x72000000 {
                                    return Some(Opcode::ANDS_Rd_Rn_LIMM(ANDS_Rd_Rn_LIMM::from(
                                        insn,
                                    )));
                                }
                            }
                        }
                    } else {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f800000 == 0x12800000 {
                                    return Some(Opcode::MOVN_Rd_HALF(MOVN_Rd_HALF::from(insn)));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x52800000 {
                                    return Some(Opcode::MOVZ_Rd_HALF(MOVZ_Rd_HALF::from(insn)));
                                }
                            }
                        } else {
                            if insn & 0x7f800000 == 0x72800000 {
                                return Some(Opcode::MOVK_Rd_HALF(MOVK_Rd_HALF::from(insn)));
                            }
                        }
                    }
                } else {
                    if insn & 0x200000 == 0 {
                        if insn & 0x10000000 == 0 {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7f200000 == 0xa000000 {
                                        return Some(Opcode::AND_Rd_Rn_Rm_SFT(
                                            AND_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x4a000000 {
                                        return Some(Opcode::EOR_Rd_Rn_Rm_SFT(
                                            EOR_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7f200000 == 0x2a000000 {
                                        return Some(Opcode::ORR_Rd_Rn_Rm_SFT(
                                            ORR_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x6a000000 {
                                        return Some(Opcode::ANDS_Rd_Rn_Rm_SFT(
                                            ANDS_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x000400 == 0 {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x1a000000 {
                                                        return Some(Opcode::ADC_Rd_Rn_Rm(
                                                            ADC_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x7fe0fc00 == 0x5a000000 {
                                                        return Some(Opcode::SBC_Rd_Rn_Rm(
                                                            SBC_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x3a000000 {
                                                        return Some(Opcode::ADCS_Rd_Rn_Rm(
                                                            ADCS_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x7fe0fc00 == 0x7a000000 {
                                                        return Some(Opcode::SBCS_Rd_Rn_Rm(
                                                            SBCS_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x7fe00c00 == 0x1a800000 {
                                                    return Some(Opcode::CSEL_Rd_Rn_Rm_COND(
                                                        CSEL_Rd_Rn_Rm_COND::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x7fe00c00 == 0x5a800000 {
                                                    return Some(Opcode::CSINV_Rd_Rn_Rm_COND(
                                                        CSINV_Rd_Rn_Rm_COND::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x7fe00c10 == 0x3a400000 {
                                                    return Some(Opcode::CCMN_Rn_Rm_NZCV_COND(
                                                        CCMN_Rn_Rm_NZCV_COND::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x7fe00c10 == 0x7a400000 {
                                                    return Some(Opcode::CCMP_Rn_Rm_NZCV_COND(
                                                        CCMP_Rn_Rm_NZCV_COND::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x9ac00000 {
                                                                    return Some (Opcode :: SUBP_Rd_Rn_SP_Rm_SP (SUBP_Rd_Rn_SP_Rm_SP :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0x7ffffc00
                                                                        == 0x5ac00000
                                                                    {
                                                                        return Some(
                                                                            Opcode::RBIT_Rd_Rn(
                                                                                RBIT_Rd_Rn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0xdac10000
                                                                    {
                                                                        return Some (Opcode :: PACIA_Rd_Rn_SP (PACIA_Rd_Rn_SP :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xbac00000 {
                                                                return Some(
                                                                    Opcode::SUBPS_Rd_Rn_SP_Rm_SP(
                                                                        SUBPS_Rd_Rn_SP_Rm_SP::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x1ac04000 {
                                                                return Some(
                                                                    Opcode::CRC32B_Rd_Rn_Rm(
                                                                        CRC32B_Rd_Rn_Rm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffffffe0 == 0xdac143e0 {
                                                                return Some(Opcode::XPACI_Rd(
                                                                    XPACI_Rd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0x7fe0fc00 == 0x1ac02000 {
                                                                return Some(
                                                                    Opcode::LSLV_Rd_Rn_Rm(
                                                                        LSLV_Rd_Rn_Rm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x7ffffc00 == 0x5ac02000 {
                                                                    return Some(
                                                                        Opcode::ABS_Rd_Rn(
                                                                            ABS_Rd_Rn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffffffe0 == 0xdac123e0 {
                                                                    return Some(
                                                                        Opcode::PACIZA_Rd(
                                                                            PACIZA_Rd::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x7fe0fc00 == 0x1ac06000 {
                                                            return Some(Opcode::SMAX_Rd_Rn_Rm(
                                                                SMAX_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x9ac01000 {
                                                                return Some(
                                                                    Opcode::IRG_Rd_SP_Rn_SP_Rm(
                                                                        IRG_Rd_SP_Rn_SP_Rm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x7ffffc00 == 0x5ac01000 {
                                                                    return Some(
                                                                        Opcode::CLZ_Rd_Rn(
                                                                            CLZ_Rd_Rn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0xdac11000 {
                                                                    return Some(
                                                                        Opcode::AUTIA_Rd_Rn_SP(
                                                                            AUTIA_Rd_Rn_SP::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1ac05000 {
                                                            return Some(Opcode::CRC32CB_Rd_Rn_Rm(
                                                                CRC32CB_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x9ac03000 {
                                                            return Some(
                                                                Opcode::PACGA_Rd_Rn_Rm_SP(
                                                                    PACGA_Rd_Rn_Rm_SP::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xffffffe0 == 0xdac133e0 {
                                                            return Some(Opcode::AUTIZA_Rd(
                                                                AUTIZA_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0xfffffc1f == 0x3a00080d {
                                                return Some(Opcode::SETF8_Rn(SETF8_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0x3a00480d {
                                                return Some(Opcode::SETF16_Rn(SETF16_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    } else {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x7fe00c10 == 0x3a400800 {
                                                    return Some(
                                                        Opcode::CCMN_Rn_CCMP_IMM_NZCV_COND(
                                                            CCMN_Rn_CCMP_IMM_NZCV_COND::from(insn),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x7fe00c10 == 0x7a400800 {
                                                    return Some(
                                                        Opcode::CCMP_Rn_CCMP_IMM_NZCV_COND(
                                                            CCMP_Rn_CCMP_IMM_NZCV_COND::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0x7fe0fc00 == 0x1ac00800 {
                                                                return Some(
                                                                    Opcode::UDIV_Rd_Rn_Rm(
                                                                        UDIV_Rd_Rn_Rm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x80000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ac00800
                                                                    {
                                                                        return Some(
                                                                            Opcode::REV_Rd_Rn(
                                                                                REV_Rd_Rn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0xdac00800
                                                                    {
                                                                        return Some(
                                                                            Opcode::REV32_Rd_Rn(
                                                                                REV32_Rd_Rn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0xdac10800 {
                                                                    return Some(
                                                                        Opcode::PACDA_Rd_Rn_SP(
                                                                            PACDA_Rd_Rn_SP::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1ac04800 {
                                                            return Some(Opcode::CRC32W_Rd_Rn_Rm(
                                                                CRC32W_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0x7fe0fc00 == 0x1ac02800 {
                                                                return Some(
                                                                    Opcode::ASRV_Rd_Rn_Rm(
                                                                        ASRV_Rd_Rn_Rm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffffffe0 == 0xdac12be0 {
                                                                return Some(Opcode::PACDZA_Rd(
                                                                    PACDZA_Rd::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x7fe0fc00 == 0x1ac06800 {
                                                            return Some(Opcode::SMIN_Rd_Rn_Rm(
                                                                SMIN_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x7ffffc00 == 0x5ac01800 {
                                                                return Some(Opcode::CTZ_Rd_Rn(
                                                                    CTZ_Rd_Rn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0xdac11800 {
                                                                return Some(
                                                                    Opcode::AUTDA_Rd_Rn_SP(
                                                                        AUTDA_Rd_Rn_SP::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1ac05800 {
                                                            return Some(Opcode::CRC32CW_Rd_Rn_Rm(
                                                                CRC32CW_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffffffe0 == 0xdac13be0 {
                                                        return Some(Opcode::AUTDZA_Rd(
                                                            AUTDZA_Rd::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0xffe07c10 == 0xba000400 {
                                                return Some(Opcode::RMIF_Rn_IMM_2_MASK(
                                                    RMIF_Rn_IMM_2_MASK::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0x7fe00c00 == 0x1a800400 {
                                                    return Some(Opcode::CSINC_Rd_Rn_Rm_COND(
                                                        CSINC_Rd_Rn_Rm_COND::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x7fe00c00 == 0x5a800400 {
                                                    return Some(Opcode::CSNEG_Rd_Rn_Rm_COND(
                                                        CSNEG_Rd_Rn_Rm_COND::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x7ffffc00 == 0x5ac00400 {
                                                            return Some(Opcode::REV16_Rd_Rn(
                                                                REV16_Rd_Rn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xdac10400 {
                                                            return Some(Opcode::PACIB_Rd_Rn_SP(
                                                                PACIB_Rd_Rn_SP::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1ac04400 {
                                                            return Some(Opcode::CRC32H_Rd_Rn_Rm(
                                                                CRC32H_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffffffe0 == 0xdac147e0 {
                                                            return Some(Opcode::XPACD_Rd(
                                                                XPACD_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0x7fe0fc00 == 0x1ac02400 {
                                                            return Some(Opcode::LSRV_Rd_Rn_Rm(
                                                                LSRV_Rd_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffffffe0 == 0xdac127e0 {
                                                            return Some(Opcode::PACIZB_Rd(
                                                                PACIZB_Rd::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x7fe0fc00 == 0x1ac06400 {
                                                        return Some(Opcode::UMAX_Rd_Rn_Rm(
                                                            UMAX_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x9ac01400 {
                                                            return Some(Opcode::GMI_Rd_Rn_SP_Rm(
                                                                GMI_Rd_Rn_SP_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x7ffffc00 == 0x5ac01400 {
                                                                return Some(Opcode::CLS_Rd_Rn(
                                                                    CLS_Rd_Rn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0xdac11400 {
                                                                return Some(
                                                                    Opcode::AUTIB_Rd_Rn_SP(
                                                                        AUTIB_Rd_Rn_SP::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1ac05400 {
                                                        return Some(Opcode::CRC32CH_Rd_Rn_Rm(
                                                            CRC32CH_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffffffe0 == 0xdac137e0 {
                                                    return Some(Opcode::AUTIZB_Rd(
                                                        AUTIZB_Rd::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x1ac00c00 {
                                                        return Some(Opcode::SDIV_Rd_Rn_Rm(
                                                            SDIV_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0xfffffc00 == 0xdac00c00 {
                                                            return Some(Opcode::REV_Rd_X_Rn_X(
                                                                REV_Rd_X_Rn_X::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xdac10c00 {
                                                            return Some(Opcode::PACDB_Rd_Rn_SP(
                                                                PACDB_Rd_Rn_SP::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x9ac04c00 {
                                                    return Some(Opcode::CRC32X_Rd_Rn_Rm(
                                                        CRC32X_Rd_Rn_Rm::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0x7fe0fc00 == 0x1ac02c00 {
                                                        return Some(Opcode::RORV_Rd_Rn_Rm(
                                                            RORV_Rd_Rn_Rm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffffffe0 == 0xdac12fe0 {
                                                        return Some(Opcode::PACDZB_Rd(
                                                            PACDZB_Rd::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x7fe0fc00 == 0x1ac06c00 {
                                                    return Some(Opcode::UMIN_Rd_Rn_Rm(
                                                        UMIN_Rd_Rn_Rm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x7ffffc00 == 0x5ac01c00 {
                                                        return Some(Opcode::CNT_Rd_Rn(
                                                            CNT_Rd_Rn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfffffc00 == 0xdac11c00 {
                                                        return Some(Opcode::AUTDB_Rd_Rn_SP(
                                                            AUTDB_Rd_Rn_SP::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x9ac05c00 {
                                                    return Some(Opcode::CRC32CX_Rd_Rn_Rm(
                                                        CRC32CX_Rd_Rn_Rm::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xffffffe0 == 0xdac13fe0 {
                                                return Some(Opcode::AUTDZB_Rd(AUTDZB_Rd::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f200000 == 0xa200000 {
                                    return Some(Opcode::BIC_Rd_Rn_Rm_SFT(BIC_Rd_Rn_Rm_SFT::from(
                                        insn,
                                    )));
                                }
                            } else {
                                if insn & 0x7f200000 == 0x4a200000 {
                                    return Some(Opcode::EON_Rd_Rn_Rm_SFT(EON_Rd_Rn_Rm_SFT::from(
                                        insn,
                                    )));
                                }
                            }
                        } else {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f200000 == 0x2a200000 {
                                    return Some(Opcode::ORN_Rd_Rn_Rm_SFT(ORN_Rd_Rn_Rm_SFT::from(
                                        insn,
                                    )));
                                }
                            } else {
                                if insn & 0x7f200000 == 0x6a200000 {
                                    return Some(Opcode::BICS_Rd_Rn_Rm_SFT(
                                        BICS_Rd_Rn_Rm_SFT::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            } else {
                if insn & 0x8000000 == 0 {
                    if insn & 0x800000 == 0 {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x40000000 == 0 {
                                if insn & 0x7f800000 == 0x13000000 {
                                    return Some(Opcode::SBFM_Rd_Rn_IMMR_IMMS(
                                        SBFM_Rd_Rn_IMMR_IMMS::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0x7f800000 == 0x53000000 {
                                    return Some(Opcode::UBFM_Rd_Rn_IMMR_IMMS(
                                        UBFM_Rd_Rn_IMMR_IMMS::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn & 0x7f800000 == 0x33000000 {
                                return Some(Opcode::BFM_Rd_Rn_IMMR_IMMS(
                                    BFM_Rd_Rn_IMMR_IMMS::from(insn),
                                ));
                            }
                        }
                    } else {
                        if insn & 0x7fa00000 == 0x13800000 {
                            return Some(Opcode::EXTR_Rd_Rn_Rm_IMMS(EXTR_Rd_Rn_Rm_IMMS::from(
                                insn,
                            )));
                        }
                    }
                } else {
                    if insn & 0x200000 == 0 {
                        if insn & 0x10000000 == 0 {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7f200000 == 0xb000000 {
                                        return Some(Opcode::ADD_Rd_Rn_Rm_SFT(
                                            ADD_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x4b000000 {
                                        return Some(Opcode::SUB_Rd_Rn_Rm_SFT(
                                            SUB_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x7f200000 == 0x2b000000 {
                                        return Some(Opcode::ADDS_Rd_Rn_Rm_SFT(
                                            ADDS_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x7f200000 == 0x6b000000 {
                                        return Some(Opcode::SUBS_Rd_Rn_Rm_SFT(
                                            SUBS_Rd_Rn_Rm_SFT::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x008000 == 0 {
                                if insn & 0x400000 == 0 {
                                    if insn & 0x7fe08000 == 0x1b000000 {
                                        return Some(Opcode::MADD_Rd_Rn_Rm_Ra(
                                            MADD_Rd_Rn_Rm_Ra::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x800000 == 0 {
                                        if insn & 0xffe0fc00 == 0x9b407c00 {
                                            return Some(Opcode::SMULH_Rd_Rn_Rm(
                                                SMULH_Rd_Rn_Rm::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xffe0fc00 == 0x9bc07c00 {
                                            return Some(Opcode::UMULH_Rd_Rn_Rm(
                                                UMULH_Rd_Rn_Rm::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x7fe08000 == 0x1b008000 {
                                    return Some(Opcode::MSUB_Rd_Rn_Rm_Ra(MSUB_Rd_Rn_Rm_Ra::from(
                                        insn,
                                    )));
                                }
                            }
                        }
                    } else {
                        if insn & 0x800000 == 0 {
                            if insn & 0x10000000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x7fe00000 == 0xb200000 {
                                            return Some(Opcode::ADD_Rd_SP_Rn_SP_Rm_EXT(
                                                ADD_Rd_SP_Rn_SP_Rm_EXT::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x7fe00000 == 0x4b200000 {
                                            return Some(Opcode::SUB_Rd_SP_Rn_SP_Rm_EXT(
                                                SUB_Rd_SP_Rn_SP_Rm_EXT::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x7fe00000 == 0x2b200000 {
                                            return Some(Opcode::ADDS_Rd_Rn_SP_Rm_EXT(
                                                ADDS_Rd_Rn_SP_Rm_EXT::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x7fe00000 == 0x6b200000 {
                                            return Some(Opcode::SUBS_Rd_Rn_SP_Rm_EXT(
                                                SUBS_Rd_Rn_SP_Rm_EXT::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x008000 == 0 {
                                    if insn & 0xffe08000 == 0x9b200000 {
                                        return Some(Opcode::SMADDL_Rd_Rn_Rm_Ra(
                                            SMADDL_Rd_Rn_Rm_Ra::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0xffe08000 == 0x9b208000 {
                                        return Some(Opcode::SMSUBL_Rd_Rn_Rm_Ra(
                                            SMSUBL_Rd_Rn_Rm_Ra::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x008000 == 0 {
                                if insn & 0xffe08000 == 0x9ba00000 {
                                    return Some(Opcode::UMADDL_Rd_Rn_Rm_Ra(
                                        UMADDL_Rd_Rn_Rm_Ra::from(insn),
                                    ));
                                }
                            } else {
                                if insn & 0xffe08000 == 0x9ba08000 {
                                    return Some(Opcode::UMSUBL_Rd_Rn_Rm_Ra(
                                        UMSUBL_Rd_Rn_Rm_Ra::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
        if insn & 0x8000000 == 0 {
            if insn & 0x10000000 == 0 {
                if insn & 0x1000000 == 0 {
                    if insn & 0x20000000 == 0 {
                        if insn & 0x002000 == 0 {
                            if insn & 0x004000 == 0 {
                                if insn & 0x008000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4000000
                                                                    {
                                                                        return Some (Opcode :: ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (ADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4100000
                                                                    {
                                                                        return Some (Opcode :: MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (MUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4080000
                                                                    {
                                                                        return Some (Opcode :: SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4180000
                                                                    {
                                                                        return Some (Opcode :: ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (ORR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffbfe000 == 0x4940000 {
                                                                    return Some (Opcode :: SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x40c0000 {
                                                                    return Some (Opcode :: SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4120000 {
                                                                    return Some (Opcode :: SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40a0000
                                                                    {
                                                                        return Some (Opcode :: SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41a0000
                                                                    {
                                                                        return Some (Opcode :: AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (AND_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffbfe000 == 0x4960000 {
                                                                return Some (Opcode :: SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4010000 {
                                                                    return Some (Opcode :: SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4090000
                                                                    {
                                                                        return Some (Opcode :: UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4190000
                                                                    {
                                                                        return Some (Opcode :: EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (EOR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffbfe000 == 0x4950000 {
                                                                    return Some (Opcode :: UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x40d0000 {
                                                                    return Some (Opcode :: UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4030000
                                                                    {
                                                                        return Some (Opcode :: SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4130000
                                                                    {
                                                                        return Some (Opcode :: UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UMULH_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40b0000
                                                                    {
                                                                        return Some (Opcode :: UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41b0000
                                                                    {
                                                                        return Some (Opcode :: BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (BIC_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffbfe000 == 0x4970000 {
                                                                return Some (Opcode :: UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (UDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0x84000000 {
                                                        return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84800000 {
                                                        return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44800000 {
                                                                return Some (Opcode :: SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44000800 {
                                                                return Some (Opcode :: SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMLALBT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44800400 {
                                                                return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44000c00 {
                                                                return Some (Opcode :: SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMLSLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0f000 == 0x44801000 {
                                                        return Some (Opcode :: CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 (CDOT_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4000000 {
                                                        return Some (Opcode :: LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4800000 {
                                                        return Some (Opcode :: LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4200000 {
                                                                return Some (Opcode :: ADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (ADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4201000 {
                                                                return Some (Opcode :: SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4201800 {
                                                            return Some (Opcode :: SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4200400 {
                                                                return Some (Opcode :: SUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4201400 {
                                                                return Some (Opcode :: UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (UQADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4201c00 {
                                                            return Some (Opcode :: UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UQSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e010 == 0x84200000 {
                                                        return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a00000 {
                                                        return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44201000 {
                                                                return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x44200800 {
                                                                return Some (Opcode :: MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (MLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x44201400 {
                                                                return Some (Opcode :: SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x44200c00 {
                                                                return Some (Opcode :: MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (MLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e010 == 0xc4200000 {
                                                        return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000 (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW_22_c4200000 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00000
                                                                    {
                                                                        return Some (Opcode :: SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00000
                                                                    {
                                                                        return Some (Opcode :: SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a01000
                                                                    {
                                                                        return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e01000
                                                                    {
                                                                        return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00800
                                                                    {
                                                                        return Some (Opcode :: MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (MLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00800
                                                                    {
                                                                        return Some (Opcode :: MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (MLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44a01800 {
                                                                    return Some (Opcode :: USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (USDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00400
                                                                    {
                                                                        return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00400
                                                                    {
                                                                        return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (UDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a01400
                                                                    {
                                                                        return Some (Opcode :: SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e01400
                                                                    {
                                                                        return Some (Opcode :: SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a00c00
                                                                    {
                                                                        return Some (Opcode :: MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (MLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e00c00
                                                                    {
                                                                        return Some (Opcode :: MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (MLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44a01c00 {
                                                                    return Some (Opcode :: SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SUDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a00000 {
                                                        return Some (Opcode :: LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D (LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x010000 == 0 {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4008000 {
                                                                    return Some (Opcode :: ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED (ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4108000
                                                                    {
                                                                        return Some (Opcode :: ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (ASR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44108000
                                                                    {
                                                                        return Some (Opcode :: SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x44088000 {
                                                                    return Some (Opcode :: SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4188000
                                                                    {
                                                                        return Some (Opcode :: ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D (ASR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44188000
                                                                    {
                                                                        return Some (Opcode :: SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4048000 {
                                                                    return Some (Opcode :: ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED (ASRD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4148000
                                                                    {
                                                                        return Some (Opcode :: ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (ASRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44148000
                                                                    {
                                                                        return Some (Opcode :: SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SRHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40c8000
                                                                    {
                                                                        return Some (Opcode :: SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED (SRSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x440c8000
                                                                    {
                                                                        return Some (Opcode :: SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441c8000 {
                                                                    return Some (Opcode :: SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SUQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x44028000 {
                                                                    return Some (Opcode :: SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x44128000 {
                                                                    return Some (Opcode :: SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x440a8000 {
                                                                    return Some (Opcode :: SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441a8000 {
                                                                    return Some (Opcode :: SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4068000
                                                                    {
                                                                        return Some (Opcode :: SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED (SQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44068000
                                                                    {
                                                                        return Some (Opcode :: SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x44168000 {
                                                                    return Some (Opcode :: SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x440e8000 {
                                                                    return Some (Opcode :: SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441e8000 {
                                                                    return Some (Opcode :: SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4018000 {
                                                                    return Some (Opcode :: LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED (LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4118000
                                                                    {
                                                                        return Some (Opcode :: LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (LSR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44118000
                                                                    {
                                                                        return Some (Opcode :: UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x44098000 {
                                                                    return Some (Opcode :: UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4198000
                                                                    {
                                                                        return Some (Opcode :: LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D (LSR_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44198000
                                                                    {
                                                                        return Some (Opcode :: UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4158000 {
                                                                    return Some (Opcode :: LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (LSRR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x44158000 {
                                                                    return Some (Opcode :: URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (URHADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40d8000
                                                                    {
                                                                        return Some (Opcode :: URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED (URSHR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHRIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x440d8000
                                                                    {
                                                                        return Some (Opcode :: UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441d8000 {
                                                                    return Some (Opcode :: USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (USQADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4038000
                                                                    {
                                                                        return Some (Opcode :: LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED (LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44038000
                                                                    {
                                                                        return Some (Opcode :: URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (URSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4138000
                                                                    {
                                                                        return Some (Opcode :: LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (LSL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44138000
                                                                    {
                                                                        return Some (Opcode :: UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UHSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x440b8000 {
                                                                    return Some (Opcode :: UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQRSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41b8000
                                                                    {
                                                                        return Some (Opcode :: LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D (LSL_SVE_Zd_S_B_SVE_Pg3_P_M_SVE_Zd_S_B_SVE_Zm_5_S_D :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x441b8000
                                                                    {
                                                                        return Some (Opcode :: UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4078000
                                                                    {
                                                                        return Some (Opcode :: UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED (UQSHL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44078000
                                                                    {
                                                                        return Some (Opcode :: URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (URSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4178000
                                                                    {
                                                                        return Some (Opcode :: LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (LSLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x44178000
                                                                    {
                                                                        return Some (Opcode :: UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UHSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40f8000
                                                                    {
                                                                        return Some (Opcode :: SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED (SQSHLU_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_SHLIMM_PRED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x440f8000
                                                                    {
                                                                        return Some (Opcode :: UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQRSHLR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x441f8000 {
                                                                    return Some (Opcode :: UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UQSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000400 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xff20fc00 == 0x4208000 {
                                                            return Some (Opcode :: ASR_SVE_Zd_SVE_Zn_SVE_Zm_16 (ASR_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a08000 {
                                                                return Some (Opcode :: SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e08000 {
                                                                return Some (Opcode :: SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xff20fc00 == 0x4209000 {
                                                            return Some (Opcode :: ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (ASR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a09000 {
                                                                return Some (Opcode :: UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e09000 {
                                                                return Some (Opcode :: UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xff20fc00 == 0x4208400 {
                                                                return Some (Opcode :: LSR_SVE_Zd_SVE_Zn_SVE_Zm_16 (LSR_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4208c00 {
                                                                return Some (Opcode :: LSL_SVE_Zd_SVE_Zn_SVE_Zm_16 (LSL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a08400 {
                                                                return Some (Opcode :: SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e08400 {
                                                                return Some (Opcode :: SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xff20fc00 == 0x4209400 {
                                                                return Some (Opcode :: LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (LSR_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4209c00 {
                                                                return Some (Opcode :: LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED (LSL_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f400 == 0x44a09400 {
                                                                return Some (Opcode :: UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x44e09400 {
                                                                return Some (Opcode :: UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xbfe0e000 == 0x84008000 {
                                                        return Some (Opcode :: LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xbfe0e000 == 0x84808000 {
                                                        return Some (Opcode :: LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe0e000 == 0x84208000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4208000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D (LD1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xffe0e000 == 0x84a08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D (LD1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffc0e000 == 0x84408000 {
                                                        return Some (Opcode :: LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 (LD1RB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x200000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc4408000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0xc4608000 {
                                                            return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffc0e000 == 0x84c08000 {
                                                        return Some (Opcode :: LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 (LD1RSW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x200000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc4c08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e08000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x008000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xff20e000 == 0x4004000 {
                                                    return Some (Opcode :: MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (MLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0x84004000 {
                                                        return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84804000 {
                                                        return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004000 {
                                                                return Some (Opcode :: SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005000 {
                                                                return Some (Opcode :: SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004800 {
                                                                return Some (Opcode :: UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005800 {
                                                                return Some (Opcode :: UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004400 {
                                                                return Some (Opcode :: SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005400 {
                                                                return Some (Opcode :: SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44004c00 {
                                                                return Some (Opcode :: UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44005c00 {
                                                                return Some (Opcode :: UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4004000 {
                                                        return Some (Opcode :: LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4804000 {
                                                        return Some (Opcode :: LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xff20fc00 == 0x4204000 {
                                                                return Some (Opcode :: INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B (INDEX_SVE_Zd_SVE_SIMM5_SVE_SIMM5B :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4204400 {
                                                                return Some(
                                                                    Opcode::INDEX_SVE_Zd_Rn_SIMM5(
                                                                        INDEX_SVE_Zd_Rn_SIMM5::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffe0f800 == 0x4205000 {
                                                                    return Some (Opcode :: ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 (ADDVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffff800 == 0x4bf5000 {
                                                                    return Some(
                                                                        Opcode::RDVL_Rd_SVE_SIMM6(
                                                                            RDVL_Rd_SVE_SIMM6::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f800 == 0x4605000 {
                                                                return Some (Opcode :: ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 (ADDPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xff20fc00 == 0x4204800 {
                                                                return Some (Opcode :: INDEX_SVE_Zd_SVE_SIMM5_Rm (INDEX_SVE_Zd_SVE_SIMM5_Rm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4204c00 {
                                                                return Some(
                                                                    Opcode::INDEX_SVE_Zd_Rn_Rm(
                                                                        INDEX_SVE_Zd_Rn_Rm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffe0f800 == 0x4205800 {
                                                                    return Some (Opcode :: ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 (ADDSVL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffff800 == 0x4bf5800 {
                                                                    return Some (Opcode :: RDSVL_Rd_SVE_SIMM6 (RDSVL_Rd_SVE_SIMM6 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f800 == 0x4605800 {
                                                                return Some (Opcode :: ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 (ADDSPL_Rd_SP_SVE_Rn_SP_SVE_SIMM6 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e010 == 0x84204000 {
                                                        return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a04000 {
                                                        return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffa0e010 == 0xc4204000 {
                                                    return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW2_22_c4204000 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xffe0f000 == 0x44a04000 {
                                                            return Some (Opcode :: CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 (CDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0f000 == 0x44e04000 {
                                                            return Some (Opcode :: CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 (CDOT_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a04000 {
                                                        return Some (Opcode :: LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D (LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0xff20e000 == 0x400c000 {
                                                    return Some (Opcode :: MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 (MAD_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4a0c000 {
                                                                    return Some (Opcode :: SQINCW_SVE_Zd_SVE_PATTERN_SCALED (SQINCW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460c000
                                                                    {
                                                                        return Some (Opcode :: SQINCH_SVE_Zd_SVE_PATTERN_SCALED (SQINCH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0c000
                                                                    {
                                                                        return Some (Opcode :: SQINCD_SVE_Zd_SVE_PATTERN_SCALED (SQINCD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4b0c000 {
                                                                    return Some (Opcode :: INCW_SVE_Zd_SVE_PATTERN_SCALED (INCW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470c000
                                                                    {
                                                                        return Some (Opcode :: INCH_SVE_Zd_SVE_PATTERN_SCALED (INCH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0c000
                                                                    {
                                                                        return Some (Opcode :: INCD_SVE_Zd_SVE_PATTERN_SCALED (INCD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xfff0fc00 == 0x4a0c800 {
                                                                return Some (Opcode :: SQDECW_SVE_Zd_SVE_PATTERN_SCALED (SQDECW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xfff0fc00 == 0x460c800 {
                                                                    return Some (Opcode :: SQDECH_SVE_Zd_SVE_PATTERN_SCALED (SQDECH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0fc00 == 0x4e0c800 {
                                                                    return Some (Opcode :: SQDECD_SVE_Zd_SVE_PATTERN_SCALED (SQDECD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4a0c400 {
                                                                    return Some (Opcode :: UQINCW_SVE_Zd_SVE_PATTERN_SCALED (UQINCW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460c400
                                                                    {
                                                                        return Some (Opcode :: UQINCH_SVE_Zd_SVE_PATTERN_SCALED (UQINCH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0c400
                                                                    {
                                                                        return Some (Opcode :: UQINCD_SVE_Zd_SVE_PATTERN_SCALED (UQINCD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xfff0fc00 == 0x4b0c400 {
                                                                    return Some (Opcode :: DECW_SVE_Zd_SVE_PATTERN_SCALED (DECW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470c400
                                                                    {
                                                                        return Some (Opcode :: DECH_SVE_Zd_SVE_PATTERN_SCALED (DECH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0c400
                                                                    {
                                                                        return Some (Opcode :: DECD_SVE_Zd_SVE_PATTERN_SCALED (DECD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xfff0fc00 == 0x4a0cc00 {
                                                                return Some (Opcode :: UQDECW_SVE_Zd_SVE_PATTERN_SCALED (UQDECW_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xfff0fc00 == 0x460cc00 {
                                                                    return Some (Opcode :: UQDECH_SVE_Zd_SVE_PATTERN_SCALED (UQDECH_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0fc00 == 0x4e0cc00 {
                                                                    return Some (Opcode :: UQDECD_SVE_Zd_SVE_PATTERN_SCALED (UQDECD_SVE_Zd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e010 == 0x8400c000 {
                                                            return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8480c000 {
                                                            return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0x8420c000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x84a0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0e000 == 0x8440c000 {
                                                        return Some (Opcode :: LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 (LD1RB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x84c0c000 {
                                                        return Some (Opcode :: LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 (LD1RH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x4400c000 {
                                                            return Some (Opcode :: SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 (SCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4400c800 {
                                                                return Some (Opcode :: SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H (SDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4480c800 {
                                                                return Some (Opcode :: SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX (SDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x4400c400 {
                                                            return Some (Opcode :: UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 (UCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4400cc00 {
                                                                return Some (Opcode :: UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H (UDOT_SVE_Zd_S_S_SVE_Zn_S_H_SVE_Zm_16_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4480cc00 {
                                                                return Some (Opcode :: UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX (UDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc400c000 {
                                                            return Some (Opcode :: LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc480c000 {
                                                            return Some (Opcode :: LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc440c000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4c0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc420c000 {
                                                        return Some (Opcode :: LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D (LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0c000 {
                                                                    return Some (Opcode :: SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0d000 {
                                                                    return Some (Opcode :: UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0c400 {
                                                                    return Some (Opcode :: SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0d400 {
                                                                    return Some (Opcode :: UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D (LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e010 == 0xc460c000 {
                                                        return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0c000 {
                                                                    return Some (Opcode :: SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0d000 {
                                                                    return Some (Opcode :: UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0c400 {
                                                                    return Some (Opcode :: SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0d400 {
                                                                    return Some (Opcode :: UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e0c000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x004000 == 0 {
                                if insn & 0x008000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4002000
                                                                    {
                                                                        return Some (Opcode :: SADDV_SVE_Vd_SVE_Pg3_SVE_Zn (SADDV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4012000
                                                                    {
                                                                        return Some (Opcode :: UADDV_SVE_Vd_SVE_Pg3_SVE_Zn (UADDV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ee000 == 0x4102000 {
                                                                    return Some (Opcode :: MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn (MOVPRFX_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4082000
                                                                    {
                                                                        return Some (Opcode :: SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn (SMAXV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4182000
                                                                    {
                                                                        return Some (Opcode :: ORV_SVE_Vd_SVE_Pg3_SVE_Zn (ORV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4092000
                                                                    {
                                                                        return Some (Opcode :: UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn (UMAXV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4192000
                                                                    {
                                                                        return Some (Opcode :: EORV_SVE_Vd_SVE_Pg3_SVE_Zn (EORV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0xff3fe000 == 0x40c2000 {
                                                                return Some (Opcode :: SMAXQV_Vd_SVE_Pg3_SVE_Zn (SMAXQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4052000 {
                                                                    return Some (Opcode :: ADDQV_Vd_SVE_Pg3_SVE_Zn (ADDQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x40d2000
                                                                    {
                                                                        return Some (Opcode :: UMAXQV_Vd_SVE_Pg3_SVE_Zn (UMAXQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x41d2000
                                                                    {
                                                                        return Some (Opcode :: EORQV_Vd_SVE_Pg3_SVE_Zn (EORQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x40a2000 {
                                                                    return Some (Opcode :: SMINV_SVE_Vd_SVE_Pg3_SVE_Zn (SMINV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41a2000 {
                                                                    return Some (Opcode :: ANDV_SVE_Vd_SVE_Pg3_SVE_Zn (ANDV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x40e2000 {
                                                                    return Some (Opcode :: SMINQV_Vd_SVE_Pg3_SVE_Zn (SMINQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41e2000 {
                                                                    return Some (Opcode :: ANDQV_Vd_SVE_Pg3_SVE_Zn (ANDQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0xff3fe000 == 0x40b2000 {
                                                                return Some (Opcode :: UMINV_SVE_Vd_SVE_Pg3_SVE_Zn (UMINV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x40f2000 {
                                                                return Some (Opcode :: UMINQV_Vd_SVE_Pg3_SVE_Zn (UMINQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0x84002000 {
                                                        return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84802000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0xff20f000 == 0x44002000 {
                                                        return Some (Opcode :: CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 (CMLA_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20f000 == 0x44003000 {
                                                        return Some (Opcode :: SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 (SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16_SVE_IMM_ROT2 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4002000 {
                                                        return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4802000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4203000 {
                                                                    return Some (Opcode :: AND_SVE_Zd_SVE_Zn_SVE_Zm_16 (AND_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4a03000 {
                                                                    return Some (Opcode :: EOR_SVE_Zd_SVE_Zn_SVE_Zm_16 (EOR_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4603000 {
                                                                    return Some (Opcode :: ORR_SVE_Zd_SVE_Zn_SVE_Zm_16 (ORR_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4e03000 {
                                                                    return Some (Opcode :: BIC_SVE_Zd_SVE_Zn_SVE_Zm_16 (BIC_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4203800 {
                                                                return Some (Opcode :: EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn (EOR3_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4603800 {
                                                                return Some (Opcode :: BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn (BCAX_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x4203400 {
                                                            return Some (Opcode :: XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (XAR_SVE_Zd_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4203c00 {
                                                                    return Some (Opcode :: BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn (BSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4a03c00 {
                                                                    return Some (Opcode :: BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn (BSL2N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x4603c00 {
                                                                    return Some (Opcode :: BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn (BSL1N_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4e03c00 {
                                                                    return Some (Opcode :: NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn (NBSL_SVE_Zd_SVE_Zd_SVE_Zm_16_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e010 == 0x84202000 {
                                                        return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a02000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffa0e010 == 0xc4202000 {
                                                    return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW1_22_c4202000 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a02000 {
                                                                    return Some (Opcode :: SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e02000 {
                                                                    return Some (Opcode :: SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a03000 {
                                                                    return Some (Opcode :: SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e03000 {
                                                                    return Some (Opcode :: SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a02400 {
                                                                    return Some (Opcode :: SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e02400 {
                                                                    return Some (Opcode :: SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a03400 {
                                                                    return Some (Opcode :: SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e03400 {
                                                                    return Some (Opcode :: SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a02000 {
                                                        return Some (Opcode :: LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D (LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x410a000 {
                                                                    return Some (Opcode :: SXTB_SVE_Zd_SVE_Pg3_SVE_Zn (SXTB_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x418a000 {
                                                                    return Some (Opcode :: CLS_SVE_Zd_SVE_Pg3_SVE_Zn (CLS_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffffe000 == 0x4d4a000 {
                                                                    return Some (Opcode :: SXTW_SVE_Zd_SVE_Pg3_SVE_Zn (SXTW_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41ca000 {
                                                                    return Some (Opcode :: FABS_SVE_Zd_SVE_Pg3_SVE_Zn (FABS_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffbfe000 == 0x492a000 {
                                                                    return Some (Opcode :: SXTH_SVE_Zd_SVE_Pg3_SVE_Zn (SXTH_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41aa000 {
                                                                    return Some (Opcode :: CNT_SVE_Zd_SVE_Pg3_SVE_Zn (CNT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x416a000 {
                                                                    return Some (Opcode :: ABS_SVE_Zd_SVE_Pg3_SVE_Zn (ABS_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41ea000 {
                                                                    return Some (Opcode :: NOT_SVE_Zd_SVE_Pg3_SVE_Zn (NOT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x411a000 {
                                                                    return Some (Opcode :: UXTB_SVE_Zd_SVE_Pg3_SVE_Zn (UXTB_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x419a000 {
                                                                    return Some (Opcode :: CLZ_SVE_Zd_SVE_Pg3_SVE_Zn (CLZ_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffffe000 == 0x4d5a000 {
                                                                    return Some (Opcode :: UXTW_SVE_Zd_SVE_Pg3_SVE_Zn (UXTW_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41da000 {
                                                                    return Some (Opcode :: FNEG_SVE_Zd_SVE_Pg3_SVE_Zn (FNEG_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffbfe000 == 0x493a000 {
                                                                    return Some (Opcode :: UXTH_SVE_Zd_SVE_Pg3_SVE_Zn (UXTH_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x41ba000 {
                                                                    return Some (Opcode :: CNOT_SVE_Zd_SVE_Pg3_SVE_Zn (CNOT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x417a000 {
                                                                return Some (Opcode :: NEG_SVE_Zd_SVE_Pg3_SVE_Zn (NEG_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f000 == 0x420a000 {
                                                                return Some (Opcode :: ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW (ADR_SVE_Zd_SVE_ADDR_ZZ_SXTW :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x460a000 {
                                                                return Some (Opcode :: ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW (ADR_SVE_Zd_SVE_ADDR_ZZ_UXTW :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0f000 == 0x4a0a000 {
                                                            return Some (Opcode :: ADR_SVE_Zd_SVE_ADDR_ZZ_LSL (ADR_SVE_Zd_SVE_ADDR_ZZ_LSL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xff20fc00 == 0x420b000 {
                                                                return Some (Opcode :: FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16 (FTSSEL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x420b800 {
                                                                return Some(
                                                                    Opcode::FEXPA_SVE_Zd_SVE_Zn(
                                                                        FEXPA_SVE_Zd_SVE_Zn::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x420bc00 {
                                                            return Some(
                                                                Opcode::MOVPRFX_SVE_Zd_SVE_Zn(
                                                                    MOVPRFX_SVE_Zd_SVE_Zn::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0x8400a000 {
                                                            return Some (Opcode :: LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S (LDNT1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x8480a000 {
                                                            return Some (Opcode :: LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S (LDNT1H_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_S :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0x8420a000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x84a0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0e000 == 0x8440a000 {
                                                        return Some (Opcode :: LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 (LD1RB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x84c0a000 {
                                                        return Some (Opcode :: LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 (LD1RH_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffffe000 == 0x4480a000 {
                                                                    return Some (Opcode :: URECPE_SVE_Zd_SVE_Pg3_SVE_Zn (URECPE_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4408a000 {
                                                                    return Some (Opcode :: SQABS_SVE_Zd_SVE_Pg3_SVE_Zn (SQABS_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4404a000 {
                                                                    return Some (Opcode :: SADALP_SVE_Zd_SVE_Pg3_SVE_Zn (SADALP_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4414a000 {
                                                                    return Some (Opcode :: SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x4416a000 {
                                                            return Some (Opcode :: SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (SMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x4481a000
                                                                    {
                                                                        return Some (Opcode :: URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn (URSQRTE_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x4411a000
                                                                    {
                                                                        return Some (Opcode :: ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (ADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4409a000 {
                                                                    return Some (Opcode :: SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn (SQNEG_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x4405a000 {
                                                                    return Some (Opcode :: UADALP_SVE_Zd_SVE_Pg3_SVE_Zn (UADALP_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x4415a000 {
                                                                    return Some (Opcode :: UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x4417a000 {
                                                            return Some (Opcode :: UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (UMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc400a000 {
                                                        return Some (Opcode :: LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX (LD1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc440a000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4c0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc420a000 {
                                                        return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D (LDFF1SB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0a000 {
                                                                    return Some (Opcode :: SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0b000 {
                                                                    return Some (Opcode :: UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0a400 {
                                                                    return Some (Opcode :: SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44a0b400 {
                                                                    return Some (Opcode :: UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D (LDFF1SH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e010 == 0xc460a000 {
                                                        return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0a000 {
                                                                    return Some (Opcode :: SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0b000 {
                                                                    return Some (Opcode :: UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMLSLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0a400 {
                                                                    return Some (Opcode :: SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0f400 == 0x44e0b400 {
                                                                    return Some (Opcode :: UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (UMLSLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e0a000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x008000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xff20e000 == 0x4006000 {
                                                    return Some (Opcode :: MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (MLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0x84006000 {
                                                        return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84806000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44006000 {
                                                                return Some (Opcode :: SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44007000 {
                                                                return Some (Opcode :: SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQRDMLAH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44006800 {
                                                                return Some (Opcode :: SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x44807800 {
                                                                return Some (Opcode :: USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 (USDOT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x44006400 {
                                                                return Some (Opcode :: SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x44007400 {
                                                                return Some (Opcode :: SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQRDMLSH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x44006c00 {
                                                            return Some (Opcode :: SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc4006000 {
                                                        return Some (Opcode :: LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4806000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4206000 {
                                                                return Some (Opcode :: MUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (MUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4207000 {
                                                                return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4206800 {
                                                            return Some (Opcode :: SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4206400 {
                                                                return Some (Opcode :: PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (PMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4207400 {
                                                                return Some (Opcode :: SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4206c00 {
                                                            return Some (Opcode :: UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMULH_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e010 == 0x84206000 {
                                                        return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x84a06000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffa0e010 == 0xc4206000 {
                                                    return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_XTW3_22_c4206000 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f000 == 0x44a06000 {
                                                                return Some (Opcode :: CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 (CMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x44e06000 {
                                                                return Some (Opcode :: CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 (CMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0f000 == 0x44a07000 {
                                                                return Some (Opcode :: SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 (SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x44e07000 {
                                                                return Some (Opcode :: SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 (SQRDCMLAH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc4a06000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D (LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW1_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0xff20e000 == 0x400e000 {
                                                    return Some (Opcode :: MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 (MSB_SVE_Zd_SVE_Pg3_SVE_Zm_16_SVE_Za_5 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x420e000
                                                                        {
                                                                            return Some (Opcode :: CNTB_Rd_SVE_PATTERN_SCALED (CNTB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4a0e000
                                                                        {
                                                                            return Some (Opcode :: CNTW_Rd_SVE_PATTERN_SCALED (CNTW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x460e000
                                                                        {
                                                                            return Some (Opcode :: CNTH_Rd_SVE_PATTERN_SCALED (CNTH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4e0e000
                                                                        {
                                                                            return Some (Opcode :: CNTD_Rd_SVE_PATTERN_SCALED (CNTD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x430e000
                                                                        {
                                                                            return Some (Opcode :: INCB_Rd_SVE_PATTERN_SCALED (INCB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4b0e000
                                                                        {
                                                                            return Some (Opcode :: INCW_Rd_SVE_PATTERN_SCALED (INCW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x470e000
                                                                        {
                                                                            return Some (Opcode :: INCH_Rd_SVE_PATTERN_SCALED (INCH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4f0e000
                                                                        {
                                                                            return Some (Opcode :: INCD_Rd_SVE_PATTERN_SCALED (INCD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x420f000
                                                                        {
                                                                            return Some (Opcode :: SQINCB_Rd_Rd_SVE_PATTERN_SCALED (SQINCB_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4a0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCW_Rd_Rd_SVE_PATTERN_SCALED (SQINCW_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x460f000
                                                                        {
                                                                            return Some (Opcode :: SQINCH_Rd_Rd_SVE_PATTERN_SCALED (SQINCH_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4e0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCD_Rd_Rd_SVE_PATTERN_SCALED (SQINCD_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x430f000
                                                                        {
                                                                            return Some (Opcode :: SQINCB_Rd_SVE_PATTERN_SCALED (SQINCB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4b0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCW_Rd_SVE_PATTERN_SCALED (SQINCW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x470f000
                                                                        {
                                                                            return Some (Opcode :: SQINCH_Rd_SVE_PATTERN_SCALED (SQINCH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4f0f000
                                                                        {
                                                                            return Some (Opcode :: SQINCD_Rd_SVE_PATTERN_SCALED (SQINCD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x420f800
                                                                    {
                                                                        return Some (Opcode :: SQDECB_Rd_Rd_SVE_PATTERN_SCALED (SQDECB_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4a0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECW_Rd_Rd_SVE_PATTERN_SCALED (SQDECW_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460f800
                                                                    {
                                                                        return Some (Opcode :: SQDECH_Rd_Rd_SVE_PATTERN_SCALED (SQDECH_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECD_Rd_Rd_SVE_PATTERN_SCALED (SQDECD_Rd_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x430f800
                                                                    {
                                                                        return Some (Opcode :: SQDECB_Rd_SVE_PATTERN_SCALED (SQDECB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4b0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECW_Rd_SVE_PATTERN_SCALED (SQDECW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470f800
                                                                    {
                                                                        return Some (Opcode :: SQDECH_Rd_SVE_PATTERN_SCALED (SQDECH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0f800
                                                                    {
                                                                        return Some (Opcode :: SQDECD_Rd_SVE_PATTERN_SCALED (SQDECD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x430e400
                                                                    {
                                                                        return Some (Opcode :: DECB_Rd_SVE_PATTERN_SCALED (DECB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4b0e400
                                                                    {
                                                                        return Some (Opcode :: DECW_Rd_SVE_PATTERN_SCALED (DECW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470e400
                                                                    {
                                                                        return Some (Opcode :: DECH_Rd_SVE_PATTERN_SCALED (DECH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0e400
                                                                    {
                                                                        return Some (Opcode :: DECD_Rd_SVE_PATTERN_SCALED (DECD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x420f400
                                                                        {
                                                                            return Some (Opcode :: UQINCB_Rd_SVE_PATTERN_SCALED (UQINCB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4a0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCW_Rd_SVE_PATTERN_SCALED (UQINCW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x460f400
                                                                        {
                                                                            return Some (Opcode :: UQINCH_Rd_SVE_PATTERN_SCALED (UQINCH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4e0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCD_Rd_SVE_PATTERN_SCALED (UQINCD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x430f400
                                                                        {
                                                                            return Some (Opcode :: UQINCB_Rd_X_SVE_PATTERN_SCALED (UQINCB_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4b0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCW_Rd_X_SVE_PATTERN_SCALED (UQINCW_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x470f400
                                                                        {
                                                                            return Some (Opcode :: UQINCH_Rd_X_SVE_PATTERN_SCALED (UQINCH_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfff0fc00
                                                                            == 0x4f0f400
                                                                        {
                                                                            return Some (Opcode :: UQINCD_Rd_X_SVE_PATTERN_SCALED (UQINCD_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x420fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECB_Rd_SVE_PATTERN_SCALED (UQDECB_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4a0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECW_Rd_SVE_PATTERN_SCALED (UQDECW_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x460fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECH_Rd_SVE_PATTERN_SCALED (UQDECH_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4e0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECD_Rd_SVE_PATTERN_SCALED (UQDECD_Rd_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x430fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECB_Rd_X_SVE_PATTERN_SCALED (UQDECB_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4b0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECW_Rd_X_SVE_PATTERN_SCALED (UQDECW_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x470fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECH_Rd_X_SVE_PATTERN_SCALED (UQDECH_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfff0fc00
                                                                        == 0x4f0fc00
                                                                    {
                                                                        return Some (Opcode :: UQDECD_Rd_X_SVE_PATTERN_SCALED (UQDECD_Rd_X_SVE_PATTERN_SCALED :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e010 == 0x8400e000 {
                                                            return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5 (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8480e000 {
                                                            return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0x8420e000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0x84a0e000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0e000 == 0x8440e000 {
                                                        return Some (Opcode :: LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 (LD1RB_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x84c0e000 {
                                                        return Some (Opcode :: LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 (LD1RH_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e010 == 0xc400e000 {
                                                        return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000 (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5_c400e000 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e010 == 0xc480e000 {
                                                        return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000 (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x2_c480e000 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc440e000 {
                                                        return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc4c0e000 {
                                                        return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4420f000 {
                                                                return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x4420f800 {
                                                                return Some (Opcode :: MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (MUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x4420f400 {
                                                            return Some (Opcode :: SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc420e000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D (LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5_S_D :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0xc460e000 {
                                                            return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RZ_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0e000 {
                                                                    return Some (Opcode :: SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x000800 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a0f000
                                                                    {
                                                                        return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44a0f800
                                                                    {
                                                                        return Some (Opcode :: MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (MUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44a0e400 {
                                                                    return Some (Opcode :: SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44a0f400 {
                                                                    return Some (Opcode :: SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4a0e000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D (LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x2_S_D :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0e000 {
                                                                    return Some (Opcode :: SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x000800 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e0f000
                                                                    {
                                                                        return Some (Opcode :: SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SQDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x44e0f800
                                                                    {
                                                                        return Some (Opcode :: MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (MUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffe0f400 == 0x44e0e400 {
                                                                    return Some (Opcode :: SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX (SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm4_11_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x44e0f400 {
                                                                    return Some (Opcode :: SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (SQRDMULH_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc4e0e000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x200000 == 0 {
                            if insn & 0x008000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x24000000 {
                                                        return Some (Opcode :: CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24000010 {
                                                        return Some (Opcode :: CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xa4000000 {
                                                        return Some (Opcode :: LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa4800000 {
                                                        return Some (Opcode :: LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x24004000 {
                                                        return Some (Opcode :: CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24004010 {
                                                        return Some (Opcode :: CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4004000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4804000 {
                                                            return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4404000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX (LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4c04000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x24002000 {
                                                        return Some (Opcode :: CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24002010 {
                                                        return Some (Opcode :: CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xfff0e000 == 0xa4002000 {
                                                        return Some (Opcode :: LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 (LD1RQB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa4802000 {
                                                        return Some (Opcode :: LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 (LD1RQH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x24006000 {
                                                        return Some (Opcode :: CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x24006010 {
                                                        return Some (Opcode :: CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4006000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4006000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4806000 {
                                                            return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4806000 {
                                                            return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4406000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4406000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4c06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4c06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0xff208000 == 0x64000000 {
                                            return Some (Opcode :: FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2 (FCMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16_IMM_ROT2 :: from (insn))) ;
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xfff0e000 == 0xe4800000 {
                                                        return Some (Opcode :: ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xe4400000 {
                                                            return Some (Opcode :: ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe4c00000 {
                                                            return Some (Opcode :: ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffe0e000 == 0xe4004000 {
                                                        return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4404000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX (ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c04000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4002000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4802000 {
                                                            return Some (Opcode :: STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4402000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX (STNT1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c02000 {
                                                            return Some (Opcode :: STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX (STNT1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4006000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4806000 {
                                                            return Some (Opcode :: STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe4406000 {
                                                            return Some (Opcode :: ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c06000 {
                                                            return Some (Opcode :: ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x002000 == 0 {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0xff20e010 == 0x24008000 {
                                                    return Some (Opcode :: CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B (CMPGE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xff20e010 == 0x24008010 {
                                                    return Some (Opcode :: CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B (CMPGT_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x2400c000 {
                                                        return Some (Opcode :: CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D (CMPHS_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x2400c010 {
                                                        return Some (Opcode :: CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D (CMPHI_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_D :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa400c000 {
                                                            return Some (Opcode :: LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa480c000 {
                                                            return Some (Opcode :: LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa440c000 {
                                                            return Some (Opcode :: LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4c0c000 {
                                                            return Some (Opcode :: LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x020000 == 0 {
                                                if insn & 0x040000 == 0 {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xff3ee000 == 0x64008000 {
                                                            return Some (Opcode :: FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1 (FCADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5_SVE_IMM_ROT1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x64108000 {
                                                            return Some (Opcode :: FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (FADDP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0xff3fe000 == 0x64148000 {
                                                            return Some (Opcode :: FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (FMAXNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x64158000 {
                                                            return Some (Opcode :: FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (FMINNMP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0xff3fe000 == 0x64168000 {
                                                        return Some (Opcode :: FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (FMAXP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff3fe000 == 0x64178000 {
                                                        return Some (Opcode :: FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn (FMINP_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0a000 == 0xe4008000 {
                                                        return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4808000 {
                                                        return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0a000 == 0xe4408000 {
                                                        return Some (Opcode :: ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4c08000 {
                                                        return Some (Opcode :: ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x2400a000 {
                                                        return Some (Opcode :: CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B (CMPEQ_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x2400a010 {
                                                        return Some (Opcode :: CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B (CMPNE_SVE_Pd_S_B_SVE_Pg3_P_Z_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa400a000 {
                                                                return Some (Opcode :: LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa480a000 {
                                                                return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa440a000 {
                                                                return Some (Opcode :: LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4c0a000 {
                                                                return Some (Opcode :: LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa410a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa490a000 {
                                                                return Some (Opcode :: LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa450a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1B_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4d0a000 {
                                                                return Some (Opcode :: LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x6410a000 {
                                                                    return Some (Opcode :: FADDQV_Vd_SVE_Pg3_SVE_Zn (FADDQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffe000 == 0x6488a000 {
                                                                    return Some (Opcode :: FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6414a000 {
                                                                return Some (Opcode :: FMAXNMQV_Vd_SVE_Pg3_SVE_Zn (FMAXNMQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x640aa000
                                                                    {
                                                                        return Some (Opcode :: FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTXNT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x648aa000
                                                                    {
                                                                        return Some (Opcode :: BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn (BFCVTNT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffffe000 == 0x64caa000 {
                                                                    return Some (Opcode :: FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D (FCVTNT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6416a000 {
                                                                return Some (Opcode :: FMAXQV_Vd_SVE_Pg3_SVE_Zn (FMAXQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0xffffe000 == 0x6489a000 {
                                                                return Some (Opcode :: FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTLT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6415a000 {
                                                                return Some (Opcode :: FMINNMQV_Vd_SVE_Pg3_SVE_Zn (FMINNMQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0xffffe000 == 0x64cba000 {
                                                                return Some (Opcode :: FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S (FCVTLT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x6417a000 {
                                                                return Some (Opcode :: FMINQV_Vd_SVE_Pg3_SVE_Zn (FMINQV_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe400a000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe480a000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe440a000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4c0a000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x2400e000 {
                                                        return Some (Opcode :: CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x2400e010 {
                                                        return Some (Opcode :: CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa400e000 {
                                                                return Some (Opcode :: LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa480e000 {
                                                                return Some (Opcode :: LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa440e000 {
                                                                return Some (Opcode :: LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (LD3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4c0e000 {
                                                                return Some (Opcode :: LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (LD3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa490e000 {
                                                        return Some (Opcode :: LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x100000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xfff0e000 == 0xe400e000 {
                                                        return Some (Opcode :: ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xe440e000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe4c0e000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xe410e000 {
                                                            return Some (Opcode :: STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (STNT1B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe490e000 {
                                                            return Some (Opcode :: STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (STNT1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xe450e000 {
                                                            return Some (Opcode :: ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (ST3B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe4d0e000 {
                                                            return Some (Opcode :: ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (ST3H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x002000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0xff202010 == 0x24200000 {
                                                return Some(
                                                    Opcode::CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(
                                                        CMPHS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0xff202010 == 0x24200010 {
                                                return Some(
                                                    Opcode::CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(
                                                        CMPHI_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffe0e000 == 0xa4200000 {
                                                    return Some (Opcode :: LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xa4a00000 {
                                                    return Some (Opcode :: LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x008000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4204000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX (LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4a04000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 (LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4604000 {
                                                            return Some (Opcode :: LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX (LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4e04000 {
                                                            return Some (Opcode :: LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 (LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa420c000 {
                                                            return Some (Opcode :: LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4a0c000 {
                                                            return Some (Opcode :: LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa460c000 {
                                                            return Some (Opcode :: LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4e0c000 {
                                                            return Some (Opcode :: LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x64200000 {
                                                                return Some (Opcode :: FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x64200800 {
                                                                return Some (Opcode :: BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLA_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0xffa0fc00 == 0x64200400 {
                                                                return Some (Opcode :: FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x64200c00 {
                                                                return Some (Opcode :: BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLS_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe4600000 {
                                                        return Some (Opcode :: ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 (ST2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000400 == 0 {
                                                                if insn & 0xffe0fc00 == 0x64a00000 {
                                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (FMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x64a00400 {
                                                                    return Some (Opcode :: FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (FMLS_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x64a01000 {
                                                                return Some (Opcode :: FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 (FCMLA_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4a00000 {
                                                            return Some (Opcode :: ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 (ST3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000400 == 0 {
                                                                if insn & 0xffe0fc00 == 0x64e00000 {
                                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (FMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x64e00400 {
                                                                    return Some (Opcode :: FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (FMLS_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f000 == 0x64e01000 {
                                                                return Some (Opcode :: FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 (FCMLA_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX_SVE_IMM_ROT2 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e00000 {
                                                            return Some (Opcode :: ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 (ST4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64204000 {
                                                            return Some (Opcode :: FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX (FDOT_SVE_Zd_SVE_Zn_SVE_Zm3_19_INDEX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4204000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX (ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xffe0f400 == 0x64a04000 {
                                                                return Some (Opcode :: FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (FMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64a04400 {
                                                                return Some (Opcode :: FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (FMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4a04000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64604000 {
                                                            return Some (Opcode :: BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (BFDOT_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4604000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX (ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xffe0f400 == 0x64e04000 {
                                                                return Some (Opcode :: BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64e04400 {
                                                                return Some (Opcode :: BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e04000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffe0fc00 == 0x64208000 {
                                                    return Some(
                                                        Opcode::FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(
                                                            FDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64a08000 {
                                                            return Some (Opcode :: FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x64a08400 {
                                                            return Some (Opcode :: FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4a08000 {
                                                        return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffe0fc00 == 0x64608000 {
                                                    return Some(
                                                        Opcode::BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16(
                                                            BFDOT_SVE_Zd_SVE_Zn_SVE_Zm_16::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64e08000 {
                                                            return Some (Opcode :: BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (BFMLALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x64e08400 {
                                                            return Some (Opcode :: BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (BFMLALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe4e08000 {
                                                        return Some (Opcode :: ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 (ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW1_14 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0x000010 == 0 {
                                            if insn & 0xff202010 == 0x24202000 {
                                                return Some(
                                                    Opcode::CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(
                                                        CMPLO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0xff202010 == 0x24202010 {
                                                return Some(
                                                    Opcode::CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7(
                                                        CMPLS_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_UIMM7::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x008000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xfff0e000 == 0xa4202000 {
                                                        return Some (Opcode :: LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 (LD1ROB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa4a02000 {
                                                        return Some (Opcode :: LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 (LD1ROH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa420a000 {
                                                                return Some (Opcode :: LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4a0a000 {
                                                                return Some (Opcode :: LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa460a000 {
                                                                return Some (Opcode :: LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4e0a000 {
                                                                return Some (Opcode :: LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa430a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4b0a000 {
                                                                return Some (Opcode :: LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa470a000 {
                                                                return Some (Opcode :: LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa4f0a000 {
                                                                return Some (Opcode :: LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x008000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4206000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4206000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1B_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4a06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4a06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1H_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa4606000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4606000 {
                                                            return Some (Opcode :: LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1B_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa4e06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4e06000 {
                                                            return Some (Opcode :: LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1H_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa420e000 {
                                                            return Some (Opcode :: LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa4a0e000 {
                                                            return Some (Opcode :: LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 (LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa4a0e000 {
                                                            return Some (Opcode :: LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 (LD2Q_SME_Zt2_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa460e000 {
                                                            return Some (Opcode :: LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (LD4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa4e0e000 {
                                                            return Some (Opcode :: LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (LD4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xffa0fc00 == 0x64202000 {
                                                                return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX (FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_22_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x64a02000 {
                                                                    return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX (FMUL_SVE_Zd_SVE_Zn_SVE_Zm3_INDEX :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x64e02000 {
                                                                    return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX (FMUL_SVE_Zd_SVE_Zn_SVE_Zm4_INDEX :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x64202800 {
                                                            return Some (Opcode :: BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMUL_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x64202400 {
                                                        return Some (Opcode :: FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 (FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                    if insn & 0xffe0fc00 == 0x64202400 {
                                                        return Some (Opcode :: FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 (FCLAMP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xe4202000 {
                                                    return Some(
                                                        Opcode::ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX(
                                                            ST1Q_SVE_Zt_SVE_Pg3_SVE_ADDR_ZX::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64a0a000 {
                                                            return Some (Opcode :: FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x64a0a400 {
                                                            return Some (Opcode :: FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe4a0a000 {
                                                        return Some (Opcode :: ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 (ST1H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL1 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xe460a000 {
                                                        return Some (Opcode :: ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5 (ST1B_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xffe0fc00 == 0x64e0a000 {
                                                                return Some (Opcode :: BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x64e0a400 {
                                                                return Some (Opcode :: BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e0a000 {
                                                            return Some (Opcode :: ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2 (ST1H_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x2 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xe4206000 {
                                                        return Some (Opcode :: ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xffe0f400 == 0x64a06000 {
                                                                return Some (Opcode :: FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (FMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64a06400 {
                                                                return Some (Opcode :: FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (FMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4a06000 {
                                                            return Some (Opcode :: ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xe4606000 {
                                                        return Some (Opcode :: ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xffe0f400 == 0x64e06000 {
                                                                return Some (Opcode :: BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLSLB_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0f400 == 0x64e06400 {
                                                                return Some (Opcode :: BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX (BFMLSLT_SVE_Zd_SVE_Zn_SVE_Zm3_11_INDEX :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe4e06000 {
                                                            return Some (Opcode :: ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xfff0e000 == 0xe420e000 {
                                                            return Some (Opcode :: ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1B_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe430e000 {
                                                            return Some (Opcode :: ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64a0e400 {
                                                            return Some (Opcode :: FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe4a0e000 {
                                                                return Some (Opcode :: ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1H_SVE_ZtxN_S_H_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe4b0e000 {
                                                                return Some (Opcode :: ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x6460e400 {
                                                            return Some (Opcode :: BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (BFMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe460e000 {
                                                                return Some (Opcode :: ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1B_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe470e000 {
                                                                return Some (Opcode :: ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (ST4B_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x64e0e400 {
                                                            return Some (Opcode :: FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D (FMMLA_SVE_Zd_S_D_SVE_Zn_S_D_SVE_Zm_16_S_D :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe4e0e000 {
                                                                return Some (Opcode :: ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1H_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe4f0e000 {
                                                                return Some (Opcode :: ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (ST4H_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn & 0x20000000 == 0 {
                        if insn & 0x40000000 == 0 {
                            if insn & 0x80000000 == 0 {
                                if insn & 0x200000 == 0 {
                                    if insn & 0x100000 == 0 {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xfffc0000 == 0x5000000 {
                                                    return Some(
                                                        Opcode::ORR_SVE_Zd_SVE_Zd_SVE_LIMM(
                                                            ORR_SVE_Zd_SVE_Zd_SVE_LIMM::from(insn),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xfffc0000 == 0x5800000 {
                                                    return Some(
                                                        Opcode::AND_SVE_Zd_SVE_Zd_SVE_LIMM(
                                                            AND_SVE_Zd_SVE_Zd_SVE_LIMM::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xfffc0000 == 0x5400000 {
                                                    return Some(
                                                        Opcode::EOR_SVE_Zd_SVE_Zd_SVE_LIMM(
                                                            EOR_SVE_Zd_SVE_Zd_SVE_LIMM::from(insn),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xfffc0000 == 0x5c00000 {
                                                    return Some(Opcode::DUPM_SVE_Zd_SVE_LIMM(
                                                        DUPM_SVE_Zd_SVE_LIMM::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0xff308000 == 0x5100000 {
                                                return Some(
                                                    Opcode::CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM(
                                                        CPY_SVE_Zd_SVE_Pg4_16_SVE_ASIMM::from(insn),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0xff30e000 == 0x510c000 {
                                                return Some(
                                                    Opcode::FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8(
                                                        FCPY_SVE_Zd_SVE_Pg4_16_SVE_FPIMM8::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x008000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0x5200000 {
                                                            return Some (Opcode :: EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53 (EXT_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM8_53 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x000800 == 0 {
                                                                if insn & 0xffe0fc00 == 0x5a00000 {
                                                                    return Some (Opcode :: ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16 (ZIP1_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a00800
                                                                    {
                                                                        return Some (Opcode :: UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16 (UZP1_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a01800
                                                                    {
                                                                        return Some (Opcode :: TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 (TRN1_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000800 == 0 {
                                                                if insn & 0xffe0fc00 == 0x5a00400 {
                                                                    return Some (Opcode :: ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16 (ZIP2_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a00c00
                                                                    {
                                                                        return Some (Opcode :: UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16 (UZP2_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x5a01c00
                                                                    {
                                                                        return Some (Opcode :: TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16 (TRN2_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0x5600000 {
                                                        return Some (Opcode :: EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53 (EXT_SVE_Zd_SVE_ZnxN_SVE_UIMM8_53 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x5208000 {
                                                                    return Some (Opcode :: CPY_SVE_Zd_SVE_Pg3_SVE_Vn (CPY_SVE_Zd_SVE_Pg3_SVE_Vn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x5288000 {
                                                                    return Some (Opcode :: CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (CLASTA_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x5248000 {
                                                                    return Some (Opcode :: REVB_SVE_Zd_SVE_Pg3_SVE_Zn (REVB_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52c8000 {
                                                                    return Some (Opcode :: SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (SPLICE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x5228000 {
                                                                    return Some (Opcode :: LASTA_SVE_Vd_SVE_Pg3_SVE_Zn (LASTA_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52a8000 {
                                                                    return Some (Opcode :: CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 (CLASTA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffffe000 == 0x5e68000 {
                                                                    return Some (Opcode :: REVW_SVE_Zd_SVE_Pg3_SVE_Zn (REVW_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffe000 == 0x52e8000 {
                                                                    return Some (Opcode :: REVD_SVE_Zd_SVE_Pg3_SVE_Zn (REVD_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffbfe000 == 0x5a18000 {
                                                                    return Some (Opcode :: COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn (COMPACT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x5298000 {
                                                                    return Some (Opcode :: CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (CLASTB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffbfe000 == 0x5a58000 {
                                                                    return Some (Opcode :: REVH_SVE_Zd_SVE_Pg3_SVE_Zn (REVH_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52d8000 {
                                                                    return Some (Opcode :: SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN (SPLICE_SVE_Zd_SVE_Pg3_SVE_ZnxN :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x5238000 {
                                                                    return Some (Opcode :: LASTB_SVE_Vd_SVE_Pg3_SVE_Zn (LASTB_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x52b8000 {
                                                                    return Some (Opcode :: CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 (CLASTB_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x5278000 {
                                                                return Some (Opcode :: RBIT_SVE_Zd_SVE_Pg3_SVE_Zn (RBIT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x008000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x5202000 {
                                                                return Some (Opcode :: DUP_SVE_Zd_SVE_Zn_INDEX (DUP_SVE_Zd_SVE_Zn_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5203000 {
                                                                return Some (Opcode :: TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 (TBL_SVE_Zd_SVE_ZnxN_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x5202800 {
                                                                return Some (Opcode :: TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B (TBL_SVE_Zd_S_B_SVE_ZnxN_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x020000 == 0 {
                                                                    if insn & 0x040000 == 0 {
                                                                        if insn & 0x080000 == 0 {
                                                                            if insn & 0x100000 == 0
                                                                            {
                                                                                if insn & 0xff3ffc00
                                                                                    == 0x5203800
                                                                                {
                                                                                    return Some (Opcode :: DUP_SVE_Zd_Rn_SP (DUP_SVE_Zd_Rn_SP :: from (insn))) ;
                                                                                }
                                                                            } else {
                                                                                if insn & 0xff3ffc00
                                                                                    == 0x5303800
                                                                                {
                                                                                    return Some (Opcode :: SUNPKLO_SVE_Zd_SVE_Zn (SUNPKLO_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff3ffc00
                                                                                == 0x5383800
                                                                            {
                                                                                return Some (Opcode :: REV_SVE_Zd_SVE_Zn (REV_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0x100000 == 0 {
                                                                            if insn & 0xff3ffc00
                                                                                == 0x5243800
                                                                            {
                                                                                return Some (Opcode :: INSR_SVE_Zd_SVE_Rm (INSR_SVE_Zd_SVE_Rm :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xff3ffc00
                                                                                == 0x5343800
                                                                            {
                                                                                return Some (Opcode :: INSR_SVE_Zd_SVE_Vm (INSR_SVE_Zd_SVE_Vm :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x5323800
                                                                    {
                                                                        return Some (Opcode :: UUNPKLO_SVE_Zd_SVE_Zn (UUNPKLO_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x020000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x5313800
                                                                    {
                                                                        return Some (Opcode :: SUNPKHI_SVE_Zd_SVE_Zn (SUNPKHI_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x5333800
                                                                    {
                                                                        return Some (Opcode :: UUNPKHI_SVE_Zd_SVE_Zn (UUNPKHI_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x5202400 {
                                                                return Some (Opcode :: DUPQ_SVE_Zd_SVE_Zn_5_INDEX (DUPQ_SVE_Zd_SVE_Zn_5_INDEX :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0fc00 == 0x5602400 {
                                                                return Some (Opcode :: EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4 (EXTQ_SVE_Zd_SVE_Zd_SVE_Zm_imm4 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5202c00 {
                                                            return Some (Opcode :: TBX_SVE_Zd_SVE_Zn_SVE_Zm_16 (TBX_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x080000 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xff3fe000 == 0x520a000 {
                                                                return Some (Opcode :: LASTA_Rd_SVE_Pg3_SVE_Zn (LASTA_Rd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x530a000 {
                                                                return Some (Opcode :: CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5 (CLASTA_Rd_SVE_Pg3_Rd_SVE_Zm_5 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x528a000 {
                                                            return Some(
                                                                Opcode::CPY_SVE_Zd_SVE_Pg3_Rn_SP(
                                                                    CPY_SVE_Zd_SVE_Pg3_Rn_SP::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0xff3fe000 == 0x521a000 {
                                                            return Some(
                                                                Opcode::LASTB_Rd_SVE_Pg3_SVE_Zn(
                                                                    LASTB_Rd_SVE_Pg3_SVE_Zn::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff3fe000 == 0x531a000 {
                                                            return Some (Opcode :: CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5 (CLASTB_Rd_SVE_Pg3_Rd_SVE_Zm_5 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x000400 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x002000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff30fe10 == 0x5204000 {
                                                                    return Some (Opcode :: ZIP1_SVE_Pd_SVE_Pn_SVE_Pm (ZIP1_SVE_Pd_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0x040000 == 0 {
                                                                        if insn & 0xfffffe10
                                                                            == 0x5304000
                                                                        {
                                                                            return Some (Opcode :: PUNPKLO_SVE_Pd_SVE_Pn (PUNPKLO_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3ffe10
                                                                            == 0x5344000
                                                                        {
                                                                            return Some (Opcode :: REV_SVE_Pd_SVE_Pn (REV_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffe10
                                                                        == 0x5314000
                                                                    {
                                                                        return Some (Opcode :: PUNPKHI_SVE_Pd_SVE_Pn (PUNPKHI_SVE_Pd_SVE_Pn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5206000 {
                                                                return Some (Opcode :: ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B (ZIP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x002000 == 0 {
                                                            if insn & 0xff30fe10 == 0x5205000 {
                                                                return Some (Opcode :: TRN1_SVE_Pd_SVE_Pn_SVE_Pm (TRN1_SVE_Pd_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5207000 {
                                                                return Some (Opcode :: TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B (TRN1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xff30fe10 == 0x5204800 {
                                                            return Some(
                                                                Opcode::UZP1_SVE_Pd_SVE_Pn_SVE_Pm(
                                                                    UZP1_SVE_Pd_SVE_Pn_SVE_Pm::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5206800 {
                                                            return Some (Opcode :: UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B (UZP1_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x002000 == 0 {
                                                            if insn & 0xff30fe10 == 0x5204400 {
                                                                return Some (Opcode :: ZIP2_SVE_Pd_SVE_Pn_SVE_Pm (ZIP2_SVE_Pd_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5206400 {
                                                                return Some (Opcode :: ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B (ZIP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x002000 == 0 {
                                                            if insn & 0xff30fe10 == 0x5205400 {
                                                                return Some (Opcode :: TRN2_SVE_Pd_SVE_Pn_SVE_Pm (TRN2_SVE_Pd_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x5207400 {
                                                                return Some (Opcode :: TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B (TRN2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xff30fe10 == 0x5204c00 {
                                                            return Some(
                                                                Opcode::UZP2_SVE_Pd_SVE_Pn_SVE_Pm(
                                                                    UZP2_SVE_Pd_SVE_Pn_SVE_Pm::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5206c00 {
                                                            return Some (Opcode :: UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B (UZP2_SVE_Zd_S_B_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xff20c000 == 0x520c000 {
                                                return Some (Opcode :: SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16 (SEL_SVE_Zd_SVE_Pg4_10_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x002000 == 0 {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0xffc0e010 == 0x85800000 {
                                                    return Some(
                                                        Opcode::LDR_SVE_PNt_SVE_ADDR_RI_S9xVL(
                                                            LDR_SVE_PNt_SVE_ADDR_RI_S9xVL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                                if insn & 0xffc0e010 == 0x85800000 {
                                                    return Some(
                                                        Opcode::LDR_SVE_PNt_SVE_ADDR_RI_S9xVL(
                                                            LDR_SVE_PNt_SVE_ADDR_RI_S9xVL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xffc0e010 == 0x85c00000 {
                                                    return Some (Opcode :: PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL (PRFB_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffc0e000 == 0x85408000 {
                                                    return Some (Opcode :: LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 (LD1RSH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xffc0e000 == 0x85c08000 {
                                                    return Some (Opcode :: LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 (LD1RSB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffa0e000 == 0x85004000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x85204000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffc0e000 == 0x85804000 {
                                                        return Some(
                                                            Opcode::LDR_SVE_Zt_SVE_ADDR_RI_S9xVL(
                                                                LDR_SVE_Zt_SVE_ADDR_RI_S9xVL::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffc0e010 == 0x85c04000 {
                                                        return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e010 == 0x8500c000 {
                                                            return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8580c000 {
                                                            return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0x8520c000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0e000 == 0x8540c000 {
                                                        return Some (Opcode :: LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 (LD1RW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x85c0c000 {
                                                        return Some (Opcode :: LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 (LD1RSB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0xffc0e010 == 0x85c02000 {
                                                return Some (Opcode :: PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL (PRFH_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0xffe0e000 == 0x8500a000 {
                                                    return Some (Opcode :: LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0e000 == 0x8540a000 {
                                                        return Some (Opcode :: LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 (LD1RSH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x85c0a000 {
                                                        return Some (Opcode :: LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 (LD1RSB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_U6 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffa0e000 == 0x85006000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0x85206000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffc0e010 == 0x85c06000 {
                                                    return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_RI_S6xVL :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e010 == 0x8500e000 {
                                                            return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0x8580e000 {
                                                            return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0x8520e000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0e000 == 0x8540e000 {
                                                        return Some (Opcode :: LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4 (LD1RW_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_U6x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffc0e000 == 0x85c0e000 {
                                                        return Some (Opcode :: LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8 (LD1RD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_U6x8 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x002000 == 0 {
                                if insn & 0x004000 == 0 {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000000 {
                                                                return Some (Opcode :: SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001000 {
                                                                return Some (Opcode :: SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SSUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000800 {
                                                                return Some (Opcode :: UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UADDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001800 {
                                                                return Some (Opcode :: USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (USUBLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000400 {
                                                                return Some (Opcode :: SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001400 {
                                                                return Some (Opcode :: SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SSUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45000c00 {
                                                                return Some (Opcode :: UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UADDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45001c00 {
                                                                return Some (Opcode :: USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (USUBLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa0e000 == 0xc5000000 {
                                                    return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200000 {
                                                                    return Some (Opcode :: SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201000 {
                                                                    return Some (Opcode :: SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200800 {
                                                                    return Some (Opcode :: SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRUNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201800 {
                                                                    return Some (Opcode :: RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (RSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200400 {
                                                                    return Some (Opcode :: SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201400 {
                                                                    return Some (Opcode :: SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45200c00 {
                                                                    return Some (Opcode :: SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRUNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45201c00 {
                                                                    return Some (Opcode :: RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (RSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5200000 {
                                                        return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xfff0fc20 == 0x45b00800 {
                                                    return Some (Opcode :: SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4 (SQRSHRUN_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45008000 {
                                                                return Some (Opcode :: SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SADDLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45009000 {
                                                                return Some (Opcode :: EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16 (EORBT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45008800 {
                                                                return Some (Opcode :: SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SSUBLBT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x45009800
                                                                    {
                                                                        return Some (Opcode :: SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffe0fc00
                                                                        == 0x45809800
                                                                    {
                                                                        return Some (Opcode :: USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (USMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x45c09800 {
                                                                    return Some (Opcode :: UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMMLA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x45009400 {
                                                            return Some (Opcode :: EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16 (EORTB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x45008c00 {
                                                            return Some (Opcode :: SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SSUBLTB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc5008000 {
                                                        return Some (Opcode :: LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5408000 {
                                                        return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xffa0e010 == 0x45208000 {
                                                        return Some (Opcode :: MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (MATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e010 == 0x45208010 {
                                                        return Some (Opcode :: NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (NMATCH_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc5208000 {
                                                        return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5608000 {
                                                        return Some (Opcode :: LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 (LD1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004000 {
                                                                return Some (Opcode :: SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005000 {
                                                                return Some (Opcode :: SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SSUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004800 {
                                                                return Some (Opcode :: UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UADDWB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005800 {
                                                                return Some (Opcode :: USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 (USUBWB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004400 {
                                                                return Some (Opcode :: SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005400 {
                                                                return Some (Opcode :: SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SSUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45004c00 {
                                                                return Some (Opcode :: UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UADDWT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45005c00 {
                                                                return Some (Opcode :: USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 (USUBWT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc5004000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5804000 {
                                                        return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa7fc00
                                                                        == 0x45204000
                                                                    {
                                                                        return Some (Opcode :: SQXTNB_SVE_Zd_SVE_Zn (SQXTNB_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc20
                                                                        == 0x45314000
                                                                    {
                                                                        return Some (Opcode :: SQCVTN_SVE_Zd_SME_Znx2 (SQCVTN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xffa7fc00
                                                                        == 0x45205000
                                                                    {
                                                                        return Some (Opcode :: SQXTUNB_SVE_Zd_SVE_Zn (SQXTUNB_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc20
                                                                        == 0x45315000
                                                                    {
                                                                        return Some (Opcode :: SQCVTUN_SVE_Zd_SME_Znx2 (SQCVTUN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xffa7fc00 == 0x45204800 {
                                                                    return Some (Opcode :: UQXTNB_SVE_Zd_SVE_Zn (UQXTNB_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc20 == 0x45314800 {
                                                                    return Some (Opcode :: UQCVTN_SVE_Zd_SME_Znx2 (UQCVTN_SVE_Zd_SME_Znx2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa7fc00 == 0x45204400 {
                                                                    return Some (Opcode :: SQXTNT_SVE_Zd_SVE_Zn (SQXTNT_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa7fc00 == 0x45205400 {
                                                                    return Some (Opcode :: SQXTUNT_SVE_Zd_SVE_Zn (SQXTUNT_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffa7fc00 == 0x45204c00 {
                                                                return Some(
                                                                    Opcode::UQXTNT_SVE_Zd_SVE_Zn(
                                                                        UQXTNT_SVE_Zd_SVE_Zn::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5204000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa0e000 == 0xc5a04000 {
                                                    return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500c000 {
                                                                return Some (Opcode :: SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x4500d000 {
                                                                    return Some (Opcode :: ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (ADCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4580d000 {
                                                                    return Some (Opcode :: SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SBCLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500c400 {
                                                                return Some (Opcode :: SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x4500d400 {
                                                                    return Some (Opcode :: ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (ADCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4580d400 {
                                                                    return Some (Opcode :: SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SBCLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500c800 {
                                                                return Some (Opcode :: UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UABALB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500cc00 {
                                                                return Some (Opcode :: UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UABALT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0xff3ff800 == 0x4500d800 {
                                                                return Some (Opcode :: CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 (CADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ff800 == 0x4501d800 {
                                                                return Some (Opcode :: SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 (SQCADD_SVE_Zd_SVE_Zd_SVE_Zn_SVE_IMM_ROT3 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc500c000 {
                                                            return Some (Opcode :: LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D (LDNT1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZX_S_D :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc580c000 {
                                                            return Some (Opcode :: LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc540c000 {
                                                            return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc5c0c000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc520c000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc560c000 {
                                                        return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffa0e000 == 0x45a0c000 {
                                                        return Some (Opcode :: HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (HISTCNT_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc5a0c000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc5e0c000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x004000 == 0 {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x45003000 {
                                                            return Some (Opcode :: SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x45003800 {
                                                            return Some (Opcode :: UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UABDLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x45003400 {
                                                            return Some (Opcode :: SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x45003c00 {
                                                            return Some (Opcode :: UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UABDLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffa0e000 == 0xc5002000 {
                                                    return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202000 {
                                                                    return Some (Opcode :: SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203000 {
                                                                    return Some (Opcode :: UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (UQSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202800 {
                                                                    return Some (Opcode :: SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203800 {
                                                                    return Some (Opcode :: UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (UQRSHRNB_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202400 {
                                                                    return Some (Opcode :: SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203400 {
                                                                    return Some (Opcode :: UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (UQSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x45202c00 {
                                                                    return Some (Opcode :: SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (SQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x45203c00 {
                                                                    return Some (Opcode :: UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 (UQRSHRNT_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED_22 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5202000 {
                                                        return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_22 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0xfff0fc20 == 0x45b02800 {
                                                        return Some (Opcode :: SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 (SQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0fc20 == 0x45b03800 {
                                                        return Some (Opcode :: UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 (UQRSHRN_SVE_Zd_SME_Znx2_SME_SHRIMM4 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4500a000 {
                                                                return Some (Opcode :: SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 (SSHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500b000 {
                                                                return Some (Opcode :: BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 (BEXT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4500a800 {
                                                                return Some (Opcode :: USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 (USHLLB_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500b800 {
                                                                return Some (Opcode :: BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16 (BGRP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xffa0fc00 == 0x4500a400 {
                                                                return Some (Opcode :: SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 (SSHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500b400 {
                                                                return Some (Opcode :: BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16 (BDEP_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x4500ac00 {
                                                            return Some (Opcode :: USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 (USHLLT_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED_22 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xc540a000 {
                                                    return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x4520a000 {
                                                        return Some (Opcode :: HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16 (HISTSEG_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc520a000 {
                                                        return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0e000 == 0xc560a000 {
                                                    return Some (Opcode :: LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 (LDFF1SW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45006000 {
                                                                return Some (Opcode :: SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007000 {
                                                                return Some (Opcode :: SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x45006800 {
                                                                    return Some (Opcode :: PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (PMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff60fc00 == 0x45406800 {
                                                                    return Some (Opcode :: PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B (PMULLB_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007800 {
                                                                return Some (Opcode :: UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMULLB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45006400 {
                                                                return Some (Opcode :: SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SQDMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007400 {
                                                                return Some (Opcode :: SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0xffe0fc00 == 0x45006c00 {
                                                                    return Some (Opcode :: PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (PMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff60fc00 == 0x45406c00 {
                                                                    return Some (Opcode :: PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B (PMULLT_SVE_Zd_S_H_SVE_Zn_S_B_SVE_Zm_16_S_B :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45007c00 {
                                                                return Some (Opcode :: UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 (UMULLT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc5006000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D (LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5806000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206000 {
                                                                return Some (Opcode :: ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 (ADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207000 {
                                                                return Some (Opcode :: SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 (SUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206800 {
                                                                return Some (Opcode :: RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 (RADDHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207800 {
                                                                return Some (Opcode :: RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 (RSUBHNB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206400 {
                                                                return Some (Opcode :: ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 (ADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207400 {
                                                                return Some (Opcode :: SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 (SUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x45206c00 {
                                                                return Some (Opcode :: RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 (RADDHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x45207c00 {
                                                                return Some (Opcode :: RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 (RSUBHNT_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0e000 == 0xc5206000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D (LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RZ_XTW2_22_S_D :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffa0e000 == 0xc5a06000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_22 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500e000 {
                                                                return Some (Opcode :: SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (SSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500f000 {
                                                                return Some (Opcode :: SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (SRI_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500e800 {
                                                                return Some (Opcode :: SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (SRSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500f800 {
                                                                return Some (Opcode :: SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 (SABA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500e400 {
                                                                return Some (Opcode :: USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (USRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500f400 {
                                                                return Some (Opcode :: SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED (SLI_SVE_Zd_SVE_Zn_SVE_SHLIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x4500ec00 {
                                                                return Some (Opcode :: URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED (URSRA_SVE_Zd_SVE_Zn_SVE_SHRIMM_UNPRED :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4500fc00 {
                                                                return Some (Opcode :: UABA_SVE_Zd_SVE_Zn_SVE_Zm_16 (UABA_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e010 == 0xc500e000 {
                                                            return Some (Opcode :: PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000 (PRFW_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x4_c500e000 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e010 == 0xc580e000 {
                                                            return Some (Opcode :: PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000 (PRFD_SVE_PRFOP_SVE_Pg3_SVE_ADDR_ZI_U5x8_c580e000 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xc540e000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc5c0e000 {
                                                            return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0x80000000 == 0 {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0x020000 == 0 {
                                                                        if insn & 0xffffffe0
                                                                            == 0x4520e000
                                                                        {
                                                                            return Some (Opcode :: AESMC_SVE_Zd_SVE_Zd (AESMC_SVE_Zd_SVE_Zd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffc00
                                                                            == 0x4522e000
                                                                        {
                                                                            return Some (Opcode :: AESE_SVE_Zd_SVE_Zd_SVE_Zn (AESE_SVE_Zd_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4523e000
                                                                    {
                                                                        return Some (Opcode :: SM4E_SVE_Zd_SVE_Zd_SVE_Zn (SM4E_SVE_Zd_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4520f000 {
                                                                    return Some (Opcode :: SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 (SM4EKEY_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0x020000 == 0 {
                                                                    if insn & 0xffffffe0
                                                                        == 0x4520e400
                                                                    {
                                                                        return Some (Opcode :: AESIMC_SVE_Zd_SVE_Zd (AESIMC_SVE_Zd_SVE_Zd :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4522e400
                                                                    {
                                                                        return Some (Opcode :: AESD_SVE_Zd_SVE_Zd_SVE_Zn (AESD_SVE_Zd_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0x4520f400 {
                                                                    return Some (Opcode :: RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16 (RAX1_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xc520e000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D (LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_ZI_U5x4_S_D :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5a0e000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xc560e000 {
                                                        return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xc5e0e000 {
                                                        return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x008000 == 0 {
                            if insn & 0x004000 == 0 {
                                if insn & 0x002000 == 0 {
                                    if insn & 0x40000000 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x25000000 {
                                                        return Some (Opcode :: CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 (CMPGE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x25000010 {
                                                        return Some (Opcode :: CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 (CMPGT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xa5000000 {
                                                        return Some (Opcode :: LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa5800000 {
                                                        return Some (Opcode :: LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200000 {
                                                                    return Some (Opcode :: WHILEGE_SVE_Pd_Rn_Rm (WHILEGE_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201000 {
                                                                    return Some (Opcode :: WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X (WHILEGE_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200800 {
                                                                    return Some (Opcode :: WHILEHS_SVE_Pd_Rn_Rm (WHILEHS_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201800 {
                                                                    return Some (Opcode :: WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X (WHILEHS_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200400 {
                                                                    return Some (Opcode :: WHILELT_SVE_Pd_Rn_Rm (WHILELT_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201400 {
                                                                    return Some (Opcode :: WHILELT_SVE_Pd_S_B_Rn_X_Rm_X (WHILELT_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200c00 {
                                                                    return Some (Opcode :: WHILELO_SVE_Pd_Rn_Rm (WHILELO_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201c00 {
                                                                    return Some (Opcode :: WHILELO_SVE_Pd_S_B_Rn_X_Rm_X (WHILELO_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200010 {
                                                                    return Some (Opcode :: WHILEGT_SVE_Pd_Rn_Rm (WHILEGT_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201010 {
                                                                    return Some (Opcode :: WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X (WHILEGT_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200810 {
                                                                    return Some (Opcode :: WHILEHI_SVE_Pd_Rn_Rm (WHILEHI_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201810 {
                                                                    return Some (Opcode :: WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X (WHILEHI_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200410 {
                                                                    return Some (Opcode :: WHILELE_SVE_Pd_Rn_Rm (WHILELE_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201410 {
                                                                    return Some (Opcode :: WHILELE_SVE_Pd_S_B_Rn_X_Rm_X (WHILELE_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff20fc10 == 0x25200c10 {
                                                                    return Some (Opcode :: WHILELS_SVE_Pd_Rn_Rm (WHILELS_SVE_Pd_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc10 == 0x25201c10 {
                                                                    return Some (Opcode :: WHILELS_SVE_Pd_S_B_Rn_X_Rm_X (WHILELS_SVE_Pd_S_B_Rn_X_Rm_X :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xa5200000 {
                                                        return Some (Opcode :: LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa5a00000 {
                                                        return Some (Opcode :: LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x65000000 {
                                                            return Some (Opcode :: FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0fc00 == 0x65000000 {
                                                            return Some (Opcode :: FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 (FADD_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x65000800 {
                                                                return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                            if insn & 0xffe0fc00 == 0x65000800 {
                                                                return Some (Opcode :: FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (FMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x65001800 {
                                                                return Some (Opcode :: FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16 (FRECPS_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0xff20fc00 == 0x65000400 {
                                                            return Some (Opcode :: FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0fc00 == 0x65000400 {
                                                            return Some (Opcode :: FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 (FSUB_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0xff20fc00 == 0x65000c00 {
                                                                return Some (Opcode :: FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 (FTSMUL_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x65001c00 {
                                                                return Some (Opcode :: FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 (FRSQRTS_SVE_Zd_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff20e000 == 0x65200000 {
                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                                if insn & 0xffe0e000 == 0x65200000 {
                                                    return Some (Opcode :: FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0xffc0e010 == 0xe5800000 {
                                                return Some(
                                                    Opcode::STR_SVE_PNt_SVE_ADDR_RI_S9xVL(
                                                        STR_SVE_PNt_SVE_ADDR_RI_S9xVL::from(insn),
                                                    ),
                                                );
                                            }
                                            if insn & 0xffc0e010 == 0xe5800000 {
                                                return Some(
                                                    Opcode::STR_SVE_PNt_SVE_ADDR_RI_S9xVL(
                                                        STR_SVE_PNt_SVE_ADDR_RI_S9xVL::from(insn),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x25002000 {
                                                        return Some (Opcode :: CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 (CMPLT_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x25002010 {
                                                        return Some (Opcode :: CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 (CMPLE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xfff0e000 == 0xa5002000 {
                                                        return Some (Opcode :: LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 (LD1RQW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa5802000 {
                                                        return Some (Opcode :: LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 (LD1RQD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x16 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65002000
                                                                    {
                                                                        return Some (Opcode :: FADDV_SVE_Vd_SVE_Pg3_SVE_Zn (FADDV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x000010 == 0 {
                                                                        if insn & 0xff3fe010
                                                                            == 0x65102000
                                                                        {
                                                                            return Some (Opcode :: FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 (FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3fe010
                                                                            == 0x65102010
                                                                        {
                                                                            return Some (Opcode :: FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 (FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x65182000 {
                                                                    return Some (Opcode :: FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 (FADDA_SVE_Vd_SVE_Pg3_SVE_Vd_SVE_Zm_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x65042000 {
                                                                return Some (Opcode :: FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn (FMAXNMV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0xff3fe010 == 0x65122000 {
                                                                return Some (Opcode :: FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 (FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x65062000 {
                                                                    return Some (Opcode :: FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn (FMAXV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x650e3000 {
                                                                    return Some (Opcode :: FRECPE_SVE_Zd_SVE_Zn (FRECPE_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x000010 == 0 {
                                                                if insn & 0xff3fe010 == 0x65112000 {
                                                                    return Some (Opcode :: FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 (FCMLT_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe010 == 0x65112010 {
                                                                    return Some (Opcode :: FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 (FCMLE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x65052000 {
                                                                return Some (Opcode :: FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn (FMINNMV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0xff3fe010 == 0x65132000 {
                                                                return Some (Opcode :: FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 (FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_FPIMM0 :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fe000 == 0x65072000 {
                                                                    return Some (Opcode :: FMINV_SVE_Vd_SVE_Pg3_SVE_Zn (FMINV_SVE_Vd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x650f3000 {
                                                                    return Some (Opcode :: FRSQRTE_SVE_Zd_SVE_Zn (FRSQRTE_SVE_Zd_SVE_Zn :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5002000 {
                                                            return Some (Opcode :: STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5802000 {
                                                            return Some (Opcode :: STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX (STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe5402000 {
                                                        return Some (Opcode :: STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX (STNT1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZX :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0xffa0fc1f == 0x25a02000 {
                                                            return Some(Opcode::CTERMEQ_Rn_Rm(
                                                                CTERMEQ_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc10 == 0x25203000 {
                                                            return Some(
                                                                Opcode::WHILEWR_SVE_Pd_Rn_Rm(
                                                                    WHILEWR_SVE_Pd_Rn_Rm::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0xffa0fc1f == 0x25a02010 {
                                                            return Some(Opcode::CTERMNE_Rn_Rm(
                                                                CTERMNE_Rn_Rm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc10 == 0x25203010 {
                                                            return Some(
                                                                Opcode::WHILERW_SVE_Pd_Rn_Rm(
                                                                    WHILERW_SVE_Pd_Rn_Rm::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xfff0e000 == 0xa5202000 {
                                                        return Some (Opcode :: LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 (LD1ROW_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0e000 == 0xa5a02000 {
                                                        return Some (Opcode :: LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 (LD1ROD_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x32 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0xff20e000 == 0x65202000 {
                                                return Some(
                                                    Opcode::FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(
                                                        FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                            if insn & 0xffe0e000 == 0x65202000 {
                                                return Some(
                                                    Opcode::FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16(
                                                        FMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000200 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x000010 == 0 {
                                                                if insn & 0xfff0c210 == 0x25004000 {
                                                                    return Some (Opcode :: AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (AND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0c210 == 0x25004010 {
                                                                    return Some (Opcode :: BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BIC_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xffffc200 == 0x25104000 {
                                                                    return Some (Opcode :: BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn (BRKA_SVE_Pd_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffc210 == 0x25184000 {
                                                                    return Some (Opcode :: BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd (BRKN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000010 == 0 {
                                                            if insn & 0xfff0c210 == 0x25004200 {
                                                                return Some (Opcode :: EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (EOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25004210 {
                                                                return Some (Opcode :: SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (SEL_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5004000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5006000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5006000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000200 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x000010 == 0 {
                                                                if insn & 0xfff0c210 == 0x25804000 {
                                                                    return Some (Opcode :: ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (ORR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfff0c210 == 0x25804010 {
                                                                    return Some (Opcode :: ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (ORN_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffffc200 == 0x25904000 {
                                                                return Some (Opcode :: BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn (BRKB_SVE_Pd_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000010 == 0 {
                                                            if insn & 0xfff0c210 == 0x25804200 {
                                                                return Some (Opcode :: NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (NOR_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25804210 {
                                                                return Some (Opcode :: NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (NAND_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5804000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5806000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5806000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000010 == 0 {
                                                        if insn & 0x000200 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xfff0c210 == 0x25404000 {
                                                                    return Some (Opcode :: ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (ANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xffffc210
                                                                        == 0x25504000
                                                                    {
                                                                        return Some (Opcode :: BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn (BRKAS_SVE_Pd_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffc210
                                                                        == 0x25584000
                                                                    {
                                                                        return Some (Opcode :: BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd (BRKNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pd :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25404200 {
                                                                return Some (Opcode :: EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (EORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xfff0c210 == 0x25404010 {
                                                            return Some (Opcode :: BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BICS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5404000 {
                                                            return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5406000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5406000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x80000000 == 0 {
                                                    if insn & 0x000010 == 0 {
                                                        if insn & 0x000200 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xfff0c210 == 0x25c04000 {
                                                                    return Some (Opcode :: ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (ORRS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffffc210 == 0x25d04000 {
                                                                    return Some (Opcode :: BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn (BRKBS_SVE_Pd_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25c04200 {
                                                                return Some (Opcode :: NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (NORS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000200 == 0 {
                                                            if insn & 0xfff0c210 == 0x25c04010 {
                                                                return Some (Opcode :: ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (ORNS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0c210 == 0x25c04210 {
                                                                return Some (Opcode :: NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (NANDS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5c04000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX (LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5c06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5c06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0xff20c210 == 0x25204000 {
                                                    return Some (Opcode :: PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm (PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm :: from (insn))) ;
                                                }
                                                if insn & 0xff20c210 == 0x25204000 {
                                                    return Some (Opcode :: PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm (PSEL_SVE_PNd_SVE_PNg4_10_SME_PnT_Wm_imm :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x000400 == 0 {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000008 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204010 {
                                                                    return Some (Opcode :: WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILEGE_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204018 {
                                                                    return Some (Opcode :: WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILEGT_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x002000 == 0 {
                                                                if insn & 0x000001 == 0 {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205010
                                                                    {
                                                                        return Some (Opcode :: WHILEGE_SME_Pdx2_Rn_Rm (WHILEGE_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205011
                                                                    {
                                                                        return Some (Opcode :: WHILEGT_SME_Pdx2_Rn_Rm (WHILEGT_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc10 == 0x25207010 {
                                                                    return Some (Opcode :: PEXT_SVE_Pd_SME_PNn3_INDEX2 (PEXT_SVE_Pd_SME_PNn3_INDEX2 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000008 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204810 {
                                                                    return Some (Opcode :: WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILEHS_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204818 {
                                                                    return Some (Opcode :: WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILEHI_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x002000 == 0 {
                                                                if insn & 0x000001 == 0 {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205810
                                                                    {
                                                                        return Some (Opcode :: WHILEHS_SME_Pdx2_Rn_Rm (WHILEHS_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205811
                                                                    {
                                                                        return Some (Opcode :: WHILEHI_SME_Pdx2_Rn_Rm (WHILEHI_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffff8 == 0x25207810 {
                                                                    return Some(
                                                                        Opcode::PTRUE_SME_PNd3(
                                                                            PTRUE_SME_PNd3::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000800 == 0 {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000008 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204410 {
                                                                    return Some (Opcode :: WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILELT_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204418 {
                                                                    return Some (Opcode :: WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILELE_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x002000 == 0 {
                                                                if insn & 0x000001 == 0 {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205410
                                                                    {
                                                                        return Some (Opcode :: WHILELT_SME_Pdx2_Rn_Rm (WHILELT_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff20fc11
                                                                        == 0x25205411
                                                                    {
                                                                        return Some (Opcode :: WHILELE_SME_Pdx2_Rn_Rm (WHILELE_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe10 == 0x25207410 {
                                                                    return Some (Opcode :: PEXT_SME_PdxN_SME_PNn3_INDEX1 (PEXT_SME_PdxN_SME_PNn3_INDEX1 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x001000 == 0 {
                                                            if insn & 0x000008 == 0 {
                                                                if insn & 0xff20dc18 == 0x25204c10 {
                                                                    return Some (Opcode :: WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILELO_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20dc18 == 0x25204c18 {
                                                                    return Some (Opcode :: WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13 (WHILELS_SME_PNd3_Rn_Rm_SME_VLxN_13 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000001 == 0 {
                                                                if insn & 0xff20fc11 == 0x25205c10 {
                                                                    return Some (Opcode :: WHILELO_SME_Pdx2_Rn_Rm (WHILELO_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc11 == 0x25205c11 {
                                                                    return Some (Opcode :: WHILELS_SME_Pdx2_Rn_Rm (WHILELS_SME_Pdx2_Rn_Rm :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5204000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 (LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL1 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5a04000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX (LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RX :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5604000 {
                                                            return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2 (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5e04000 {
                                                            return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5206000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5206000 {
                                                            return Some (Opcode :: LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5a06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5a06000 {
                                                            return Some (Opcode :: LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa5606000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5606000 {
                                                            return Some (Opcode :: LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R (LDFF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5e06000 {
                                                            return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                        if insn & 0xffe0e000 == 0xa5e06000 {
                                                            return Some (Opcode :: LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R (LDFF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_R :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x65004000 {
                                                        return Some (Opcode :: FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FCMGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x65004010 {
                                                        return Some (Opcode :: FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FCMGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff20e000 == 0x65204000 {
                                                    return Some (Opcode :: FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FNMLA_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0xffc0e000 == 0xe5804000 {
                                                    return Some(
                                                        Opcode::STR_SVE_Zt_SVE_ADDR_RI_S9xVL(
                                                            STR_SVE_Zt_SVE_ADDR_RI_S9xVL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffe0e000 == 0xe5404000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5604000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5e04000 {
                                                            return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x65006000 {
                                                        return Some (Opcode :: FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FCMEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x65006010 {
                                                        return Some (Opcode :: FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FCMNE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5006000 {
                                                            return Some (Opcode :: STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5806000 {
                                                            return Some (Opcode :: STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5406000 {
                                                            return Some (Opcode :: ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5c06000 {
                                                            return Some (Opcode :: ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xff20e000 == 0x65206000 {
                                                    return Some (Opcode :: FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FNMLS_SVE_Zd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5206000 {
                                                            return Some (Opcode :: ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5a06000 {
                                                            return Some (Opcode :: ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe5606000 {
                                                            return Some (Opcode :: ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5e06000 {
                                                            return Some (Opcode :: ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x200000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0xff20e010 == 0x25008000 {
                                                    return Some(
                                                        Opcode::CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(
                                                            CMPEQ_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xff20e010 == 0x25008010 {
                                                    return Some(
                                                        Opcode::CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5(
                                                            CMPNE_SVE_Pd_SVE_Pg3_SVE_Zn_SIMM5::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x100000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa500a000 {
                                                            return Some (Opcode :: LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa580a000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa540a000 {
                                                            return Some (Opcode :: LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5c0a000 {
                                                            return Some (Opcode :: LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa510a000 {
                                                            return Some (Opcode :: LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1SH_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa590a000 {
                                                            return Some (Opcode :: LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1SB_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa550a000 {
                                                            return Some (Opcode :: LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5d0a000 {
                                                            return Some (Opcode :: LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1SB_SVE_ZtxN_S_H_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xfff0c210 == 0x2500c000 {
                                                            return Some (Opcode :: BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BRKPA_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0c210 == 0x2540c000 {
                                                            return Some (Opcode :: BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BRKPAS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0xffffc21f == 0x2550c000 {
                                                                return Some (Opcode :: PTEST_SVE_Pg4_10_SVE_Pn (PTEST_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x000400 == 0 {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0x002000 == 0 {
                                                                        if insn & 0xfffffe10
                                                                            == 0x2558c000
                                                                        {
                                                                            return Some (Opcode :: PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd (PFIRST_SVE_Pd_SVE_Pg4_5_SVE_Pd :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3ffc10
                                                                            == 0x2518e000
                                                                        {
                                                                            return Some (Opcode :: PTRUE_SVE_Pd_SVE_PATTERN (PTRUE_SVE_Pd_SVE_PATTERN :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x400000 == 0 {
                                                                        if insn & 0xfffffe10
                                                                            == 0x2518f000
                                                                        {
                                                                            return Some (Opcode :: RDFFR_SVE_Pd_SVE_Pg4_5 (RDFFR_SVE_Pd_SVE_Pg4_5 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffe10
                                                                            == 0x2558f000
                                                                        {
                                                                            return Some (Opcode :: RDFFRS_SVE_Pd_SVE_Pg4_5 (RDFFRS_SVE_Pd_SVE_Pg4_5 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xfffffff0 == 0x2518e400 {
                                                                    return Some(
                                                                        Opcode::PFALSE_SVE_PNd(
                                                                            PFALSE_SVE_PNd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffff0 == 0x2518e400 {
                                                                    return Some(
                                                                        Opcode::PFALSE_SVE_PNd(
                                                                            PFALSE_SVE_PNd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x001000 == 0 {
                                                                if insn & 0xff3ffc10 == 0x2519e000 {
                                                                    return Some (Opcode :: PTRUES_SVE_Pd_SVE_PATTERN (PTRUES_SVE_Pd_SVE_PATTERN :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffff0 == 0x2519f000 {
                                                                    return Some(
                                                                        Opcode::RDFFR_SVE_Pd(
                                                                            RDFFR_SVE_Pd::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffe10 == 0x2519c400 {
                                                                return Some (Opcode :: PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd (PNEXT_SVE_Pd_SVE_Pg4_5_SVE_Pd :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0xfff0c210 == 0x2500c010 {
                                                        return Some (Opcode :: BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BRKPB_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff0c210 == 0x2540c010 {
                                                        return Some (Opcode :: BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm (BRKPBS_SVE_Pd_SVE_Pg4_10_SVE_Pn_SVE_Pm :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa500c000 {
                                                            return Some (Opcode :: LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa580c000 {
                                                            return Some (Opcode :: LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa540c000 {
                                                            return Some (Opcode :: LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5c0c000 {
                                                            return Some (Opcode :: LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa500e000 {
                                                                return Some (Opcode :: LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa580e000 {
                                                                return Some (Opcode :: LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa540e000 {
                                                                return Some (Opcode :: LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (LD3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5c0e000 {
                                                                return Some (Opcode :: LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (LD3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa510e000 {
                                                            return Some (Opcode :: LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa590e000 {
                                                            return Some (Opcode :: LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x080000 == 0 {
                                                    if insn & 0x100000 == 0 {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x020000 == 0 {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65008000
                                                                    {
                                                                        return Some (Opcode :: FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65008000
                                                                    {
                                                                        return Some (Opcode :: FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65048000
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65048000
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65028000
                                                                    {
                                                                        return Some (Opcode :: FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65028000
                                                                    {
                                                                        return Some (Opcode :: FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65068000
                                                                    {
                                                                        return Some (Opcode :: FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65068000
                                                                    {
                                                                        return Some (Opcode :: FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x020000 == 0 {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65018000
                                                                    {
                                                                        return Some (Opcode :: FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65018000
                                                                    {
                                                                        return Some (Opcode :: FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65058000
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65058000
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65038000
                                                                    {
                                                                        return Some (Opcode :: FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65078000
                                                                    {
                                                                        return Some (Opcode :: FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                    if insn & 0xffffe000
                                                                        == 0x65078000
                                                                    {
                                                                        return Some (Opcode :: FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff38fc00 == 0x65108000 {
                                                            return Some (Opcode :: FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3 (FTMAD_SVE_Zd_SVE_Zd_SVE_Zm_5_SVE_UIMM3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x020000 == 0 {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65088000
                                                                    {
                                                                        return Some (Opcode :: FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FABD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x65188000
                                                                    {
                                                                        return Some (Opcode :: FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE (FADD_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650c8000
                                                                    {
                                                                        return Some (Opcode :: FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FDIVR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x651c8000
                                                                    {
                                                                        return Some (Opcode :: FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE (FMAXNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650a8000
                                                                    {
                                                                        return Some (Opcode :: FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FMULX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x651a8000
                                                                    {
                                                                        return Some (Opcode :: FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO (FMUL_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_TWO :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe3c0 == 0x651e8000 {
                                                                    return Some (Opcode :: FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE (FMAX_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x020000 == 0 {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x65098000
                                                                    {
                                                                        return Some (Opcode :: FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FSCALE_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x65198000
                                                                    {
                                                                        return Some (Opcode :: FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE (FSUB_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650d8000
                                                                    {
                                                                        return Some (Opcode :: FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 (FDIV_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_Zm_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe3c0
                                                                        == 0x651d8000
                                                                    {
                                                                        return Some (Opcode :: FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE (FMINNM_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0xff3fe3c0 == 0x651b8000 {
                                                                    return Some (Opcode :: FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE (FSUBR_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_HALF_ONE :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe3c0 == 0x651f8000 {
                                                                    return Some (Opcode :: FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE (FMIN_SVE_Zd_SVE_Pg3_SVE_Zd_SVE_I1_ZERO_ONE :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20e010 == 0x6500c000 {
                                                        return Some (Opcode :: FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FCMUO_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xff20e010 == 0x6500c010 {
                                                        return Some (Opcode :: FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FACGE_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0a000 == 0xe5008000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe5808000 {
                                                        return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0a000 == 0xe5408000 {
                                                    return Some (Opcode :: ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 (ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW_14 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x080000 == 0 {
                                                        if insn & 0x020000 == 0 {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6500a000
                                                                    {
                                                                        return Some (Opcode :: FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTN_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65d0a000
                                                                    {
                                                                        return Some (Opcode :: SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn (SCVTF_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6504a000
                                                                    {
                                                                        return Some (Opcode :: FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTA_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x400000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6594a000
                                                                        {
                                                                            return Some (Opcode :: SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S (SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0x800000 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x6554a000
                                                                            {
                                                                                return Some (Opcode :: SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S (SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65d4a000
                                                                            {
                                                                                return Some (Opcode :: SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D (SCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6502a000
                                                                    {
                                                                        return Some (Opcode :: FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTM_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x6552a000
                                                                    {
                                                                        return Some (Opcode :: SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H (SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6506a000
                                                                    {
                                                                        return Some (Opcode :: FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTX_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6556a000
                                                                        {
                                                                            return Some (Opcode :: SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D (SCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d6a000
                                                                        {
                                                                            return Some (Opcode :: SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D (SCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0x020000 == 0 {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0x400000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6588a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zd_SVE_Pg3_SVE_Zn (FCVT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65c8a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D (FCVT_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650ca000
                                                                    {
                                                                        return Some (Opcode :: FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn (FRECPX_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x650aa000
                                                                        {
                                                                            return Some (Opcode :: FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTX_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x658aa000
                                                                        {
                                                                            return Some (Opcode :: BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn (BFCVT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65caa000
                                                                    {
                                                                        return Some (Opcode :: FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D (FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xfff9e000
                                                                        == 0x6518a000
                                                                    {
                                                                        return Some (Opcode :: FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn (FLOGB_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x659ca000
                                                                    {
                                                                        return Some (Opcode :: FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTZS_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x020000 == 0 {
                                                                    if insn & 0x040000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d8a000
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D (FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0x800000 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x655ca000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H (FCVTZS_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65dca000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S (FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x040000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x655aa000
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H (FCVTZS_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0x800000 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x655ea000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H (FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65dea000
                                                                            {
                                                                                return Some (Opcode :: FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D (FCVTZS_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6501a000
                                                                    {
                                                                        return Some (Opcode :: FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTP_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65d1a000
                                                                    {
                                                                        return Some (Opcode :: UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn (UCVTF_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0x400000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6589a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H (FCVT_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65c9a000
                                                                        {
                                                                            return Some (Opcode :: FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H (FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65d9a000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn (FCVTZU_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x400000 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x6595a000
                                                                    {
                                                                        return Some (Opcode :: UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S (UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6555a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S (UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d5a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D (UCVTF_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x650da000
                                                                    {
                                                                        return Some (Opcode :: FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn (FSQRT_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x400000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x659da000
                                                                        {
                                                                            return Some (Opcode :: FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S (FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0x800000 == 0 {
                                                                            if insn & 0xffffe000
                                                                                == 0x655da000
                                                                            {
                                                                                return Some (Opcode :: FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H (FCVTZU_SVE_Zd_S_S_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xffffe000
                                                                                == 0x65dda000
                                                                            {
                                                                                return Some (Opcode :: FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S (FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6503a000
                                                                    {
                                                                        return Some (Opcode :: FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTZ_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x6553a000
                                                                    {
                                                                        return Some (Opcode :: UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H (UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x65cba000
                                                                    {
                                                                        return Some (Opcode :: FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S (FCVT_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_S :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x655ba000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H (FCVTZU_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xff3fe000
                                                                        == 0x6507a000
                                                                    {
                                                                        return Some (Opcode :: FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn (FRINTI_SVE_Zd_SVE_Pg3_SVE_Zn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xffffe000
                                                                            == 0x6557a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D (UCVTF_SVE_Zd_S_H_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffffe000
                                                                            == 0x65d7a000
                                                                        {
                                                                            return Some (Opcode :: UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D (UCVTF_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xffffe000
                                                                        == 0x655fa000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H (FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffffe000
                                                                        == 0x65dfa000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D (FCVTZU_SVE_Zd_S_D_SVE_Pg3_P_M_SVE_Zn_S_D :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe500a000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe580a000 {
                                                            return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe540a000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5c0a000 {
                                                            return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_ZI_U5x8 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xff20e010 == 0x6500e010 {
                                                    return Some (Opcode :: FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 (FACGT_SVE_Pd_SVE_Pg3_SVE_Zn_SVE_Zm_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0xfff0e000 == 0xe540e000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe510e000 {
                                                                return Some (Opcode :: STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (STNT1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe590e000 {
                                                                return Some (Opcode :: STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (STNT1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe550e000 {
                                                                return Some (Opcode :: ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (ST3W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe5d0e000 {
                                                                return Some (Opcode :: ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL (ST3D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x3xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x000200 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xff3fc200 == 0x25208000 {
                                                                    return Some (Opcode :: CNTP_Rd_SVE_Pg4_10_SVE_Pn (CNTP_Rd_SVE_Pg4_10_SVE_Pn :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x000400 == 0 {
                                                                    if insn & 0x000800 == 0 {
                                                                        if insn & 0x001000 == 0 {
                                                                            if insn & 0xff3ffe00
                                                                                == 0x25288000
                                                                            {
                                                                                return Some (Opcode :: SQINCP_SVE_Zd_SVE_Pg4_5 (SQINCP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                            }
                                                                        } else {
                                                                            if insn & 0xfffffe1f
                                                                                == 0x25289000
                                                                            {
                                                                                return Some (Opcode :: WRFFR_SVE_Pn (WRFFR_SVE_Pn :: from (insn))) ;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if insn & 0xff3ffe00
                                                                            == 0x25288800
                                                                        {
                                                                            return Some (Opcode :: SQINCP_Rd_SVE_Pg4_5_Rd (SQINCP_Rd_SVE_Pg4_5_Rd :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x25288c00
                                                                    {
                                                                        return Some (Opcode :: SQINCP_Rd_SVE_Pg4_5 (SQINCP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x000800 == 0 {
                                                                if insn & 0x001000 == 0 {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x252c8000
                                                                    {
                                                                        return Some (Opcode :: INCP_SVE_Zd_SVE_Pg4_5 (INCP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn == 0x252c9000 {
                                                                        return Some(
                                                                            Opcode::SETFFR(
                                                                                SETFFR::from(insn),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252c8800 {
                                                                    return Some(
                                                                        Opcode::INCP_Rd_SVE_Pg4_5(
                                                                            INCP_Rd_SVE_Pg4_5::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x000400 == 0 {
                                                            if insn & 0x000800 == 0 {
                                                                if insn & 0xff3ffe00 == 0x252a8000 {
                                                                    return Some (Opcode :: SQDECP_SVE_Zd_SVE_Pg4_5 (SQDECP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252a8800 {
                                                                    return Some (Opcode :: SQDECP_Rd_SVE_Pg4_5_Rd (SQDECP_Rd_SVE_Pg4_5_Rd :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffe00 == 0x252a8c00 {
                                                                return Some(
                                                                    Opcode::SQDECP_Rd_SVE_Pg4_5(
                                                                        SQDECP_Rd_SVE_Pg4_5::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x000400 == 0 {
                                                        if insn & 0x000800 == 0 {
                                                            if insn & 0x020000 == 0 {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x25298000
                                                                    {
                                                                        return Some (Opcode :: UQINCP_SVE_Zd_SVE_Pg4_5 (UQINCP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x252d8000
                                                                    {
                                                                        return Some (Opcode :: DECP_SVE_Zd_SVE_Pg4_5 (DECP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252b8000 {
                                                                    return Some (Opcode :: UQDECP_SVE_Zd_SVE_Pg4_5 (UQDECP_SVE_Zd_SVE_Pg4_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x020000 == 0 {
                                                                if insn & 0x040000 == 0 {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x25298800
                                                                    {
                                                                        return Some (Opcode :: UQINCP_Rd_SVE_Pg4_5 (UQINCP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffe00
                                                                        == 0x252d8800
                                                                    {
                                                                        return Some (Opcode :: DECP_Rd_SVE_Pg4_5 (DECP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffe00 == 0x252b8800 {
                                                                    return Some (Opcode :: UQDECP_Rd_SVE_Pg4_5 (UQDECP_Rd_SVE_Pg4_5 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x020000 == 0 {
                                                            if insn & 0xff3ffe00 == 0x25298c00 {
                                                                return Some (Opcode :: UQINCP_Rd_X_SVE_Pg4_5_S_B (UQINCP_Rd_X_SVE_Pg4_5_S_B :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffe00 == 0x252b8c00 {
                                                                return Some (Opcode :: UQDECP_Rd_X_SVE_Pg4_5_S_B (UQDECP_Rd_X_SVE_Pg4_5_S_B :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff3ffa00 == 0x25208200 {
                                                    return Some(
                                                        Opcode::CNTP_Rd_SME_PNn_SME_VLxN_10(
                                                            CNTP_Rd_SME_PNn_SME_VLxN_10::from(insn),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0e000 == 0xa5208000 {
                                                        return Some (Opcode :: LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 (LD3Q_SME_Zt3_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xa5a08000 {
                                                        return Some (Opcode :: LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 (LD4Q_SME_Zt4_SVE_Pg3_SVE_ADDR_RR_LSL4 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa520a000 {
                                                                return Some (Opcode :: LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5a0a000 {
                                                                return Some (Opcode :: LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa560a000 {
                                                                return Some (Opcode :: LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LD1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5e0a000 {
                                                                return Some (Opcode :: LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LD1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa530a000 {
                                                                return Some (Opcode :: LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1SH_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5b0a000 {
                                                                return Some (Opcode :: LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1SB_SVE_ZtxN_S_S_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xa570a000 {
                                                                return Some (Opcode :: LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL (LDNF1W_SVE_ZtxN_S_D_SVE_Pg3_P_Z_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xa5f0a000 {
                                                                return Some (Opcode :: LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (LDNF1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x010000 == 0 {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fc000 == 0x2520c000 {
                                                                    return Some (Opcode :: ADD_SVE_Zd_SVE_Zd_SVE_AIMM (ADD_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x2530c000 {
                                                                    return Some (Opcode :: MUL_SVE_Zd_SVE_Zd_SVE_SIMM8 (MUL_SVE_Zd_SVE_Zd_SVE_SIMM8 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x2528c000 {
                                                                    return Some (Opcode :: SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8 (SMAX_SVE_Zd_SVE_Zd_SVE_SIMM8 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fc000 == 0x2538c000 {
                                                                    return Some (Opcode :: DUP_SVE_Zd_SVE_ASIMM (DUP_SVE_Zd_SVE_ASIMM :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2524c000 {
                                                            return Some (Opcode :: SQADD_SVE_Zd_SVE_Zd_SVE_AIMM (SQADD_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0xff3fe000 == 0x252ac000 {
                                                            return Some (Opcode :: SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8 (SMIN_SVE_Zd_SVE_Zd_SVE_SIMM8 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2526c000 {
                                                            return Some (Opcode :: SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM (SQSUB_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0xff3fc000 == 0x2521c000 {
                                                                return Some (Opcode :: SUB_SVE_Zd_SVE_Zd_SVE_AIMM (SUB_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xff3fe000 == 0x2529c000 {
                                                                    return Some (Opcode :: UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8 (UMAX_SVE_Zd_SVE_Zd_SVE_UIMM8 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3fe000 == 0x2539c000 {
                                                                    return Some (Opcode :: FDUP_SVE_Zd_SVE_FPIMM8 (FDUP_SVE_Zd_SVE_FPIMM8 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2525c000 {
                                                            return Some (Opcode :: UQADD_SVE_Zd_SVE_Zd_SVE_AIMM (UQADD_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0xff3fc000 == 0x2523c000 {
                                                                return Some (Opcode :: SUBR_SVE_Zd_SVE_Zd_SVE_AIMM (SUBR_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3fe000 == 0x252bc000 {
                                                                return Some (Opcode :: UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8 (UMIN_SVE_Zd_SVE_Zd_SVE_UIMM8 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3fc000 == 0x2527c000 {
                                                            return Some (Opcode :: UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM (UQSUB_SVE_Zd_SVE_Zd_SVE_AIMM :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa520c000 {
                                                            return Some (Opcode :: LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5a0c000 {
                                                            return Some (Opcode :: LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xa560c000 {
                                                            return Some (Opcode :: LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 (LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xa5e0c000 {
                                                            return Some (Opcode :: LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 (LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RX_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa520e000 {
                                                            return Some (Opcode :: LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5a0e000 {
                                                            return Some (Opcode :: LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (LD2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xa560e000 {
                                                            return Some (Opcode :: LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (LD4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xa5e0e000 {
                                                            return Some (Opcode :: LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (LD4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x80000000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0xff20e000 == 0x65208000 {
                                                    return Some (Opcode :: FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 (FMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xff20e000 == 0x6520c000 {
                                                    return Some (Opcode :: FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 (FNMAD_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 :: from (insn))) ;
                                                }
                                            }
                                        } else {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0a000 == 0xe5208000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xffe0a000 == 0xe5a08000 {
                                                        return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14 (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_XTW3_14 :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0a000 == 0xe5608000 {
                                                    return Some (Opcode :: ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 (ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_RZ_XTW2_14 :: from (insn))) ;
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xff20e000 == 0x6520a000 {
                                                    return Some (Opcode :: FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 (FMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0e000 == 0xe520a000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 (ST1W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL2 :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0e000 == 0xe5a0a000 {
                                                            return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RZ_LSL3 :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0e000 == 0xe560a000 {
                                                        return Some (Opcode :: ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 (ST1W_SVE_ZtxN_S_S_SVE_Pg3_SVE_ADDR_ZI_U5x4 :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x80000000 == 0 {
                                                if insn & 0xff20e000 == 0x6520e000 {
                                                    return Some (Opcode :: FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 (FNMSB_SVE_Zd_SVE_Pg3_SVE_Zm_5_SVE_Za_16 :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0x100000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xfff0e000 == 0xe560e000 {
                                                            return Some (Opcode :: ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1W_SVE_ZtxN_S_D_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xfff0e000 == 0xe5e0e000 {
                                                            return Some (Opcode :: ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL (ST1D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4xVL :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe530e000 {
                                                                return Some (Opcode :: ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe5b0e000 {
                                                                return Some (Opcode :: ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL (ST2D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x2xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xfff0e000 == 0xe570e000 {
                                                                return Some (Opcode :: ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (ST4W_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfff0e000 == 0xe5f0e000 {
                                                                return Some (Opcode :: ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL (ST4D_SVE_ZtxN_SVE_Pg3_SVE_ADDR_RI_S4x4xVL :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                if insn & 0x20000000 == 0 {
                    if insn & 0x40000000 == 0 {
                        if insn & 0x80000000 == 0 {
                            if insn & 0xfc000000 == 0x14000000 {
                                return Some(Opcode::B_ADDR_PCREL26(B_ADDR_PCREL26::from(insn)));
                            }
                        } else {
                            if insn & 0xfc000000 == 0x94000000 {
                                return Some(Opcode::BL_ADDR_PCREL26(BL_ADDR_PCREL26::from(insn)));
                            }
                        }
                    } else {
                        if insn & 0x1000000 == 0 {
                            if insn & 0x000010 == 0 {
                                if insn & 0x2000000 == 0 {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0xff000010 == 0x54000000 {
                                            return Some(Opcode::B_C_ADDR_PCREL19(
                                                B_C_ADDR_PCREL19::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x000001 == 0 {
                                            if insn & 0x000002 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffe0001f == 0xd4400000 {
                                                        return Some(Opcode::HLT_EXCEPTION(
                                                            HLT_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xffe0001f == 0xd4200000 {
                                                            return Some(Opcode::BRK_EXCEPTION(
                                                                BRK_EXCEPTION::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0001f == 0xd4600000 {
                                                            return Some(
                                                                Opcode::TCANCEL_TME_UIMM16(
                                                                    TCANCEL_TME_UIMM16::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffe0001f == 0xd4000002 {
                                                        return Some(Opcode::HVC_EXCEPTION(
                                                            HVC_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0001f == 0xd4a00002 {
                                                        return Some(Opcode::DCPS2_EXCEPTION(
                                                            DCPS2_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000002 == 0 {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffe0001f == 0xd4000001 {
                                                        return Some(Opcode::SVC_EXCEPTION(
                                                            SVC_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0001f == 0xd4a00001 {
                                                        return Some(Opcode::DCPS1_EXCEPTION(
                                                            DCPS1_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x200000 == 0 {
                                                    if insn & 0xffe0001f == 0xd4000003 {
                                                        return Some(Opcode::SMC_EXCEPTION(
                                                            SMC_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0001f == 0xd4a00003 {
                                                        return Some(Opcode::DCPS3_EXCEPTION(
                                                            DCPS3_EXCEPTION::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xfffffc1f == 0xd61f0000 {
                                                    return Some(Opcode::BR_Rn(BR_Rn::from(insn)));
                                                }
                                            } else {
                                                if insn == 0xd69f03e0 {
                                                    return Some(Opcode::ERET(ERET::from(insn)));
                                                }
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0xd65f0000 {
                                                return Some(Opcode::RET_Rn(RET_Rn::from(insn)));
                                            }
                                        }
                                    } else {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0xfffffc1f == 0xd63f0000 {
                                                return Some(Opcode::BLR_Rn(BLR_Rn::from(insn)));
                                            }
                                        } else {
                                            if insn == 0xd6bf03e0 {
                                                return Some(Opcode::DRPS(DRPS::from(insn)));
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x2000000 == 0 {
                                    if insn & 0xff000010 == 0x54000010 {
                                        return Some(Opcode::BC_C_ADDR_PCREL19(
                                            BC_C_ADDR_PCREL19::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xfffffc1f == 0xd61f081f {
                                                        return Some(Opcode::BRAAZ_Rn(
                                                            BRAAZ_Rn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn == 0xd69f0bff {
                                                        return Some(Opcode::ERETAA(ERETAA::from(
                                                            insn,
                                                        )));
                                                    }
                                                }
                                            } else {
                                                if insn == 0xd65f0bff {
                                                    return Some(Opcode::RETAA(RETAA::from(insn)));
                                                }
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0xd63f081f {
                                                return Some(Opcode::BLRAAZ_Rn(BLRAAZ_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0x400000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xfffffc1f == 0xd61f0c1f {
                                                        return Some(Opcode::BRABZ_Rn(
                                                            BRABZ_Rn::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn == 0xd69f0fff {
                                                        return Some(Opcode::ERETAB(ERETAB::from(
                                                            insn,
                                                        )));
                                                    }
                                                }
                                            } else {
                                                if insn == 0xd65f0fff {
                                                    return Some(Opcode::RETAB(RETAB::from(insn)));
                                                }
                                            }
                                        } else {
                                            if insn & 0xfffffc1f == 0xd63f0c1f {
                                                return Some(Opcode::BLRABZ_Rn(BLRABZ_Rn::from(
                                                    insn,
                                                )));
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x200000 == 0 {
                                if insn & 0x400000 == 0 {
                                    if insn & 0x2000000 == 0 {
                                        if insn == 0xd500403f {
                                            return Some(Opcode::XAFLAG(XAFLAG::from(insn)));
                                        }
                                        if insn == 0xd500405f {
                                            return Some(Opcode::AXFLAG(AXFLAG::from(insn)));
                                        }
                                        if insn == 0xd503307f {
                                            return Some(Opcode::TCOMMIT(TCOMMIT::from(insn)));
                                        }
                                        if insn == 0xd503477f {
                                            return Some(Opcode::SMSTART(SMSTART::from(insn)));
                                        }
                                        if insn == 0xd503467f {
                                            return Some(Opcode::SMSTOP(SMSTOP::from(insn)));
                                        }
                                        if insn & 0xfffff1ff == 0xd503417f {
                                            return Some(Opcode::SMSTART_SME_SM_ZA(
                                                SMSTART_SME_SM_ZA::from(insn),
                                            ));
                                        }
                                        if insn & 0xfffff1ff == 0xd503407f {
                                            return Some(Opcode::SMSTOP_SME_SM_ZA(
                                                SMSTOP_SME_SM_ZA::from(insn),
                                            ));
                                        }
                                        if insn == 0xd503251f {
                                            return Some(Opcode::CHKFEAT_X16(CHKFEAT_X16::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfff8f01f == 0xd500401f {
                                            return Some(Opcode::MSR_PSTATEFIELD_UIMM4(
                                                MSR_PSTATEFIELD_UIMM4::from(insn),
                                            ));
                                        }
                                        if insn & 0xfffff01f == 0xd503201f {
                                            return Some(Opcode::HINT_UIMM7(HINT_UIMM7::from(
                                                insn,
                                            )));
                                        }
                                        if insn == 0xd50320df {
                                            return Some(Opcode::DGH(DGH::from(insn)));
                                        }
                                        if insn & 0xfffff0ff == 0xd503305f {
                                            return Some(Opcode::CLREX_UIMM4(CLREX_UIMM4::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfffff0ff == 0xd503309f {
                                            return Some(Opcode::DSB_BARRIER(DSB_BARRIER::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfffff3ff == 0xd503323f {
                                            return Some(Opcode::DSB_BARRIER_DSB_NXS(
                                                DSB_BARRIER_DSB_NXS::from(insn),
                                            ));
                                        }
                                        if insn & 0xfffff0ff == 0xd50330bf {
                                            return Some(Opcode::DMB_BARRIER(DMB_BARRIER::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfffff0ff == 0xd50330df {
                                            return Some(Opcode::ISB_BARRIER_ISB(
                                                ISB_BARRIER_ISB::from(insn),
                                            ));
                                        }
                                        if insn == 0xd50330ff {
                                            return Some(Opcode::SB(SB::from(insn)));
                                        }
                                        if insn == 0xd508779f {
                                            return Some(Opcode::GCSPUSHX(GCSPUSHX::from(insn)));
                                        }
                                        if insn == 0xd50877df {
                                            return Some(Opcode::GCSPOPX(GCSPOPX::from(insn)));
                                        }
                                        if insn == 0xd50877bf {
                                            return Some(Opcode::GCSPOPCX(GCSPOPCX::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd50b7740 {
                                            return Some(Opcode::GCSSS1_Rt(GCSSS1_Rt::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd50b7700 {
                                            return Some(Opcode::GCSPUSHM_Rt(GCSPUSHM_Rt::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfff80000 == 0xd5080000 {
                                            return Some(
                                                Opcode::SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt(
                                                    SYS_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt::from(insn),
                                                ),
                                            );
                                        }
                                        if insn & 0xffffffe0 == 0xd5031000 {
                                            return Some(Opcode::WFET_Rd(WFET_Rd::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd5031020 {
                                            return Some(Opcode::WFIT_Rd(WFIT_Rd::from(insn)));
                                        }
                                        if insn == 0xd500401f {
                                            return Some(Opcode::MSR_PSTATEFIELD_UIMM4(
                                                MSR_PSTATEFIELD_UIMM4::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe00000 == 0xd5000000 {
                                            return Some(Opcode::MSR_SYSREG_Rt(
                                                MSR_SYSREG_Rt::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x000400 == 0 {
                                            if insn & 0xfffffc00 == 0xd71f0800 {
                                                return Some(Opcode::BRAA_Rn_Rd_SP(
                                                    BRAA_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xfffffc00 == 0xd71f0c00 {
                                                return Some(Opcode::BRAB_Rn_Rd_SP(
                                                    BRAB_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x100000 == 0 {
                                        if insn & 0xfff80000 == 0xd5480000 {
                                            return Some (Opcode :: SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR (SYSP_UIMM3_OP1_CRn_CRm_UIMM3_OP2_Rt_PAIRREG_OR_XZR :: from (insn))) ;
                                        }
                                    } else {
                                        if insn & 0xfff00000 == 0xd5500000 {
                                            return Some(Opcode::MSRR_SYSREG128_Rt_PAIRREG(
                                                MSRR_SYSREG128_Rt_PAIRREG::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x400000 == 0 {
                                    if insn & 0x2000000 == 0 {
                                        if insn & 0xffffffe0 == 0xd5233060 {
                                            return Some(Opcode::TSTART_Rd(TSTART_Rd::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd5233160 {
                                            return Some(Opcode::TTEST_Rd(TTEST_Rd::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd52b7760 {
                                            return Some(Opcode::GCSSS2_Rt(GCSSS2_Rt::from(insn)));
                                        }
                                        if insn == 0xd52b773f {
                                            return Some(Opcode::GCSPOPM(GCSPOPM::from(insn)));
                                        }
                                        if insn & 0xffffffe0 == 0xd52b7720 {
                                            return Some(Opcode::GCSPOPM_Rt(GCSPOPM_Rt::from(
                                                insn,
                                            )));
                                        }
                                        if insn & 0xfff80000 == 0xd5280000 {
                                            return Some(
                                                Opcode::SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2(
                                                    SYSL_Rt_UIMM3_OP1_CRn_CRm_UIMM3_OP2::from(insn),
                                                ),
                                            );
                                        }
                                        if insn & 0xffe00000 == 0xd5200000 {
                                            return Some(Opcode::MRS_Rt_SYSREG(
                                                MRS_Rt_SYSREG::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x000400 == 0 {
                                            if insn & 0xfffffc00 == 0xd73f0800 {
                                                return Some(Opcode::BLRAA_Rn_Rd_SP(
                                                    BLRAA_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xfffffc00 == 0xd73f0c00 {
                                                return Some(Opcode::BLRAB_Rn_Rd_SP(
                                                    BLRAB_Rn_Rd_SP::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0xfff00000 == 0xd5700000 {
                                        return Some(Opcode::MRRS_Rt_PAIRREG_SYSREG128(
                                            MRRS_Rt_PAIRREG_SYSREG128::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn & 0x1000000 == 0 {
                        if insn & 0x2000000 == 0 {
                            if insn & 0x7f000000 == 0x34000000 {
                                return Some(Opcode::CBZ_Rt_ADDR_PCREL19(
                                    CBZ_Rt_ADDR_PCREL19::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x7f000000 == 0x36000000 {
                                return Some(Opcode::TBZ_Rt_BIT_NUM_ADDR_PCREL14(
                                    TBZ_Rt_BIT_NUM_ADDR_PCREL14::from(insn),
                                ));
                            }
                        }
                    } else {
                        if insn & 0x2000000 == 0 {
                            if insn & 0x7f000000 == 0x35000000 {
                                return Some(Opcode::CBNZ_Rt_ADDR_PCREL19(
                                    CBNZ_Rt_ADDR_PCREL19::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x7f000000 == 0x37000000 {
                                return Some(Opcode::TBNZ_Rt_BIT_NUM_ADDR_PCREL14(
                                    TBNZ_Rt_BIT_NUM_ADDR_PCREL14::from(insn),
                                ));
                            }
                        }
                    }
                }
            }
        } else {
            if insn & 0x2000000 == 0 {
                if insn & 0x10000000 == 0 {
                    if insn & 0x400000 == 0 {
                        if insn & 0x800000 == 0 {
                            if insn & 0x1000000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc000000 {
                                        return Some(Opcode::ST4_LVt_SIMD_ADDR_SIMPLE(
                                            ST4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2c000000 {
                                        return Some(Opcode::STNP_Ft_Ft2_ADDR_SIMM7(
                                            STNP_Ft_Ft2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x010000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0xbfff2000 == 0xd000000 {
                                                    return Some(Opcode::ST1_LEt_SIMD_ADDR_SIMPLE(
                                                        ST1_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbfff2000 == 0xd200000 {
                                                    return Some(Opcode::ST2_LEt_SIMD_ADDR_SIMPLE(
                                                        ST2_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0xd018400 {
                                                return Some(Opcode::STL1_LEt_SIMD_ADDR_SIMPLE(
                                                    STL1_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0xbfff2000 == 0xd002000 {
                                                return Some(Opcode::ST3_LEt_SIMD_ADDR_SIMPLE(
                                                    ST3_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfff2000 == 0xd202000 {
                                                return Some(Opcode::ST4_LEt_SIMD_ADDR_SIMPLE(
                                                    ST4_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2d000000 {
                                        return Some(Opcode::STP_Ft_Ft2_ADDR_SIMM7(
                                            STP_Ft_Ft2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x200000 == 0 {
                                    if insn & 0x1000000 == 0 {
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xc800000 {
                                            return Some(Opcode::ST4_LVt_SIMD_ADDR_POST(
                                                ST4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0xbfe02000 == 0xd800000 {
                                                return Some(Opcode::ST1_LEt_SIMD_ADDR_POST(
                                                    ST1_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfe02000 == 0xd802000 {
                                                return Some(Opcode::ST3_LEt_SIMD_ADDR_POST(
                                                    ST3_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0xbfe02000 == 0xda00000 {
                                            return Some(Opcode::ST2_LEt_SIMD_ADDR_POST(
                                                ST2_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbfe02000 == 0xda02000 {
                                            return Some(Opcode::ST4_LEt_SIMD_ADDR_POST(
                                                ST4_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3ec00000 == 0x2c800000 {
                                    return Some(Opcode::STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S(
                                        STP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::from(insn),
                                    ));
                                }
                            }
                        }
                    } else {
                        if insn & 0x800000 == 0 {
                            if insn & 0x1000000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                    if insn & 0xbfff0000 == 0xc400000 {
                                        return Some(Opcode::LD4_LVt_SIMD_ADDR_SIMPLE(
                                            LD4_LVt_SIMD_ADDR_SIMPLE::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2c400000 {
                                        return Some(Opcode::LDNP_Ft_Ft2_ADDR_SIMM7(
                                            LDNP_Ft_Ft2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            } else {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x010000 == 0 {
                                            if insn & 0x200000 == 0 {
                                                if insn & 0xbfff2000 == 0xd400000 {
                                                    return Some(Opcode::LD1_LEt_SIMD_ADDR_SIMPLE(
                                                        LD1_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbffff000 == 0xd40c000 {
                                                    return Some(
                                                        Opcode::LD1R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                            LD1R_LVt_AL_SIMD_ADDR_SIMPLE::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbfff2000 == 0xd600000 {
                                                    return Some(Opcode::LD2_LEt_SIMD_ADDR_SIMPLE(
                                                        LD2_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbffff000 == 0xd60c000 {
                                                    return Some(
                                                        Opcode::LD2R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                            LD2R_LVt_AL_SIMD_ADDR_SIMPLE::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0xbffffc00 == 0xd418400 {
                                                return Some(Opcode::LDAP1_LEt_SIMD_ADDR_SIMPLE(
                                                    LDAP1_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x200000 == 0 {
                                            if insn & 0xbfff2000 == 0xd402000 {
                                                return Some(Opcode::LD3_LEt_SIMD_ADDR_SIMPLE(
                                                    LD3_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                            if insn & 0xbffff000 == 0xd40e000 {
                                                return Some(Opcode::LD3R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                    LD3R_LVt_AL_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfff2000 == 0xd602000 {
                                                return Some(Opcode::LD4_LEt_SIMD_ADDR_SIMPLE(
                                                    LD4_LEt_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                            if insn & 0xbffff000 == 0xd60e000 {
                                                return Some(Opcode::LD4R_LVt_AL_SIMD_ADDR_SIMPLE(
                                                    LD4R_LVt_AL_SIMD_ADDR_SIMPLE::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x3fc00000 == 0x2d400000 {
                                        return Some(Opcode::LDP_Ft_Ft2_ADDR_SIMM7(
                                            LDP_Ft_Ft2_ADDR_SIMM7::from(insn),
                                        ));
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x200000 == 0 {
                                    if insn & 0x1000000 == 0 {
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe00000 == 0xcc00000 {
                                            return Some(Opcode::LD4_LVt_SIMD_ADDR_POST(
                                                LD4_LVt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0xbfe02000 == 0xdc00000 {
                                                return Some(Opcode::LD1_LEt_SIMD_ADDR_POST(
                                                    LD1_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                            if insn & 0xbfe0f000 == 0xdc0c000 {
                                                return Some(Opcode::LD1R_LVt_AL_SIMD_ADDR_POST(
                                                    LD1R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xbfe02000 == 0xdc02000 {
                                                return Some(Opcode::LD3_LEt_SIMD_ADDR_POST(
                                                    LD3_LEt_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                            if insn & 0xbfe0f000 == 0xdc0e000 {
                                                return Some(Opcode::LD3R_LVt_AL_SIMD_ADDR_POST(
                                                    LD3R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0xbfe02000 == 0xde00000 {
                                            return Some(Opcode::LD2_LEt_SIMD_ADDR_POST(
                                                LD2_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe0f000 == 0xde0c000 {
                                            return Some(Opcode::LD2R_LVt_AL_SIMD_ADDR_POST(
                                                LD2R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbfe02000 == 0xde02000 {
                                            return Some(Opcode::LD4_LEt_SIMD_ADDR_POST(
                                                LD4_LEt_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                        if insn & 0xbfe0f000 == 0xde0e000 {
                                            return Some(Opcode::LD4R_LVt_AL_SIMD_ADDR_POST(
                                                LD4R_LVt_AL_SIMD_ADDR_POST::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3ec00000 == 0x2cc00000 {
                                    return Some(Opcode::LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S(
                                        LDP_Ft_S_S_Ft2_S_S_ADDR_SIMM7_S_S::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                } else {
                    if insn & 0x1000000 == 0 {
                        if insn & 0x20000000 == 0 {
                            if insn & 0x3f000000 == 0x1c000000 {
                                return Some(Opcode::LDR_Ft_ADDR_PCREL19(
                                    LDR_Ft_ADDR_PCREL19::from(insn),
                                ));
                            }
                        } else {
                            if insn & 0x000400 == 0 {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x3f600c00 == 0x3c000000 {
                                            return Some(Opcode::STUR_Ft_ADDR_SIMM9(
                                                STUR_Ft_ADDR_SIMM9::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x3f600c00 == 0x3c400000 {
                                            return Some(Opcode::LDUR_Ft_ADDR_SIMM9(
                                                LDUR_Ft_ADDR_SIMM9::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x3f600c00 == 0x3c200800 {
                                            return Some(Opcode::STR_Ft_ADDR_REGOFF(
                                                STR_Ft_ADDR_REGOFF::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x3f600c00 == 0x3c600800 {
                                            return Some(Opcode::LDR_Ft_ADDR_REGOFF(
                                                LDR_Ft_ADDR_REGOFF::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x400000 == 0 {
                                    if insn & 0x3f600400 == 0x3c000400 {
                                        return Some(Opcode::STR_Ft_ADDR_SIMM9(
                                            STR_Ft_ADDR_SIMM9::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x3f600400 == 0x3c400400 {
                                        return Some(Opcode::LDR_Ft_ADDR_SIMM9(
                                            LDR_Ft_ADDR_SIMM9::from(insn),
                                        ));
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x400000 == 0 {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x000400 == 0 {
                                    if insn & 0x3f600c00 == 0x1d000800 {
                                        return Some(Opcode::STLUR_Ft_RCPC3_ADDR_OFFSET(
                                            STLUR_Ft_RCPC3_ADDR_OFFSET::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d000400 {
                                                            return Some (Opcode :: CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYP_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d800400 {
                                                            return Some (Opcode :: CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYE_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d008400 {
                                                            return Some (Opcode :: CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d808400 {
                                                            return Some (Opcode :: CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYERN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d004400 {
                                                            return Some (Opcode :: CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d804400 {
                                                            return Some (Opcode :: CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00c400 {
                                                            return Some (Opcode :: CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80c400 {
                                                            return Some (Opcode :: CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d002400 {
                                                            return Some (Opcode :: CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d802400 {
                                                            return Some (Opcode :: CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYERT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00a400 {
                                                            return Some (Opcode :: CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80a400 {
                                                            return Some (Opcode :: CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYERTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d006400 {
                                                            return Some (Opcode :: CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d806400 {
                                                            return Some (Opcode :: CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYERTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00e400 {
                                                            return Some (Opcode :: CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80e400 {
                                                            return Some (Opcode :: CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYERTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d001400 {
                                                            return Some (Opcode :: CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d801400 {
                                                            return Some (Opcode :: CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d009400 {
                                                            return Some (Opcode :: CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d809400 {
                                                            return Some (Opcode :: CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d005400 {
                                                            return Some (Opcode :: CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d805400 {
                                                            return Some (Opcode :: CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00d400 {
                                                            return Some (Opcode :: CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80d400 {
                                                            return Some (Opcode :: CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYEWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d003400 {
                                                            return Some (Opcode :: CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d803400 {
                                                            return Some (Opcode :: CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYET_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00b400 {
                                                            return Some (Opcode :: CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80b400 {
                                                            return Some (Opcode :: CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYETRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d007400 {
                                                            return Some (Opcode :: CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d807400 {
                                                            return Some (Opcode :: CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYETWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d00f400 {
                                                            return Some (Opcode :: CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYPTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1d80f400 {
                                                            return Some (Opcode :: CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYETN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3f400000 == 0x3d000000 {
                                    return Some(Opcode::STR_Ft_ADDR_UIMM12(
                                        STR_Ft_ADDR_UIMM12::from(insn),
                                    ));
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x000400 == 0 {
                                    if insn & 0x3f600c00 == 0x1d400800 {
                                        return Some(Opcode::LDAPUR_Ft_RCPC3_ADDR_OFFSET(
                                            LDAPUR_Ft_RCPC3_ADDR_OFFSET::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d400400 {
                                                            return Some (Opcode :: CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYM_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc00400 {
                                                            return Some (Opcode :: SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGP_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d408400 {
                                                            return Some (Opcode :: CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc08400 {
                                                            return Some (Opcode :: SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGE_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d404400 {
                                                            return Some (Opcode :: CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc04400 {
                                                            return Some (Opcode :: SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGM_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40c400 {
                                                        return Some (Opcode :: CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d402400 {
                                                            return Some (Opcode :: CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc02400 {
                                                            return Some (Opcode :: SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGPN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d40a400 {
                                                            return Some (Opcode :: CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc0a400 {
                                                            return Some (Opcode :: SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGEN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d406400 {
                                                            return Some (Opcode :: CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc06400 {
                                                            return Some (Opcode :: SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGMN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40e400 {
                                                        return Some (Opcode :: CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMRTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d401400 {
                                                            return Some (Opcode :: CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMWT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc01400 {
                                                            return Some (Opcode :: SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGPT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d409400 {
                                                            return Some (Opcode :: CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMWTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc09400 {
                                                            return Some (Opcode :: SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGET_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d405400 {
                                                            return Some (Opcode :: CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMWTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc05400 {
                                                            return Some (Opcode :: SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGMT_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40d400 {
                                                        return Some (Opcode :: CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMWTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d403400 {
                                                            return Some (Opcode :: CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMT_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc03400 {
                                                            return Some (Opcode :: SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGPTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d40b400 {
                                                            return Some (Opcode :: CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMTRN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc0b400 {
                                                            return Some (Opcode :: SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGETN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x1d407400 {
                                                            return Some (Opcode :: CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMTWN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x1dc07400 {
                                                            return Some (Opcode :: SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm (SETGMTN_MOPS_ADDR_Rd_MOPS_WB_Rn_Rm :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x1d40f400 {
                                                        return Some (Opcode :: CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn (CPYMTN_MOPS_ADDR_Rd_MOPS_ADDR_Rs_MOPS_WB_Rn :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x3f400000 == 0x3d400000 {
                                    return Some(Opcode::LDR_Ft_ADDR_UIMM12(
                                        LDR_Ft_ADDR_UIMM12::from(insn),
                                    ));
                                }
                            }
                        }
                    }
                }
            } else {
                if insn & 0x1000000 == 0 {
                    if insn & 0x200000 == 0 {
                        if insn & 0x10000000 == 0 {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x80000000 == 0 {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0xbfe09c00 == 0xe000000 {
                                                    return Some(Opcode::TBL_Vd_LVn_Vm(
                                                        TBL_Vd_LVn_Vm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbfe09c00 == 0xe001000 {
                                                    return Some(Opcode::TBX_Vd_LVn_Vm(
                                                        TBX_Vd_LVn_Vm::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xbf20fc00 == 0xe002800 {
                                                        return Some(Opcode::TRN1_Vd_Vn_Vm(
                                                            TRN1_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf20fc00 == 0xe006800 {
                                                        return Some(Opcode::TRN2_Vd_Vn_Vm(
                                                            TRN2_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe001800 {
                                                            return Some(Opcode::UZP1_Vd_Vn_Vm(
                                                                UZP1_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0xe005800 {
                                                            return Some(Opcode::UZP2_Vd_Vn_Vm(
                                                                UZP2_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe003800 {
                                                            return Some(Opcode::ZIP1_Vd_Vn_Vm(
                                                                ZIP1_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0xe007800 {
                                                            return Some(Opcode::ZIP2_Vd_Vn_Vm(
                                                                ZIP2_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe000400 {
                                                            return Some(Opcode::DUP_Vd_En(
                                                                DUP_Vd_En::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe400400 {
                                                                return Some(
                                                                    Opcode::FMAXNM_Vd_Vn_Vm(
                                                                        FMAXNM_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec00400 {
                                                                return Some(
                                                                    Opcode::FMINNM_Vd_Vn_Vm(
                                                                        FMINNM_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe402400 {
                                                            return Some(Opcode::FCMEQ_Vd_Vn_Vm(
                                                                FCMEQ_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x4e80a400 {
                                                            return Some(Opcode::SMMLA_Vd_Vn_Vm(
                                                                SMMLA_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe401400 {
                                                                return Some(
                                                                    Opcode::FADD_Vd_Vn_Vm(
                                                                        FADD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec01400 {
                                                                return Some(
                                                                    Opcode::FSUB_Vd_Vn_Vm(
                                                                        FSUB_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0xe009400 {
                                                            return Some(Opcode::SDOT_Vd_Vn_Vm(
                                                                SDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe403400 {
                                                            return Some(Opcode::FMAX_Vd_Vn_Vm(
                                                                FMAX_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0xec03400 {
                                                            return Some(Opcode::FMIN_Vd_Vn_Vm(
                                                                FMIN_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe000c00 {
                                                            return Some(Opcode::DUP_Vd_Rn(
                                                                DUP_Vd_Rn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe400c00 {
                                                                return Some(
                                                                    Opcode::FMLA_Vd_Vn_Vm(
                                                                        FMLA_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec00c00 {
                                                                return Some(
                                                                    Opcode::FMLS_Vd_Vn_Vm(
                                                                        FMLS_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe002c00 {
                                                            return Some(Opcode::SMOV_Rd_En(
                                                                SMOV_Rd_En::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x4e80ac00 {
                                                            return Some(Opcode::USMMLA_Vd_Vn_Vm(
                                                                USMMLA_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x4e001c00 {
                                                                return Some(Opcode::INS_Ed_Rn(
                                                                    INS_Ed_Rn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xe401c00 {
                                                                return Some(
                                                                    Opcode::FMULX_Vd_Vn_Vm(
                                                                        FMULX_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0xe809c00 {
                                                            return Some(Opcode::USDOT_Vd_Vn_Vm(
                                                                USDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0xe003c00 {
                                                            return Some(Opcode::UMOV_Rd_En(
                                                                UMOV_Rd_En::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0xe403c00 {
                                                                return Some(
                                                                    Opcode::FRECPS_Vd_Vn_Vm(
                                                                        FRECPS_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0xec03c00 {
                                                                return Some(
                                                                    Opcode::FRSQRTS_Vd_Vn_Vm(
                                                                        FRSQRTS_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x400000 == 0 {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0xffe08000 == 0xce000000 {
                                                return Some(Opcode::EOR3_Vd_Vn_Vm_Va(
                                                    EOR3_Vd_Vn_Vm_Va::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffe00000 == 0xce800000 {
                                                return Some(Opcode::XAR_Vd_Vn_Vm_IMM(
                                                    XAR_Vd_Vn_Vm_IMM::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x008000 == 0 {
                                            if insn & 0xffe08000 == 0xce400000 {
                                                return Some(Opcode::SM3SS1_Vd_Vn_Vm_Va(
                                                    SM3SS1_Vd_Vn_Vm_Va::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x000400 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0cc00 == 0xce408000 {
                                                            return Some(Opcode::SM3TT1A_Vd_Vn_Em(
                                                                SM3TT1A_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xcec08000 {
                                                            return Some(Opcode::SHA512SU0_Vd_Vn(
                                                                SHA512SU0_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0cc00 == 0xce408800 {
                                                        return Some(Opcode::SM3TT2A_Vd_Vn_Em(
                                                            SM3TT2A_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffe0cc00 == 0xce408400 {
                                                            return Some(Opcode::SM3TT1B_Vd_Vn_Em(
                                                                SM3TT1B_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0xcec08400 {
                                                            return Some(Opcode::SM4E_Vd_Vn(
                                                                SM4E_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffe0cc00 == 0xce408c00 {
                                                        return Some(Opcode::SM3TT2B_Vd_Vn_Em(
                                                            SM3TT2B_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000400 == 0 {
                                    if insn & 0xbfe08400 == 0x2e000000 {
                                        return Some(Opcode::EXT_Vd_Vn_Vm_IDX(
                                            EXT_Vd_Vn_Vm_IDX::from(insn),
                                        ));
                                    }
                                } else {
                                    if insn & 0x008000 == 0 {
                                        if insn & 0x400000 == 0 {
                                            if insn & 0xffe08400 == 0x6e000400 {
                                                return Some(Opcode::INS_Ed_En(INS_Ed_En::from(
                                                    insn,
                                                )));
                                            }
                                        } else {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e400400 {
                                                                return Some(
                                                                    Opcode::FMAXNMP_Vd_Vn_Vm(
                                                                        FMAXNMP_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec00400 {
                                                                return Some(
                                                                    Opcode::FMINNMP_Vd_Vn_Vm(
                                                                        FMINNMP_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e402400 {
                                                                return Some(
                                                                    Opcode::FCMGE_Vd_Vn_Vm(
                                                                        FCMGE_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec02400 {
                                                                return Some(
                                                                    Opcode::FCMGT_Vd_Vn_Vm(
                                                                        FCMGT_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e401400 {
                                                                return Some(
                                                                    Opcode::FADDP_Vd_Vn_Vm(
                                                                        FADDP_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec01400 {
                                                                return Some(
                                                                    Opcode::FABD_Vd_Vn_Vm(
                                                                        FABD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xbfe0fc00 == 0x2e403400 {
                                                                return Some(
                                                                    Opcode::FMAXP_Vd_Vn_Vm(
                                                                        FMAXP_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfe0fc00 == 0x2ec03400 {
                                                                return Some(
                                                                    Opcode::FMINP_Vd_Vn_Vm(
                                                                        FMINP_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0x2e402c00 {
                                                            return Some(Opcode::FACGE_Vd_Vn_Vm(
                                                                FACGE_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0x2ec02c00 {
                                                            return Some(Opcode::FACGT_Vd_Vn_Vm(
                                                                FACGT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0x2e401c00 {
                                                            return Some(Opcode::FMUL_Vd_Vn_Vm(
                                                                FMUL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfe0fc00 == 0x2e403c00 {
                                                            return Some(Opcode::FDIV_Vd_Vn_Vm(
                                                                FDIV_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x000800 == 0 {
                                                    if insn & 0x001000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e008400 {
                                                            return Some(
                                                                Opcode::SQRDMLAH_Vd_Vn_Vm(
                                                                    SQRDMLAH_Vd_Vn_Vm::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e009400 {
                                                            return Some(Opcode::UDOT_Vd_Vn_Vm(
                                                                UDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xbf20fc00 == 0x2e008c00 {
                                                        return Some(Opcode::SQRDMLSH_Vd_Vn_Vm(
                                                            SQRDMLSH_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf20e400 == 0x2e00c400 {
                                                    return Some(Opcode::FCMLA_Vd_Vn_Vm_IMM_ROT1(
                                                        FCMLA_Vd_Vn_Vm_IMM_ROT1::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x6e80a400 {
                                                        return Some(Opcode::UMMLA_Vd_Vn_Vm(
                                                            UMMLA_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf20ec00 == 0x2e00e400 {
                                                        return Some(
                                                            Opcode::FCADD_Vd_Vn_Vm_IMM_ROT3(
                                                                FCADD_Vd_Vn_Vm_IMM_ROT3::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x6e40ec00 {
                                                        return Some(Opcode::BFMMLA_Vd_Vn_Vm(
                                                            BFMMLA_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xbfe0fc00 == 0x2e40fc00 {
                                                            return Some(Opcode::BFDOT_Vd_Vn_Vm(
                                                                BFDOT_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0x2ec0fc00 {
                                                                return Some(
                                                                    Opcode::BFMLALB_Vd_Vn_Vm(
                                                                        BFMLALB_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x6ec0fc00 {
                                                                return Some(
                                                                    Opcode::BFMLALT_Vd_Vn_Vm(
                                                                        BFMLALT_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x010000 == 0 {
                                        if insn & 0x020000 == 0 {
                                            if insn & 0x7f3f0000 == 0x1e180000 {
                                                return Some(Opcode::FCVTZS_Rd_Fn_FBITS(
                                                    FCVTZS_Rd_Fn_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ed80000 {
                                                return Some(
                                                    Opcode::FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32(
                                                        FCVTZS_Rd_W_Fn_S_H_FBITS_imm_1_32::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0x7f3f0000 == 0x1e020000 {
                                                return Some(Opcode::SCVTF_Fd_Rn_FBITS(
                                                    SCVTF_Fd_Rn_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ec20000 {
                                                return Some(
                                                    Opcode::SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32(
                                                        SCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    } else {
                                        if insn & 0x020000 == 0 {
                                            if insn & 0x7f3f0000 == 0x1e190000 {
                                                return Some(Opcode::FCVTZU_Rd_Fn_FBITS(
                                                    FCVTZU_Rd_Fn_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ed90000 {
                                                return Some(
                                                    Opcode::FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32(
                                                        FCVTZU_Rd_W_Fn_S_H_FBITS_imm_1_32::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0x7f3f0000 == 0x1e030000 {
                                                return Some(Opcode::UCVTF_Fd_Rn_FBITS(
                                                    UCVTF_Fd_Rn_FBITS::from(insn),
                                                ));
                                            }
                                            if insn & 0x7fff0000 == 0x1ec30000 {
                                                return Some(
                                                    Opcode::UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32(
                                                        UCVTF_Fd_S_H_Rn_W_FBITS_imm_1_32::from(
                                                            insn,
                                                        ),
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e000000 {
                                                        return Some(Opcode::SHA1C_Fd_Fn_Vm(
                                                            SHA1C_Fd_Fn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5e004000 {
                                                        return Some(Opcode::SHA256H_Fd_Fn_Vm(
                                                            SHA256H_Fd_Fn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e002000 {
                                                        return Some(Opcode::SHA1M_Fd_Fn_Vm(
                                                            SHA1M_Fd_Fn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5e006000 {
                                                        return Some(Opcode::SHA256SU1_Vd_Vn_Vm(
                                                            SHA256SU1_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e001000 {
                                                        return Some(Opcode::SHA1P_Fd_Fn_Vm(
                                                            SHA1P_Fd_Fn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5e005000 {
                                                        return Some(Opcode::SHA256H2_Fd_Fn_Vm(
                                                            SHA256H2_Fd_Fn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x5e003000 {
                                                    return Some(Opcode::SHA1SU0_Vd_Vn_Vm(
                                                        SHA1SU0_Vd_Vn_Vm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xffe0fc00 == 0x5e000400 {
                                                    return Some(Opcode::DUP_Sd_En(
                                                        DUP_Sd_En::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x5e402400 {
                                                    return Some(Opcode::FCMEQ_Sd_Sn_Sm(
                                                        FCMEQ_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xffe0fc00 == 0x5e401c00 {
                                                    return Some(Opcode::FMULX_Sd_Sn_Sm(
                                                        FMULX_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5e403c00 {
                                                        return Some(Opcode::FRECPS_Sd_Sn_Sm(
                                                            FRECPS_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x5ec03c00 {
                                                        return Some(Opcode::FRSQRTS_Sd_Sn_Sm(
                                                            FRSQRTS_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0xff20fc00 == 0x7e008400 {
                                                return Some(Opcode::SQRDMLAH_Sd_Sn_Sm(
                                                    SQRDMLAH_Sd_Sn_Sm::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffe0fc00 == 0x7e402400 {
                                                    return Some(Opcode::FCMGE_Sd_Sn_Sm(
                                                        FCMGE_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x7ec02400 {
                                                    return Some(Opcode::FCMGT_Sd_Sn_Sm(
                                                        FCMGT_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe0fc00 == 0x7ec01400 {
                                            return Some(Opcode::FABD_Sd_Sn_Sm(
                                                FABD_Sd_Sn_Sm::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0xff20fc00 == 0x7e008c00 {
                                            return Some(Opcode::SQRDMLSH_Sd_Sn_Sm(
                                                SQRDMLSH_Sd_Sn_Sm::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0x800000 == 0 {
                                            if insn & 0xffe0fc00 == 0x7e402c00 {
                                                return Some(Opcode::FACGE_Sd_Sn_Sm(
                                                    FACGE_Sd_Sn_Sm::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xffe0fc00 == 0x7ec02c00 {
                                                return Some(Opcode::FACGT_Sd_Sn_Sm(
                                                    FACGT_Sd_Sn_Sm::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x10000000 == 0 {
                            if insn & 0x008000 == 0 {
                                if insn & 0x20000000 == 0 {
                                    if insn & 0x80000000 == 0 {
                                        if insn & 0x000400 == 0 {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe200000 {
                                                                    return Some(
                                                                        Opcode::SADDL_Vd_Vn_Vm(
                                                                            SADDL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e200000 {
                                                                    return Some(
                                                                        Opcode::SADDL2_Vd_Vn_Vm(
                                                                            SADDL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe204000 {
                                                                    return Some(
                                                                        Opcode::ADDHN_Vd_Vn_Vm(
                                                                            ADDHN_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e204000 {
                                                                    return Some(
                                                                        Opcode::ADDHN2_Vd_Vn_Vm(
                                                                            ADDHN2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe202000 {
                                                                    return Some(
                                                                        Opcode::SSUBL_Vd_Vn_Vm(
                                                                            SSUBL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e202000 {
                                                                    return Some(
                                                                        Opcode::SSUBL2_Vd_Vn_Vm(
                                                                            SSUBL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe206000 {
                                                                    return Some(
                                                                        Opcode::SUBHN_Vd_Vn_Vm(
                                                                            SUBHN_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e206000 {
                                                                    return Some(
                                                                        Opcode::SUBHN2_Vd_Vn_Vm(
                                                                            SUBHN2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe201000 {
                                                                    return Some(
                                                                        Opcode::SADDW_Vd_Vn_Vm(
                                                                            SADDW_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e201000 {
                                                                    return Some(
                                                                        Opcode::SADDW2_Vd_Vn_Vm(
                                                                            SADDW2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe205000 {
                                                                    return Some(
                                                                        Opcode::SABAL_Vd_Vn_Vm(
                                                                            SABAL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e205000 {
                                                                    return Some(
                                                                        Opcode::SABAL2_Vd_Vn_Vm(
                                                                            SABAL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe203000 {
                                                                    return Some(
                                                                        Opcode::SSUBW_Vd_Vn_Vm(
                                                                            SSUBW_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e203000 {
                                                                    return Some(
                                                                        Opcode::SSUBW2_Vd_Vn_Vm(
                                                                            SSUBW2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff20fc00 == 0xe207000 {
                                                                    return Some(
                                                                        Opcode::SABDL_Vd_Vn_Vm(
                                                                            SABDL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff20fc00 == 0x4e207000 {
                                                                    return Some(
                                                                        Opcode::SABDL2_Vd_Vn_Vm(
                                                                            SABDL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe200800 {
                                                                return Some(Opcode::REV64_Vd_Vn(
                                                                    REV64_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe204800
                                                                    {
                                                                        return Some(
                                                                            Opcode::CLS_Vd_Vn(
                                                                                CLS_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4e284800
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESE_Vd_Vn(
                                                                                AESE_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0xe214800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SQXTN_Vd_Vn(
                                                                                SQXTN_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x4e214800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SQXTN2_Vd_Vn(
                                                                                SQXTN2_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe202800 {
                                                                    return Some(
                                                                        Opcode::SADDLP_Vd_Vn(
                                                                            SADDLP_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0xe212800
                                                                    {
                                                                        return Some(
                                                                            Opcode::XTN_Vd_Vn(
                                                                                XTN_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x4e212800
                                                                    {
                                                                        return Some(
                                                                            Opcode::XTN2_Vd_Vn(
                                                                                XTN2_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe206800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SADALP_Vd_Vn(
                                                                                SADALP_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4e286800
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESMC_Vd_Vn(
                                                                                AESMC_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xffbffc00
                                                                            == 0xe216800
                                                                        {
                                                                            return Some (Opcode :: FCVTN_Vd_Vn (FCVTN_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x4e216800
                                                                        {
                                                                            return Some (Opcode :: FCVTN2_Vd_Vn (FCVTN2_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x40000000 == 0 {
                                                                        if insn & 0xfffffc00
                                                                            == 0xea16800
                                                                        {
                                                                            return Some (Opcode :: BFCVTN_Vd_Vn (BFCVTN_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xfffffc00
                                                                            == 0x4ea16800
                                                                        {
                                                                            return Some (Opcode :: BFCVTN2_Vd_Vn (BFCVTN2_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe201800 {
                                                                return Some(Opcode::REV16_Vd_Vn(
                                                                    REV16_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe205800 {
                                                                    return Some(
                                                                        Opcode::CNT_Vd_Vn(
                                                                            CNT_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x4e285800 {
                                                                    return Some(
                                                                        Opcode::AESD_Vd_Vn(
                                                                            AESD_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe203800 {
                                                                    return Some(
                                                                        Opcode::SUQADD_Vd_Vn(
                                                                            SUQADD_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0xe303800 {
                                                                    return Some(
                                                                        Opcode::SADDLV_Fd_Vn(
                                                                            SADDLV_Fd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe207800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SQABS_Vd_Vn(
                                                                                SQABS_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x4e287800
                                                                    {
                                                                        return Some(
                                                                            Opcode::AESIMC_Vd_Vn(
                                                                                AESIMC_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x40000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0xe217800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTL_Vd_Vn(
                                                                                FCVTL_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x4e217800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTL2_Vd_Vn(
                                                                                FCVTL2_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000800 == 0 {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe200400 {
                                                                return Some(
                                                                    Opcode::SHADD_Vd_Vn_Vm(
                                                                        SHADD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe204400 {
                                                                return Some(
                                                                    Opcode::SSHL_Vd_Vn_Vm(
                                                                        SSHL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe202400 {
                                                                return Some(
                                                                    Opcode::SHSUB_Vd_Vn_Vm(
                                                                        SHSUB_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe206400 {
                                                                return Some(
                                                                    Opcode::SMAX_Vd_Vn_Vm(
                                                                        SMAX_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe201400 {
                                                                return Some(
                                                                    Opcode::SRHADD_Vd_Vn_Vm(
                                                                        SRHADD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe205400 {
                                                                return Some(
                                                                    Opcode::SRSHL_Vd_Vn_Vm(
                                                                        SRSHL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe203400 {
                                                                return Some(
                                                                    Opcode::CMGT_Vd_Vn_Vm(
                                                                        CMGT_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe207400 {
                                                                return Some(
                                                                    Opcode::SABD_Vd_Vn_Vm(
                                                                        SABD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x001000 == 0 {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe200c00 {
                                                                return Some(
                                                                    Opcode::SQADD_Vd_Vn_Vm(
                                                                        SQADD_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe204c00 {
                                                                return Some(
                                                                    Opcode::SQSHL_Vd_Vn_Vm(
                                                                        SQSHL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe202c00 {
                                                                return Some(
                                                                    Opcode::SQSUB_Vd_Vn_Vm(
                                                                        SQSUB_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe206c00 {
                                                                return Some(
                                                                    Opcode::SMIN_Vd_Vn_Vm(
                                                                        SMIN_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x002000 == 0 {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0x400000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xe201c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::AND_Vd_Vn_Vm(
                                                                                AND_Vd_Vn_Vm::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xea01c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::ORR_Vd_Vn_Vm(
                                                                                ORR_Vd_Vn_Vm::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xe601c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::BIC_Vd_Vn_Vm(
                                                                                BIC_Vd_Vn_Vm::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfe0fc00
                                                                        == 0xee01c00
                                                                    {
                                                                        return Some(
                                                                            Opcode::ORN_Vd_Vn_Vm(
                                                                                ORN_Vd_Vn_Vm::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe205c00 {
                                                                return Some(
                                                                    Opcode::SQRSHL_Vd_Vn_Vm(
                                                                        SQRSHL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x004000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe203c00 {
                                                                return Some(
                                                                    Opcode::CMGE_Vd_Vn_Vm(
                                                                        CMGE_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf20fc00 == 0xe207c00 {
                                                                return Some(
                                                                    Opcode::SABA_Vd_Vn_Vm(
                                                                        SABA_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xffe08000 == 0xce200000 {
                                            return Some(Opcode::BCAX_Vd_Vn_Vm_Va(
                                                BCAX_Vd_Vn_Vm_Va::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e200000 {
                                                                return Some(
                                                                    Opcode::UADDL_Vd_Vn_Vm(
                                                                        UADDL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e200000 {
                                                                return Some(
                                                                    Opcode::UADDL2_Vd_Vn_Vm(
                                                                        UADDL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e204000 {
                                                                return Some(
                                                                    Opcode::RADDHN_Vd_Vn_Vm(
                                                                        RADDHN_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e204000 {
                                                                return Some(
                                                                    Opcode::RADDHN2_Vd_Vn_Vm(
                                                                        RADDHN2_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e202000 {
                                                                return Some(
                                                                    Opcode::USUBL_Vd_Vn_Vm(
                                                                        USUBL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e202000 {
                                                                return Some(
                                                                    Opcode::USUBL2_Vd_Vn_Vm(
                                                                        USUBL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e206000 {
                                                                return Some(
                                                                    Opcode::RSUBHN_Vd_Vn_Vm(
                                                                        RSUBHN_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e206000 {
                                                                return Some(
                                                                    Opcode::RSUBHN2_Vd_Vn_Vm(
                                                                        RSUBHN2_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e201000 {
                                                                return Some(
                                                                    Opcode::UADDW_Vd_Vn_Vm(
                                                                        UADDW_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e201000 {
                                                                return Some(
                                                                    Opcode::UADDW2_Vd_Vn_Vm(
                                                                        UADDW2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e205000 {
                                                                return Some(
                                                                    Opcode::UABAL_Vd_Vn_Vm(
                                                                        UABAL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e205000 {
                                                                return Some(
                                                                    Opcode::UABAL2_Vd_Vn_Vm(
                                                                        UABAL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e203000 {
                                                                return Some(
                                                                    Opcode::USUBW_Vd_Vn_Vm(
                                                                        USUBW_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e203000 {
                                                                return Some(
                                                                    Opcode::USUBW2_Vd_Vn_Vm(
                                                                        USUBW2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e207000 {
                                                                return Some(
                                                                    Opcode::UABDL_Vd_Vn_Vm(
                                                                        UABDL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e207000 {
                                                                return Some(
                                                                    Opcode::UABDL2_Vd_Vn_Vm(
                                                                        UABDL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf3ffc00 == 0x2e200800 {
                                                            return Some(Opcode::REV32_Vd_Vn(
                                                                REV32_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e204800 {
                                                                return Some(Opcode::CLZ_Vd_Vn(
                                                                    CLZ_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff3ffc00 == 0x2e214800 {
                                                                    return Some(
                                                                        Opcode::UQXTN_Vd_Vn(
                                                                            UQXTN_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x6e214800 {
                                                                    return Some(
                                                                        Opcode::UQXTN2_Vd_Vn(
                                                                            UQXTN2_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e202800 {
                                                                return Some(Opcode::UADDLP_Vd_Vn(
                                                                    UADDLP_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff3ffc00 == 0x2e212800 {
                                                                    return Some(
                                                                        Opcode::SQXTUN_Vd_Vn(
                                                                            SQXTUN_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x6e212800 {
                                                                    return Some(
                                                                        Opcode::SQXTUN2_Vd_Vn(
                                                                            SQXTUN2_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e206800 {
                                                                return Some(Opcode::UADALP_Vd_Vn(
                                                                    UADALP_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x2e616800 {
                                                                    return Some(
                                                                        Opcode::FCVTXN_Vd_Vn(
                                                                            FCVTXN_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x6e616800 {
                                                                    return Some(
                                                                        Opcode::FCVTXN2_Vd_Vn(
                                                                            FCVTXN2_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0xbffffc00 == 0x2e205800 {
                                                            return Some(Opcode::NOT_Vd_Vn(
                                                                NOT_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbffffc00 == 0x2e605800 {
                                                            return Some(Opcode::RBIT_Vd_Vn(
                                                                RBIT_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0xbf3ffc00 == 0x2e203800 {
                                                                    return Some(
                                                                        Opcode::USQADD_Vd_Vn(
                                                                            USQADD_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0x2e303800 {
                                                                    return Some(
                                                                        Opcode::UADDLV_Fd_Vn(
                                                                            UADDLV_Fd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xff3ffc00 == 0x2e213800 {
                                                                    return Some (Opcode :: SHLL_Vd_Vn_SHLL_IMM (SHLL_Vd_Vn_SHLL_IMM :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x6e213800 {
                                                                    return Some (Opcode :: SHLL2_Vd_Vn_SHLL_IMM (SHLL2_Vd_Vn_SHLL_IMM :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf3ffc00 == 0x2e207800 {
                                                            return Some(Opcode::SQNEG_Vd_Vn(
                                                                SQNEG_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e200400 {
                                                            return Some(Opcode::UHADD_Vd_Vn_Vm(
                                                                UHADD_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e204400 {
                                                            return Some(Opcode::USHL_Vd_Vn_Vm(
                                                                USHL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e202400 {
                                                            return Some(Opcode::UHSUB_Vd_Vn_Vm(
                                                                UHSUB_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e206400 {
                                                            return Some(Opcode::UMAX_Vd_Vn_Vm(
                                                                UMAX_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e201400 {
                                                            return Some(Opcode::URHADD_Vd_Vn_Vm(
                                                                URHADD_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e205400 {
                                                            return Some(Opcode::URSHL_Vd_Vn_Vm(
                                                                URSHL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e203400 {
                                                            return Some(Opcode::CMHI_Vd_Vn_Vm(
                                                                CMHI_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e207400 {
                                                            return Some(Opcode::UABD_Vd_Vn_Vm(
                                                                UABD_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e200c00 {
                                                            return Some(Opcode::UQADD_Vd_Vn_Vm(
                                                                UQADD_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e204c00 {
                                                            return Some(Opcode::UQSHL_Vd_Vn_Vm(
                                                                UQSHL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e202c00 {
                                                            return Some(Opcode::UQSUB_Vd_Vn_Vm(
                                                                UQSUB_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e206c00 {
                                                            return Some(Opcode::UMIN_Vd_Vn_Vm(
                                                                UMIN_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x400000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xbfe0fc00 == 0x2e201c00 {
                                                                    return Some(
                                                                        Opcode::EOR_Vd_Vn_Vm(
                                                                            EOR_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0x2ea01c00 {
                                                                    return Some(
                                                                        Opcode::BIT_Vd_Vn_Vm(
                                                                            BIT_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0xbfe0fc00 == 0x2e601c00 {
                                                                    return Some(
                                                                        Opcode::BSL_Vd_Vn_Vm(
                                                                            BSL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbfe0fc00 == 0x2ee01c00 {
                                                                    return Some(
                                                                        Opcode::BIF_Vd_Vn_Vm(
                                                                            BIF_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e205c00 {
                                                            return Some(Opcode::UQRSHL_Vd_Vn_Vm(
                                                                UQRSHL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xbf20fc00 == 0x2e203c00 {
                                                            return Some(Opcode::CMHS_Vd_Vn_Vm(
                                                                CMHS_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e207c00 {
                                                            return Some(Opcode::UABA_Vd_Vn_Vm(
                                                                UABA_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000400 == 0 {
                                    if insn & 0x000800 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0xe208000 {
                                                                return Some(
                                                                    Opcode::SMLAL_Vd_Vn_Vm(
                                                                        SMLAL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0xff20fc00 == 0x4e208000 {
                                                                    return Some(
                                                                        Opcode::SMLAL2_Vd_Vn_Vm(
                                                                            SMLAL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce608000 {
                                                                    return Some(
                                                                        Opcode::SHA512H_Fd_Fn_Vm(
                                                                            SHA512H_Fd_Fn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e208000 {
                                                                return Some(
                                                                    Opcode::UMLAL_Vd_Vn_Vm(
                                                                        UMLAL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e208000 {
                                                                return Some(
                                                                    Opcode::UMLAL2_Vd_Vn_Vm(
                                                                        UMLAL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0xe20c000 {
                                                                return Some(
                                                                    Opcode::SMULL_Vd_Vn_Vm(
                                                                        SMULL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0xff20fc00 == 0x4e20c000 {
                                                                    return Some(
                                                                        Opcode::SMULL2_Vd_Vn_Vm(
                                                                            SMULL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce60c000 {
                                                                    return Some (Opcode :: SM3PARTW1_Vd_Vn_Vm (SM3PARTW1_Vd_Vn_Vm :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e20c000 {
                                                                return Some(
                                                                    Opcode::UMULL_Vd_Vn_Vm(
                                                                        UMULL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e20c000 {
                                                                return Some(
                                                                    Opcode::UMULL2_Vd_Vn_Vm(
                                                                        UMULL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0xe20a000 {
                                                                return Some(
                                                                    Opcode::SMLSL_Vd_Vn_Vm(
                                                                        SMLSL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x4e20a000 {
                                                                return Some(
                                                                    Opcode::SMLSL2_Vd_Vn_Vm(
                                                                        SMLSL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x2e20a000 {
                                                                return Some(
                                                                    Opcode::UMLSL_Vd_Vn_Vm(
                                                                        UMLSL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xff20fc00 == 0x6e20a000 {
                                                                return Some(
                                                                    Opcode::UMLSL2_Vd_Vn_Vm(
                                                                        UMLSL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x400000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0xe20e000 {
                                                                return Some(
                                                                    Opcode::PMULL_Vd_Vn_Vm(
                                                                        PMULL_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4e20e000 {
                                                                return Some(
                                                                    Opcode::PMULL2_Vd_Vn_Vm(
                                                                        PMULL2_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffe0fc00 == 0xee0e000 {
                                                                return Some (Opcode :: PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D (PMULL_Vd_V_1Q_Vn_V_1D_Vm_V_1D :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x4ee0e000 {
                                                                return Some (Opcode :: PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D (PMULL2_Vd_V_1Q_Vn_V_2D_Vm_V_2D :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xff20fc00 == 0xe209000 {
                                                            return Some(Opcode::SQDMLAL_Vd_Vn_Vm(
                                                                SQDMLAL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4e209000 {
                                                            return Some(
                                                                Opcode::SQDMLAL2_Vd_Vn_Vm(
                                                                    SQDMLAL2_Vd_Vn_Vm::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xff20fc00 == 0xe20d000 {
                                                            return Some(Opcode::SQDMULL_Vd_Vn_Vm(
                                                                SQDMULL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x4e20d000 {
                                                            return Some(
                                                                Opcode::SQDMULL2_Vd_Vn_Vm(
                                                                    SQDMULL2_Vd_Vn_Vm::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff20fc00 == 0xe20b000 {
                                                        return Some(Opcode::SQDMLSL_Vd_Vn_Vm(
                                                            SQDMLSL_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x4e20b000 {
                                                        return Some(Opcode::SQDMLSL2_Vd_Vn_Vm(
                                                            SQDMLSL2_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x80000000 == 0 {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe208800 {
                                                                    return Some(
                                                                        Opcode::CMGT_Vd_Vn_IMM0(
                                                                            CMGT_Vd_Vn_IMM0::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe218800
                                                                        {
                                                                            return Some (Opcode :: FRINTN_Vd_Vn (FRINTN_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea18800
                                                                        {
                                                                            return Some (Opcode :: FRINTP_Vd_Vn (FRINTP_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x800000 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xe798800
                                                                        {
                                                                            return Some (Opcode :: FRINTN_Vd_V_4H_Vn_V_4H (FRINTN_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbffffc00
                                                                            == 0xef98800
                                                                        {
                                                                            return Some (Opcode :: FRINTP_Vd_V_4H_Vn_V_4H (FRINTP_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xce608800 {
                                                                return Some(
                                                                    Opcode::SHA512SU1_Vd_Vn_Vm(
                                                                        SHA512SU1_Vd_Vn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0x2e208800 {
                                                                return Some(
                                                                    Opcode::CMGE_Vd_Vn_IMM0(
                                                                        CMGE_Vd_Vn_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0xbfbffc00 == 0x2e218800 {
                                                                    return Some(
                                                                        Opcode::FRINTA_Vd_Vn(
                                                                            FRINTA_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbffffc00 == 0x2e798800 {
                                                                    return Some (Opcode :: FRINTA_Vd_V_4H_Vn_V_4H (FRINTA_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0x010000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe30c800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMAXNMV_Fd_Vn(
                                                                                FMAXNMV_Fd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0x080000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe21c800
                                                                        {
                                                                            return Some (Opcode :: FCVTAS_Vd_Vn (FCVTAS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbffffc00
                                                                            == 0xe79c800
                                                                        {
                                                                            return Some (Opcode :: FCVTAS_Vd_V_4H_Vn_V_4H (FCVTAS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce60c800 {
                                                                    return Some(
                                                                        Opcode::SM4EKEY_Vd_Vn_Vm(
                                                                            SM4EKEY_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xbfbffc00 == 0x2e30c800 {
                                                                    return Some (Opcode :: FMAXNMV_Fd_S_S_Vn_V_4S (FMAXNMV_Fd_S_S_Vn_V_4S :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e21c800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTAU_Vd_Vn(
                                                                                FCVTAU_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79c800
                                                                    {
                                                                        return Some (Opcode :: FCVTAU_Vd_V_4H_Vn_V_4H (FCVTAU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea0c800
                                                                        {
                                                                            return Some (Opcode :: FCMGT_Vd_Vn_FPIMM0 (FCMGT_Vd_Vn_FPIMM0 :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2ea0c800
                                                                        {
                                                                            return Some (Opcode :: FCMGE_Vd_Vn_FPIMM0 (FCMGE_Vd_Vn_FPIMM0 :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xeb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMV_Fd_Vn (FMINNMV_Fd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2eb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMV_Fd_S_S_Vn_V_4S (FMINNMV_Fd_S_S_Vn_V_4S :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef8c800
                                                                    {
                                                                        return Some (Opcode :: FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0 (FCMGT_Vd_V_4H_Vn_V_4H_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef8c800
                                                                    {
                                                                        return Some (Opcode :: FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0 (FCMGE_Vd_V_4H_Vn_V_4H_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xbfbffc00 == 0xea1c800 {
                                                                    return Some(
                                                                        Opcode::URECPE_Vd_Vn(
                                                                            URECPE_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbfbffc00 == 0x2ea1c800 {
                                                                    return Some(
                                                                        Opcode::URSQRTE_Vd_Vn(
                                                                            URSQRTE_Vd_Vn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x100000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe20a800 {
                                                                return Some(
                                                                    Opcode::CMLT_Vd_Vn_IMM0(
                                                                        CMLT_Vd_Vn_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xbf3ffc00 == 0xe30a800 {
                                                                    return Some(
                                                                        Opcode::SMAXV_Fd_Vn(
                                                                            SMAXV_Fd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0x2e30a800 {
                                                                    return Some(
                                                                        Opcode::UMAXV_Fd_Vn(
                                                                            UMAXV_Fd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe21a800
                                                                        {
                                                                            return Some (Opcode :: FCVTNS_Vd_Vn (FCVTNS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2e21a800
                                                                        {
                                                                            return Some (Opcode :: FCVTNU_Vd_Vn (FCVTNU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea1a800
                                                                        {
                                                                            return Some (Opcode :: FCVTPS_Vd_Vn (FCVTPS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2ea1a800
                                                                        {
                                                                            return Some (Opcode :: FCVTPU_Vd_Vn (FCVTPU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0xe31a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SMINV_Fd_Vn(
                                                                                SMINV_Fd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbf3ffc00
                                                                        == 0x2e31a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UMINV_Fd_Vn(
                                                                                UMINV_Fd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNS_Vd_V_4H_Vn_V_4H (FCVTNS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNU_Vd_V_4H_Vn_V_4H (FCVTNU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef9a800
                                                                    {
                                                                        return Some (Opcode :: FCVTPS_Vd_V_4H_Vn_V_4H (FCVTPS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef9a800
                                                                    {
                                                                        return Some (Opcode :: FCVTPU_Vd_V_4H_Vn_V_4H (FCVTPU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0xbfbffc00 == 0xea0e800 {
                                                                return Some(
                                                                    Opcode::FCMLT_Vd_Vn_FPIMM0(
                                                                        FCMLT_Vd_Vn_FPIMM0::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbffffc00 == 0xef8e800 {
                                                                return Some (Opcode :: FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0 (FCMLT_Vd_V_4H_Vn_V_4H_FPIMM0 :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfbffc00 == 0xe21e800 {
                                                                return Some(
                                                                    Opcode::FRINT32Z_Vd_Vn(
                                                                        FRINT32Z_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbfbffc00 == 0x2e21e800 {
                                                                return Some(
                                                                    Opcode::FRINT32X_Vd_Vn(
                                                                        FRINT32X_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe209800 {
                                                                return Some(
                                                                    Opcode::CMEQ_Vd_Vn_IMM0(
                                                                        CMEQ_Vd_Vn_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xbf3ffc00 == 0x2e209800 {
                                                                return Some(
                                                                    Opcode::CMLE_Vd_Vn_IMM0(
                                                                        CMLE_Vd_Vn_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xe219800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTM_Vd_Vn(
                                                                                FRINTM_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e219800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTX_Vd_Vn(
                                                                                FRINTX_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xea19800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTZ_Vd_Vn(
                                                                                FRINTZ_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2ea19800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRINTI_Vd_Vn(
                                                                                FRINTI_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe799800
                                                                    {
                                                                        return Some (Opcode :: FRINTM_Vd_V_4H_Vn_V_4H (FRINTM_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e799800
                                                                    {
                                                                        return Some (Opcode :: FRINTX_Vd_V_4H_Vn_V_4H (FRINTX_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef99800
                                                                    {
                                                                        return Some (Opcode :: FRINTZ_Vd_V_4H_Vn_V_4H (FRINTZ_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef99800
                                                                    {
                                                                        return Some (Opcode :: FRINTI_Vd_V_4H_Vn_V_4H (FRINTI_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xbfbffc00 == 0xea0d800 {
                                                                    return Some (Opcode :: FCMEQ_Vd_Vn_FPIMM0 (FCMEQ_Vd_Vn_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xbfbffc00 == 0x2ea0d800 {
                                                                    return Some (Opcode :: FCMLE_Vd_Vn_FPIMM0 (FCMLE_Vd_Vn_FPIMM0 :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xbffffc00 == 0xef8d800 {
                                                                    return Some (Opcode :: FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0 (FCMEQ_Vd_V_4H_Vn_V_4H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xbffffc00 == 0x2ef8d800 {
                                                                    return Some (Opcode :: FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0 (FCMLE_Vd_V_4H_Vn_V_4H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xe21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SCVTF_Vd_Vn(
                                                                                SCVTF_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UCVTF_Vd_Vn(
                                                                                UCVTF_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRECPE_Vd_Vn(
                                                                                FRECPE_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2ea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRSQRTE_Vd_Vn(
                                                                                FRSQRTE_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe79d800
                                                                    {
                                                                        return Some (Opcode :: SCVTF_Vd_V_4H_Vn_V_4H (SCVTF_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79d800
                                                                    {
                                                                        return Some (Opcode :: UCVTF_Vd_V_4H_Vn_V_4H (UCVTF_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef9d800
                                                                    {
                                                                        return Some (Opcode :: FRECPE_Vd_V_4H_Vn_V_4H (FRECPE_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef9d800
                                                                    {
                                                                        return Some (Opcode :: FRSQRTE_Vd_V_4H_Vn_V_4H (FRSQRTE_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbf3ffc00 == 0xe20b800 {
                                                                return Some(Opcode::ABS_Vd_Vn(
                                                                    ABS_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xbf3ffc00 == 0x2e20b800 {
                                                                return Some(Opcode::NEG_Vd_Vn(
                                                                    NEG_Vd_Vn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xe21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMS_Vd_Vn (FCVTMS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2e21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMU_Vd_Vn (FCVTMU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbfbffc00
                                                                            == 0xea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_Vd_Vn (FCVTZS_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2ea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZU_Vd_Vn (FCVTZU_Vd_Vn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbf3ffc00 == 0xe31b800 {
                                                                    return Some(
                                                                        Opcode::ADDV_Fd_Vn(
                                                                            ADDV_Fd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xe79b800
                                                                    {
                                                                        return Some (Opcode :: FCVTMS_Vd_V_4H_Vn_V_4H (FCVTMS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2e79b800
                                                                    {
                                                                        return Some (Opcode :: FCVTMU_Vd_V_4H_Vn_V_4H (FCVTMU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbffffc00
                                                                        == 0xef9b800
                                                                    {
                                                                        return Some (Opcode :: FCVTZS_Vd_V_4H_Vn_V_4H (FCVTZS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbffffc00
                                                                        == 0x2ef9b800
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_Vd_V_4H_Vn_V_4H (FCVTZU_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xea0f800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FABS_Vd_Vn(
                                                                                FABS_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2ea0f800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FNEG_Vd_Vn(
                                                                                FNEG_Vd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xe30f800
                                                                        {
                                                                            return Some (Opcode :: FMAXV_Fd_Vn (FMAXV_Fd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2e30f800
                                                                        {
                                                                            return Some (Opcode :: FMAXV_Fd_S_S_Vn_V_4S (FMAXV_Fd_S_S_Vn_V_4S :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xbffffc00
                                                                            == 0xeb0f800
                                                                        {
                                                                            return Some (Opcode :: FMINV_Fd_Vn (FMINV_Fd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xbfbffc00
                                                                            == 0x2eb0f800
                                                                        {
                                                                            return Some (Opcode :: FMINV_Fd_S_S_Vn_V_4S (FMINV_Fd_S_S_Vn_V_4S :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xbffffc00 == 0xef8f800 {
                                                                    return Some (Opcode :: FABS_Vd_V_4H_Vn_V_4H (FABS_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xbffffc00 == 0x2ef8f800 {
                                                                    return Some (Opcode :: FNEG_Vd_V_4H_Vn_V_4H (FNEG_Vd_V_4H_Vn_V_4H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xbfbffc00
                                                                        == 0xe21f800
                                                                    {
                                                                        return Some (Opcode :: FRINT64Z_Vd_Vn (FRINT64Z_Vd_Vn :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xbfbffc00
                                                                        == 0x2e21f800
                                                                    {
                                                                        return Some (Opcode :: FRINT64X_Vd_Vn (FRINT64X_Vd_Vn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xbfbffc00 == 0x2ea1f800 {
                                                                    return Some(
                                                                        Opcode::FSQRT_Vd_Vn(
                                                                            FSQRT_Vd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbffffc00 == 0x2ef9f800 {
                                                                return Some(
                                                                    Opcode::FSQRT_Vd_V_4H_Vn_V_4H(
                                                                        FSQRT_Vd_V_4H_Vn_V_4H::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x000800 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x80000000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe208400 {
                                                                return Some(Opcode::ADD_Vd_Vn_Vm(
                                                                    ADD_Vd_Vn_Vm::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xce608400 {
                                                                return Some(
                                                                    Opcode::SHA512H2_Fd_Fn_Vm(
                                                                        SHA512H2_Fd_Fn_Vm::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e208400 {
                                                            return Some(Opcode::SUB_Vd_Vn_Vm(
                                                                SUB_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0x80000000 == 0 {
                                                                if insn & 0xbfa0fc00 == 0xe20c400 {
                                                                    return Some (Opcode :: FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMAXNM_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xffe0fc00 == 0xce60c400 {
                                                                    return Some (Opcode :: SM3PARTW2_Vd_Vn_Vm (SM3PARTW2_Vd_Vn_Vm :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20c400 {
                                                                return Some (Opcode :: FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMAXNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0c400 {
                                                                return Some (Opcode :: FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMINNM_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0c400 {
                                                                return Some (Opcode :: FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMINNMP_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe20a400 {
                                                            return Some(Opcode::SMAXP_Vd_Vn_Vm(
                                                                SMAXP_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e20a400 {
                                                            return Some(Opcode::UMAXP_Vd_Vn_Vm(
                                                                UMAXP_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20e400 {
                                                                return Some (Opcode :: FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S (FCMEQ_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20e400 {
                                                                return Some (Opcode :: FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S (FCMGE_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbfa0fc00 == 0x2ea0e400 {
                                                            return Some (Opcode :: FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S (FCMGT_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe209400 {
                                                            return Some(Opcode::MLA_Vd_Vn_Vm(
                                                                MLA_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e209400 {
                                                            return Some(Opcode::MLS_Vd_Vn_Vm(
                                                                MLS_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20d400 {
                                                                return Some (Opcode :: FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S (FADD_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20d400 {
                                                                return Some (Opcode :: FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S (FADDP_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0d400 {
                                                                return Some (Opcode :: FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S (FSUB_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0d400 {
                                                                return Some (Opcode :: FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S (FABD_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe20b400 {
                                                            return Some(Opcode::SQDMULH_Vd_Vn_Vm(
                                                                SQDMULH_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e20b400 {
                                                            return Some(
                                                                Opcode::SQRDMULH_Vd_Vn_Vm(
                                                                    SQRDMULH_Vd_Vn_Vm::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20f400 {
                                                                return Some (Opcode :: FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMAX_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20f400 {
                                                                return Some (Opcode :: FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMAXP_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0f400 {
                                                                return Some (Opcode :: FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMIN_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0f400 {
                                                                return Some (Opcode :: FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMINP_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x80000000 == 0 {
                                                            if insn & 0xbf20fc00 == 0xe208c00 {
                                                                return Some(
                                                                    Opcode::CMTST_Vd_Vn_Vm(
                                                                        CMTST_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0xce608c00 {
                                                                return Some(
                                                                    Opcode::RAX1_Vd_Vn_Vm(
                                                                        RAX1_Vd_Vn_Vm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e208c00 {
                                                            return Some(Opcode::CMEQ_Vd_Vn_Vm(
                                                                CMEQ_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20cc00 {
                                                                return Some (Opcode :: FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMLA_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x2e20cc00 {
                                                                    return Some(
                                                                        Opcode::FMLAL2_Vd_Vn_Vm(
                                                                            FMLAL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x6e20cc00 {
                                                                    return Some (Opcode :: FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H (FMLAL2_Vd_V_4S_Vn_V_4H_Vm_V_4H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xea0cc00 {
                                                                return Some (Opcode :: FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMLS_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffa0fc00 == 0x2ea0cc00 {
                                                                    return Some(
                                                                        Opcode::FMLSL2_Vd_Vn_Vm(
                                                                            FMLSL2_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x6ea0cc00 {
                                                                    return Some (Opcode :: FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H (FMLSL2_Vd_V_4S_Vn_V_4H_Vm_V_4H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe20ac00 {
                                                            return Some(Opcode::SMINP_Vd_Vn_Vm(
                                                                SMINP_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e20ac00 {
                                                            return Some(Opcode::UMINP_Vd_Vn_Vm(
                                                                UMINP_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffa0fc00 == 0xe20ec00 {
                                                                    return Some(
                                                                        Opcode::FMLAL_Vd_Vn_Vm(
                                                                            FMLAL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4e20ec00 {
                                                                    return Some (Opcode :: FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H (FMLAL_Vd_V_4S_Vn_V_4H_Vm_V_4H :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20ec00 {
                                                                return Some (Opcode :: FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S (FACGE_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0x40000000 == 0 {
                                                                if insn & 0xffa0fc00 == 0xea0ec00 {
                                                                    return Some(
                                                                        Opcode::FMLSL_Vd_Vn_Vm(
                                                                            FMLSL_Vd_Vn_Vm::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffa0fc00 == 0x4ea0ec00 {
                                                                    return Some (Opcode :: FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H (FMLSL_Vd_V_4S_Vn_V_4H_Vm_V_4H :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2ea0ec00 {
                                                                return Some (Opcode :: FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S (FACGT_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xbf20fc00 == 0xe209c00 {
                                                            return Some(Opcode::MUL_Vd_Vn_Vm(
                                                                MUL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbf20fc00 == 0x2e209c00 {
                                                            return Some(Opcode::PMUL_Vd_Vn_Vm(
                                                                PMUL_Vd_Vn_Vm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xbfa0fc00 == 0xe20dc00 {
                                                            return Some (Opcode :: FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMULX_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xbfa0fc00 == 0x2e20dc00 {
                                                            return Some (Opcode :: FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S (FMUL_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xbf20fc00 == 0xe20bc00 {
                                                        return Some(Opcode::ADDP_Vd_Vn_Vm(
                                                            ADDP_Vd_Vn_Vm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xbfa0fc00 == 0xe20fc00 {
                                                                return Some (Opcode :: FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S (FRECPS_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xbfa0fc00 == 0x2e20fc00 {
                                                                return Some (Opcode :: FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S (FDIV_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xbfa0fc00 == 0xea0fc00 {
                                                            return Some (Opcode :: FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S (FRSQRTS_Vd_V_2S_Vn_V_2S_Vm_V_2S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x000400 == 0 {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x010000 == 0 {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e200000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNS_Rd_Fn(
                                                                                FCVTNS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee00000
                                                                    {
                                                                        return Some (Opcode :: FCVTNS_Rd_W_Fn_S_H (FCVTNS_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e300000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMS_Rd_Fn(
                                                                                FCVTMS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef00000
                                                                    {
                                                                        return Some (Opcode :: FCVTMS_Rd_W_Fn_S_H (FCVTMS_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e280000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Rd_Fn(
                                                                                FCVTPS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee80000
                                                                    {
                                                                        return Some (Opcode :: FCVTPS_Rd_W_Fn_S_H (FCVTPS_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e380000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZS_Rd_Fn(
                                                                                FCVTZS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef80000
                                                                    {
                                                                        return Some (Opcode :: FCVTZS_Rd_W_Fn_S_H (FCVTZS_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x7f3ffc00 == 0x1e240000 {
                                                                return Some(Opcode::FCVTAS_Rd_Fn(
                                                                    FCVTAS_Rd_Fn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee40000 {
                                                                return Some(
                                                                    Opcode::FCVTAS_Rd_W_Fn_S_H(
                                                                        FCVTAS_Rd_W_Fn_S_H::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x7f3ffc00 == 0x1e220000 {
                                                                return Some(Opcode::SCVTF_Fd_Rn(
                                                                    SCVTF_Fd_Rn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee20000 {
                                                                return Some(
                                                                    Opcode::SCVTF_Fd_S_H_Rn_W(
                                                                        SCVTF_Fd_S_H_Rn_W::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x7f3ffc00 == 0x1e260000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Rd_Fn(
                                                                            FMOV_Rd_Fn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0x7ffffc00 == 0x1ee60000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Rd_W_Fn_S_H(
                                                                            FMOV_Rd_W_Fn_S_H::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x9eae0000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMOV_Rd_VnD1(
                                                                                FMOV_Rd_VnD1::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x1e7e0000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FJCVTZS_Rd_Fn(
                                                                                FJCVTZS_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x020000 == 0 {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e210000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNU_Rd_Fn(
                                                                                FCVTNU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee10000
                                                                    {
                                                                        return Some (Opcode :: FCVTNU_Rd_W_Fn_S_H (FCVTNU_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e310000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTMU_Rd_Fn(
                                                                                FCVTMU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef10000
                                                                    {
                                                                        return Some (Opcode :: FCVTMU_Rd_W_Fn_S_H (FCVTMU_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x100000 == 0 {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e290000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Rd_Fn(
                                                                                FCVTPU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ee90000
                                                                    {
                                                                        return Some (Opcode :: FCVTPU_Rd_W_Fn_S_H (FCVTPU_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0x7f3ffc00
                                                                        == 0x1e390000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTZU_Rd_Fn(
                                                                                FCVTZU_Rd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0x7ffffc00
                                                                        == 0x1ef90000
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_Rd_W_Fn_S_H (FCVTZU_Rd_W_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x7f3ffc00 == 0x1e250000 {
                                                                return Some(Opcode::FCVTAU_Rd_Fn(
                                                                    FCVTAU_Rd_Fn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee50000 {
                                                                return Some(
                                                                    Opcode::FCVTAU_Rd_W_Fn_S_H(
                                                                        FCVTAU_Rd_W_Fn_S_H::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x040000 == 0 {
                                                            if insn & 0x7f3ffc00 == 0x1e230000 {
                                                                return Some(Opcode::UCVTF_Fd_Rn(
                                                                    UCVTF_Fd_Rn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0x7ffffc00 == 0x1ee30000 {
                                                                return Some(
                                                                    Opcode::UCVTF_Fd_S_H_Rn_W(
                                                                        UCVTF_Fd_S_H_Rn_W::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0x080000 == 0 {
                                                                if insn & 0x7f3ffc00 == 0x1e270000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Fd_Rn(
                                                                            FMOV_Fd_Rn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0x7ffffc00 == 0x1ee70000 {
                                                                    return Some(
                                                                        Opcode::FMOV_Fd_S_H_Rn_W(
                                                                            FMOV_Fd_S_H_Rn_W::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x9eaf0000 {
                                                                    return Some(
                                                                        Opcode::FMOV_VdD1_Rn(
                                                                            FMOV_VdD1_Rn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x020000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e204000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FMOV_Fd_Fn(
                                                                                FMOV_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee04000
                                                                    {
                                                                        return Some (Opcode :: FMOV_Fd_S_H_Fn_S_H (FMOV_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e284000
                                                                    {
                                                                        return Some (Opcode :: FRINT32Z_Fd_Fn (FRINT32Z_Fd_Fn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e244000 {
                                                                    return Some(
                                                                        Opcode::FRINTN_Fd_Fn(
                                                                            FRINTN_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee44000 {
                                                                    return Some (Opcode :: FRINTN_Fd_S_H_Fn_S_H (FRINTN_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e214000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FNEG_Fd_Fn(
                                                                                FNEG_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee14000
                                                                    {
                                                                        return Some (Opcode :: FNEG_Fd_S_H_Fn_S_H (FNEG_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e294000
                                                                    {
                                                                        return Some (Opcode :: FRINT64Z_Fd_Fn (FRINT64Z_Fd_Fn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e254000 {
                                                                    return Some(
                                                                        Opcode::FRINTM_Fd_Fn(
                                                                            FRINTM_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee54000 {
                                                                    return Some (Opcode :: FRINTM_Fd_S_H_Fn_S_H (FRINTM_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x010000 == 0 {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e20c000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FABS_Fd_Fn(
                                                                                FABS_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee0c000
                                                                    {
                                                                        return Some (Opcode :: FABS_Fd_S_H_Fn_S_H (FABS_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e28c000
                                                                    {
                                                                        return Some (Opcode :: FRINT32X_Fd_Fn (FRINT32X_Fd_Fn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e24c000 {
                                                                    return Some(
                                                                        Opcode::FRINTP_Fd_Fn(
                                                                            FRINTP_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee4c000 {
                                                                    return Some (Opcode :: FRINTP_Fd_S_H_Fn_S_H (FRINTP_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x040000 == 0 {
                                                                if insn & 0x080000 == 0 {
                                                                    if insn & 0xff3ffc00
                                                                        == 0x1e21c000
                                                                    {
                                                                        return Some(
                                                                            Opcode::FSQRT_Fd_Fn(
                                                                                FSQRT_Fd_Fn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                    if insn & 0xfffffc00
                                                                        == 0x1ee1c000
                                                                    {
                                                                        return Some (Opcode :: FSQRT_Fd_S_H_Fn_S_H (FSQRT_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x1e29c000
                                                                    {
                                                                        return Some (Opcode :: FRINT64X_Fd_Fn (FRINT64X_Fd_Fn :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e25c000 {
                                                                    return Some(
                                                                        Opcode::FRINTZ_Fd_Fn(
                                                                            FRINTZ_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee5c000 {
                                                                    return Some (Opcode :: FRINTZ_Fd_S_H_Fn_S_H (FRINTZ_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x040000 == 0 {
                                                        if insn & 0xff3e7c00 == 0x1e224000 {
                                                            return Some(Opcode::FCVT_Fd_Fn(
                                                                FCVT_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xfffffc00 == 0x1e634000 {
                                                            return Some(Opcode::BFCVT_Fd_Fn(
                                                                BFCVT_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0x010000 == 0 {
                                                                if insn & 0xff3ffc00 == 0x1e264000 {
                                                                    return Some(
                                                                        Opcode::FRINTA_Fd_Fn(
                                                                            FRINTA_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee64000 {
                                                                    return Some (Opcode :: FRINTA_Fd_S_H_Fn_S_H (FRINTA_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x1e274000 {
                                                                    return Some(
                                                                        Opcode::FRINTX_Fd_Fn(
                                                                            FRINTX_Fd_Fn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                                if insn & 0xfffffc00 == 0x1ee74000 {
                                                                    return Some (Opcode :: FRINTX_Fd_S_H_Fn_S_H (FRINTX_Fd_S_H_Fn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x1e27c000 {
                                                                return Some(Opcode::FRINTI_Fd_Fn(
                                                                    FRINTI_Fd_Fn::from(insn),
                                                                ));
                                                            }
                                                            if insn & 0xfffffc00 == 0x1ee7c000 {
                                                                return Some(
                                                                    Opcode::FRINTI_Fd_S_H_Fn_S_H(
                                                                        FRINTI_Fd_S_H_Fn_S_H::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x000008 == 0 {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20fc1f == 0x1e202000 {
                                                        return Some(Opcode::FCMP_Fn_Fm(
                                                            FCMP_Fn_Fm::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02000 {
                                                        return Some(Opcode::FCMP_Fn_S_H_Fm_S_H(
                                                            FCMP_Fn_S_H_Fm_S_H::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc1f == 0x1e202010 {
                                                        return Some(Opcode::FCMPE_Fn_Fm(
                                                            FCMPE_Fn_Fm::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02010 {
                                                        return Some(Opcode::FCMPE_Fn_S_H_Fm_S_H(
                                                            FCMPE_Fn_S_H_Fm_S_H::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x000010 == 0 {
                                                    if insn & 0xff20fc1f == 0x1e202008 {
                                                        return Some(Opcode::FCMP_Fn_FPIMM0(
                                                            FCMP_Fn_FPIMM0::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02008 {
                                                        return Some(
                                                            Opcode::FCMP_Fn_S_H_FPIMM0_S_H(
                                                                FCMP_Fn_S_H_FPIMM0_S_H::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff20fc1f == 0x1e202018 {
                                                        return Some(Opcode::FCMPE_Fn_FPIMM0(
                                                            FCMPE_Fn_FPIMM0::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc1f == 0x1ee02018 {
                                                        return Some(
                                                            Opcode::FCMPE_Fn_S_H_FPIMM0_S_H(
                                                                FCMPE_Fn_S_H_FPIMM0_S_H::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0xff201fe0 == 0x1e201000 {
                                                return Some(Opcode::FMOV_Fd_FPIMM(
                                                    FMOV_Fd_FPIMM::from(insn),
                                                ));
                                            }
                                            if insn & 0xffe01fe0 == 0x1ee01000 {
                                                return Some(Opcode::FMOV_Fd_S_H_FPIMM(
                                                    FMOV_Fd_S_H_FPIMM::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xff20fc00 == 0x5e209000 {
                                                        return Some(Opcode::SQDMLAL_Sd_Sn_Sm(
                                                            SQDMLAL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x5e20d000 {
                                                        return Some(Opcode::SQDMULL_Sd_Sn_Sm(
                                                            SQDMULL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff20fc00 == 0x5e20b000 {
                                                    return Some(Opcode::SQDMLSL_Sd_Sn_Sm(
                                                        SQDMLSL_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xff20fc00 == 0x1e200800 {
                                                            return Some(Opcode::FMUL_Fd_Fn_Fm(
                                                                FMUL_Fd_Fn_Fm::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xffe0fc00 == 0x1ee00800 {
                                                            return Some(
                                                                Opcode::FMUL_Fd_S_H_Fn_S_H_Fm_S_H(
                                                                    FMUL_Fd_S_H_Fn_S_H_Fm_S_H::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x5e280800 {
                                                            return Some(Opcode::SHA1H_Fd_Fn(
                                                                SHA1H_Fd_Fn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e208800 {
                                                                return Some(
                                                                    Opcode::FNMUL_Fd_Fn_Fm(
                                                                        FNMUL_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee08800 {
                                                                return Some (Opcode :: FNMUL_Fd_S_H_Fn_S_H_Fm_S_H (FNMUL_Fd_S_H_Fn_S_H_Fm_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e208800 {
                                                                return Some(
                                                                    Opcode::CMGT_Sd_Sn_IMM0(
                                                                        CMGT_Sd_Sn_IMM0::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e208800 {
                                                            return Some(Opcode::CMGE_Sd_Sn_IMM0(
                                                                CMGE_Sd_Sn_IMM0::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e204800 {
                                                                return Some(
                                                                    Opcode::FMAX_Fd_Fn_Fm(
                                                                        FMAX_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee04800 {
                                                                return Some (Opcode :: FMAX_Fd_S_H_Fn_S_H_Fm_S_H (FMAX_Fd_S_H_Fn_S_H_Fm_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e214800 {
                                                                return Some(Opcode::SQXTN_Sd_Sn(
                                                                    SQXTN_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e214800 {
                                                            return Some(Opcode::UQXTN_Sd_Sn(
                                                                UQXTN_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea0c800
                                                                    {
                                                                        return Some (Opcode :: FCMGT_Sd_Sn_FPIMM0 (FCMGT_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea0c800
                                                                    {
                                                                        return Some (Opcode :: FCMGE_Sd_Sn_FPIMM0 (FCMGE_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xfffffc00
                                                                            == 0x5e30c800
                                                                        {
                                                                            return Some (Opcode :: FMAXNMP_Sd_Vn (FMAXNMP_Sd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7e30c800
                                                                        {
                                                                            return Some (Opcode :: FMAXNMP_Sd_S_S_Vn_V_2S (FMAXNMP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xfffffc00
                                                                            == 0x5eb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMP_Sd_Vn (FMINNMP_Sd_Vn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7eb0c800
                                                                        {
                                                                            return Some (Opcode :: FMINNMP_Sd_S_S_Vn_V_2S (FMINNMP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x5ef8c800 {
                                                                    return Some (Opcode :: FCMGT_Sd_S_H_Sn_S_H_FPIMM0 (FCMGT_Sd_S_H_Sn_S_H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x7ef8c800 {
                                                                    return Some (Opcode :: FCMGE_Sd_S_H_Sn_S_H_FPIMM0 (FCMGE_Sd_S_H_Sn_S_H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xffbffc00 == 0x5e21c800 {
                                                                    return Some(
                                                                        Opcode::FCVTAS_Sd_Sn(
                                                                            FCVTAS_Sd_Sn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffbffc00 == 0x7e21c800 {
                                                                    return Some(
                                                                        Opcode::FCVTAU_Sd_Sn(
                                                                            FCVTAU_Sd_Sn::from(
                                                                                insn,
                                                                            ),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x5e79c800 {
                                                                    return Some (Opcode :: FCVTAS_Sd_S_H_Sn_S_H (FCVTAS_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x7e79c800 {
                                                                    return Some (Opcode :: FCVTAU_Sd_S_H_Sn_S_H (FCVTAU_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e202800 {
                                                                return Some(
                                                                    Opcode::FADD_Fd_Fn_Fm(
                                                                        FADD_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee02800 {
                                                                return Some (Opcode :: FADD_Fd_S_H_Fn_S_H_Fm_S_H (FADD_Fd_S_H_Fn_S_H_Fm_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0x5e282800 {
                                                                return Some(
                                                                    Opcode::SHA256SU0_Vd_Vn(
                                                                        SHA256SU0_Vd_Vn::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e212800 {
                                                            return Some(Opcode::SQXTUN_Sd_Sn(
                                                                SQXTUN_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0xff3ffc00 == 0x5e20a800 {
                                                            return Some(Opcode::CMLT_Sd_Sn_IMM0(
                                                                CMLT_Sd_Sn_IMM0::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5e21a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNS_Sd_Sn(
                                                                                FCVTNS_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7e21a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTNU_Sd_Sn(
                                                                                FCVTNU_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea1a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPS_Sd_Sn(
                                                                                FCVTPS_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea1a800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FCVTPU_Sd_Sn(
                                                                                FCVTPU_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNS_Sd_S_H_Sn_S_H (FCVTNS_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7e79a800
                                                                    {
                                                                        return Some (Opcode :: FCVTNU_Sd_S_H_Sn_S_H (FCVTNU_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ef9a800
                                                                    {
                                                                        return Some (Opcode :: FCVTPS_Sd_S_H_Sn_S_H (FCVTPS_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7ef9a800
                                                                    {
                                                                        return Some (Opcode :: FCVTPU_Sd_S_H_Sn_S_H (FCVTPU_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xff20fc00 == 0x1e206800 {
                                                            return Some(Opcode::FMAXNM_Fd_Fn_Fm(
                                                                FMAXNM_Fd_Fn_Fm::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xffe0fc00 == 0x1ee06800 {
                                                            return Some (Opcode :: FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H (FMAXNM_Fd_S_H_Fn_S_H_Fm_S_H :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffbffc00 == 0x7e216800 {
                                                            return Some(Opcode::FCVTXN_Sd_Sn(
                                                                FCVTXN_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x080000 == 0 {
                                                        if insn & 0xffbffc00 == 0x5ea0e800 {
                                                            return Some(
                                                                Opcode::FCMLT_Sd_Sn_FPIMM0(
                                                                    FCMLT_Sd_Sn_FPIMM0::from(insn),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x5ef8e800 {
                                                            return Some (Opcode :: FCMLT_Sd_S_H_Sn_S_H_FPIMM0 (FCMLT_Sd_S_H_Sn_S_H_FPIMM0 :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x40000000 == 0 {
                                                        if insn & 0xff20fc00 == 0x1e201800 {
                                                            return Some(Opcode::FDIV_Fd_Fn_Fm(
                                                                FDIV_Fd_Fn_Fm::from(insn),
                                                            ));
                                                        }
                                                        if insn & 0xffe0fc00 == 0x1ee01800 {
                                                            return Some(
                                                                Opcode::FDIV_Fd_S_H_Fn_S_H_Fm_S_H(
                                                                    FDIV_Fd_S_H_Fn_S_H_Fm_S_H::from(
                                                                        insn,
                                                                    ),
                                                                ),
                                                            );
                                                        }
                                                    } else {
                                                        if insn & 0xfffffc00 == 0x5e281800 {
                                                            return Some(Opcode::SHA1SU1_Vd_Vn(
                                                                SHA1SU1_Vd_Vn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0xff3ffc00 == 0x5e209800 {
                                                            return Some(Opcode::CMEQ_Sd_Sn_IMM0(
                                                                CMEQ_Sd_Sn_IMM0::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e209800 {
                                                            return Some(Opcode::CMLE_Sd_Sn_IMM0(
                                                                CMLE_Sd_Sn_IMM0::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0xff20fc00 == 0x1e205800 {
                                                        return Some(Opcode::FMIN_Fd_Fn_Fm(
                                                            FMIN_Fd_Fn_Fm::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xffe0fc00 == 0x1ee05800 {
                                                        return Some(
                                                            Opcode::FMIN_Fd_S_H_Fn_S_H_Fm_S_H(
                                                                FMIN_Fd_S_H_Fn_S_H_Fm_S_H::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea0d800
                                                                    {
                                                                        return Some (Opcode :: FCMEQ_Sd_Sn_FPIMM0 (FCMEQ_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea0d800
                                                                    {
                                                                        return Some (Opcode :: FCMLE_Sd_Sn_FPIMM0 (FCMLE_Sd_Sn_FPIMM0 :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e30d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FADDP_Sd_Vn(
                                                                                FADDP_Sd_Vn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7e30d800
                                                                    {
                                                                        return Some (Opcode :: FADDP_Sd_S_S_Vn_V_2S (FADDP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x5ef8d800 {
                                                                    return Some (Opcode :: FCMEQ_Sd_S_H_Sn_S_H_FPIMM0 (FCMEQ_Sd_S_H_Sn_S_H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            } else {
                                                                if insn & 0xfffffc00 == 0x7ef8d800 {
                                                                    return Some (Opcode :: FCMLE_Sd_S_H_Sn_S_H_FPIMM0 (FCMLE_Sd_S_H_Sn_S_H_FPIMM0 :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5e21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::SCVTF_Sd_Sn(
                                                                                SCVTF_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7e21d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::UCVTF_Sd_Sn(
                                                                                UCVTF_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xffbffc00
                                                                        == 0x5ea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRECPE_Sd_Sn(
                                                                                FRECPE_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if insn & 0xffbffc00
                                                                        == 0x7ea1d800
                                                                    {
                                                                        return Some(
                                                                            Opcode::FRSQRTE_Sd_Sn(
                                                                                FRSQRTE_Sd_Sn::from(
                                                                                    insn,
                                                                                ),
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e79d800
                                                                    {
                                                                        return Some (Opcode :: SCVTF_Sd_S_H_Sn_S_H (SCVTF_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7e79d800
                                                                    {
                                                                        return Some (Opcode :: UCVTF_Sd_S_H_Sn_S_H (UCVTF_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ef9d800
                                                                    {
                                                                        return Some (Opcode :: FRECPE_Sd_S_H_Sn_S_H (FRECPE_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7ef9d800
                                                                    {
                                                                        return Some (Opcode :: FRSQRTE_Sd_S_H_Sn_S_H (FRSQRTE_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e203800 {
                                                                return Some(
                                                                    Opcode::FSUB_Fd_Fn_Fm(
                                                                        FSUB_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee03800 {
                                                                return Some (Opcode :: FSUB_Fd_S_H_Fn_S_H_Fm_S_H (FSUB_Fd_S_H_Fn_S_H_Fm_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e203800 {
                                                                return Some(Opcode::SUQADD_Sd_Sn(
                                                                    SUQADD_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e203800 {
                                                            return Some(Opcode::USQADD_Sd_Sn(
                                                                USQADD_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x20000000 == 0 {
                                                            if insn & 0xff3ffc00 == 0x5e20b800 {
                                                                return Some(Opcode::ABS_Sd_Sn(
                                                                    ABS_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x7e20b800 {
                                                                return Some(Opcode::NEG_Sd_Sn(
                                                                    NEG_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0x100000 == 0 {
                                                                if insn & 0x800000 == 0 {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xffbffc00
                                                                            == 0x5e21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMS_Sd_Sn (FCVTMS_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7e21b800
                                                                        {
                                                                            return Some (Opcode :: FCVTMU_Sd_Sn (FCVTMU_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if insn & 0x20000000 == 0 {
                                                                        if insn & 0xffbffc00
                                                                            == 0x5ea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZS_Sd_Sn (FCVTZS_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    } else {
                                                                        if insn & 0xffbffc00
                                                                            == 0x7ea1b800
                                                                        {
                                                                            return Some (Opcode :: FCVTZU_Sd_Sn (FCVTZU_Sd_Sn :: from (insn))) ;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0xff3ffc00 == 0x5e31b800 {
                                                                    return Some(
                                                                        Opcode::ADDP_Sd_Vn(
                                                                            ADDP_Sd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x800000 == 0 {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5e79b800
                                                                    {
                                                                        return Some (Opcode :: FCVTMS_Sd_S_H_Sn_S_H (FCVTMS_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7e79b800
                                                                    {
                                                                        return Some (Opcode :: FCVTMU_Sd_S_H_Sn_S_H (FCVTMU_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            } else {
                                                                if insn & 0x20000000 == 0 {
                                                                    if insn & 0xfffffc00
                                                                        == 0x5ef9b800
                                                                    {
                                                                        return Some (Opcode :: FCVTZS_Sd_S_H_Sn_S_H (FCVTZS_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                } else {
                                                                    if insn & 0xfffffc00
                                                                        == 0x7ef9b800
                                                                    {
                                                                        return Some (Opcode :: FCVTZU_Sd_S_H_Sn_S_H (FCVTZU_Sd_S_H_Sn_S_H :: from (insn))) ;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0x20000000 == 0 {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xff20fc00 == 0x1e207800 {
                                                                return Some(
                                                                    Opcode::FMINNM_Fd_Fn_Fm(
                                                                        FMINNM_Fd_Fn_Fm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                            if insn & 0xffe0fc00 == 0x1ee07800 {
                                                                return Some (Opcode :: FMINNM_Fd_S_H_Fn_S_H_Fm_S_H (FMINNM_Fd_S_H_Fn_S_H_Fm_S_H :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xff3ffc00 == 0x5e207800 {
                                                                return Some(Opcode::SQABS_Sd_Sn(
                                                                    SQABS_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff3ffc00 == 0x7e207800 {
                                                            return Some(Opcode::SQNEG_Sd_Sn(
                                                                SQNEG_Sd_Sn::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x010000 == 0 {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x5e30f800 {
                                                                    return Some(
                                                                        Opcode::FMAXP_Sd_Vn(
                                                                            FMAXP_Sd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffbffc00 == 0x7e30f800 {
                                                                    return Some (Opcode :: FMAXP_Sd_S_S_Vn_V_2S (FMAXP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                }
                                                            }
                                                        } else {
                                                            if insn & 0x20000000 == 0 {
                                                                if insn & 0xfffffc00 == 0x5eb0f800 {
                                                                    return Some(
                                                                        Opcode::FMINP_Sd_Vn(
                                                                            FMINP_Sd_Vn::from(insn),
                                                                        ),
                                                                    );
                                                                }
                                                            } else {
                                                                if insn & 0xffbffc00 == 0x7eb0f800 {
                                                                    return Some (Opcode :: FMINP_Sd_S_S_Vn_V_2S (FMINP_Sd_S_S_Vn_V_2S :: from (insn))) ;
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0x080000 == 0 {
                                                            if insn & 0xffbffc00 == 0x5ea1f800 {
                                                                return Some(Opcode::FRECPX_Sd_Sn(
                                                                    FRECPX_Sd_Sn::from(insn),
                                                                ));
                                                            }
                                                        } else {
                                                            if insn & 0xfffffc00 == 0x5ef9f800 {
                                                                return Some(
                                                                    Opcode::FRECPX_Sd_S_H_Sn_S_H(
                                                                        FRECPX_Sd_S_H_Sn_S_H::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x20000000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0x000010 == 0 {
                                                if insn & 0xff200c10 == 0x1e200400 {
                                                    return Some(Opcode::FCCMP_Fn_Fm_NZCV_COND(
                                                        FCCMP_Fn_Fm_NZCV_COND::from(insn),
                                                    ));
                                                }
                                                if insn & 0xffe00c10 == 0x1ee00400 {
                                                    return Some(
                                                        Opcode::FCCMP_Fn_S_H_Fm_S_H_NZCV_COND(
                                                            FCCMP_Fn_S_H_Fm_S_H_NZCV_COND::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xff200c10 == 0x1e200410 {
                                                    return Some(Opcode::FCCMPE_Fn_Fm_NZCV_COND(
                                                        FCCMPE_Fn_Fm_NZCV_COND::from(insn),
                                                    ));
                                                }
                                                if insn & 0xffe00c10 == 0x1ee00410 {
                                                    return Some(
                                                        Opcode::FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND(
                                                            FCCMPE_Fn_S_H_Fm_S_H_NZCV_COND::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x5ee08400 {
                                                            return Some(Opcode::ADD_Sd_Sn_Sm(
                                                                ADD_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x5ee04400 {
                                                            return Some(Opcode::SSHL_Sd_Sn_Sm(
                                                                SSHL_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xffa0fc00 == 0x5e20e400 {
                                                        return Some(
                                                            Opcode::FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S(
                                                                FCMEQ_Sd_S_S_Sn_S_S_Sm_S_S::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x5ee05400 {
                                                        return Some(Opcode::SRSHL_Sd_Sn_Sm(
                                                            SRSHL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x5ee03400 {
                                                            return Some(Opcode::CMGT_Sd_Sn_Sm(
                                                                CMGT_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5e20b400 {
                                                            return Some(Opcode::SQDMULH_Sd_Sn_Sm(
                                                                SQDMULH_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x7ee08400 {
                                                        return Some(Opcode::SUB_Sd_Sn_Sm(
                                                            SUB_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffe0fc00 == 0x7ee04400 {
                                                        return Some(Opcode::USHL_Sd_Sn_Sm(
                                                            USHL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffa0fc00 == 0x7e20e400 {
                                                        return Some(
                                                            Opcode::FCMGE_Sd_S_S_Sn_S_S_Sm_S_S(
                                                                FCMGE_Sd_S_S_Sn_S_S_Sm_S_S::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xffa0fc00 == 0x7ea0e400 {
                                                        return Some(
                                                            Opcode::FCMGT_Sd_S_S_Sn_S_S_Sm_S_S(
                                                                FCMGT_Sd_S_S_Sn_S_S_Sm_S_S::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x7ee05400 {
                                                        return Some(Opcode::URSHL_Sd_Sn_Sm(
                                                            URSHL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffa0fc00 == 0x7ea0d400 {
                                                        return Some(
                                                            Opcode::FABD_Sd_S_S_Sn_S_S_Sm_S_S(
                                                                FABD_Sd_S_S_Sn_S_S_Sm_S_S::from(
                                                                    insn,
                                                                ),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0x008000 == 0 {
                                                    if insn & 0xffe0fc00 == 0x7ee03400 {
                                                        return Some(Opcode::CMHI_Sd_Sn_Sm(
                                                            CMHI_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x7e20b400 {
                                                        return Some(Opcode::SQRDMULH_Sd_Sn_Sm(
                                                            SQRDMULH_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x20000000 == 0 {
                                        if insn & 0x40000000 == 0 {
                                            if insn & 0xff200c00 == 0x1e200c00 {
                                                return Some(Opcode::FCSEL_Fd_Fn_Fm_COND(
                                                    FCSEL_Fd_Fn_Fm_COND::from(insn),
                                                ));
                                            }
                                            if insn & 0xffe00c00 == 0x1ee00c00 {
                                                return Some(
                                                    Opcode::FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND(
                                                        FCSEL_Fd_S_H_Fn_S_H_Fm_S_H_COND::from(insn),
                                                    ),
                                                );
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0x008000 == 0 {
                                                            if insn & 0xff20fc00 == 0x5e200c00 {
                                                                return Some(
                                                                    Opcode::SQADD_Sd_Sn_Sm(
                                                                        SQADD_Sd_Sn_Sm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffe0fc00 == 0x5ee08c00 {
                                                                return Some(
                                                                    Opcode::CMTST_Sd_Sn_Sm(
                                                                        CMTST_Sd_Sn_Sm::from(insn),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if insn & 0xff20fc00 == 0x5e204c00 {
                                                            return Some(Opcode::SQSHL_Sd_Sn_Sm(
                                                                SQSHL_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x5e202c00 {
                                                        return Some(Opcode::SQSUB_Sd_Sn_Sm(
                                                            SQSUB_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x002000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xff20fc00 == 0x5e205c00 {
                                                            return Some(Opcode::SQRSHL_Sd_Sn_Sm(
                                                                SQRSHL_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x5e20dc00 {
                                                            return Some (Opcode :: FMULX_Sd_S_S_Sn_S_S_Sm_S_S (FMULX_Sd_S_S_Sn_S_S_Sm_S_S :: from (insn))) ;
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x004000 == 0 {
                                                        if insn & 0xffe0fc00 == 0x5ee03c00 {
                                                            return Some(Opcode::CMGE_Sd_Sn_Sm(
                                                                CMGE_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x800000 == 0 {
                                                            if insn & 0xffa0fc00 == 0x5e20fc00 {
                                                                return Some (Opcode :: FRECPS_Sd_S_S_Sn_S_S_Sm_S_S (FRECPS_Sd_S_S_Sn_S_S_Sm_S_S :: from (insn))) ;
                                                            }
                                                        } else {
                                                            if insn & 0xffa0fc00 == 0x5ea0fc00 {
                                                                return Some (Opcode :: FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S (FRSQRTS_Sd_S_S_Sn_S_S_Sm_S_S :: from (insn))) ;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x008000 == 0 {
                                                        if insn & 0xff20fc00 == 0x7e200c00 {
                                                            return Some(Opcode::UQADD_Sd_Sn_Sm(
                                                                UQADD_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xffe0fc00 == 0x7ee08c00 {
                                                            return Some(Opcode::CMEQ_Sd_Sn_Sm(
                                                                CMEQ_Sd_Sn_Sm::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff20fc00 == 0x7e204c00 {
                                                        return Some(Opcode::UQSHL_Sd_Sn_Sm(
                                                            UQSHL_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xff20fc00 == 0x7e202c00 {
                                                        return Some(Opcode::UQSUB_Sd_Sn_Sm(
                                                            UQSUB_Sd_Sn_Sm::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffa0fc00 == 0x7e20ec00 {
                                                            return Some (Opcode :: FACGE_Sd_S_S_Sn_S_S_Sm_S_S (FACGE_Sd_S_S_Sn_S_S_Sm_S_S :: from (insn))) ;
                                                        }
                                                    } else {
                                                        if insn & 0xffa0fc00 == 0x7ea0ec00 {
                                                            return Some (Opcode :: FACGT_Sd_S_S_Sn_S_S_Sm_S_S (FACGT_Sd_S_S_Sn_S_S_Sm_S_S :: from (insn))) ;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xff20fc00 == 0x7e205c00 {
                                                    return Some(Opcode::UQRSHL_Sd_Sn_Sm(
                                                        UQRSHL_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xffe0fc00 == 0x7ee03c00 {
                                                    return Some(Opcode::CMHS_Sd_Sn_Sm(
                                                        CMHS_Sd_Sn_Sm::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if insn & 0x008000 == 0 {
                        if insn & 0x10000000 == 0 {
                            if insn & 0x000400 == 0 {
                                if insn & 0x001000 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffc0f400 == 0xf800000 {
                                                        return Some(Opcode::FMLAL_Vd_Vn_Em16(
                                                            FMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x4f800000 {
                                                        return Some (Opcode :: FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H (FMLAL_Vd_V_4S_Vn_V_4H_Em16_S_H :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f000000 {
                                                    return Some(Opcode::MLA_Vd_Vn_Em16(
                                                        MLA_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffc0f400 == 0xf804000 {
                                                        return Some(Opcode::FMLSL_Vd_Vn_Em16(
                                                            FMLSL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x4f804000 {
                                                        return Some (Opcode :: FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H (FMLSL_Vd_V_4S_Vn_V_4H_Em16_S_H :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f004000 {
                                                    return Some(Opcode::MLS_Vd_Vn_Em16(
                                                        MLS_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0xf002000 {
                                                        return Some(Opcode::SMLAL_Vd_Vn_Em16(
                                                            SMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f002000 {
                                                        return Some(Opcode::SMLAL2_Vd_Vn_Em16(
                                                            SMLAL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0x2f002000 {
                                                        return Some(Opcode::UMLAL_Vd_Vn_Em16(
                                                            UMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x6f002000 {
                                                        return Some(Opcode::UMLAL2_Vd_Vn_Em16(
                                                            UMLAL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0xf006000 {
                                                        return Some(Opcode::SMLSL_Vd_Vn_Em16(
                                                            SMLSL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f006000 {
                                                        return Some(Opcode::SMLSL2_Vd_Vn_Em16(
                                                            SMLSL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0x2f006000 {
                                                        return Some(Opcode::UMLSL_Vd_Vn_Em16(
                                                            UMLSL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x6f006000 {
                                                        return Some(Opcode::UMLSL2_Vd_Vn_Em16(
                                                            UMLSL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x20000000 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xbfc0f400 == 0xf001000 {
                                                        return Some(Opcode::FMLA_Vd_Vn_Em16(
                                                            FMLA_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf80f400 == 0xf801000 {
                                                        return Some(Opcode::FMLA_Vd_Vn_Em(
                                                            FMLA_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xbfc0f400 == 0xf005000 {
                                                        return Some(Opcode::FMLS_Vd_Vn_Em16(
                                                            FMLS_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf80f400 == 0xf805000 {
                                                        return Some(Opcode::FMLS_Vd_Vn_Em(
                                                            FMLS_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0xf003000 {
                                                        return Some(Opcode::SQDMLAL_Vd_Vn_Em16(
                                                            SQDMLAL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f003000 {
                                                        return Some(Opcode::SQDMLAL2_Vd_Vn_Em16(
                                                            SQDMLAL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0xf007000 {
                                                        return Some(Opcode::SQDMLSL_Vd_Vn_Em16(
                                                            SQDMLSL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f007000 {
                                                        return Some(Opcode::SQDMLSL2_Vd_Vn_Em16(
                                                            SQDMLSL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0xbf009400 == 0x2f001000 {
                                            return Some(Opcode::FCMLA_Vd_Vn_Em_IMM_ROT2(
                                                FCMLA_Vd_Vn_Em_IMM_ROT2::from(insn),
                                            ));
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x001000 == 0 {
                                    if insn & 0x20000000 == 0 {
                                        if insn & 0xbff89c00 == 0xf000400 {
                                            return Some(Opcode::SSHR_Vd_Vn_IMM_VLSR(
                                                SSHR_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf000400 {
                                            return Some(Opcode::SSHR_Vd_Vn_IMM_VLSR(
                                                SSHR_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf002400 {
                                            return Some(Opcode::SRSHR_Vd_Vn_IMM_VLSR(
                                                SRSHR_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbff89c00 == 0x2f000400 {
                                            return Some(Opcode::USHR_Vd_Vn_IMM_VLSR(
                                                USHR_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f000400 {
                                            return Some(Opcode::USHR_Vd_Vn_IMM_VLSR(
                                                USHR_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f002400 {
                                            return Some(Opcode::URSHR_Vd_Vn_IMM_VLSR(
                                                URSHR_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f004400 {
                                            return Some(Opcode::SRI_Vd_Vn_IMM_VLSR(
                                                SRI_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f006400 {
                                            return Some(Opcode::SQSHLU_Vd_Vn_IMM_VLSL(
                                                SQSHLU_Vd_Vn_IMM_VLSL::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x20000000 == 0 {
                                        if insn & 0xbff89c00 == 0xf001400 {
                                            return Some(Opcode::SSRA_Vd_Vn_IMM_VLSR(
                                                SSRA_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf001400 {
                                            return Some(Opcode::SSRA_Vd_Vn_IMM_VLSR(
                                                SSRA_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf003400 {
                                            return Some(Opcode::SRSRA_Vd_Vn_IMM_VLSR(
                                                SRSRA_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf005400 {
                                            return Some(Opcode::SHL_Vd_Vn_IMM_VLSL(
                                                SHL_Vd_Vn_IMM_VLSL::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0xf007400 {
                                            return Some(Opcode::SQSHL_Vd_Vn_IMM_VLSL(
                                                SQSHL_Vd_Vn_IMM_VLSL::from(insn),
                                            ));
                                        }
                                    } else {
                                        if insn & 0xbff89c00 == 0x2f001400 {
                                            return Some(Opcode::USRA_Vd_Vn_IMM_VLSR(
                                                USRA_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f001400 {
                                            return Some(Opcode::USRA_Vd_Vn_IMM_VLSR(
                                                USRA_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f003400 {
                                            return Some(Opcode::URSRA_Vd_Vn_IMM_VLSR(
                                                URSRA_Vd_Vn_IMM_VLSR::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f005400 {
                                            return Some(Opcode::SLI_Vd_Vn_IMM_VLSL(
                                                SLI_Vd_Vn_IMM_VLSL::from(insn),
                                            ));
                                        }
                                        if insn & 0xbf80fc00 == 0x2f007400 {
                                            return Some(Opcode::UQSHL_Vd_Vn_IMM_VLSL(
                                                UQSHL_Vd_Vn_IMM_VLSL::from(insn),
                                            ));
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0xff208000 == 0x1f000000 {
                                            return Some(Opcode::FMADD_Fd_Fn_Fm_Fa(
                                                FMADD_Fd_Fn_Fm_Fa::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fc00000 {
                                            return Some(
                                                Opcode::FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(
                                                    FMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::from(insn),
                                                ),
                                            );
                                        }
                                    } else {
                                        if insn & 0xff208000 == 0x1f200000 {
                                            return Some(Opcode::FNMADD_Fd_Fn_Fm_Fa(
                                                FNMADD_Fd_Fn_Fm_Fa::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fe00000 {
                                            return Some(
                                                Opcode::FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(
                                                    FNMADD_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::from(insn),
                                                ),
                                            );
                                        }
                                    }
                                } else {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0f400 == 0x5f001000 {
                                                        return Some(Opcode::FMLA_Sd_Sn_Em16(
                                                            FMLA_Sd_Sn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80f400 == 0x5f801000 {
                                                        return Some(Opcode::FMLA_Sd_Sn_Em(
                                                            FMLA_Sd_Sn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x800000 == 0 {
                                                    if insn & 0xffc0f400 == 0x5f005000 {
                                                        return Some(Opcode::FMLS_Sd_Sn_Em16(
                                                            FMLS_Sd_Sn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80f400 == 0x5f805000 {
                                                        return Some(Opcode::FMLS_Sd_Sn_Em(
                                                            FMLS_Sd_Sn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x004000 == 0 {
                                                if insn & 0xff00f400 == 0x5f003000 {
                                                    return Some(Opcode::SQDMLAL_Sd_Sn_Em16(
                                                        SQDMLAL_Sd_Sn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff00f400 == 0x5f007000 {
                                                    return Some(Opcode::SQDMLSL_Sd_Sn_Em16(
                                                        SQDMLSL_Sd_Sn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xff80fc00 == 0x5f000400 {
                                                    return Some(Opcode::SSHR_Sd_Sn_IMM_VLSR(
                                                        SSHR_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x5f002400 {
                                                    return Some(Opcode::SRSHR_Sd_Sn_IMM_VLSR(
                                                        SRSHR_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xff80fc00 == 0x5f001400 {
                                                        return Some(Opcode::SSRA_Sd_Sn_IMM_VLSR(
                                                            SSRA_Sd_Sn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x5f005400 {
                                                        return Some(Opcode::SHL_Sd_Sn_IMM_VLSL(
                                                            SHL_Sd_Sn_IMM_VLSL::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0xff80fc00 == 0x5f003400 {
                                                        return Some(Opcode::SRSRA_Sd_Sn_IMM_VLSR(
                                                            SRSRA_Sd_Sn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x5f007400 {
                                                        return Some(Opcode::SQSHL_Sd_Sn_IMM_VLSL(
                                                            SQSHL_Sd_Sn_IMM_VLSL::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x001000 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0xff80fc00 == 0x7f000400 {
                                                return Some(Opcode::USHR_Sd_Sn_IMM_VLSR(
                                                    USHR_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f004400 {
                                                return Some(Opcode::SRI_Sd_Sn_IMM_VLSR(
                                                    SRI_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0xff80fc00 == 0x7f002400 {
                                                return Some(Opcode::URSHR_Sd_Sn_IMM_VLSR(
                                                    URSHR_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f006400 {
                                                return Some(Opcode::SQSHLU_Sd_Sn_IMM_VLSL(
                                                    SQSHLU_Sd_Sn_IMM_VLSL::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0xff80fc00 == 0x7f001400 {
                                                return Some(Opcode::USRA_Sd_Sn_IMM_VLSR(
                                                    USRA_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f005400 {
                                                return Some(Opcode::SLI_Sd_Sn_IMM_VLSL(
                                                    SLI_Sd_Sn_IMM_VLSL::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0xff80fc00 == 0x7f003400 {
                                                return Some(Opcode::URSRA_Sd_Sn_IMM_VLSR(
                                                    URSRA_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f007400 {
                                                return Some(Opcode::UQSHL_Sd_Sn_IMM_VLSL(
                                                    UQSHL_Sd_Sn_IMM_VLSL::from(insn),
                                                ));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if insn & 0x10000000 == 0 {
                            if insn & 0x000400 == 0 {
                                if insn & 0x001000 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbf00f400 == 0xf008000 {
                                                    return Some(Opcode::MUL_Vd_Vn_Em16(
                                                        MUL_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffc0f400 == 0x2f808000 {
                                                        return Some(Opcode::FMLAL2_Vd_Vn_Em16(
                                                            FMLAL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x6f808000 {
                                                        return Some (Opcode :: FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H (FMLAL2_Vd_V_4S_Vn_V_4H_Em16_S_H :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbf00f400 == 0xf00c000 {
                                                    return Some(Opcode::SQDMULH_Vd_Vn_Em16(
                                                        SQDMULH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xffc0f400 == 0x2f80c000 {
                                                        return Some(Opcode::FMLSL2_Vd_Vn_Em16(
                                                            FMLSL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xffc0f400 == 0x6f80c000 {
                                                        return Some (Opcode :: FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H (FMLSL2_Vd_V_4S_Vn_V_4H_Em16_S_H :: from (insn))) ;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0xf00a000 {
                                                        return Some(Opcode::SMULL_Vd_Vn_Em16(
                                                            SMULL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x4f00a000 {
                                                        return Some(Opcode::SMULL2_Vd_Vn_Em16(
                                                            SMULL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff00f400 == 0x2f00a000 {
                                                        return Some(Opcode::UMULL_Vd_Vn_Em16(
                                                            UMULL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x6f00a000 {
                                                        return Some(Opcode::UMULL2_Vd_Vn_Em16(
                                                            UMULL2_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbf00f400 == 0xf00e000 {
                                                    return Some(Opcode::SDOT_Vd_Vn_Em(
                                                        SDOT_Vd_Vn_Em::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f00e000 {
                                                    return Some(Opcode::UDOT_Vd_Vn_Em(
                                                        UDOT_Vd_Vn_Em::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0x20000000 == 0 {
                                                    if insn & 0xbfc0f400 == 0xf009000 {
                                                        return Some(Opcode::FMUL_Vd_Vn_Em16(
                                                            FMUL_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbfc0f400 == 0x2f009000 {
                                                        return Some(Opcode::FMULX_Vd_Vn_Em16(
                                                            FMULX_Vd_Vn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0x20000000 == 0 {
                                                    if insn & 0xbf80f400 == 0xf809000 {
                                                        return Some(Opcode::FMUL_Vd_Vn_Em(
                                                            FMUL_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xbf80f400 == 0x2f809000 {
                                                        return Some(Opcode::FMULX_Vd_Vn_Em(
                                                            FMULX_Vd_Vn_Em::from(insn),
                                                        ));
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbf00f400 == 0xf00d000 {
                                                    return Some(Opcode::SQRDMULH_Vd_Vn_Em16(
                                                        SQRDMULH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f00d000 {
                                                    return Some(Opcode::SQRDMLAH_Vd_Vn_Em16(
                                                        SQRDMLAH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xff00f400 == 0xf00b000 {
                                                    return Some(Opcode::SQDMULL_Vd_Vn_Em16(
                                                        SQDMULL_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff00f400 == 0x4f00b000 {
                                                    return Some(Opcode::SQDMULL2_Vd_Vn_Em16(
                                                        SQDMULL2_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x400000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xbfc0f400 == 0xf00f000 {
                                                            return Some(Opcode::SUDOT_Vd_Vn_Em(
                                                                SUDOT_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xbfc0f400 == 0xf80f000 {
                                                            return Some(Opcode::USDOT_Vd_Vn_Em(
                                                                USDOT_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xbfc0f400 == 0xf40f000 {
                                                            return Some(Opcode::BFDOT_Vd_Vn_Em(
                                                                BFDOT_Vd_Vn_Em::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0x40000000 == 0 {
                                                            if insn & 0xffc0f400 == 0xfc0f000 {
                                                                return Some(
                                                                    Opcode::BFMLALB_Vd_Vn_Em16(
                                                                        BFMLALB_Vd_Vn_Em16::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        } else {
                                                            if insn & 0xffc0f400 == 0x4fc0f000 {
                                                                return Some(
                                                                    Opcode::BFMLALT_Vd_Vn_Em16(
                                                                        BFMLALT_Vd_Vn_Em16::from(
                                                                            insn,
                                                                        ),
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if insn & 0xbf00f400 == 0x2f00f000 {
                                                    return Some(Opcode::SQRDMLSH_Vd_Vn_Em16(
                                                        SQRDMLSH_Vd_Vn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000800 == 0 {
                                    if insn & 0x004000 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbff8dc00 == 0xf008400 {
                                                    return Some(Opcode::SHRN_Vd_Vn_IMM_VLSR(
                                                        SHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0xf008400 {
                                                    return Some(Opcode::SHRN_Vd_Vn_IMM_VLSR(
                                                        SHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x4f008400 {
                                                    return Some(Opcode::SHRN2_Vd_Vn_IMM_VLSR(
                                                        SHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0xf00a400 {
                                                    return Some(Opcode::SSHLL_Vd_Vn_IMM_VLSL(
                                                        SSHLL_Vd_Vn_IMM_VLSL::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x4f00a400 {
                                                    return Some(Opcode::SSHLL2_Vd_Vn_IMM_VLSL(
                                                        SSHLL2_Vd_Vn_IMM_VLSL::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbff8dc00 == 0x2f008400 {
                                                    return Some(Opcode::SQSHRUN_Vd_Vn_IMM_VLSR(
                                                        SQSHRUN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x2f008400 {
                                                    return Some(Opcode::SQSHRUN_Vd_Vn_IMM_VLSR(
                                                        SQSHRUN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x6f008400 {
                                                    return Some(Opcode::SQSHRUN2_Vd_Vn_IMM_VLSR(
                                                        SQSHRUN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x2f00a400 {
                                                    return Some(Opcode::USHLL_Vd_Vn_IMM_VLSL(
                                                        USHLL_Vd_Vn_IMM_VLSL::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x6f00a400 {
                                                    return Some(Opcode::USHLL2_Vd_Vn_IMM_VLSL(
                                                        USHLL2_Vd_Vn_IMM_VLSL::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbff8dc00 == 0xf009400 {
                                                    return Some(Opcode::SQSHRN_Vd_Vn_IMM_VLSR(
                                                        SQSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0xf009400 {
                                                    return Some(Opcode::SQSHRN_Vd_Vn_IMM_VLSR(
                                                        SQSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x4f009400 {
                                                    return Some(Opcode::SQSHRN2_Vd_Vn_IMM_VLSR(
                                                        SQSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xbff8dc00 == 0x2f009400 {
                                                    return Some(Opcode::UQSHRN_Vd_Vn_IMM_VLSR(
                                                        UQSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x2f009400 {
                                                    return Some(Opcode::UQSHRN_Vd_Vn_IMM_VLSR(
                                                        UQSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff80fc00 == 0x6f009400 {
                                                    return Some(Opcode::UQSHRN2_Vd_Vn_IMM_VLSR(
                                                        UQSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbff8ec00 == 0xf00c400 {
                                                    return Some(
                                                        Opcode::MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL(
                                                            MOVI_Vd_V_2S_SIMD_IMM_SFT_MSL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xbff8ec00 == 0x2f00c400 {
                                                    return Some(
                                                        Opcode::MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL(
                                                            MVNI_Vd_V_2S_SIMD_IMM_SFT_MSL::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0x20000000 == 0 {
                                                    if insn & 0xbff8fc00 == 0xf00e400 {
                                                        return Some(Opcode::SCVTF_Vd_Vn_IMM_VLSR(
                                                            SCVTF_Vd_Vn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf80fc00 == 0xf00e400 {
                                                        return Some(Opcode::SCVTF_Vd_Vn_IMM_VLSR(
                                                            SCVTF_Vd_Vn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf90fc00 == 0xf10e400 {
                                                        return Some (Opcode :: SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H (SCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H :: from (insn))) ;
                                                    }
                                                } else {
                                                    if insn & 0xfff8fc00 == 0x2f00e400 {
                                                        return Some(Opcode::UCVTF_Vd_Vn_IMM_VLSR(
                                                            UCVTF_Vd_Vn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xfff8fc00 == 0x6f00e400 {
                                                        return Some(Opcode::MOVI_Vd_SIMD_IMM(
                                                            MOVI_Vd_SIMD_IMM::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf80fc00 == 0x2f00e400 {
                                                        return Some(Opcode::UCVTF_Vd_Vn_IMM_VLSR(
                                                            UCVTF_Vd_Vn_IMM_VLSR::from(insn),
                                                        ));
                                                    }
                                                    if insn & 0xbf90fc00 == 0x2f10e400 {
                                                        return Some (Opcode :: UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H (UCVTF_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H :: from (insn))) ;
                                                    }
                                                }
                                            } else {
                                                if insn & 0x20000000 == 0 {
                                                    if insn & 0xbff8fc00 == 0xf00f400 {
                                                        return Some(Opcode::FMOV_Vd_SIMD_FPIMM(
                                                            FMOV_Vd_SIMD_FPIMM::from(insn),
                                                        ));
                                                    }
                                                } else {
                                                    if insn & 0xfff8fc00 == 0x6f00f400 {
                                                        return Some(
                                                            Opcode::FMOV_Vd_V_2D_SIMD_FPIMM(
                                                                FMOV_Vd_V_2D_SIMD_FPIMM::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if insn & 0x001000 == 0 {
                                        if insn & 0x20000000 == 0 {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xff80fc00 == 0xf008c00 {
                                                    return Some(Opcode::RSHRN_Vd_Vn_IMM_VLSR(
                                                        RSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x4f008c00 {
                                                    return Some(Opcode::RSHRN2_Vd_Vn_IMM_VLSR(
                                                        RSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x40000000 == 0 {
                                                if insn & 0xff80fc00 == 0x2f008c00 {
                                                    return Some(Opcode::SQRSHRUN_Vd_Vn_IMM_VLSR(
                                                        SQRSHRUN_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x6f008c00 {
                                                    return Some(Opcode::SQRSHRUN2_Vd_Vn_IMM_VLSR(
                                                        SQRSHRUN2_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x002000 == 0 {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff80fc00 == 0xf009c00 {
                                                        return Some(
                                                            Opcode::SQRSHRN_Vd_Vn_IMM_VLSR(
                                                                SQRSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x4f009c00 {
                                                        return Some(
                                                            Opcode::SQRSHRN2_Vd_Vn_IMM_VLSR(
                                                                SQRSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if insn & 0x40000000 == 0 {
                                                    if insn & 0xff80fc00 == 0x2f009c00 {
                                                        return Some(
                                                            Opcode::UQRSHRN_Vd_Vn_IMM_VLSR(
                                                                UQRSHRN_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                } else {
                                                    if insn & 0xff80fc00 == 0x6f009c00 {
                                                        return Some(
                                                            Opcode::UQRSHRN2_Vd_Vn_IMM_VLSR(
                                                                UQRSHRN2_Vd_Vn_IMM_VLSR::from(insn),
                                                            ),
                                                        );
                                                    }
                                                }
                                            }
                                        } else {
                                            if insn & 0x20000000 == 0 {
                                                if insn & 0xbff8fc00 == 0xf00fc00 {
                                                    return Some(Opcode::FMOV_Vd_V_4H_SIMD_FPIMM(
                                                        FMOV_Vd_V_4H_SIMD_FPIMM::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbf80fc00 == 0xf00fc00 {
                                                    return Some(Opcode::FMOV_Vd_V_4H_SIMD_FPIMM(
                                                        FMOV_Vd_V_4H_SIMD_FPIMM::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbf90fc00 == 0xf10fc00 {
                                                    return Some (Opcode :: FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H (FCVTZS_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H :: from (insn))) ;
                                                }
                                            } else {
                                                if insn & 0xbf80fc00 == 0x2f00fc00 {
                                                    return Some(Opcode::FCVTZU_Vd_Vn_IMM_VLSR(
                                                        FCVTZU_Vd_Vn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xbf90fc00 == 0x2f10fc00 {
                                                    return Some (Opcode :: FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H (FCVTZU_Vd_V_4H_Vn_V_4H_IMM_VLSR_V_4H :: from (insn))) ;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if insn & 0x20000000 == 0 {
                                if insn & 0x40000000 == 0 {
                                    if insn & 0x200000 == 0 {
                                        if insn & 0xff208000 == 0x1f008000 {
                                            return Some(Opcode::FMSUB_Fd_Fn_Fm_Fa(
                                                FMSUB_Fd_Fn_Fm_Fa::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fc08000 {
                                            return Some(
                                                Opcode::FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(
                                                    FMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::from(insn),
                                                ),
                                            );
                                        }
                                    } else {
                                        if insn & 0xff208000 == 0x1f208000 {
                                            return Some(Opcode::FNMSUB_Fd_Fn_Fm_Fa(
                                                FNMSUB_Fd_Fn_Fm_Fa::from(insn),
                                            ));
                                        }
                                        if insn & 0xffe08000 == 0x1fe08000 {
                                            return Some(
                                                Opcode::FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H(
                                                    FNMSUB_Fd_S_H_Fn_S_H_Fm_S_H_Fa_S_H::from(insn),
                                                ),
                                            );
                                        }
                                    }
                                } else {
                                    if insn & 0x000400 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0xff00f400 == 0x5f00c000 {
                                                return Some(Opcode::SQDMULH_Sd_Sn_Em16(
                                                    SQDMULH_Sd_Sn_Em16::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0x004000 == 0 {
                                                    if insn & 0x800000 == 0 {
                                                        if insn & 0xffc0f400 == 0x5f009000 {
                                                            return Some(Opcode::FMUL_Sd_Sn_Em16(
                                                                FMUL_Sd_Sn_Em16::from(insn),
                                                            ));
                                                        }
                                                    } else {
                                                        if insn & 0xff80f400 == 0x5f809000 {
                                                            return Some(Opcode::FMUL_Sd_Sn_Em(
                                                                FMUL_Sd_Sn_Em::from(insn),
                                                            ));
                                                        }
                                                    }
                                                } else {
                                                    if insn & 0xff00f400 == 0x5f00d000 {
                                                        return Some(Opcode::SQRDMULH_Sd_Sn_Em16(
                                                            SQRDMULH_Sd_Sn_Em16::from(insn),
                                                        ));
                                                    }
                                                }
                                            } else {
                                                if insn & 0xff00f400 == 0x5f00b000 {
                                                    return Some(Opcode::SQDMULL_Sd_Sn_Em16(
                                                        SQDMULL_Sd_Sn_Em16::from(insn),
                                                    ));
                                                }
                                            }
                                        }
                                    } else {
                                        if insn & 0x000800 == 0 {
                                            if insn & 0x001000 == 0 {
                                                if insn & 0xff80fc00 == 0x5f00e400 {
                                                    return Some(Opcode::SCVTF_Sd_Sn_IMM_VLSR(
                                                        SCVTF_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x5f10e400 {
                                                    return Some(
                                                        Opcode::SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(
                                                            SCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x5f009400 {
                                                    return Some(Opcode::SQSHRN_Sd_Sn_IMM_VLSR(
                                                        SQSHRN_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xff80fc00 == 0x5f009c00 {
                                                    return Some(Opcode::SQRSHRN_Sd_Sn_IMM_VLSR(
                                                        SQRSHRN_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x5f00fc00 {
                                                    return Some(Opcode::FCVTZS_Sd_Sn_IMM_VLSR(
                                                        FCVTZS_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x5f10fc00 {
                                                    return Some(
                                                        Opcode::FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(
                                                            FCVTZS_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if insn & 0x000400 == 0 {
                                    if insn & 0x002000 == 0 {
                                        if insn & 0x004000 == 0 {
                                            if insn & 0x800000 == 0 {
                                                if insn & 0xffc0f400 == 0x7f009000 {
                                                    return Some(Opcode::FMULX_Sd_Sn_Em16(
                                                        FMULX_Sd_Sn_Em16::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80f400 == 0x7f809000 {
                                                    return Some(Opcode::FMULX_Sd_Sn_Em(
                                                        FMULX_Sd_Sn_Em::from(insn),
                                                    ));
                                                }
                                            }
                                        } else {
                                            if insn & 0xff00f400 == 0x7f00d000 {
                                                return Some(Opcode::SQRDMLAH_Sd_Sn_Em16(
                                                    SQRDMLAH_Sd_Sn_Em16::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0xff00f400 == 0x7f00f000 {
                                            return Some(Opcode::SQRDMLSH_Sd_Sn_Em16(
                                                SQRDMLSH_Sd_Sn_Em16::from(insn),
                                            ));
                                        }
                                    }
                                } else {
                                    if insn & 0x000800 == 0 {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xff80fc00 == 0x7f008400 {
                                                    return Some(Opcode::SQSHRUN_Sd_Sn_IMM_VLSR(
                                                        SQSHRUN_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x7f00e400 {
                                                    return Some(Opcode::UCVTF_Sd_Sn_IMM_VLSR(
                                                        UCVTF_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x7f10e400 {
                                                    return Some(
                                                        Opcode::UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(
                                                            UCVTF_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        } else {
                                            if insn & 0xff80fc00 == 0x7f009400 {
                                                return Some(Opcode::UQSHRN_Sd_Sn_IMM_VLSR(
                                                    UQSHRN_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        }
                                    } else {
                                        if insn & 0x001000 == 0 {
                                            if insn & 0xff80fc00 == 0x7f008c00 {
                                                return Some(Opcode::SQRSHRUN_Sd_Sn_IMM_VLSR(
                                                    SQRSHRUN_Sd_Sn_IMM_VLSR::from(insn),
                                                ));
                                            }
                                        } else {
                                            if insn & 0x002000 == 0 {
                                                if insn & 0xff80fc00 == 0x7f009c00 {
                                                    return Some(Opcode::UQRSHRN_Sd_Sn_IMM_VLSR(
                                                        UQRSHRN_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                            } else {
                                                if insn & 0xff80fc00 == 0x7f00fc00 {
                                                    return Some(Opcode::FCVTZU_Sd_Sn_IMM_VLSR(
                                                        FCVTZU_Sd_Sn_IMM_VLSR::from(insn),
                                                    ));
                                                }
                                                if insn & 0xff90fc00 == 0x7f10fc00 {
                                                    return Some(
                                                        Opcode::FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H(
                                                            FCVTZU_Sd_S_H_Sn_S_H_IMM_VLSR_S_H::from(
                                                                insn,
                                                            ),
                                                        ),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}
